###############################################################################
## Weather Report
###############################################################################
weather_report:
  alias: "Weather Report"
  description: "Play daily weather report."
  icon: mdi:weather-partly-lightning
  max_exceeded: silent
  sequence:
    - if: >
        {{ is_state('binary_sensor.pirateweather_connected', 'off')
            or is_state('binary_sensor.weatherflow_local_connected', 'off')
            or is_state('binary_sensor.envcan_connected', 'off') }}
      then:
        - service: script.tts_play
          data:
            tts_provider: "Nabu Casa"
            tts_voice: "English (United States) en-US Male"
            always_play: true
            save_message: false
            message: "The weather forecast cannot play. One or more required weather providers is not connected."

        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: warning
            message: "Weather provider not connected."

        - stop: "Weather provider not connected."

    - service: script.tts_play
      data:
        media_player: media_player.inside_speakers
        min_volume: 60
        tts_provider: "Nabu Casa"
        tts_voice: "English (Ireland) en-IE Female"
        always_play: true
        save_message: false
        message: |
          {%- from 'speech.jinja' import iarticle %}
          {%- set temp = states('sensor.outdoor_temperature') | int('unknown') %}
          {%- set app_temp = states('sensor.outdoor_apparent_temperature') | int('unknown') %}
          {%- set high_temp = states('sensor.outdoor_high_temperature') | int('unknown') %}
          {%- set app_high_temp = states('sensor.pirateweather_daytime_high_apparent_temperature_0d') | int('unknown') %}
          {%- set low_temp = states('sensor.outdoor_low_temperature') | int('unknown') %}
          {%- set app_low_temp = states('sensor.pirateweather_overnight_low_apparent_temperature_0d') | int('unknown') %}
          {%- set normal_high_diff = states('sensor.outdoor_high_temperature_differential') | int('unknown') %}
          {%- set normal_low_diff = states('sensor.outdoor_low_temperature_differential') | int('unknown') %}
          {%- set show_normal_high = is_number(normal_high_diff) and normal_high_diff | abs > 2 %}
          {%- set show_normal_low = is_number(normal_low_diff) and normal_low_diff | abs > 2 %}
          {%- set humidity = states('sensor.outdoor_humidity') | int(0) %}
          {%- set humidty_today = states('sensor.outdoor_humidity_today') | int('unknown') %}
          {%- set rain = is_state('binary_sensor.rain', 'on') %}
          {%- set precipitation_today = is_state('binary_sensor.precipitation_likely_today', 'on') %}
          {%- set precip_start = state_attr('sensor.precipitation_start', '12hour') %}
          {%- set pop = states('sensor.precipitation_probability_today') | int('unknown') %}
          {%- set precip_type = states('sensor.precipitation_type') | lower | replace('none', 'precipitation') | replace('hail', 'rain') %}
          {%- set expected_precip = states('sensor.precipitation_expected_today') | int(-1) %}
          {%- set wind_max = states('sensor.wind_gust_today') | int('unknown') %}
          {%- set wind_gust = states('sensor.wind_gust') | int('unknown') %}
          {%- set wind_dir = state_attr('sensor.wind_bearing', 'full_cardinal') %}
          {%- set current = states('sensor.current_condition') | replace('-night', '') | replace('partlycloudy', 'partly cloudy') %}
          {%- set minute_summary = states('sensor.pirateweather_minutely_summary') %}
          {%- set fog = states('sensor.fog_probability') | int(-1) %}
          {%- set snow = states('sensor.snow_probability') | int(-1) %}
          {%- set sunset = state_attr('sun.sun', 'next_setting') | as_timestamp | timestamp_custom('%-I:%M %p', true, none) %}
          {%- set sunrise = state_attr('sun.sun', 'next_rising') | as_timestamp | timestamp_custom('%-I:%M %p', true, none) %}
          {%- set night = state_attr('sun.sun', 'next_rising') | as_timestamp < state_attr('sun.sun', 'next_setting') | as_timestamp %}
          {%- set rand_positive = ['stupendous', 'wonderful', 'peachy', 'great', 'fabulous', 'beautiful'] | random %}
          {%- set tod_greeting = states('sensor.tod_greeting') %}
          {%- set tod_goodbye = states('sensor.tod_goodbye') %}
          Good {{ tod_greeting }}!
          {%- if is_state('binary_sensor.envcan_weather_alert', 'on') %}
          {%- set until = state_attr('binary_sensor.envcan_weather_alert', 'expires_text') %}
          Environment Canada has issued a {{ state_attr('binary_sensor.envcan_weather_alert', 'title') }} for the immediate area
          {{- ' until ' ~ until if until != none -}}.
          {%- endif %}
          It is currently {{ temp }} degree{{ iif(temp | abs != 1,'s','') }} and {{ current }}
          {%- if (temp - app_temp ) | abs > 2 %}, but it feels more like {{ app_temp }} {%- endif %}.
          {%- if high_temp > states('input_number.outdoor_high_temperature_threshold') | int %}
          It will be bloody hot
          {%- if humidty_today > 70 %} and humid today, with a humdity level around {{ humidty_today }} percent and
          {%- else %} today, with
          {%- endif %} a humidex topping {{ app_high_temp }} ball sweatin degrees.
          {% if show_normal_high %} That's {{ normal_high_diff | abs }} degree{{ iif(normal_high_diff | abs != 1,'s') }} {{ 'lower' if normal_high_diff < 0 else 'higher' }} than normal!{% endif %}
          {%- if wind_max > 15 %} It will be {{ 'rather' if wind_max <  25 else 'very' }} windy with wind speeds approaching {{ wind_max }} kilometers per hour.{% endif %}
          {%- elif low_temp < states('input_number.outdoor_low_temperature_threshold') | int %}
          Today will be friggin cold
          {%- if humidty_today > 70 %}{{ ' and' if wind_max <= 15 else ', ' }} damp {% endif %}
          {%- if wind_max > 15 %} and {{ 'rather' if wind_max <  25 else 'very' }} windy, with wind speeds topping {{ wind_max }} kilometers per hour and
          {%- else %}, with
          {%- endif %} a high of {{ high_temp }}, and a low of {{ low_temp }} degree{{ iif(low_temp | abs != 1,'s') }}.
          {% if show_normal_high %} Today's high temperature is about {{ normal_high_diff | abs }} degree{{ iif(normal_high_diff | abs != 1,'s') }} {{ 'lower' if normal_high_diff < 0 else 'higher' }} than normal{% endif %}
          {%- if show_normal_high and show_normal_low %} and the {% elif show_normal_low %}Today's {% endif %}
          {%- if show_normal_low %} low is {{ normal_low_diff | abs }} {{ 'degree' if normal_low_diff | abs == 1 else 'degrees' }} {{ 'lower' if normal_low_diff < 0 else 'higher' }}{% endif %}
          {%- if show_normal_high or show_normal_low %} than normal!{% endif %}
          {%- else %}
          Today's high temperature will be {% if show_normal_high %}{{ normal_high_diff | abs }} {{ 'degree' if normal_high_diff | abs == 1 else 'degrees' }}
          {{- ' lower' if normal_high_diff < 0 else ' higher' }} than normal, with a high of {{ 'only ' if normal_high_diff <  0 }}{% endif %}
          {{- high_temp }} degree{{ iif(high_temp | abs != 1,'s','') }}.  The overnight low temperature will be {{ low_temp }} {{ 'degree' if low_temp in [-1, 1] else 'degrees' }}
          {%- if show_normal_low %}, which is {{ normal_low_diff | abs }} degree{{ iif(normal_low_diff | abs != 1,'s') }} {{ 'lower' if normal_low_diff < 0 else 'higher' }} than normal{% endif %}.
          {%- endif %}
          The current humidity level is {{ humidity }} percent, and there
          {%- if precipitation_today %} is a {{ pop }} percent chance of {{ precip_type }}
          {%- if precip_start != none %} starting around {{ precip_start }}{% endif -%}
          {%- if expected_precip > 0 %}
          Today's expected precipitation is {{ expected_precip }} millimeter{{ iif(expected_precip != 1, 's', '') }}
          {%- endif -%}
          {%- else %} is no {{ precip_type }} expected today
          {%- endif -%}.
          {%- if fog > 25 %} There is {{ iif(precipitation_today, 'also', 'however,') }} {{ iarticle(fog) }} percent chance of fog.
          {%- endif -%}
          {%- if states('sensor.uv_risk_today') | lower in ['medium', 'medium-high', 'high', 'very high'] -%}
          {% if wind_max > 15 -%} It will get {{ 'rather' if wind_max <  25 else 'very' }} windy today, with wind speeds approaching {{ wind_max }} kilometers per hour.{% endif %}
          The forecasted UV risk is {{ states('sensor.uv_risk_today') -}}. Do your best to keep all your pastey red-headed step children indoors today.
          {%- endif %}
          {%- if not states('sensor.aqi_risk_level') | lower in ['good', 'unknown','unavailable'] %}
          The current air quality index is {{ states('sensor.aqi_risk_level') }}, so be prepared to choke on a little smog out there.
          {%- endif -%}
          {%- if states('sensor.asthma_risk_today') | lower in ['medium-high', 'high'] %}
          The asthma risk is {{ states('sensor.asthma_risk_today') }} today, so spark up another dart and char your lungs up a little bit more, you, dumb, ass!
          {%- endif %}
          {%- if states('sensor.allergy_risk_today') | lower in ['medium-high', 'high'] %}
          Get your snot rags ready! The allergy risk is {{ states('sensor.allergy_risk_today') }} today.
          {%- endif %}
          {%- if states('sensor.flu_risk_today') | lower in ['medium', 'medium-high', 'high'] %}
          The current cold and flu risk is {{ states('sensor.flu_risk_today') }}, so I highly suggest you mask up, hide in your basement, and avoid all contact with any other human beings today.
          {%- endif %}
          The sun
          {%- if night %} has already set
          {%- else %} will set this evening at {{ sunset -}}
          {%- endif %}, and with any luck, it will rise again in the morning at {{ sunrise }}.
          Have a {{ rand_positive }} {{ tod_goodbye }}!
          Cheerio!
