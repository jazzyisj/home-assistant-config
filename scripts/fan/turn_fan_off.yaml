###################################################################################################
## Turn Fan Off
###################################################################################################
turn_fan_off:
  alias: "Turn Fan Off"
  description: "Turn fan off."
  icon: mdi:fan
  mode: parallel
  fields:
    entity_id:
      description: "List of fan entity ids"
      example: "['fan.bedroom_fan', 'fan.living_room_fan']"
    override:
      description: "Override fan in use timer"
      example: "false"
    activate_timer:
      description: "Activate fan in use timer"
      example: "true"
    cancel_timer:
      description: "Cancel fan in use timer"
      example: "false"
  sequence:
    - variables:
        entities: >
          {% from 'fan.jinja' import valid_fans %}
          {{ valid_fans(entity_id) | from_json }}

    - if: "{{ entities == none or entities | count == 0 }}"
      then:
        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - action: automation.turn_off
      target:
        entity_id: automation.turn_fan_timer_on
      data:
        stop_actions: false

    - repeat:
        for_each: "{{ entities }}"
        sequence:
          - variables:
              timer: >
                {% from 'fan.jinja' import fan_timer %}
                {{ fan_timer(repeat.item) }}

          - if:
              - condition: template
                alias: "Timer bypassed or no timer, or timer is idle"
                value_template: "{{ (override | default(false) or timer == none) or is_state(timer, 'idle') }}"
            then:
              - action: fan.turn_off
                target:
                  entity_id: "{{ repeat.item }}"
                continue_on_error: true

          - if: "{{ timer != none and (activate_timer | default(false)) }}"
            then:
              - action: timer.start
                target:
                  entity_id: "{{ timer }}"
                continue_on_error: true
            else:
              - if: "{{ cancel_timer | default(false) }}"
                then:
                  - action: timer.cancel
                    target:
                      entity_id: "{{ timer }}"

    # wait until all fans are off and this is the last instance of this script running
    - wait_template: >
        {{ expand(entities) | selectattr('state', 'eq', 'on') | list | count == 0
            and state_attr(this.entity_id, 'current') | int == 1 }}
      timeout: 30

    - action: automation.turn_on
      target:
        entity_id: automation.turn_fan_timer_on
