#######################################################################################################################
## Alarm Clock Play
#######################################################################################################################
alarm_clock_play:
  alias: Alarm Clock Play
  description: Play specified alarm clock.
  icon: mdi:alarm-note
  mode: restart
  fields:
    alarm_type:
      description: Alarm type to play (auto, manual, nap).
      example: nap
    first_run:
      description: First run of alarm play.
      example: 'true'
    resume:
      description: Resuming from media player change/tts
      example: 'true'
    test_play:
      description: User is test playing alarm.
      example: 'true'
  variables:
    first_run: "{{ first_run|default(false) }}"
    resume: "{{ resume|default(false) }}"
    test_play: "{{ test_play|default(false) }}"
    player: "{{ states('sensor.alarm_clock_media_player') }}"
    players: "{{ state_attr('sensor.alarm_clock_media_player','players') }}"
    sound: >
      {% if alarm_type == 'auto' %}{{ states('input_select.alarm_clock_sound_auto') }}
      {% elif alarm_type == 'manual' %}{{ states('input_select.alarm_clock_sound_manual') }}
      {% elif alarm_type == 'nap' %}{{ states('input_select.alarm_clock_sound_nap') }}
      {% endif %}
    station: >
      {% if alarm_type == 'auto' %}{{ states('input_select.alarm_clock_radio_auto_alarm') }}
      {% elif alarm_type == 'manual' %}{{ states('input_select.alarm_clock_radio_manual_alarm') }}
      {% elif alarm_type == 'nap' %}{{ states('input_select.alarm_clock_radio_nap_alarm') }}
      {% endif %}
    playlist: >
      {% if alarm_type == 'auto' %}{{ states('input_select.alarm_clock_spotify_auto_alarm') }}
      {% elif alarm_type == 'manual' %}{{ states('input_select.alarm_clock_spotify_manual_alarm') }}
      {% elif alarm_type == 'nap' %}{{ states('input_select.alarm_clock_spotify_nap_alarm') }}
      {% endif %}
    volume: >
      {% if alarm_type == 'auto' %}{{ states('input_number.alarm_clock_volume_auto')|float }}
      {% elif alarm_type == 'manual' %}{{ states('input_number.alarm_clock_volume_manual')|float }}
      {% elif alarm_type == 'nap' %}{{ states('input_number.alarm_clock_volume_nap')|float }}
      {% endif %}
    media_id: >
      {% if sound == 'Radio' %}
        {% for item in state_attr('sensor.streaming_radio_stations','stations') -%}
          {% if is_state('input_select.radio_station',item.name) %}
            {{ item.url }}
          {% endif %}
        {% endfor %}
      {% elif sound == 'Spotify' %}
        {% for item in state_attr('sensor.playlists_sensor','playlists') -%}
          {% if item.name == playlist %}
            {{ item.uri }}
          {% endif %}
        {% endfor %}
      {% elif sound == 'Rooster' %}{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/rooster.mp3' }}
      {% elif sound == 'Loud' %}{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/loud.mp3' }}
      {% elif sound == 'Pager' %}{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/pager.mp3' }}
      {% elif sound == 'Digital' %}{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/digital.mp3' }}
      {% elif sound == 'Gentle' %}{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/gentle.mp3' }}
      {% endif %}
  sequence:
    - wait_template: "{{ is_state('input_boolean.tts_playing','off') }}"
      timeout: 300 # wait if started during tts

    - choose:
        - conditions: "{{ not resume or is_state('timer.alarm_clock_snooze','idle') }}"
          sequence:
            - service: automation.turn_off
              entity_id: automation.alarm_clock_off

            - service: input_boolean.turn_off
              entity_id: input_boolean.alarm_clock_snooze

            - service: automation.turn_on
              entity_id: automation.alarm_clock_off

    - service: input_boolean.turn_off
      entity_id:
        - input_boolean.alarm_clock_failed
        - input_boolean.alarm_clock_resume

    - choose:
        - conditions: "{{ first_run }}"
          sequence: # save media player volumes before conditions so values are set for alarm_clock_stop
            - service: script.save_media_player_volumes
              data:
                media_player: "{{ players }}"
                source: alarm_clock

    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: input_boolean.mute_all
                  state: 'on'

                - condition: state
                  entity_id: input_select.occupancy_mode
                  state:
                    - Away
                    - Vacation

                - condition: state
                  entity_id: input_boolean.alarm_triggered
                  state: 'on'
          sequence:
            - service: browser_mod.toast
              data:
                message: >
                  {% set message = 'Alarm clock cannont play.' %}
                  {% if is_state('input_boolean.mute_all','on') %} {% set message = message ~ ' The system has been muted.' %}{% endif %}
                  {% if is_state('input_select.occupancy_mode','Vacation') %}{% set message = message ~ ' The house is in Away mode.' %}{% endif %}
                  {% if is_state('alarm_control_panel.alarmo','triggered') %}{% set message = message ~ ' The house alarm has been triggered.' %}{% endif %}
                  {{ message }}
                duration: 30000

            - service: input_boolean.turn_off # this will trigger alarm clock stop
              entity_id:
                - input_boolean.alarm_clock_active_auto
                - input_boolean.alarm_clock_active_manual
                - input_boolean.alarm_clock_active_nap

      default:
        - choose: # only on first run so changes on main UI during alarm aren't bypassed on restart
            - conditions: "{{ first_run }}"
              sequence:
                - choose: # set test_play, turn on appropriate boolean - req if test play
                    - conditions: "{{ test_play }}"
                      sequence: # set test play to supress push alert
                        - service: input_boolean.turn_on
                          entity_id: input_boolean.alarm_clock_test_play

                - choose: # turn on radio resume if alarm clock player
                    - conditions:
                        - condition: template
                          value_template: >
                            {% set found = namespace(value=0) %}
                            {% set speaker_groups = state_attr('sensor.media_player_groups','players') %}
                            {% set radio = states('sensor.radio_media_player') %}
                            {% set alarm = player %}
                            {% set radio_group = state_attr('sensor.radio_media_player','players') %}
                            {% set alarm_group = players %}

                            {% if is_state('input_boolean.radio','on') %}
                              {% if radio in speaker_groups %}
                                {% for radio_player in radio_group %}
                                  {% if alarm in speaker_groups %}
                                    {% for alarm_player in alarm_group %}
                                      {% if radio_player == alarm_player %}{% set found.value = 1 %}{% endif %}
                                    {% endfor %}
                                  {% elif radio_player == alarm %}
                                    {% set found.value = 1 %}
                                  {% endif %}
                                {% endfor %}
                              {% else %}
                                {% if alarm in speaker_groups %}
                                  {% for alarm_player in alarm_group %}
                                    {% if radio_player == alarm_player %}{% set found.value = 1 %}{% endif %}
                                  {% endfor %}
                                {% elif radio == alarm %}
                                  {% set found.value = 1 %}
                                {% endif %}
                              {% endif %}
                              {{ found.value|int == 1 }}
                            {% else %} false
                            {% endif %}
                      sequence:
                        - service: input_boolean.turn_on
                          entity_id: input_boolean.resume_radio

                - choose: # turn on spotify resume if alarm clock player
                    - conditions:
                        - condition: template
                          value_template: >
                            {% set found = namespace(value=0) %}
                            {% set speaker_groups = state_attr('sensor.media_player_groups','players') %}
                            {% set spotify = states('sensor.spotify_media_player') %}
                            {% set alarm = player %}
                            {% set spotify_group = state_attr('sensor.spotify_media_player','players') %}
                            {% set alarm_group = players %}

                            {% if is_state('input_boolean.spotify','on') %}
                              {% if spotify in speaker_groups %}
                                {% for spotify_player in spotify_group %}
                                  {% if alarm in speaker_groups %}
                                    {% for alarm_player in alarm_group %}
                                      {% if spotify_player == alarm_player %}{% set found.value = 1 %}{% endif %}
                                    {% endfor %}
                                  {% elif spotify_player == alarm %}
                                    {% set found.value = 1 %}
                                  {% endif %}
                                {% endfor %}
                              {% else %}
                                {% if alarm in speaker_groups %}
                                  {% for alarm_player in alarm_group %}
                                    {% if spotify_player == alarm_player %}{% set found.value = 1 %}{% endif %}
                                  {% endfor %}
                                {% elif spotify == alarm %}
                                  {% set found.value = 1 %}
                                {% endif %}
                              {% endif %}
                              {{ found.value|int == 1 }}
                            {% else %} false
                            {% endif %}
                      sequence:
                        - service: input_boolean.turn_on
                          entity_id: input_boolean.resume_spotify

                - service: input_boolean.turn_on
                  data: # condition for test play is in automation
                    entity_id: >
                      {% if alarm_type == 'auto' %} input_boolean.alarm_clock_active_auto
                      {% elif alarm_type == 'manual' %} input_boolean.alarm_clock_active_manual
                      {% elif alarm_type == 'nap' %} input_boolean.alarm_clock_active_nap
                      {% endif %}

                - choose: # skip delay for test play
                    - conditions:
                        - condition: state
                          entity_id: input_boolean.alarm_clock_test_play
                          state: 'off'
                      sequence:
                        - delay: # delay to allow app notification to be sent or turn off alarm before playing
                            seconds: "{{ states('input_number.alarm_clock_play_delay')|int }}" # alarm time is effectively alarm set time plus this delay

        - condition: state # don't continue if alarm has been snoozed
          entity_id: input_boolean.alarm_clock_snooze
          state: 'off'

        - choose: # wait until any announcements are done playing
            - conditions:
                - condition: state
                  entity_id: input_boolean.tts_playing
                  state: 'on'
              sequence:
                - service: browser_mod.toast
                  data:
                    message: "Alarm clock waiting for announcements to finish."

                - wait_template: "{{ is_state('input_boolean.tts_playing','off') }}"
                  timeout:
                    minutes: 5

                - delay: # delay to allow media players to reset volumes before playing alarm clock
                    seconds: 5

        # do not continue if alarm clock media player is not available
        # if a speaker in a google speaker group is not available the group shows still as available
        # this will cause error and exit script so check state of each entity in the speaker group
        - choose:
            - conditions:
                - condition: template # media player is unavailable or not set
                  value_template: >
                    {% if is_state_attr(player,'type','group') %}
                      {% set found = namespace(value=0) %}
                      {% for item in players %}
                        {% if states(item)|lower in ['unknown','unavailable','none'] %}
                          {% set found.value = 1 %}
                        {% endif %}
                      {% endfor %}
                      {{ found.value|int == 1}}
                    {% else %}
                      {{ states(player)|lower in ['unknown','unavailable','none'] }}
                    {% endif %}
              sequence:
                - service: input_boolean.turn_on
                  entity_id: input_boolean.alarm_clock_failed
          default:
            - service: automation.turn_off # turn alarm clock media player automations off so we don't trigger when alarm clock resumes from tts etc.
              entity_id: &alarm_automations
                - automation.alarm_clock_media_player_turned_off
                - automation.alarm_clock_media_player_paused

            - choose:
                - conditions: "{{ resume }}"
                  sequence: # media player changed
                    - service: script.alarm_clock_active_media_player_off
                      data:
                        resume: true
              default:
                - choose: # if the alarm clock media player is playing something stop it so we don't get a volume jump
                    - conditions: "{{ is_state(player,'playing') }}"
                      sequence:
                          - service: media_player.media_stop
                            data:
                              entity_id: "{{ player }}"

            - service: media_player.volume_set #BLOOP set volume to 0 before setting volume to avoid google volume pops
              data:
                entity_id: "{{ players }}"
                volume_level: 0

            - wait_template: "{{ not is_state(player,'playing') }}"
              timeout: # wait for alarm clock media player to stop if to avoid volume jump
                seconds: 15

            - service: automation.turn_on # turn alarm clock media player automations back on
              entity_id: *alarm_automations

            - choose:
                - conditions: "{{ sound in ['Radio','Spotify'] }}"
                  sequence:
                    - choose:
                        - conditions: "{{ sound == 'Spotify' }}"
                          sequence:
                            - service: spotcast.start
                              data:
                                device_name: "{{ player }}"
                                uri: "{{ media_id }}"
                                random_song: true
                                repeat: true
                                shuffle: true
                                force_playback: true
                      default:
                        - service: media_player.play_media
                          data:
                            entity_id: "{{ player }}"
                            media_content_id: "{{ media_id }}"
                            media_content_type: music

                    - delay: 1 # skipping wait sometimes if media player was already on

                    - wait_template: "{{ is_state(player,'playing') }}"
                      timeout: 60

                    - choose:
                        - conditions: "{{ not is_state(player,'playing') }}"
                          sequence:
                            - service: input_boolean.turn_on
                              entity_id: input_boolean.alarm_clock_failed
                      default:
                        - service: input_text.set_value
                          data: # populate active media player with new media player entity_id
                            entity_id: input_text.active_alarm_clock_media_player
                            value: "{{ player }}"

                        - service: script.set_media_player_volumes #BLOOP set volume after play starts to avoid google bloop
                          data:
                            source: alarm_clock
              default:
                - repeat:
                    sequence:
                      - service: media_player.play_media
                        data:
                          entity_id: "{{ player }}"
                          media_content_id: "{{ media_id }}"
                          media_content_type: music

                      - wait_template: "{{ is_state(player,'playing') }}"
                        timeout:
                          seconds: 60

                      - choose: # alarm clock sound did not play
                          - conditions: "{{ not is_state(player,'playing') }}"
                            sequence:
                              - service: input_boolean.turn_on
                                entity_id: input_boolean.alarm_clock_failed
                        default:
                          - choose:
                              - conditions: "{{ repeat.first }}"
                                sequence:
                                  - service: input_text.set_value
                                    data: # populate active media player with new media player entity_id
                                      entity_id: input_text.active_alarm_clock_media_player
                                      value: "{{ player }}"

                                  - service: script.set_media_player_volumes #BLOOP set volume after play starts to avoid google bloop
                                    data:
                                      source: alarm_clock

                          #NOTE if media_duration doesn't register use default 30 sec so no race condition (most files around 30 sec)
                          #ERROR AttributeError: 'NoneType' object has no attribute 'resume_reading'
                          - delay: # player must start playing first to get media_duration for delay
                              seconds: >
                                {% set sec = state_attr(player,'media_duration')|int %}
                                {{ 30 if sec == 0 else sec }}
                    until:
                      - condition: state
                        entity_id: binary_sensor.alarm_clock_active
                        state: 'off'

