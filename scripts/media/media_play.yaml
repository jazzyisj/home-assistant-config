###############################################################################
## Media Play
###############################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  mode: queued
  fields:
    preset:
      description: "Media preset to play."
      example: "sleep"
  variables:
    preset: "{{ preset | default('play') }}"
    media_player: >
      {{ expand('group.media_players')
          | selectattr('name', 'eq', states('select.media_preset_speaker_' ~ preset))
          | map(attribute='entity_id') | join('') }}
    mass_player: > #MASS change media player to mass player
      {% set mass = media_player ~ '_2' %}
      {{ iif(has_value(mass), mass, none) }}
    preset_players: >
      {% if mass_player != none %}
        {% set players = namespace(entity_id=[]) %}
        {% set devices = state_attr(mass_player, 'group_members')
            if is_state_attr(mass_player, 'mass_player_type', 'group')
              else [state_attr(mass_player, 'mass_player_id')] %}
        {% for item in devices %}
          {% set entity = expand('group.mass_media_players')
              | selectattr('attributes.mass_player_id', 'eq', item)
              | map(attribute='entity_id') | list %}
          {% set players.entity_id = players.entity_id + entity %}
        {% endfor %}
        {{ players.entity_id }}
      {% elif media_player != '' %}
        {% if is_state_attr(media_player, 'type', 'group') %}
          {{ state_attr(media_player, 'entity_id') }}
        {% else %} {{ media_player }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
    stop_player: >
      {% set stop_player = namespace(entity_id=none) %}
      {% if media_player != '' %}
        {% set media_sensor = 'sensor.' ~ media_player.split('.')[1] %}
        {% set groups = state_attr('group.group_media_players', 'entity_id') %}
        {% if media_player in groups %}
          {% set players = state_attr(media_sensor, 'entity_id') %}
          {% for group_speaker in groups %}
            {% set group_sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
            {% if states(group_sensor) == 'on' %} {{ group_sensor }}
              {% set group_players =  state_attr(group_sensor, 'entity_id') %}
              {% for player_item in players %}
                {% if player_item in group_players %}
                  {% set stop_player.entity_id = group_speaker %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% for group_speaker in groups %}
            {% set sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
            {% if media_player in state_attr(sensor, 'entity_id')
                and states(group_speaker) not in ['off', 'unknown', 'unavailable'] %}
              {% set stop_player.entity_id = group_speaker %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
      {{ stop_player.entity_id }}
  sequence:
    - if:
        - condition: state
          entity_id: switch.system_mute
          state: "on"
      then:
        - service: browser_mod.notification
          data:
            duration: 30000
            message: "System mute is on - media preset cannot not be played."

        - stop: "System mute is on - media preset cannot not be played."

    - if: "{{ preset_players == none }}"
      then:
        - service: browser_mod.notification
          data:
            duration: 30000
            message: "No valid media players - media preset cannot not be played."

        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
      timeout:
        minutes: 5
      continue_on_timeout: false

    #MASS turn off currently playing mass players if overlap with new preset players
    #MASS media playing group player -> new preset single player in group -> preset plays on group
    # - if: "{{ stop_player != none }}"
    #   then:
    #     - service: script.turn_media_player_off
    #       data:
    #         entity_id: "{{ stop_player }}"
    #         reset_volume: false
    #       continue_on_error: true

    # avoid google bloops
    # - service: script.turn_media_player_on
    #   data:
    #     entity_id: "{{ media_player }}"
    #   continue_on_error: true

    - service: script.media_player_set_volumes
      target:
        entity_id: "{{ preset_players }}"
      data:
        volume: "{{ states('input_number.media_preset_volume_' ~ preset) | int }}"
        quiet_override: "{{ preset == 'shower' }}"
        source: media
      continue_on_error: true

    - service: media_player.shuffle_set
      target:
        entity_id: "{{ mass_player }}"
      data:
        shuffle: "{{ is_state('input_boolean.shuffle_' ~ preset, 'on') }}"
      continue_on_error: true

    - service: media_player.repeat_set
      target:
        entity_id: "{{ mass_player }}"
      data:
        repeat: "{{ iif(is_state('input_boolean.repeat_' ~ preset, 'on'), 'all', 'off') }}"
      continue_on_error: true

    - service: mass.play_media
      target:
        entity_id: "{{ mass_player }}"
      data:
        media_id: "{{ states('select.media_preset_' ~ preset) }}"
        media_type: "{{ iif(is_state('input_boolean.radio_' ~ preset, 'on'), 'radio', 'playlist') }}"
        enqueue: "{{ iif(preset == 'play', states('input_select.enqueue_mode_play'), 'replace') }}"
      continue_on_error: true #MASS script does not continue if mass fails

    - wait_template: "{{ is_state(media_player, 'playing') }}"
      timeout: 60

    # media didn't play - turn off media player and reset volumes
    - if: "{{ not wait.completed }}"
      then:
        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: critical
            message: |
              MEDIA PLAY FAILED
              preset: {{ preset }}
              media_player: {{ media_player }}
              mass_player: {{ mass_player }}
              preset_players: {{ preset_players }}
              stop_player: {{ stop_player }}
              media_id: "{{ states('select.media_preset_' ~ preset) }}"
              media_type: "{{ iif(is_state('input_boolean.radio_' ~ preset, 'on'), 'radio', 'playlist') }}"
              enqueue: "{{ iif(preset == 'play', states('input_select.enqueue_mode_play'), 'replace') }}"

        - service: script.turn_media_player_off
          data:
            entity_id: "{{ media_player }}"
            reset_volume: false
          continue_on_error: true

        - service: script.media_player_reset_volumes
          data:
            force_reset: true
          continue_on_error: true
      else:
        - if: "{{ has_value('timer.media_preset_' ~ preset) }}"
          then:
            - service: timer.start
              target:
                entity_id: "timer.media_preset_{{ preset }}"
              data:
                duration:
                  minutes: "{{ states('input_number.media_preset_' ~ preset ~ '_time') | int }}"

        #TEMP #MASS until tts resume working properly
        # set media preset play values for mass resume
        - if: "{{ preset != 'play' }}"
          then:
            - service: select.select_option
              target:
                entity_id: select.media_preset_play
              data:
                option: "{{ states('select.media_preset_' ~ preset) }}"

            - service: input_select.select_option
              target:
                entity_id: input_select.enqueue_mode_play
              data:
                option: replace

            - service: select.select_option
              target:
                entity_id: select.media_preset_speaker_play
              data:
                option: "{{ states('select.media_preset_speaker_' ~ preset) }}"

            - service: input_number.set_value
              target:
                entity_id: input_number.media_preset_volume_play
              data:
                value: "{{ states('input_number.media_preset_volume_' ~ preset) }}"

            - service: "input_boolean.turn_{{ iif(is_state('input_boolean.shuffle_' ~ preset, 'on'), 'on', 'off') }}"
              target:
                entity_id: input_boolean.shuffle_play

            - service: "input_boolean.turn_{{ iif(is_state('input_boolean.repeat_' ~ preset, 'on'), 'on', 'off') }}"
              target:
                entity_id: input_boolean.repeat_play

            - service: "input_boolean.turn_{{ iif(is_state('input_boolean.radio_' ~ preset, 'on'), 'on', 'off') }}"
              target:
                entity_id: input_boolean.radio_play
            #TEMP end temp code

    - service: input_boolean.turn_off
      target:
        entity_id: group.media_launchers
