###############################################################################
## Media Play
###############################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  mode: queued
  fields:
    preset:
      description: "Media preset to play."
      example: "sleep"
  variables:
    preset: "{{ preset | default('play') }}"
    media_type: "{{ states('input_select.media_type_' ~ preset) | lower }}"  
    media_id: "{{ states('select.media_' ~ media_type ~ '_' ~ preset) }}"
    enqueue: "{{ states('input_select.enqueue_mode_' ~ preset) | lower }}"
    shuffle: "{{ is_state('input_boolean.shuffle_' ~ preset, 'on') }}"
    radio_mode: "{{ is_state('input_boolean.radio_' ~ preset, 'on') }}"
    repeat: "{{ states('input_select.repeat_' ~ preset) | lower }}"
    volume: "{{ states('input_number.media_volume_' ~ preset) | int }}"
    media_player: >
      {{ expand('group.media_players')
          | selectattr('name', 'eq', iif(media_type == 'video',
              states('select.media_video_display_' ~ preset),
              states('select.media_speaker_' ~ preset)))
          | map(attribute='entity_id') | join }}
    mass_player: >
      {{ expand('group.mass_media_players')
          | selectattr('name', 'eq', state_attr(media_player, 'friendly_name'))
          | map(attribute='entity_id') | join }}
    media_players: >
      {% if media_player != '' %}
        {% if is_state_attr(media_player, 'type', 'group') %}
          {{ state_attr('sensor.' ~ states[media_player].object_id, 'entity_id') }}
        {% else %} {{ [media_player] }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
    stop_player: >
      {% set stop_player = namespace(entity_id=none) %}
      {% if media_player != '' %}
        {% set media_sensor = 'sensor.' ~ states[media_player].object_id %}
        {% set groups = state_attr('group.group_media_players', 'entity_id') %}
        {% if media_player in groups %}
          {% set players = state_attr(media_sensor, 'entity_id') %}
          {% for group_speaker in groups %}
            {% set group_sensor = 'sensor.' ~ states[group_speaker].object_id %}
            {% if states(group_sensor) == 'on' %} {{ group_sensor }}
              {% set group_players =  state_attr(group_sensor, 'entity_id') %}
              {% for player_item in players %}
                {% if player_item in group_players %}
                  {% set stop_player.entity_id = group_speaker %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% for group_speaker in groups %}
            {% set sensor = 'sensor.' ~ states[group_speaker].object_id %}
            {% if media_player in state_attr(sensor, 'entity_id')
                and states(group_speaker) not in ['off', 'unknown', 'unavailable'] %}
              {% set stop_player.entity_id = group_speaker %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
      {{ stop_player.entity_id }}   
  sequence:
    - if:
        - condition: state
          entity_id: switch.system_mute
          state: "on"
      then:
        - action: browser_mod.notification
          data:
            duration: 30000
            message: "System mute is on - media preset cannot not be played."

        - stop: "System mute is on - media preset cannot not be played."

    - if: "{{ media_players == none }}"
      then:
        - action: browser_mod.notification
          data:
            duration: 30000
            message: "No valid media players - media preset cannot not be played."

        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
      timeout:
        minutes: 5
      continue_on_timeout: false

    #MASS turn off currently playing mass players if overlap with new preset players
    #MASS media playing group player -> new preset single player in group -> preset plays on group
    - if: "{{ stop_player != none }}"
      then:
        - action: script.turn_media_player_off
          data:
            entity_id: "{{ stop_player }}"
            reset_volume: false
          continue_on_error: true

    - action: media_player.volume_set
      target:
        entity_id: "{{ media_players }}"
      data:
        volume_level: 0
      continue_on_error: true

    - if: "{{ media_type == 'video' }}"
      then:
        - variables: #TEMP until video presets figured out
            link: >
              {% set title = states('select.media_video_' ~ preset) %}
              {% if title == 'TV For Dogs' %} 9QCKe-lQQOo
              {% elif title == 'Anatoly' %} Jh8bd81Vclk
              {% elif title == 'Legal Eagle' %} LtPM7zkXlW8
              {% elif title == 'Andrew' %} OLLHI2rswd8
              {% endif %}

        - action: media_player.play_media
          target:
            entity_id: "{{ media_player }}"
          data:
            media_content_type: cast
            media_content_id: '{{ ''{"app_name": "youtube","media_id": "'' ~ link ~ ''"}'' }}'
            enqueue: "{{ enqueue }}"
            extra:
              autoplay: true
      else:
        - if: "{{ not mass_player in state_attr('group.mass_media_players', 'entity_id') }}"
          then:
            - action: system_log.write
              data:
                logger: "{{ this.entity_id }}"
                level: critical
                message: "Media cannot play.  Music Assistant media player is not available."

            - stop: "Media cannot play.  Music Assistant media player is not available."

        - action: media_player.shuffle_set
          target:
            entity_id: "{{ mass_player }}"
          data:
            shuffle: "{{ shuffle }}"
          continue_on_error: true

        - action: media_player.repeat_set
          target:
            entity_id: "{{ mass_player }}"
          data:
            repeat: "{{ repeat }}"
          continue_on_error: true

        - action: mass.play_media
          target:
            entity_id: "{{ mass_player }}"
          data:
            media_id: "{{ media_id }}"
            media_type: "{{ media_type }}"
            enqueue: "{{ enqueue }}"
            radio_mode: "{{ radio_mode }}"
          continue_on_error: true

    - wait_template: "{{ is_state(media_player, 'playing') }}"
      timeout: 60

    # media didn't play - turn off media player and reset volumes
    - if: "{{ not wait.completed }}"
      then:
        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: critical
            message: |
              -
              ** MEDIA PLAY FAILED **
              preset: {{ preset }}
              media_type: {{ media_type }}
              media_id: "{{ media_id }}"
              media_player: {{ media_player }}
              mass_player: {{ mass_player }}
              media_players: {{ media_players }}              
              enqueue: "{{ enqueue }}"
              repeat: "{{ repeat }}"
              volume: "{{ repeat }}"
              stop_player: {{ stop_player }}

        - action: script.tts_play
          data:
            message: "Uh oh! The selected media has failed to play.  Is Music Assistant offline?"
            media_player: media_player.kiosk_tablet
            volume: 75
            quiet_play: true

        - action: script.turn_media_player_off
          data:
            entity_id: "{{ media_player }}"
            reset_volume: false
          continue_on_error: true

        - action: script.media_player_reset_volumes
          data:
            force_reset: true
          continue_on_error: true
      else:
        # run after media starts to prevent volume jump
        - action: script.media_player_set_volumes
          target:
            entity_id: "{{ media_players }}"
          data:
            volume: "{{ volume }}"
            quiet_override: "{{ preset == 'shower' }}"
            source: media
          continue_on_error: true

        #IDEA set garage volume override if garage occupied

        - if: "{{ has_value('timer.media_' ~ preset) }}"
          then:
            - action: timer.start
              target:
                entity_id: "timer.media_{{ preset }}"
              data:
                duration:
                  minutes: "{{ states('input_number.media_' ~ preset ~ '_time') | int }}"

    # set media preset play values for resume/restart last media
    - if: "{{ preset != 'play' }}"
      then:
        - if: "{{ media_type != video }}"
          then:
            - action: input_select.select_option
              target:
                entity_id: input_select.media_type_play
              data:
                option: "{{ states('input_select.media_type_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_speaker_play
              data:
                option: "{{ states('select.media_speaker_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_artist_play
              data:
                option: "{{ states('select.media_artist_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_album_play
              data:
                option: "{{ states('select.media_album_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_track_play
              data:
                option: "{{ states('select.media_track_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_playlist_play
              data:
                option: "{{ states('select.media_playlist_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_radio_play
              data:
                option: "{{ states('select.media_radio_' ~ preset) }}"

            - action: "input_boolean.turn_{{ states('input_boolean.shuffle_' ~ preset) }}"
              target:
                entity_id: input_boolean.shuffle_play  

            - action: input_select.select_option
              target:
                entity_id: input_select.repeat_play
              data:
                option: "{{ states('input_select.repeat_' ~ preset) }}"

            - action: input_select.select_option
              target:
                entity_id: input_select.enqueue_mode_play
              data:
                option: "{{ states('input_select.enqueue_mode_' ~ preset) }}"

            - action: input_number.set_value
              target:
                entity_id: input_number.media_volume_play
              data:
                value: "{{ states('input_number.media_volume_' ~ preset) }}"
          else:
            - action: select.select_option
              target:
                entity_id: select.media_video_display_play
              data:
                option: "{{ states('select.media_video_display_' ~ preset) }}"

            - action: select.select_option
              target:
                entity_id: select.media_video_play
              data:
                option: "{{ states('select.media_video_' ~ preset) }}"

    - action: input_boolean.turn_off
      target:
        entity_id: group.media_launchers
