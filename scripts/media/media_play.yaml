###############################################################################
## Media Play
###############################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  mode: restart
  fields:
    preset:
      description: "Media preset to play."
      example: "sleep"
  variables:
    preset: "{{ preset | default('play') }}"
    media_type: "{{ states('input_select.media_type_' ~ preset) | lower }}"
    media_id: "{{ states('select.media_' ~ media_type ~ '_' ~ preset) }}"
    artist: >
      {% set artist = states('select.media_artist_filter_' ~ preset) %}
      {{ '' if artist in ['unknown',''] else artist }}
    album: >
      {% set album = states('select.media_album_filter_' ~ preset) %}
      {{ '' if album in ['unknown',''] else album }}
    enqueue: "{{ states('input_select.enqueue_mode_' ~ preset) | slugify | lower }}"
    shuffle: "{{ is_state('input_boolean.shuffle_' ~ preset, 'on') }}"
    radio_mode: >
      {{ is_state('input_boolean.radio_' ~ preset, 'on')
          and not is_state('input_select.media_type_' ~ preset, 'Radio') }}
    repeat: "{{ states('input_select.repeat_' ~ preset) | lower }}"
    volume: "{{ states('input_number.media_volume_' ~ preset) | int }}"
    media_player: >
      {{ expand('group.media_players')
          | selectattr('name', 'eq', iif(media_type == 'video',
              states('select.media_video_display_' ~ preset),
              states('select.media_speaker_' ~ preset)))
          | map(attribute='entity_id') | join }}
    mass_player: >
      {{ expand('group.mass_media_players')
          | selectattr('name', 'eq', state_attr(media_player, 'friendly_name'))
          | map(attribute='entity_id') | join }}
    media_players: >
      {% if media_player != '' %}
        {% if is_state_attr(media_player, 'type', 'group') %}
          {{ state_attr('sensor.' ~ states[media_player].object_id, 'entity_id') }}
        {% else %} {{ [media_player] }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
    stop_player: >
      {% set stop_player = namespace(entity_id=none) %}
      {% if media_player != '' %}
        {% set media_sensor = 'sensor.' ~ states[media_player].object_id %}
        {% set groups = state_attr('group.group_media_players', 'entity_id') %}
        {% if media_player in groups %}
          {% set players = state_attr(media_sensor, 'entity_id') %}
          {% for group_speaker in groups %}
            {% set group_sensor = 'sensor.' ~ states[group_speaker].object_id %}
            {% if states(group_sensor) == 'on' %} {{ group_sensor }}
              {% set group_players =  state_attr(group_sensor, 'entity_id') %}
              {% for player_item in players %}
                {% if player_item in group_players %}
                  {% set stop_player.entity_id = group_speaker %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% for group_speaker in groups %}
            {% set sensor = 'sensor.' ~ states[group_speaker].object_id %}
            {% if media_player in state_attr(sensor, 'entity_id')
                and states(group_speaker) not in ['off', 'unknown', 'unavailable'] %}
              {% set stop_player.entity_id = group_speaker %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
      {{ stop_player.entity_id }}
  sequence:
    - if:
        - condition: state
          entity_id: switch.system_mute
          state: "on"
      then:
        - action: browser_mod.notification
          data:
            duration: 10000
            message: "System mute is on - media preset cannot not be played."

        - stop: "System mute is on - media preset cannot not be played."

    - if: "{{ media_players == none }}"
      then:
        - action: browser_mod.notification
          data:
            duration: 10000
            message: "No valid media players - media preset cannot not be played."

        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
      timeout:
        minutes: 5
      continue_on_timeout: false

    #MASS turn off currently playing mass players if overlap with new preset players
    #MASS media playing group player -> new preset single player in group -> preset plays on group
    - if: "{{ stop_player != none }}"
      then:
        - action: script.turn_media_player_off
          data:
            entity_id: "{{ stop_player }}"
            reset_volume: false
          continue_on_error: true

    - action: media_player.volume_set
      target:
        entity_id: "{{ media_players }}"
      data:
        volume_level: 0
      continue_on_error: true

    - if: "{{ media_type == 'video' }}"
      then:
        - variables:
            link: !include /config/include/media_preset_video_link.yaml

        - action: media_player.play_media
          target:
            entity_id: "{{ media_player }}"
          data:
            media_content_type: cast
            media_content_id: '{{ ''{"app_name": "youtube","media_id": "'' ~ link ~ ''"}'' }}'
            enqueue: "{{ enqueue }}"
            extra:
              autoplay: true
      else:
        - if: "{{ not mass_player in state_attr('group.mass_media_players', 'entity_id') }}"
          then:
            - action: system_log.write
              data:
                logger: "{{ this.entity_id }}"
                level: critical
                message: "Media cannot play.  Music Assistant media player is not available."

            - stop: "Media cannot play.  Music Assistant media player is not available."

        - if: "{{ not is_state('input_select.media_type_' ~ preset, 'Radio') }}"
          then:
            - action: media_player.shuffle_set
              target:
                entity_id: "{{ mass_player }}"
              data:
                shuffle: "{{ shuffle }}"
              continue_on_error: true

            - action: media_player.repeat_set
              target:
                entity_id: "{{ mass_player }}"
              data:
                repeat: "{{ repeat }}"
              continue_on_error: true

        - action: music_assistant.play_media
          target:
            entity_id: "{{ mass_player }}"
          data:
            media_id: "{{ media_id }}"
            media_type: "{{ media_type }}"
            enqueue: "{{ enqueue }}"
            artist: "{{ artist }}"
            album: "{{ album }}"
            radio_mode: "{{ radio_mode }}"
          continue_on_error: true

    - wait_for_trigger:
        - trigger: template
          id: playing
          value_template: "{{ is_state(media_player, 'playing') }}"
          for: 5 # wait to see if really playing

        - trigger: event
          id: error
          event_type: media_play_error
      timeout: 30

    - if: "{{ wait.completed and wait.trigger.id =='playing' }}"
      then:
        # run after media starts to prevent volume jump
        - action: script.media_player_set_volumes
          target:
            entity_id: "{{ media_players }}"
          data:
            volume: "{{ volume }}"
            quiet_override: "{{ preset == 'shower' }}"
            source: media
          continue_on_error: true

        #IDEA set garage volume override if garage occupied

        - if: "{{ has_value('timer.media_' ~ preset) }}"
          then:
            - action: timer.start
              target:
                entity_id: "timer.media_{{ preset }}"
              data:
                duration:
                  minutes: "{{ states('input_number.media_' ~ preset ~ '_time') | int }}"

        - action: input_boolean.turn_off
          target:
            entity_id: group.media_launchers
      else:
        - action: script.turn_media_player_off
          data:
            entity_id: "{{ media_player }}"
            reset_volume: false
          continue_on_error: true

        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: error
            message: |
              {{ '\n' }}
              ** MEDIA PLAY FAILED **
              preset: {{ preset }}
              media_type: {{ media_type }}
              media_id: "{{ media_id }}"
              media_player: {{ media_player }}
              mass_player: {{ mass_player }}
              media_players: {{ media_players }}
              enqueue: "{{ enqueue }}"
              repeat: "{{ repeat }}"
              volume: "{{ repeat }}"
              stop_player: {{ stop_player }}