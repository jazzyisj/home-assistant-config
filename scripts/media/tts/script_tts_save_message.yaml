###############################################################################
# Save TTS Message
###############################################################################
tts_save_message:
  alias: 'Save TTS Message'
  description: 'Save TTS message.'
  mode: queued
  fields:
    message:
      description: 'Message to be saved.'
      example: 'This is a message!'
  variables:
    count: "{{ states('variable.tts_saved_messages')|int(0) }}"
    repeat_message: '{{ message in states.variable.tts_saved_messages.attributes.values() }}'
  sequence:
    - service: variable.set_variable
      data:
        variable: tts_saved_messages
        value: '{{ count if repeat_message else count + 1 }}'
        attributes: >
          {% set message = message|replace('\n',' ') %} {# newlines mess with dictonary format #}
          {% set msg_num = namespace(value=0) %}
          {% set found_msg = namespace(value=0) %}
          {% set dict_string = namespace(value='') %}

          {% if count > 0 %}
            {% for key, value in states.variable.tts_saved_messages.attributes.items() %}
                {% if loop.index % 2 == 1 %} {# even number attribute is msg, odd is timestamp #}
                {% set msg_num.value = msg_num.value + 1 %}
                {% if message == value %}
                  {# message is a repeat - record index #}
                  {% set found_msg.value = msg_num.value %}
                {% else %}
                  {# add to message dict string, 2 new attributes - msg, timestamp #}
                  {% set dict_string.value = dict_string.value
                      ~ '"msg' ~ msg_num.value ~ '":"'
                      ~ states.variable.tts_saved_messages.attributes['msg' ~ msg_num.value] ~ '"' ~ ','
                      ~ '"msg_ts' ~ msg_num.value ~ '":"'
                      ~ states.variable.tts_saved_messages.attributes['msg_ts' ~ msg_num.value] ~ '"' ~ ',' %}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {% if repeat_message %}
            {# replace found message, we will only update found message attribute values #}
            {% set dict_string.value = '"msg' ~ found_msg.value ~ '":"'  ~ message  ~ '","msg_ts' ~ found_msg.value ~ '":"' ~ now() ~ '"' %}
          {% else %}
            {# new message, we will replace all attributes so add to previous message string #}
            {% set dict_string.value = dict_string.value ~ '"msg' ~ (count + 1) ~ '":"' ~ message  ~ '","msg_ts' ~ (count + 1) ~ '":"' ~ now()  ~ '"' %}
          {% endif %}
          {# message to dictionary format -#}
          {{- '{ ' ~ dict_string.value ~ ' }' -}}
        replace_attributes: '{{ not repeat_message }}'
