###############################################################################
## TTS Play
###############################################################################
tts_play:
  alias: "TTS Play"
  description: "Play TTS announcement message."
  mode: queued
  max: 20
  max_exceeded: error
  trace:
    stored_traces: 20
  fields:
    message:
      description: "TTS Message to play."
      example: "This is a test message."
    alert:
      description: Message is an alert. (overrides tts, media player, and volume)
      example: "false"
    tts_service:
      description: "Override service to use for TTS."
      example: "tts.cloud_say"
    gender:
      description: "Override gender to use for TTS (Nabu Casa only)."
      example: "male"
    language:
      description: "Override languagle to use for TTS (Nabu Casa only)."
      example: "en-CA"
    media_player:
      description: "Override default media player."
      example: "media_player.broadcast_speakers"
    min_volume:
      description: "Percent - override volume level"
      example: "50"
    quiet_play:
      description: Play announcement during quiet time.
      example: "true"
    night_play:
      description: Play announcement during night mode.
      example: "true"
    ignore_away:
      description: Play announcement when nobody home.
      example: "true"
    save_message:
      description: Save message to play when home or after alarm.
      example: "true"
  variables:
    min_volume: "{{ min_volume|default(-1)|float }}"
    quiet_play: "{{ quiet_play|default(false) }}"
    night_play: "{{ night_play|default(false) }}"
    ignore_away: "{{ ignore_away|default(false) }}"
    save_msg: "{{ save_message|default(false) }}"
    alert: "{{ alert|default(false) }}"
  sequence:
    - service: notify.tts_message_history
      data:
        message: "{{ (now() ~ ' ' ~ message)[0:250]|replace('\n',' ') }}"

    - service: browser_mod.notification
      data:
        duration: 30000
        message: "{{ message }}"

    - or:
        - condition: state
          entity_id: input_boolean.tts_enabled
          state: "on"

        - condition: template
          value_template: "{{ alert }}"

    - variables:
        media_player: >
          {% if is_state('binary_sensor.wan_connected','off') %}
            media_player.kiosk_internal
          {% else %}
            {% if media_player is defined %} {{ media_player }}
            {% else %} {{ iif(alert,states('sensor.tts_alert_media_player'),states('sensor.tts_media_player')) }}
            {% endif %}
          {% endif %}
        tts_player: >
          {% if is_state('binary_sensor.mass_media','on') %}
            {{ iif(has_value(media_player ~ '_2'),media_player ~ '_2',media_player) }}
          {% else %}
            {{ media_player }}
          {% endif %}
        media_players: >
          {{ expand(state_attr('sensor.' ~ media_player.split('.')[1],'entity_id')
                if is_state_attr(media_player,'type','group') else [media_player])
              |map(attribute='entity_id')|list }}
        tts_service: > # force local tts service if wan disconnected
          {% if is_state('binary_sensor.wan_connected','off') %} {% set tts = 'tts.marytts_say' %}
          {% elif alert %} {% set tts = 'tts.cloud_say' %}
          {% else %}
            {% if is_state('input_select.tts_service','Mary TTS') %} {% set tts = 'tts.marytts_say' %}
            {% elif is_state('input_select.tts_service','Google Cloud') %} {% set tts = 'tts.google_cloud_say' %}
            {% else %} {% set tts = 'tts.cloud_say' %}
            {% endif %}
          {% endif %}
          {{ tts_service|default(tts) }}
        volume: >
          {% if alert %}
            {% set volume = states('input_number.tts_volume_alert')|int %}
          {% elif is_state('input_boolean.tts_override','on') %}
            {% set volume = states('input_number.tts_volume_manual')|int %}
          {% elif is_state('input_select.occupancy_mode','Night') %}
            {% set volume = states('input_number.tts_volume_night')|int %}
          {% elif is_state('binary_sensor.quiet_time','on') %}
            {% set volume = states('input_number.tts_volume_quiet')|int %}
          {% else %}
            {% set volume = states('input_number.tts_volume')|int %}
          {% endif %}
          {{ min_volume/100 if min_volume > -1 and (min_volume > volume) else volume/100 }}
        mute_tts: >
          {{ false if alert
              else is_state('switch.system_mute','on')
              or is_state('input_boolean.alarm_triggered','on')
              or (is_state('binary_sensor.quiet_time','on') and not quiet_play)
              or (is_state('binary_sensor.scene_active','on') and not night_play)
              or (is_state('input_select.occupancy_mode','Night') and not night_play)
              or (is_state('binary_sensor.someone_home','off') and not ignore_away)
              or media_players|count == 0
              or volume == 0 }}

    - if: "{{ mute_tts }}"
      then:
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.tts_muted # prevents automation.tts_queue_finished trigger

        - if: >
            {{ is_state('input_boolean.jason_phone_tts_enabled','on')
                and is_state('binary_sensor.jason_home','on')
                and (quiet_play or night_play) }}
          then:
            - service: notify.jason
              data:
                message: TTS
                data:
                  tts_text: "{{ message }}"
                  channel: alarm_stream

        # save message if message is flagged for save
        - if:
            - "{{ save_msg }}"
          then:
            - service: script.turn_on
              target:
                entity_id: script.tts_save_message
              data:
                variables:
                  message: "{{ message }}"
      else:
        # tts not muted, allow automation.tts_queue_finished actions
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.tts_muted

        # turn boolean on to start announcement queue
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.tts

        # filter out muted media players so we don't unmute (player must be on for is_volume_muted)
        - variables:
            muted_players: >
              {{ expand(media_players)|selectattr('attributes.is_volume_muted','defined')|selectattr('attributes.is_volume_muted','eq',true)|map(attribute='entity_id')|list }}
            media_players: >
              {{ expand(media_players)|rejectattr('entity_id','in',muted_players)|map(attribute='entity_id')|list }}

        - service: automation.turn_off
          target:
            entity_id: automation.media_player_save_volume
          data:
            stop_actions: false
          continue_on_error: true

        - service: script.media_player_set_volumes
          data:
            source: tts_all # lower active media player volumes for tts
            entity_id: >
              {{ expand(state_attr('group.single_media_players','entity_id'))
                  |rejectattr('entity_id','in',media_players)
                  |map(attribute='entity_id')|list }}
          continue_on_error: true

        #BLOOP set tts player volumes to 0 before media play avoid google bloops
        - service: media_player.volume_set
          target:
            entity_id: "{{ media_players }}" # this sets all individual media player volumes instead of group
          data:
            volume_level: 0
          continue_on_error: true

        #BLOOP tts players must be paused - prevent volume jump
        - service: script.media_players_pause
          target:
            entity_id: "{{ media_players }}"
          continue_on_error: true

        - delay: 1 #MASS for power bloop (volume 0)

        #BLOOP turn on tts players so no bloop when turned on with tts play - bloop happens here when volume is 0
        - if: "{{ expand(media_players)|selectattr('state','eq','off')|list|count > 0 }}"
          then:
            - service: media_player.turn_on
              target:
                entity_id: "{{ expand(media_players)|selectattr('state','eq','off')|map(attribute='entity_id')|list }}"
              continue_on_error: true

        #ISSUE ensure tablet media player volume is set, has no mute - must be before muted players filtered out
        - if: "{{ 'media_player.kiosk_internal' in media_players }}"
          then:
            - service: media_player.volume_set
              target:
                entity_id: media_player.fire_tablet
              data:
                volume_level: 0.8
              continue_on_error: true

        #BLOOP wait until all tts tts players are idle state
        - wait_template: "{{ expand(media_players)|selectattr('state','in',['playing','buffering'])|list|count == 0 }}"
          timeout: 10

        - service: automation.turn_on
          target:
            entity_id: automation.media_player_save_volume

        # set volume on each tts message in case message volume set
        # set volume before player override volumes
        #ISSUE #BLOOP no way to avoid google home volume pops here
        - service: media_player.volume_set
          target:
            entity_id: "{{ media_players }}"
          data:
            volume_level: "{{ volume }}"

        # volume exceptions - skip exceptions if alert (use alert volume)
        - if: "{{ not alert }}"
          then:
            # increase bathroom speaker volume if shower script is on
            - if: >
                {{ 'media_player.bathroom_speaker' in media_players
                      and is_state('switch.shower_scene','on') }}
              then:
                - service: media_player.volume_set
                  target:
                    entity_id: media_player.bathroom_speaker
                  data:
                    volume_level: "{{ iif(is_state('binary_sensor.quiet_time','off'),0.9,0.6) }}"

        # play tts message
        - if: "{{ tts_service == 'tts.cloud_say' }}"
          then:
            - service: tts.cloud_say
              target:
                entity_id: "{{ tts_player }}"
              data:
                message: "{{ message }}"
                language: >
                  {% if alert %} en-US
                  {% else %}
                    {% set voice = states('input_select.tts_cloud_voice') %}
                    {% if 'en-AU' in voice %} {% set lang = 'en-AU' %}
                    {% elif 'en-CA' in voice %} {% set lang = 'en-CA' %}
                    {% elif 'en-IN' in voice %} {% set lang = 'en-IN' %}
                    {% elif 'en-IE' in voice %} {% set lang = 'en-IE' %}
                    {% elif 'en-GB' in voice %} {% set lang = 'en-GB' %}
                    {% elif 'en-US' in voice %} {% set lang = 'en-US' %}
                    {% else %} {% set lang = 'en-CA' %}
                    {% endif %}
                    {{ language|default(lang) }}
                  {% endif %}
                options:
                  gender: "{{ gender|default('female' if 'Female' in states('input_select.tts_cloud_voice') else 'male') }}"
              continue_on_error: true
          else:
            - service: "{{ tts_service }}"
              target:
                entity_id: "{{ tts_player }}"
              data:
                message: "{{ message }}"
              continue_on_error: true

        - delay: 1 #MASS don't skip next wait_template

        - wait_template: "{{ is_state(media_player,'playing') }}"
          timeout: 30

        #MASS # message failed script if announcement is not playing after wait timeout
        - if: "{{ not is_state(media_player,'playing') }}"
          then:
            - service: script.turn_on
              target:
                entity_id: script.tts_failed
              data:
                variables:
                  tts_service: "{{ tts_service }}"
                  media_player: "{{ tts_player }}"
                  message: "{{ message }}"
          else:
            - wait_template: "{{ not is_state(media_player,'playing') }}"
              timeout: 120 # this is effectively the max tts message time

    # reset player overide player back to none if master override is off
    - if:
        - condition: state
          entity_id: input_boolean.tts_override
          state: "off"
      then:
        - service: select.select_option
          target:
            entity_id: select.tts_media_player_manual
          data:
            option: "None Selected"
