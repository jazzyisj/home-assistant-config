###############################################################################
## Spotify Play
###############################################################################
spotify_play:
  alias: 'Spotify Play'
  description: 'Play Spotify media.'
  icon: mdi:spotify
  max_exceeded: error
  fields:
    account:
      description: 'Account to play Spotify with.'
      example: 'hassio'
    device:
      description: 'Spotify cast device to play on.'
      example: 'Dining Room Hub'
    playlist:
      description: 'Spotify playlist to play.'
      example: 'Mega Hit Mix'
    repeat:
      description: 'Repeat playlist.'
      example: 'false'
    random:
      description: 'Start playlist on random song.'
      example: 'false'
    shuffle:
      description: 'Shuffle playlist'
      example: 'false'
    resume:
      description: 'Resume media play option.'
      example: 'playlist'
  variables:
    account: "{{ account|default('hassio') }}"
    spaccount: >
      {% if account == 'jason' %} jazzyisj
      {% elif account == 'sheri' %} sherigagnon
      {% else %} {{ account }}
      {% endif %}
    device: >
      {% if account == 'hassio' %}{% set acct = states('input_select.spotify_media_player') %}
      {% else %}{% set acct = states('input_select.spotify_' ~ account ~ '_media_player') %}
      {% endif %}
      {{ device|default(acct) }}
    playlist: >
      {% if account == 'hassio' %}{% set plist = states('input_select.spotify_playlist') %}
      {% else %}{% set plist = states('input_select.spotify_' ~ account ~ '_playlist') %}
      {% endif %}
      {{ playlist|default(plist) }}
    uri: >
      {% set plist = 'sensor.playlists_sensor' if account == 'hassio'
          else 'sensor.playlists_sensor_' ~ account %}
      {% for item in state_attr((plist),'playlists') -%}
        {% if item.name == playlist %}
          {{ item.uri }}
        {% endif %}
      {% endfor %}
    repeat: "{{ repeat|default(is_state('input_boolean.spotify_repeat','on')) }}"
    random: "{{ random|default(is_state('input_boolean.spotify_random','on')) }}"
    shuffle: "{{ shuffle|default(is_state('input_boolean.spotify_shuffle','on')) }}"
    resume: '{{ resume|default(false) }}'
  sequence:
    - choose:
        - conditions: "{{ resume == 'playlist' }}" # playlist change
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                uri: '{{ uri }}'
                random_song: '{{ random }}'
                shuffle: '{{ shuffle }}'
                ignore_fully_played: true
                force_playback: true

        - conditions: '{{ resume != false }}' # any other resume
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                shuffle: '{{ shuffle }}'
                ignore_fully_played: true
                force_playback: true
      default:
        - service: spotcast.start
          data:
            account: '{{ spaccount }}'
            device_name: '{{ device }}'
            uri: '{{ uri }}'
            random_song: '{{ random }}'
            # repeat: '{{ repeat }}' #ISSUE - 'Invalid state' #WARNING (SyncWorker_29) [spotipy.client] Invalid state
            shuffle: '{{ shuffle }}'
            ignore_fully_played: true
            force_playback: true
