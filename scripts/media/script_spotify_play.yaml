###############################################################################
## Spotify Play
###############################################################################
spotify_play:
  alias: 'Spotify Play'
  description: 'Play Spotify media.'
  icon: mdi:spotify
  mode: restart
  fields:
    account:
      description: 'Account to play Spotify with.'
      example: 'hassio'
    device:
      description: 'Spotify cast device to play on.'
      example: 'Dining Room Hub'
    playlist:
      description: 'Spotify playlist to play.'
      example: 'Mega Hit Mix'
    search:
      description: 'Spotify search to play.'
      example: 'Billy Joel'
    repeat:
      description: 'Repeat playlist.'
      example: 'false'
    random:
      description: 'Start playlist on random song.'
      example: 'false'
    shuffle:
      description: 'Shuffle playlist'
      example: 'false'
    resume:
      description: 'Resume media play option.'
      example: 'playlist'
  variables:
    account: "{{ account|default('hassio') }}"
    search: '{{ search|default(none) }}'
    repeat: "{{ repeat|default(is_state('input_boolean.spotify_repeat','on')) }}"
    random: "{{ random|default(is_state('input_boolean.spotify_random','on')) }}"
    shuffle: "{{ shuffle|default(is_state('input_boolean.spotify_shuffle','on')) }}"
    resume: '{{ resume|default(false) }}'
    spaccount: >
      {% if account == 'jason' %} jazzyisj
      {% elif account == 'sheri' %} sherigagnon
      {% else %} hassio
      {% endif %}
    device: "{{ device|default(states('select.spotify_' ~ account ~ '_media_player')) }}"
  sequence:
    - variables:
        playlist: "{{ playlist|default(states('select.spotify_' ~ account ~ '_playlist')) }}"
        category: >
          {% set category = namespace(value=none) %}
          {% set categories = state_attr('sensor.spotify_categories','categories') %}
          {% if categories != none %}
            {% for item in categories %}
              {% if item.name == states('select.spotify_' ~ account ~ '_playlist') %}
                {% set category.value = item.category %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {{ category.value }}
        uri: >
          {% set uri = namespace(value=none) %}
          {% if category == none %}
            {% set playlists = state_attr(iif(account == 'hassio','sensor.playlists_sensor',
                'sensor.spotify_' ~ account ~ '_playlists'),'playlists') %}
            {% if playlists != none %}
              {% for item in playlists %}
                {% if item.name == playlist %}
                  {% set uri.value = item.uri %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}
          {{ uri.value }}

    # resume from playlist change / alarm clock changed playlist
    - choose:
        - conditions: >
            {% if resume != false %}
              {{ 'playlist' in resume or resume == 'alarm_clock' }}
            {% endif %}
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                "{{ iif(category != none,'category','uri') }}": '{{ iif(category != none,category,uri) }}'
                random_song: '{{ random }}'
                shuffle: '{{ shuffle }}'
                ignore_fully_played: true
                force_playback: true

        # any other resume
        - conditions: '{{ resume != false }}'
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                shuffle: '{{ shuffle }}'
                ignore_fully_played: true
                force_playback: true

        - conditions: '{{ category != none }}'
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                category: '{{ category }}'
                limit: 50

        - conditions: '{{ search != none }}'
          sequence:
            - service: spotcast.start
              data:
                account: '{{ spaccount }}'
                device_name: '{{ device }}'
                search: '{{ search }}'
                shuffle: '{{ shuffle }}'
                ignore_fully_played: true
                force_playback: true
      default:
        - service: spotcast.start
          data:
            account: '{{ spaccount }}'
            device_name: '{{ device }}'
            uri: '{{ uri }}'
            random_song: '{{ random }}'
            repeat: "{{ 'context' if repeat else 'off' }}" # (track, context, off)
            shuffle: '{{ shuffle }}'
            ignore_fully_played: true # podcast playlists
            force_playback: true

###############################################################################
## Spotify Reset
###############################################################################
spotify_reset:
  alias: 'Spotify Reset'
  description: 'Reset spotify media.'
  icon: mdi:spotify
  max_exceeded: silent
  sequence:
    - service: script.media_stop
      data:
        media_type: spotify_hassio

    - service: input_boolean.turn_off
      target:
        entity_id:
          - input_boolean.spotify_hassio_failed
          - input_boolean.spotify_jason_failed
          - input_boolean.spotify_sheri_failed
