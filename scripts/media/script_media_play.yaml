###############################################################################
## Media Play
###############################################################################
media_play:
  alias: 'Media Play'
  description: 'Play media.'
  icon: mdi:play-box
  mode: queued
  max: 5
  max_exceeded: error
  fields:
    media_type:
      description: 'Media type to play.'
      example: 'radio'
    resume:
      description: 'Resume media play option.'
      example: 'playlist'
  sequence:
    - if:
        - condition: template
          value_template: "{{ is_state('binary_sensor.wan_connected','off') }}"
      then:
        - service: browser_mod.toast
          data:
            duration: 30000
            message: 'Media cannot play. Internet is not connected.'
      else:
        - variables:
            media_type: "{{ media_type|default(states('input_select.last_media')) }}"
            resume: '{{ resume|default(false) }}'
            media_player: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"
            media_players: "{{ state_attr('sensor.' ~ media_type ~ '_media_player','entity_id') }}"

        # wait for media_stop to finish running
        - wait_template: "{{ is_state('script.media_stop','off') or resume == 'media_sync' }}"
          timeout: 60
          continue_on_timeout: false # something is wrong

        - service: input_boolean.turn_off
          target:
            entity_id: 'input_boolean.{{ media_type }}_failed'

        - if:
            - or:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  state:
                    - Away
                    - Vacation

                - condition: state
                  entity_id: switch.system_mute
                  state: 'on'

                - condition: state
                  entity_id: input_boolean.alarm_triggered
                  state: 'on'

                - condition: template
                  alias: 'Target media player is an active alarm clock media player'
                  value_template: >
                    {% if is_state('binary_sensor.alarm_clock','on') %}
                      {% set alarm_player = states('sensor.alarm_clock_media_player') %}
                      {% set alarm_players = state_attr('sensor.alarm_clock_media_player','entity_id') %}
                      {% set found = namespace(value=0) %}
                      {% if is_state_attr(media_player,'type','group') %}
                        {% for pitem in media_players %}
                          {% if is_state_attr(alarm_player,'type','group') %}
                            {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                          {% elif pitem == alarm_player %}
                            {% set found.value = 1 %}
                          {% endif %}
                        {% endfor %}
                      {% else %}
                        {% if is_state_attr(media_player,'type','group') %}
                          {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                        {% elif item == media_player %}
                          {% set found.value = 1 %}
                        {% endif %}
                      {% endif %}
                      {{ found.value == 1 }}
                    {% else %} false
                    {% endif %}
          then:
            - service: script.media_stop
              data:
                media_type: '{{ media_type }}'

            - service: browser_mod.toast
              data:
                duration: 30000
                message: >
                  {% set message = 'Media cannot be played. ' %}
                  {% if is_state('switch.system_mute','on') %}{% set message = message ~ 'The system is muted.' %}{% endif %}
                  {% if states('input_select.occupancy_mode') in ['Away','Vacation'] %}{% set message = message ~ 'The house is in Away/Vacation mode.' %}{% endif %}
                  {% if is_state('input_boolean.alarm_triggered','on') %}
                    {% set message = message ~ 'The house alarm has been triggered.' %}
                  {% endif %}
                  {{ message }}
          else:
            - wait_template: "{{ is_state('binary_sensor.tts','off') or resume == 'media_sync' }}"
              timeout:
                minutes: 5

            - if: '{{ not wait.completed }}' # something is wrong
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: 'input_boolean.{{ media_type }}_failed'

                - service: browser_mod.toast
                  data:
                    duration: 30000
                    message: '{{ media_type|title }} cannot play. Something has gone wrong.'
              else:
                - if: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on',true) and resume != 'media_sync' }}"
                  then:
                    - service: script.turn_on
                      target:
                        entity_id: script.tts_play
                      data:
                        variables:
                          message: 'Your media selection will play when the mobile speakerphone in use has been turned off.'
                          quiet_play: true
                          media_player: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"

                    - wait_template: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on',false) }}"
                      timeout:
                        minutes: 15
                      continue_on_timeout: false # after timeout media will not play

                - variables:
                    # old media type playing on new media type media player #YOUTUBE
                    media_on: >
                      {% set media_on = namespace(value=[]) %}
                      {% set media_types = state_attr('binary_sensor.media_on','media_types') %}
                      {% for media_item in media_types %}
                        {% if media_item != media_type %}
                          {% set found = namespace(value=0) %}
                          {% if media_item == 'youtube' %}
                            {% set old_player = (expand('group.media_play_media_players')
                              |selectattr('name','eq',states('input_select.youtube_player_speaker'))
                              |map(attribute='entity_id')|list)[0] %}
                          {% else %}
                            {% set old_player = (expand('group.media_play_media_players')
                                |selectattr('name','eq',states('select.' ~ media_item ~ '_media_player'))
                                |map(attribute='entity_id')|list)[0] %}
                          {% endif %}
                          {% set old_sensor = 'sensor.' ~ old_player.split('.')[1] %}
                          {% if is_state_attr(media_player,'type','group') %}
                            {% for pitem in media_players %}
                              {% if is_state_attr(old_player,'type','group') %}
                                {% for olditem in state_attr(old_sensor,'entity_id') %}
                                  {% if pitem == olditem %}
                                    {% set found.value = 1 %}{% endif %}
                                {% endfor %}
                              {% elif pitem == old_player %}
                                {% set found.value =1 %}
                              {% endif %}
                            {% endfor %}
                          {% else %}
                            {% if is_state_attr(old_player,'type','group') %}
                              {% for olditem in state_attr(old_sensor,'entity_id') %}
                                {% if olditem == media_player %}
                                  {% set found.value = 1 %}{% endif %}
                              {% endfor %}
                            {% elif old_player == media_player %}
                              {% set found.value = 1 %}
                            {% endif %}
                          {% endif %}
                          {% if found.value == 1 %}
                            {% set media_on.value = media_on.value + [media_item] %}
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                      {{ media_on.value }}

                - service: automation.turn_off
                  target:
                    entity_id: &play_automations
                      - automation.media_player_save_volume
                      - automation.media_turned_on
                  data:
                    stop_actions: false

                # stop previous media if new media playing on previous media player or member of previous media speaker group
                - if: '{{ media_on|count > 0 }}'
                  then:
                    - repeat:
                        count: '{{ media_on|count }}'
                        sequence:
                          - variables:
                              media_on_type: '{{ media_on[repeat.index-1] }}'
                              media_on_players: "{{ state_attr('sensor.' ~ media_on_type ~ '_media_player','entity_id') }}"

                          - service: media_player.turn_off
                            target:
                              entity_id: 'media_player.{{ media_on_type }}'

                          # wait for all new players to be stopped
                          - wait_template: >
                              {{ expand(media_players)|selectattr('state','in',
                                  ['playing','paused','unknown','unavailable'])|list|count == 0 }}
                            timeout: 30

                #BLOOP set volumes to 0 before media play avoid google bloops if media player turns on
                - if: >
                    {% if resume == false %} true
                    {% else %} {{ 'playlist' not in resume }}
                    {% endif %}
                  then:
                    - service: media_player.volume_set
                      target:
                        entity_id: '{{ media_players }}'
                      data:
                        volume_level: 0

                    - delay: 1 # make sure volumes are 0 so we don't get a volume jump

                - if: "{{ 'spotify' in media_type }}" #SPOTIFY
                  then:
                    - service: script.turn_on
                      target:
                        entity_id: 'script.spotify_play'
                      data:
                        variables:
                          account: '{{ media_type[8:] }}'
                          resume: '{{ resume }}'
                  else:
                    - service: script.turn_on
                      target:
                        entity_id: 'script.{{ media_type }}_play'
                      data:
                        variables:
                          resume: '{{ resume }}'

                - wait_template: "{{ is_state(media_player,'playing') }}"
                  timeout:
                    seconds: 30 # can take a bit for stream to start

                - service: automation.turn_on
                  target:
                    entity_id: *play_automations

                - if:
                    - condition: template
                      alias: 'Media did not play'
                      value_template: "{{ not is_state(media_player,'playing') }}"
                  then:
                    - service: input_boolean.turn_on
                      target:
                        entity_id: 'input_boolean.{{ media_type }}_failed'
                  else:
                    - wait_template: "{{ media_player == states('sensor.' ~ media_type ~ '_media_player') }}"
                      timeout: 30 #SPOTIFY wait for sensor to populate

                    # don't set input_text/run set volumes if sensor not valid,
                    - if: '{{ wait.completed }}'
                      then:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: 'input_boolean.{{ media_type }}'

                        # turn off after play starts so we don't trigger fail
                        - service: input_boolean.turn_off
                          target:
                            entity_id: 'input_boolean.resume_{{ media_type }}'

                        - service: input_boolean.turn_off
                          target:
                            entity_id: 'input_boolean.{{ media_type }}_failed'

                        - service: input_text.set_value
                          target:
                            entity_id: 'input_text.active_{{ media_type }}_media_player'
                          data:
                            value: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"

                        - service: input_select.select_option
                          target:
                            entity_id: input_select.last_media
                          data:
                            option: '{{ media_type }}'

                        - if: >
                            {% if resume == false %} true
                            {% else %} {{ 'playlist' not in resume }}
                            {% endif %}
                          then:
                            - service: script.media_players_set_volumes
                              data:
                                entity_id: '{{ media_players }}'
                                source: "{{ media_type ~ '_tts' if resume == 'tts' else media_type }}"
                      else:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: 'input_boolean.{{ media_type }}_failed'
