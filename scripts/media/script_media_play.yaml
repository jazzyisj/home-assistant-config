###############################################################################
## Media Play
###############################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  mode: queued
  fields:
    preset:
      description: "Media preset to play."
      example: "sleep"
  variables:
    preset: "{{ preset|default('play') }}"
    media_player: >
      {{ expand('group.media_players')
          |selectattr('name','eq',states('select.media_preset_speaker_' ~ preset))
          |map(attribute='entity_id')|join('') }}
    mass_player: > #MASS change player to mass player
      {% set mass = media_player ~ '_2' %}
      {{ iif(has_value(mass),mass,none) }}
    play_players: >
      {% if mass_player != none %}
        {% set players = namespace(entity_id=[]) %}
        {% set devices = state_attr(mass_player,'group_members')
            if is_state_attr(mass_player,'mass_player_type','group')
              else [state_attr(mass_player,'mass_player_id')] %}
        {% for item in devices %}
          {% set entity = expand('group.mass_media_players')
              |selectattr('attributes.mass_player_id','eq',item)
              |map(attribute='entity_id')|list %}
          {% set players.entity_id = players.entity_id + entity %}
        {% endfor %}
        {{ players.entity_id }}
      {% elif media_player != '' %}
        {% if state_attr(media_player,'type','group') %}
          {{ state_attr(media_player,'entity_id') }}
        {% else %} {{ media_player }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
    stop_player: >
      {% set stop_player = namespace(entity_id=none) %}
      {% if media_player != '' %}
        {% set media_sensor = 'sensor.' ~ media_player.split('.')[1] %}
        {% set groups = state_attr('group.group_media_players','entity_id') %}
        {% if media_player in groups %}
          {% set players = state_attr(media_sensor,'entity_id') %}
          {% for group_speaker in groups %}
            {% set group_sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
            {% if states(group_sensor) == 'on' %} {{ group_sensor }}
              {% set group_players =  state_attr(group_sensor,'entity_id') %}
              {% for player_item in players %}
                {% if player_item in group_players %}
                  {% set stop_player.entity_id = group_speaker %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% else %}
          {% for group_speaker in groups %}
            {% set sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
            {% if states(sensor) == 'on' and media_player in state_attr(sensor,'entity_id') %}
              {% set stop_player.entity_id = group_speaker %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
      {{ stop_player.entity_id }}
  sequence:
    - if:
        - condition: state
          entity_id: switch.system_mute
          state: "on"
      then:
        - service: browser_mod.notification
          data:
            duration: 30000
            message: "System mute is on - media preset cannot not be played."

        - stop: "System mute is on - media preset cannot not be played."
          error: false

    - if: "{{ play_players == none }}"
      then:
        - service: browser_mod.notification
          data:
            duration: 30000
            message: "No valid media players - media preset cannot not be played."

        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: warning
            message: "No valid entities."

        - stop: "No valid entities."

    - wait_template: "{{ is_state('input_boolean.tts','off') }}"
      timeout:
        minutes: 5
      continue_on_timeout: false

    #MASS turn off currently playing group if overlap with preset players
    - if: "{{ stop_player != none }}"
      then:
        - service: script.turn_media_player_off
          data:
            entity_id: "{{ stop_player }}"
            reset_volume: false
          continue_on_error: true

    - service: script.turn_media_player_on
      data:
        entity_id: "{{ media_player }}"
      continue_on_error: true

    - service: script.media_player_set_volumes
      target:
        entity_id: "{{ play_players }}"
      data:
        volume: "{{ states('input_number.media_preset_volume_' ~ preset)|int }}"
        source: media

    - service: mass.queue_command
      data:
        player_id: "{{ mass_player }}"
        command: "{{ iif(is_state('input_boolean.shuffle_' ~ preset,'on'),'shuffle_on','shuffle_off') }}"
      continue_on_error: true

    - service: mass.queue_command
      data:
        player_id: "{{ mass_player }}"
        command: repeat
        repeat_mode: "{{ iif(is_state('input_boolean.repeat_' ~ preset,'on'),'all','off') }}"
      continue_on_error: true

    - service: mass.queue_command
      data:
        player_id: "{{ mass_player }}"
        command: play_media
        uri: "{{ states('select.media_preset_' ~ preset) }}"
        enqueue_mode: "{{ iif(preset == 'play',states('input_select.enqueue_mode_play'),'replace') }}"
        radio_mode: "{{ iif(is_state('input_boolean.radio_' ~ preset,'on'),true,false) }}"
      continue_on_error: true #ISSUE #MASS script does not continue if mass fails

    - wait_template: "{{ is_state(media_player,'playing') }}"
      timeout: 30

    - if: "{{ not wait.completed }}"
      then:
        - service: script.media_player_reset_volumes
          data:
            force_reset: true

        - service: script.turn_media_player_off
          data:
            entity_id: "{{ media_player }}"
            reset_volume: false
          continue_on_error: true
      else:
        - service: input_boolean.turn_off
          target:
            entity_id: group.media_launchers

        - if: >
            {{ has_value('timer.media_preset_' ~ preset)
                and is_state('timer.media_preset_' ~ preset,'idle') }}
          then:
            - service: timer.start
              target:
                entity_id: "timer.media_preset_{{ preset }}"
              data:
                duration:
                  minutes: "{{ states('input_number.media_preset_' ~ preset ~ '_time')|int }}"
