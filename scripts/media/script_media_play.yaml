###############################################################################
## Media Play
###############################################################################
media_play:
  alias: 'Media Play'
  description: 'Play media.'
  icon: mdi:play-box
  mode: queued
  max: 5
  max_exceeded: error
  fields:
    media_type:
      description: 'Media type to play.'
      example: 'radio'
    resume:
      description: 'Resume media play option.'
      example: 'playlist'
  variables:
    media_type: "{{ media_type|default(states('input_select.last_media')) }}"
    resume: '{{ resume|default(false) }}'
    speaker_groups: "{{ state_attr('group.group_media_players','entity_id') }}"
    media_player: >
      {{ expand(state_attr('group.play_media_players','entity_id'))
          |selectattr('name','eq',states('input_select.' ~ media_type ~ '_media_player'))
          |map(attribute='entity_id')|list|join('') }}
    media_players: >
      {{ state_attr('sensor.' ~ media_player.split('.')[1],'entity_id')
          if is_state_attr(media_player,'type','group') else [media_player] }}
  sequence:
    # wait for media_stop to finish running
    - wait_template: "{{ is_state('script.media_stop','off') }}"
      timeout: 60
      continue_on_timeout: false # something is wrong

    - service: input_boolean.turn_off
      target:
        entity_id: 'input_boolean.{{ media_type }}_failed'

    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  state:
                    - Away
                    - Vacation

                - condition: state
                  entity_id: switch.system_mute
                  state: 'on'

                - condition: state
                  entity_id: input_boolean.alarm_triggered
                  state: 'on'

                - condition: template
                  alias: 'Target media player is an active alarm clock media player'
                  value_template: >
                    {% if is_state('binary_sensor.alarm_clock','on') %}
                      {% set alarm_player = states('sensor.alarm_clock_media_player') %}
                      {% set alarm_players = state_attr('sensor.alarm_clock_media_player','entity_id') %}
                      {% set found = namespace(value=0) %}
                      {% if media_player in speaker_groups %}
                        {% for pitem in media_players %}
                          {% if alarm_player in speaker_groups %}
                            {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                          {% elif pitem == alarm_player %}
                            {% set found.value = 1 %}
                          {% endif %}
                        {% endfor %}
                      {% else %}
                        {% if alarm_player in speaker_groups %}
                          {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                        {% elif item == media_player %}
                          {% set found.value = 1 %}
                        {% endif %}
                      {% endif %}
                      {{ found.value == 1 }}
                    {% else %} false
                    {% endif %}
          sequence:
            - service: script.media_stop
              data:
                media_type: '{{ media_type }}'

            - service: browser_mod.toast
              data:
                duration: 30000
                message: >
                  {% set message = 'Media cannot be played. ' %}
                  {% if is_state('switch.system_mute','on') %}{% set message = message ~ 'The system is muted.' %}{% endif %}
                  {% if states('input_select.occupancy_mode') in ['Away','Vacation'] %}{% set message = message ~ 'The house is in Away/Vacation mode.' %}{% endif %}
                  {% if is_state('alarm_control_panel.master','triggered') or is_state('input_boolean.alarm_triggered','on') %}
                    {% set message = message ~ 'The house alarm has been triggered.' %}
                  {% endif %}
                  {{ message }}
      default:
        - wait_template: "{{ is_state('binary_sensor.tts','off') and is_state('script.media_stop','off') }}"
          timeout: # wait for tts/previous media stop script to finish
            minutes: 5

        - choose:
            - conditions: '{{ not wait.completed }}' # something is wrong
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: 'input_boolean.{{ media_type }}_failed'
                - service: browser_mod.toast
                  data:
                    duration: 30000
                    message: '{{ media_type|title }} cannot play. Something has gone wrong.'
          default:
            - choose:
                - conditions:
                    - condition: template
                      alias: 'Media player is unavailable'
                      value_template:
                        > # if speaker group check state for each media_player
                        {% if is_state_attr(media_player,'type','group') %}
                          {% set found = namespace(value=0) %}
                          {% for item in media_players -%}
                            {% if states(item)|lower in ['unknown','unavailable','none'] %}{% set found.value = 1 %}{% endif %}
                          {% endfor %}
                          {{ found.value|int(0) == 1 }}
                        {% else %}
                          {{ states(media_player)|lower in ['unknown','unavailable','none'] }}
                        {% endif %}
                  sequence:
                    - service: input_boolean.turn_on
                      target:
                        entity_id: 'input_boolean.{{ media_type }}_failed'

                    - service: browser_mod.toast
                      data:
                        duration: 30000
                        message: '{{ media_type|title }} cannot play. Selected media player is unavailable.'
              default:
                - choose:
                    - conditions: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on',true) }}"
                      sequence:
                        - service: script.turn_on
                          target:
                            entity_id: script.tts_play
                          data:
                            variables:
                              message: 'Your media selection will play when the mobile speakerphone in use has been turned off.'
                              quiet_play: true
                              media_player: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"

                        - wait_template: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on',false) }}"
                          timeout:
                            minutes: 15
                          continue_on_timeout: false # after timeout media will not play

                - variables:
                    # old media type playing on new media player
                    media_on: >
                      {% set media_on = namespace(value=[]) %}
                      {% set media_types = state_attr('binary_sensor.media_on','media_types') %}
                      {% for media_item in media_types %}
                        {% if media_item != media_type %}
                          {% set found = namespace(value=0) %}
                          {% set old_player = (expand(state_attr('group.play_media_players','entity_id'))
                              |selectattr('name','eq',states('input_select.' ~ media_item ~ '_media_player'))
                              |map(attribute='entity_id')|list)[0] %}
                          {% set old_sensor = 'sensor.' ~ old_player.split('.')[1] %}
                          {% if media_player in speaker_groups %}
                            {% for pitem in media_players %}
                              {% if old_player in speaker_groups %}
                                {% for olditem in state_attr(old_sensor,'entity_id') %}
                                  {% if pitem == olditem %}
                                    {% set found.value = 1 %}{% endif %}
                                {% endfor %}
                              {% elif pitem == old_player %}
                                {% set found.value =1 %}
                              {% endif %}
                            {% endfor %}
                          {% else %}
                            {% if old_player in speaker_groups %}
                              {% for olditem in state_attr(old_sensor,'entity_id') %}
                                {% if olditem == media_player %}
                                  {% set found.value = 1 %}{% endif %}
                              {% endfor %}
                            {% elif old_player == media_player %}
                              {% set found.value = 1 %}
                            {% endif %}
                          {% endif %}
                          {% if found.value == 1 %}
                            {% set media_on.value = media_on.value + [media_item] %}
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                      {{ media_on.value }}

                - service: automation.turn_off
                  target:
                    entity_id: automation.media_player_save_volume
                  data:
                    stop_actions: false

                # stop previous media if new media playing on previous media player or member of previous media speaker group
                - choose:
                    - conditions: '{{ media_on|count > 0 }}'
                      sequence:
                        - repeat:
                            count: '{{ media_on|count }}'
                            sequence:
                              - variables:
                                  media_on_type: '{{ media_on[repeat.index-1] }}'
                                  media_on_players: "{{ state_attr('sensor.' ~ media_on_type ~ '_media_player','entity_id') }}"

                              - service: media_player.turn_off
                                target:
                                  entity_id: 'media_player.{{ media_on_type }}'

                - choose:
                    # wait for all new players to be stopped
                    - conditions: '{{ media_on|count > 0 }}'
                      sequence:
                        - wait_template: "{{ expand(media_players)|selectattr('state','in',['playing','paused','unknown','unavailable'])|list|count == 0 }}"
                          timeout: 30

                - choose:
                    #BLOOP set volumes to 0 before media play avoid google bloops if media player turns on
                    - conditions: "{{ resume != 'playlist' }}"
                      sequence:
                        - service: media_player.volume_set
                          target:
                            entity_id: '{{ media_players }}'
                          data:
                            volume_level: 0

                        - delay: 1 # make sure volumes are 0 so we don't get a volume jump

                - choose:
                    - conditions: "{{ 'spotify_hassio' in media_type }}"
                      sequence:
                        - service: script.turn_on
                          target:
                            entity_id: 'script.spotify_play'
                          data:
                            variables:
                              account: '{{ media_type[8:] }}'
                              resume: '{{ resume }}'
                  default:
                    - service: script.turn_on
                      target:
                        entity_id: 'script.{{ media_type }}_play'
                      data:
                        variables:
                          resume: '{{ resume }}'

                - wait_for_trigger:
                    - platform: template
                      value_template: "{{ is_state(media_player,'playing') }}"
                      for: 2 # media players can momentarily show playing state even if media doesn't play (streaming radio)
                  timeout:
                    seconds: 30 # can take a bit for stream to start

                - service: automation.turn_on
                  target:
                    entity_id: automation.media_player_save_volume

                - choose:
                    - conditions:
                        - condition: template
                          alias: 'Media did not play'
                          value_template: "{{ not is_state(media_player,'playing') }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: 'input_boolean.{{ media_type }}_failed'
                  default:
                    # turn off after play starts so we don't trigger fail
                    - service: input_boolean.turn_off
                      target:
                        entity_id: 'input_boolean.resume_{{ media_type }}'

                    - wait_template: "{{ media_player == states('sensor.' ~ media_type ~ '_media_player') }}"
                      timeout: 30 #SPOTIFY wait for sensor to populate

                    - choose: # don't set input_text/run set volumes if sensor not valid,
                        - conditions: '{{ wait.completed }}'
                          sequence:
                            - service: input_text.set_value
                              target:
                                entity_id: 'input_text.active_{{ media_type }}_media_player'
                              data:
                                value: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"

                            - service: input_boolean.turn_off
                              target:
                                entity_id: 'input_boolean.{{ media_type }}_failed'

                            - service: input_select.select_option
                              target:
                                entity_id: input_select.last_media
                              data:
                                option: '{{ media_type }}'

                            - choose:
                                - conditions: "{{ resume != 'playlist' }}"
                                  sequence:
                                    - service: script.media_players_set_volumes
                                      data:
                                        media_players: '{{ media_players }}'
                                        source: "{{ media_type ~ '_tts' if resume == 'tts' else media_type }}"
                      default:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: 'input_boolean.{{ media_type }}_failed'
