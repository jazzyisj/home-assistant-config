###############################################################################
## Media Play
###############################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  mode: queued
  fields:
    preset:
      description: "Media preset to play."
      example: "sleep"
  variables:
    preset: "{{ preset|default('play') }}"
    media_player: >
      {{ expand('group.media_players')
          |selectattr('name','eq',states('select.media_preset_speaker_' ~ preset))
          |map(attribute='entity_id')|join('') }}
    mass_player: > #MASS change player to mass player
      {% set mass = media_player ~ '_2' %}
      {{ iif(has_value(mass),mass,none) }}
    play_players: >
      {% if mass_player != none %}
        {% set players = namespace(entity_id=[]) %}
        {% set devices = state_attr(mass_player,'group_members')
            if is_state_attr(mass_player,'mass_player_type','group')
              else [state_attr(mass_player,'mass_player_id')] %}
        {% for item in devices %}
          {% set entity = expand('group.mass_media_players')
              |selectattr('attributes.mass_player_id','eq',item)
              |map(attribute='entity_id')|list %}
          {% set players.entity_id = players.entity_id + entity %}
        {% endfor %}
        {{ players.entity_id }}
      {% elif media_player != '' %}
        {% if state_attr(media_player,'type','group') %}
          {{ state_attr(media_player,'entity_id') }}
        {% else %} {{ media_player }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
    stop_player: >
      {% set stop_player = namespace(entity_id=none) %}
      {% set media_sensor = 'sensor.' ~ media_player.split('.')[1] %}
      {% set groups = state_attr('group.group_media_players','entity_id') %}
      {% if media_player in groups %}
        {% set players = state_attr(media_sensor,'entity_id') %}
        {% for group_speaker in groups %}
          {% set group_sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
          {% if states(group_sensor) == 'on' %} {{ group_sensor }}
            {% set group_players =  state_attr(group_sensor,'entity_id') %}
            {% for player_item in players %}
              {% if player_item in group_players %}
                {% set stop_player.entity_id = group_speaker %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% else %}
        {% for group_speaker in groups %}
          {% set sensor = 'sensor.' ~ group_speaker.split('.')[1] %}
          {% if states(sensor) == 'on' and media_player in state_attr(sensor,'entity_id') %}
            {% set stop_player.entity_id = group_speaker %}
          {% endif %}
        {% endfor %}
      {% endif %}
      {{ stop_player.entity_id }}
  sequence:
    - wait_template: "{{ is_state('input_boolean.tts','off') }}"
      timeout:
        minutes: 5
      continue_on_timeout: false

    - choose:
        - conditions:
            - condition: state
              entity_id: switch.system_mute
              state: "on"
          sequence:
            - service: browser_mod.notification
              data:
                duration: 30000
                message: "Media preset cannot not be played."

        - conditions:
            - condition: template
              value_template: "{{ play_players == none }}"
          sequence:
            - service: browser_mod.notification
              data:
                duration: 30000
                message: "No valid media players."
      default:
        #MASS turn off currently playing group if overlap with preset players
        - if: "{{ stop_player != none }}"
          then:
            - service: script.media_players_off
              data:
                entity_id: "{{ stop_player }}"

        - service: script.media_player_set_volumes
          target:
            entity_id: "{{ play_players }}"
          data:
            volume: "{{ states('input_number.media_preset_volume_' ~ preset)|int }}"
            source: media

        - service: mass.queue_command
          data:
            player_id: "{{ mass_player }}"
            command: "{{ iif(is_state('input_boolean.shuffle_' ~ preset,'on'),'shuffle_on','shuffle_off') }}"
          continue_on_error: true

        - service: mass.queue_command
          data:
            player_id: "{{ mass_player }}"
            command: repeat
            repeat_mode: "{{ iif(is_state('input_boolean.repeat_' ~ preset,'on'),'all','off') }}"
          continue_on_error: true

        - service: mass.queue_command
          data:
            player_id: "{{ mass_player }}"
            command: play_media
            uri: "{{ states('select.media_preset_' ~ preset) }}"
            enqueue_mode: "{{ iif(preset == 'play',states('input_select.enqueue_mode_play'),'replace') }}"
            radio_mode: "{{ iif(is_state('input_boolean.radio_' ~ preset,'on'),true,false) }}"
          continue_on_error: true

        - wait_template: "{{ is_state(media_player,'playing') }}"
          timeout: 30 # wait for media to start play

        - if: "{{ not wait.completed }}"
          then:
            - service: script.media_player_reset_volumes
              data:
                force_reset: true
              enabled: false
          else:
            - service: input_boolean.turn_off
              target:
                entity_id: group.media_launchers

            # if sleep preset and sleep timer is idle start timer
            - if: "{{ preset == 'sleep' and is_state('timer.media_preset_sleep','idle') }}"
              then:
                - service: timer.start
                  target:
                    entity_id: timer.media_preset_sleep
                  data:
                    duration:
                      minutes: "{{ states('input_number.media_preset_sleep_time')|int }}"
