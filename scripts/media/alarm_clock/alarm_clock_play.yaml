###################################################################################################
## Alarm Clock Play
###################################################################################################
alarm_clock_play:
  alias: "Alarm Clock Play"
  description: "Play alarm clock."
  icon: mdi:alarm-note
  mode: restart
  max_exceeded: silent
  variables:
    alarm_type: "{{ states('input_select.alarm_clock_type') }}"
    media_player: "{{ states('sensor.alarm_clock_active_media_player') }}"
    #MASS use mass player for media play, default to hass player
    mass_player: >
      {% set mass = expand('group.mass_media_players')
          | selectattr('name', 'eq', states('select.alarm_clock_media_player_' ~ alarm_type))
          | map(attribute='entity_id') | join %}
      {{ media_player if mass == '' else mass }}
    playlist: "{{ states('select.alarm_clock_sound_' ~ alarm_type) }}"
    volume: "{{ states('input_number.alarm_clock_volume_' ~ alarm_type) | float(-1) }}"
    media_url: >
      {% set playlist_path = states('input_text.base_url') ~ '/local/alarm_clock_sounds/' %}
      {% if playlist == 'Media' %} {{ states('select.alarm_clock_media_' ~ alarm_type) }}
      {% elif playlist in state_attr('sensor.alarm_clock_soundlist', 'soundlist') %}
        {{ playlist_path ~ playlist | lower ~ '.mp3' }}
      {% else %} {{ playlist_path ~ 'digital.mp3' }}
      {% endif %}
  sequence:
    # wait until any announcements are done playing
    - if:
        - condition: state
          entity_id: input_boolean.tts
          state: "on"
      then:
        - action: browser_mod.notification
          data:
            duration: 10000
            message: "Alarm clock waiting for announcements to finish."

        - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
          timeout:
            minutes: 5

        - delay: # delay to allow media players to reset volumes before playing alarm clock
            seconds: 5

    # reset alarm clock failed
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.alarm_clock_failed

    - action: script.media_player_save_volumes
      data:
        entity_id: "{{ media_player }}"
        source: alarm_clock
      continue_on_error: true

    # allows notification to be sent to turn off alarm before playing
    # alarm time is effectively alarm set time plus this delay
    - if: "{{ is_state('input_boolean.alarm_clock_test_play', 'off') }}"
      then:
        - delay: "{{ states('input_number.alarm_clock_play_delay') | int(0) }}"

    - if:
        - condition: state
          entity_id: switch.alarm_clock_snooze
          state: "on"
      then:
        - wait_for_trigger:
            - trigger: state
              entity_id: switch.alarm_clock_snooze
              to: "off"
          timeout:
            minutes: 60
          continue_on_timeout: false

    - if:
        - condition: template
          alias: "Media player or media player group member not available"
          value_template: >
            {{ expand(state_attr(media_player, 'entity_id')) | map(attribute='entity_id')
                | reject('has_value') | list | count > 0 }}
      then:
        - action: input_boolean.turn_on
          target:
            entity_id: input_boolean.alarm_clock_failed
      else:
        - variables:
            stop_players: > #BITWISE
              {% set players = namespace(entity_id=[]) %}
              {% for item in expand(state_attr(media_player, 'entity_id'))
                  | selectattr('state', 'in', ['playing', 'paused', 'buffering', 'on']) %}
                {% if item.attributes.supported_features | bitwise_and(4096) %}
                  {% set players.entity_id = players.entity_id + [item.entity_id] %}
                {% endif %}
              {% endfor %}
              {{ players.entity_id }}

        # if an alarm clock media player is playing stop it so we don't get a volume jump
        - if: "{{ stop_players | count > 0 }}"
          then:
            - action: media_player.media_stop
              target:
                entity_id: "{{ stop_players }}"
              continue_on_error: true

        - wait_template: "{{ not is_state(media_player, 'playing') }}"
          timeout: # wait for alarm clock media players to stop if to avoid volume jump, players auto off
            seconds: 15

        - action: media_player.volume_set #BLOOP set volume to 0 before setting volume to avoid google volume pops
          target:
            entity_id: "{{ media_player }}"
          data:
            volume_level: 0
          continue_on_error: true

        - delay: 1 # allow volumes to set

        - if: "{{ mass_player in state_attr('group.mass_media_players', 'entity_id') }}"
          then:
            - action: music_assistant.play_media
              target:
                entity_id: "{{ mass_player }}"
              data:
                media_id: "{{ media_url }}"
                media_type: playlists
                enqueue: play
              continue_on_error: true

            - action: media_player.repeat_set
              target:
                entity_id: "{{ mass_player }}"
              data:
                repeat: one
              continue_on_error: true
          else:
            # default to local media file
            - action: media_player.play_media
              target:
                entity_id: "{{ media_player }}"
              data:
                media_content_id: "{{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/digital.mp3' }}"
                media_content_type: music
                enqueue: replace

        - wait_template: "{{ is_state(media_player, 'playing') }}"
          timeout: 15

        - if: "{{ not wait.completed }}"
          then:
            - action: input_boolean.turn_on
              entity_id: input_boolean.alarm_clock_failed
          else:
            #BLOOP set volume after play starts to avoid google bloop
            - action: script.turn_on
              target:
                entity_id: script.media_player_set_volumes
              data:
                variables:
                  entity_id: "{{ media_player }}"
                  source: alarm_clock
