###################################################################################################
## Alarm Clock Play
###################################################################################################
alarm_clock_play:
  alias: "Alarm Clock Play"
  description: "Play alarm clock."
  icon: mdi:alarm-note
  mode: restart
  max_exceeded: silent
  variables:
    alarm_type: "{{ states('input_select.alarm_clock_type') }}"
    media_type: "{{ states('select.alarm_clock_media_' ~ alarm_type) | lower }}"
    media_id: >
      {% set media_path = states('sensor.hass_base_url') ~ '/local/alarm_clock_sounds/' %}
      {% if media_type in ['artist', 'album', 'playlist', 'radio', 'track'] %}
        {{ states('select.alarm_clock_' ~ media_type ~ '_' ~ alarm_type) }}
      {% elif media_type | title in state_attr('sensor.alarm_clock_soundlist', 'soundlist') %}
        {{ media_path ~ media_type | lower ~ '.mp3' }}
      {% else %} {{ media_path ~ 'digital.mp3' }}
      {% endif %}
    volume: "{{ states('input_number.alarm_clock_volume_' ~ alarm_type) | int(-1) }}"
    media_player: "{{ states('sensor.alarm_clock_active_media_player') }}"
    #MASS use mass player for media play, default to ha player
    mass_player: >
      {% set mass = expand('group.mass_media_players')
          | selectattr('name', 'eq', states('select.alarm_clock_speaker_' ~ alarm_type))
          | map(attribute='entity_id') | join %}
      {{ media_player if mass == '' else mass }}
    media_players: >
      {% if media_player != '' %}
        {% if is_state_attr(media_player, 'type', 'group') %}
          {{ state_attr('sensor.' ~ states[media_player].object_id, 'entity_id') }}
        {% else %} {{ [media_player] }}
        {% endif %}
      {% else %} {{ none }}
      {% endif %}
  sequence:
    # wait until any announcements are done playing
    - if:
        - condition: state
          entity_id: input_boolean.tts
          state: "on"
      then:
        - action: browser_mod.notification
          data:
            duration: 10000
            message: "Alarm clock waiting for announcements to finish."

        - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
          timeout:
            minutes: 5

        - delay: # delay to allow media players to reset volumes before playing alarm clock
            seconds: 5

    # reset alarm clock failed
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.alarm_clock_failed

    - action: script.media_player_save_volumes
      data:
        entity_id: "{{ media_player }}"
        source: alarm_clock
      continue_on_error: true

    # allows notification to be sent to turn off alarm before playing
    # alarm time is effectively alarm set time plus this delay
    - if: "{{ is_state('input_boolean.alarm_clock_test_play', 'off') }}"
      then:
        - delay: "{{ states('input_number.alarm_clock_play_delay') | int(0) }}"

    - if:
        - condition: state
          entity_id: switch.alarm_clock_snooze
          state: "on"
      then:
        - wait_for_trigger:
            - trigger: state
              entity_id: switch.alarm_clock_snooze
              to: "off"
          timeout:
            minutes: 60
          continue_on_timeout: false

    - if:
        - condition: template
          alias: "Media player or media player group member not available"
          value_template: >
            {{ expand(state_attr(media_player, 'entity_id')) | map(attribute='entity_id')
                | reject('has_value') | list | count > 0 }}
      then:
        - action: input_boolean.turn_on
          target:
            entity_id: input_boolean.alarm_clock_failed
      else:
        - if: "{{ not states(media_player) in ['idle', 'off', 'standby'] }}"
          then:
            # turn off alarm clock media player so we don't get a volume jump, other group players turn off
            - action: script.turn_media_player_off
              data:
                entity_id: "{{ media_player }}"
              continue_on_error: true

        - wait_template: "{{ is_state(media_player, 'off') }}"
          timeout: # wait for alarm clock media players to stop if to avoid volume jump, players auto off
            seconds: 15

        #NOTE set volume to 0 before setting volume to avoid google volume pops
        - action: media_player.volume_set
          target:
            entity_id: "{{ media_player }}"
          data:
            volume_level: 0
          continue_on_error: true

        - if: "{{ media_type == 'video' }}"
          then:
            - if: "{{ media_player in state_attr('group.cast_media_players', 'entity_id') }}"
              then:
                - variables:
                    link: !include /config/include/media_preset_video_link.yaml

                - action: media_player.play_media
                  target:
                    entity_id: "{{ media_player }}"
                  data:
                    media_content_type: cast
                    media_content_id: '{{ ''{"app_name": "youtube","media_id": "'' ~ link ~ ''"}'' }}'
                    enqueue: replace
                    extra:
                      autoplay: true
          else:
            - if: "{{ mass_player in state_attr('group.mass_media_players', 'entity_id') }}"
              then:
                - if: "{{ not is_state('input_select.alarm_clock_media_' ~ alarm_type, 'Radio') }}"
                  then:
                    - action: media_player.shuffle_set
                      target:
                        entity_id: "{{ mass_player }}"
                      data:
                        shuffle: false #NEXT
                      continue_on_error: true

                    - action: media_player.repeat_set
                      target:
                        entity_id: "{{ mass_player }}"
                      data:
                        repeat: all # always repeat for alarm clock
                      continue_on_error: true

                - action: music_assistant.play_media
                  target:
                    entity_id: "{{ mass_player }}"
                  data:
                    media_id: "{{ media_id }}"
                    media_type: "{{ media_type }}"
                    enqueue: play
                    radio_mode: false #NEXT
                  continue_on_error: true
              else:
                - action: system_log.write
                  data:
                    logger: "{{ this.entity_id }}"
                    level: critical
                    message: |-
                      Music Assistant media player is not available.
                      Playing default media on Home Assistant media player.

                # default to local media file
                - action: media_player.play_media
                  target:
                    entity_id: "{{ media_player }}"
                  data:
                    media_content_id: "{{ states('sensor.hass_base_url') ~ '/local/alarm_clock_sounds/digital.mp3' }}"
                    media_content_type: music
                    enqueue: play
                  continue_on_error: true

        - wait_template: "{{ is_state(media_player, 'playing') }}"
          timeout: 15

        #NOTE set volume after play starts to avoid google bloop
        - action: script.turn_on
          target:
            entity_id: script.media_player_set_volumes
          data:
            variables:
              entity_id: "{{ media_player }}"
              source: alarm_clock
              volume: "{{ volume }}"
          continue_on_error: true

        #MASS media can play temporarily then stop
        - delay: 5

        - if: "{{ not is_state(media_player, 'playing') }}"
          then:
            - action: input_boolean.turn_on
              entity_id: input_boolean.alarm_clock_failed

            - action: script.turn_on
              target:
                entity_id: script.media_player_set_volumes
              data:
                variables:
                  entity_id: "{{ media_player }}"
                  force_reset: true
