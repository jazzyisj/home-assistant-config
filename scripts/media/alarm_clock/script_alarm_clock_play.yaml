###############################################################################
## Alarm Clock Play
###############################################################################
alarm_clock_play:
  alias: "Alarm Clock Play"
  description: "Play alarm clock."
  icon: mdi:alarm-note
  mode: restart
  fields:
    alarm_type:
      description: "Alarm type to play (auto, manual, nap)."
      example: "nap"
    first_run:
      description: "First run of alarm play."
      example: "true"
    resume:
      description: "Resuming from tts play."
      example: "true"
  variables:
    first_run: "{{ first_run|default(false) }}"
    resume: "{{ resume|default(false) }}"
    alarm_types: "{{ ['auto','manual','nap'] }}"
    player_name: "{{ states('select.alarm_clock_media_player_' ~ alarm_type) }}"
    media_player: >
      {{ expand(state_attr('group.alarm_clock_media_players','entity_id'))
          |selectattr('name','eq',player_name)|map(attribute='entity_id')|join('') }}
    media_players: >
      {{ state_attr(media_player,'group_members')
          if is_state_attr(media_player,'is_group',true) else [media_player] }}
    playlist: "{{ states('select.alarm_clock_sound_' ~ alarm_type) }}"
    volume: "{{ states('input_number.alarm_clock_volume_' ~ alarm_type)|float('unknown') }}"
    # if alarm triggers on startup before playlist sensor are populated media_type in alarm_clock_play defaults to a sound
    # becuase the playlist select has not been populated and playlist will be null - default to digital here
    media_url:
      spotify:playlist:37i9dQZF1DXb57FjYWz00c #> #MASS
      # {% if playlist == 'Rooster' %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/rooster.mp3' }}
      # {% elif playlist == 'Loud' %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/loud.mp3' }}
      # {% elif playlist == 'Pager' %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/pager.mp3' }}
      # {% elif playlist == 'Digital' %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/digital.mp3' }}
      # {% elif playlist == 'Gentle' %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/gentle.mp3' }}
      # {% else %} {{ states('input_text.base_url') ~ '/local/alarm_clock_sounds/digital.mp3' }}
      # {% endif %}

  sequence:
    - if:
        - condition: template
          alias: "Alarm type is valid"
          value_template: "{{ alarm_type in alarm_types }}"
      then:
        # only run if another alarm type is not on
        - if: >
            {% set found = namespace(value=0) %}
            {% for type in alarm_types %}
              {% set type = alarm_types[loop.index0] %}
              {% if type != alarm_type and is_state('switch.alarm_clock_' ~ type,'on') %}
                {% set found.value = 1 %}
              {% endif %}
            {% endfor %}
            {{ found.value == 0 }}
          then:
            - wait_template: "{{ is_state('input_boolean.tts','off') }}"
              timeout: 300 # wait if started during tts

            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.alarm_clock_failed

            - if: >
                {{ is_state('switch.alarm_clock_snooze','on')
                    and (not resume or is_state('timer.alarm_clock_snooze','idle')) }}
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.alarm_clock_snooze_stop_action

                - service: switch.turn_off
                  target:
                    entity_id: switch.alarm_clock_snooze

                - service: timer.cancel
                  target:
                    entity_id: timer.alarm_clock_snooze

            - if: "{{ first_run }}"
              then: # save media player volumes before conditions so values are set for alarm_clock_stop
                - service: script.media_player_save_volumes
                  data:
                    entity_id: "{{ media_players }}"
                    source: alarm_clock

            # only on first run so changes on main UI during alarm aren't bypassed on restart
            - if: "{{ first_run }}"
              then:
                - if: "{{ is_state('switch.alarm_clock_' ~ alarm_type,'off') }}"
                  then:
                    - service: switch.turn_on
                      target:
                        entity_id: "switch.alarm_clock_{{ alarm_type }}"

                # allows app notification to be sent or turn off alarm before playing
                # alarm time is effectively alarm set time plus this delay
                - if: "{{ is_state('input_boolean.alarm_clock_test_play','off') }}"
                  then:
                    - delay:
                        seconds: "{{ states('input_number.alarm_clock_play_delay')|int(0) }}"

            - condition: state # don't continue if alarm has been snoozed
              entity_id: switch.alarm_clock_snooze
              state: "off"

            # wait until any announcements are done playing
            - if:
                - condition: state
                  entity_id: input_boolean.tts
                  state: "on"
              then:
                - service: browser_mod.notification
                  data:
                    message: "Alarm clock waiting for announcements to finish."

                - wait_template: "{{ is_state('input_boolean.tts','off') }}"
                  timeout:
                    minutes: 5

                - delay: # delay to allow media players to reset volumes before playing alarm clock
                    seconds: 5

            - if:
                - condition: template
                  alias: "Media player or media player group member not available"
                  value_template: >
                    {{ states(media_player) in ['unknown','unavailable']
                        and expand(media_players)|selectattr('state','in',['unknown','unavailable'])
                          |map(attribute='entity_id')|list|count > 0 }}
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.alarm_clock_failed
              else:
                - variables:
                    players_stop: > #BITWISE
                      {% set players = namespace(entity_id=[]) %}
                      {% for item in expand(state_attr('sensor.alarm_clock_media_player','entity_id'))
                          |selectattr('state','in',['playing','paused','buffering','on']) %}
                        {% if item.attributes.supported_features|bitwise_and(4096) %}
                          {% set players.entity_id = players.entity_id + [item.entity_id] %}
                        {% endif %}
                      {% endfor %}
                      {{ players.entity_id }}

                - service: automation.turn_off # prevent trigger when alarm clock resumes from tts
                  target:
                    entity_id: &alarm_automations
                      - automation.alarm_clock_media_player_turned_off
                      - automation.alarm_clock_snooze_on

                # if the alarm clock media player is playing stop it so we don't get a volume jump
                - if: "{{ players_stop|count > 0 }}"
                  then:
                    - service: media_player.media_stop
                      target:
                        entity_id: "{{ players_stop }}"

                - service: media_player.volume_set #BLOOP set volume to 0 before setting volume to avoid google volume pops
                  target:
                    entity_id: "{{ media_players }}"
                  data:
                    volume_level: 0

                - delay: 1 # allow volumes to set

                - wait_template: "{{ not is_state(media_player,'playing') }}"
                  timeout: # wait for alarm clock media players to stop if to avoid volume jump, players auto off
                    seconds: 15

                - service: automation.turn_on # turn alarm clock media player automations back on
                  target:
                    entity_id: *alarm_automations

                - service: mass.queue_command
                  target:
                    entity_id: "{{ media_player }}"
                  data:
                    command: play_media
                    uri: "{{ media_url }}"
                    enqueue_mode: play
                    repeat_mode: one

                - wait_template: "{{ is_state(media_player,'playing') }}"
                  timeout: 15

                - if: "{{ not is_state(media_player,'playing') }}"
                  then:
                    - service: input_boolean.turn_on
                      entity_id: input_boolean.alarm_clock_failed
                  else:
                    - service: input_text.set_value
                      target:
                        entity_id: input_text.active_alarm_clock_media_player
                      data:
                        value: "{{ media_player }}"

                    #BLOOP set volume after play starts to avoid google bloop
                    - service: script.turn_on
                      target:
                        entity_id: script.media_player_set_volumes
                      data:
                        variables:
                          entity_id: "{{ media_players }}"
                          source: alarm_clock
      else:
        - service: system_log.write #IDEA where else do this?
          data:
            logger: "{{ this.entity_id }}"
            level: warning
            message: "Invalid alarm type."
