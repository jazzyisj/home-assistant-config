###############################################################################
## Alarm Clock Stop
###############################################################################
alarm_clock_stop:
  alias: 'Alarm Clock Stop'
  description: 'Turn off alarm clock.'
  icon: mdi:alarm-note-off
  max_exceeded: silent
  fields:
    alarm_type:
      description: 'Alam clock type.'
      example: 'nap'
  variables:
    alarm_types: "{{ ['auto','manual','nap'] }}"
    alarm_type: "{{ alarm_type|default(state_attr('binary_sensor.alarm_clock','alarm_type')) }}"
    media_type: >
      {% if alarm_type in alarm_types %}
        {{ states('input_select.alarm_clock_sound_' ~ alarm_type)|lower }}
      {% endif %}
    media_players: >
      {% set alarm_player = states('input_text.active_alarm_clock_media_player') %}
      {% if alarm_player|lower not in ['off','','unknown','unavailable','none'] %}
        {% set player = alarm_player.split('.')[1] %}
        {% if is_state_attr('media_player.' ~ player,'type','group') %}
          {% set media_players = state_attr('sensor.' ~ player,'players') %}
        {% endif %}
        {{ [alarm_player] if media_players|count == 0 else media_players }}
      {% endif %}
  sequence:
    - choose:
        - conditions:
            - condition: template
              alias: 'Alarm type is valid'
              value_template: '{{ alarm_type in alarm_types }}'
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      alias: 'Alarm type is not active alarm'
                      value_template: "{{ alarm_type != state_attr('binary_sensor.alarm_clock','alarm_type') }}"
                  sequence:
                    - service: switch.turn_off
                      alias: 'Turn off not active alarm clock switch'
                      target:
                        entity_id: 'switch.alarm_clock_{{ alarm_type }}'
              default:
                - choose:
                    - conditions: "{{ alarm_type == 'nap' }}"
                      sequence:
                        - service: timer.cancel
                          target:
                            entity_id: timer.alarm_clock_nap

                        - service: input_boolean.turn_off
                          target:
                            entity_id: input_boolean.alarm_clock_nap

                - service: script.media_players_off
                  data:
                    media_players: '{{ media_players }}'

                - service: timer.cancel
                  target:
                    entity_id: timer.alarm_clock_snooze

                - service: input_boolean.turn_off
                  target:
                    entity_id:
                      - input_boolean.resume_alarm_clock
                      - input_boolean.alarm_clock_test_play

                - service: switch.turn_off
                  target:
                    entity_id: switch.alarm_clock_snooze

                - service: input_text.set_value
                  target:
                    entity_id: input_text.active_alarm_clock_media_player
                  data:
                    value: 'off'

                - choose: #RADIO until streaming radio media player
                    - conditions: "{{ media_type == 'radio' }}"
                      sequence:
                        - service: input_boolean.turn_off
                          target:
                            entity_id: input_boolean.radio

                - service: script.media_players_set_volumes
                  data:
                    media_players: "{{ state_attr('sensor.media_players','single') }}"
                    source: alarm_clock_off

                # turn off at end so binary_sensor.alarm_clock doesn't turn off and resume media before we're done
                - service: switch.turn_off
                  target:
                    entity_id: 'switch.alarm_clock_{{ alarm_type }}'

                - choose:
                    - conditions: "{{ alarm_type == 'manual' and is_state('input_boolean.alarm_clock_manual_repeat','off') }}"
                      sequence:
                        - service: input_boolean.turn_off
                          target:
                            entity_id: input_boolean.alarm_clock_manual
      default:
        - service: system_log.write
          data:
            level: error
            logger: '{{ this.entity_id }}'
            message: 'No active alarm or invalid alarm type.'
