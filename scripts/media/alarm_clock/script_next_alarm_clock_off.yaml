###############################################################################
## Script - Next Alarm Clock Off
###############################################################################
next_alarm_clock_off:
  alias: 'Next Alarm Clock Off'
  description: 'Turn off next alarm clock.'
  mode: queued
  variables:
    source: "{{ state_attr('sensor.alarm_clock_next_alarm','source') }}"
    duration: >
      {% if states('sensor.alarm_clock_next_alarm')|lower not in ['','off','unknown','unavailable','none'] %}
        {{ (states('sensor.alarm_clock_next_alarm')|as_timestamp - now().timestamp())|int(-1) }}
      {% else %} 0
      {% endif %}
  sequence:
    - condition: template
      alias: 'Next alarm state is a valid time'
      value_template: >
        {{ states('sensor.alarm_clock_next_alarm')|lower not in ['','off','unknown','unavailable','none'] }}

    - choose:
        - conditions: "{{ source == 'auto' }}"
          sequence:
            - service: timer.start
              target:
                entity_id: >
                  {% if is_state('input_select.occupancy_mode','Guest') %} timer.guest_alarm_reset
                  {% elif (is_state('binary_sensor.work_today','on')
                      if now().day == as_datetime(states('sensor.alarm_clock_next_alarm')).day
                        else is_state('binary_sensor.work_tomorrow','on')) %} timer.auto_workday_alarm_reset
                  {% else %} timer.auto_weekend_alarm_reset
                  {% endif %}
              data:
                duration:
                  seconds: '{{ duration }}'

            - service: input_boolean.turn_off
              target:
                entity_id: >
                  {% if is_state('input_select.occupancy_mode','Guest') %} input_boolean.alarm_clock_guest
                  {% elif (is_state('binary_sensor.work_today','on')
                      if now().day == as_datetime(states('sensor.alarm_clock_next_alarm')).day
                        else is_state('binary_sensor.work_tomorrow','on')) %} input_boolean.alarm_clock_auto_workdays
                  {% else %} input_boolean.alarm_clock_auto_weekends
                  {% endif %}

        - conditions: "{{ source == 'manual' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.alarm_clock_manual

            - service: timer.start
              target:
                entity_id: timer.manual_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

        - conditions: "{{ source == 'nap' }}"
          sequence: # no reset for nap alarm
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.alarm_clock_nap

        - conditions: "{{ source == 'jphone' }}"
          sequence:
            - service: timer.start
              target:
                entity_id: timer.jphone_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.jphone_alarm_clock_enabled

        - conditions: "{{ source == 'sphone' }}"
          sequence:
            - service: timer.start
              target:
                entity_id: timer.sphone_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.sphone_alarm_clock_enabled

        - conditions: "{{ source == 'dining_room_display' }}"
          sequence:
            - service: timer.start
              target:
                entity_id: timer.dining_room_display_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.dining_room_display_alarm_enabled

        - conditions: "{{ source == 'bedroom_display' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.bedroom_display_alarm_enabled

            - service: timer.start
              target:
                entity_id: timer.bedroom_display_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

        - conditions: "{{ source == 'bathroom_speaker' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.bathroom_speaker_alarm_enabled

            - service: timer.start
              target:
                entity_id: timer.bathroom_speaker_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

        - conditions: "{{ source == 'living_room_speaker' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.living_room_speaker_alarm_enabled

            - service: timer.start
              target:
                entity_id: timer.living_room_speaker_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

        - conditions: "{{ source == 'laundry_room_speaker' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.laundry_room_speaker_alarm_enabled

            - service: timer.start
              target:
                entity_id: timer.laundry_room_speaker_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

        - conditions: "{{ source == 'garage_speaker' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.garage_speaker_alarm_enabled

            - service: timer.start
              target:
                entity_id: timer.garage_speaker_alarm_reset
              data:
                duration:
                  seconds: '{{ duration }}'

    - condition: state
      entity_id: binary_sensor.bedtime_active
      state: 'on'

    - service: script.bedtime_notification
