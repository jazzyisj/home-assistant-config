###############################################################################
## Media Player Save Volumes
## #NOTE single players only, group volumes are determined by individual media players
###############################################################################
media_players_save_volumes:
  alias: 'Media Players Save Volumes'
  description: 'Save media player volumes.'
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 5
  trace:
    stored_traces: 20
  fields:
    source:
      description: 'Source calling this script.'
      example: 'tts'
    media_type: # only used for reset
      description: 'Media type if applicable.'
      example: 'radio'
    media_players:
      description: 'List of media players.'
      example: 'media_player.dining_room_hub, media_player.bedroom_hub'
    volume:
      description: 'Volume to save'
      example: '0.5'
  variables:
    media_type: '{{ media_type|default(none) }}'
    media_types: "{{ state_attr('sensor.media_types','media_types') }}"
    volume: '{{ volume|default(-1) }}'
  sequence:
    - variables: #VAR variables in sequence to override field
        media_players: >
          {% set media_players = media_players|default(state_attr('group.single_media_players','entity_id')) %}
          {% if media_players != none and not (media_players is iterable and (media_players is not string and media_players is not mapping)) %}
            {% set media_players = [media_players] %}
          {% endif %}
          {{ media_players }}

    - condition: template
      value_template: '{{ media_players|count > 0 }}'

    - repeat:
        while: '{{ repeat.index <= media_players|count }}'
        sequence:
          - variables:
              player: '{{ media_players[repeat.index-1] }}'
              player_name: "{{ player.split('.')[1] }}"
              # if tts and phone one, use phone vols for tts restore in case phone off before tts
              volume_entity: >
                {% if source == 'reset' and is_state('binary_sensor.mobile_phone_in_use','on') %} input_number.{{ player_name ~ '_phone' }}
                {% elif source == 'reset' %} input_number.{{ player_name ~ '_current_volume' }}
                {% else %} input_number.{{ player_name ~ '_' ~ source }}
                {% endif %}
              default_volume: > # volume default 0.5/0.5 = 1 (no adjustment)
                {% set volume = states('input_number.' ~ player_name ~ '_default_volume')|float(-1) %}
                {{ volume if volume > 0 else 0.5 }}
              volume_factor: >
                {% if default_volume > 0 and is_state('input_boolean.volume_balancing','on') %}
                  {{ 1/(0.5/default_volume) ** states('input_number.volume_log_factor')|float }}
                {% else %} 1 {# no adjustment #}
                {% endif %}
              media_adjustment: >
                {% if media_type in media_types and is_state('input_boolean.media_type_volume_adjustments','on') %}
                  {% set media_type =  ('spotify' if 'spotify' in media_type else media_type) %}
                  {{ 1 + states('input_number.' ~ media_type ~ '_volume_adjustment')|float(-1) }}
                {% else %} 1 {# no adjustment #}
                {% endif %}
              # if tts and phone one, use phone vols for tts restore in case phone off before tts
              current_volume: >
                {% if volume >= 0 %}
                  {{ volume * media_adjustment * volume_factor }}
                {% elif source == 'tts' and is_state('binary_sensor.mobile_phone_in_use','on') %}
                  {{ states('input_number.' ~ player_name ~ '_phone')|float(-1) }}
                {% else %}
                  {{ states('input_number.' ~ player_name ~ '_current_volume')|float(-1) }}
                {% endif %}
              quiet_volume: >
                {% set volume = (states('input_number.tv_quiet_volume')|int/100)|float(-1)
                    if state_attr(player,'device_class') == 'tv'
                      else (states('input_number.speaker_quiet_volume')|int/100)|float(-1) %}
                {{ volume * media_adjustment * volume_factor }}
              save_volume: >
                {% if source == 'reset' %}
                  {% if is_state('binary_sensor.quiet_time','on') %}
                    {% set volume = quiet_volume if current_volume > quiet_volume
                        else current_volume if current_volume > 0 else quiet_volume %}
                  {% else %} {% set volume = default_volume %}
                  {% endif %}
                {% else %} {% set volume = current_volume %}
                {% endif %}
                {{ 1.00 if volume > 1 else 0 if volume < 0 else '%0.2f'|format(volume)|float(-1) }}

          - choose:
              - conditions: '{{ save_volume >= 0 }}'
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: '{{ volume_entity }}'
                    data:
                      value: '{{ save_volume }}'
