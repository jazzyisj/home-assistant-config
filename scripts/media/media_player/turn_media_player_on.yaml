###############################################################################
## Turn Media Player On
###############################################################################
turn_media_player_on:
  alias: "Turn Media Player On"
  description: "Turn on media players, avoid google bloop."
  mode: queued
  fields:
    entity_id:
      description: "List of media players to turn on"
      example: "media_player.dining_room_hub"
    ignore_players:
      description: "List of media players to ignore"
      example: "['media_player.bedroom_tv', 'media_player.office_tv']"
  variables:
    media_players: >
      {% set entity_id = entity_id | default(state_attr('group.single_media_players', 'entity_id')) %}
      {% if entity_id is iterable and (entity_id is string and entity_id is not mapping) %}
        {% set entity_id = [entity_id] %}
      {% endif %}
      {{ entity_id }}
    group_players: >
      {% set groups = namespace(entity_id=[]) %}
      {% for player in media_players %}
        {% if is_state_attr(player, 'type', 'group') %}
          {% set groups.entity_id = groups.entity_id
            + state_attr('sensor.' ~ player.split('.')[1], 'entity_id') %}
        {% endif %}
      {% endfor %}
      {{ groups.entity_id }}
    all_players: > #TV can't set volume on LG tvs when off
      {% set all = expand(media_players) + expand(group_players) %}
      {{ all | rejectattr('attributes.device_class', 'eq', 'tv')
          | rejectattr('entity_id', 'in', ignore_players | default([]))
          | map(attribute='entity_id') | unique | list }}
  sequence:
    - if: "{{ all_players | count > 0 }}"
      then:
        - service: media_player.volume_set
          target:
            entity_id: "{{ all_players }}"
          data:
            volume_level: 0

        - delay: 5 # allow volumes to set

        #ISSUE all_players - script stalls if group players included in media_player.turn_on
        - variables:
            players_on: > #BITWISE
              {% set players = namespace(entity_id=[]) %}
              {% for item in expand(media_players)
                  | rejectattr('entity_id', 'search', '_internal|_external')
                  | rejectattr('state', 'ne', 'off') %}
                {% if item.attributes.supported_features | bitwise_and(128) %}
                  {% set players.entity_id = players.entity_id + [item.entity_id] %}
                {% endif %}
              {% endfor %}
              {{ players.entity_id }}

        - if: "{{ players_on | count > 0 }}"
          then:
            - service: media_player.turn_on
              target:
                entity_id: "{{ players_on }}"
              continue_on_error: true

        #TODO - issue on MASS
        #WARNING (Thread-19) [pychromecast.socket_client] [Dining Room Hub(192.168.1.196):8009] Error communicating with socket, resetting connection

        # 2023-11-12 10:29:20.609 ERROR (MainThread) [homeassistant.components.script.turn_media_player_on] Turn Media Player On: Error executing script. Unexpected error for if at pos 1:
        # Traceback (most recent call last):
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 468, in _async_step
        #     await getattr(self, handler)()
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 951, in _async_if_step
        #     await self._async_run_script(if_data["if_then"])
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 1069, in _async_run_script
        #     await self._async_run_long_action(
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 666, in _async_run_long_action
        #     return long_task.result()
        #            ^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 1578, in async_run
        #     return await asyncio.shield(run.async_run())
        #            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 420, in async_run
        #     await self._async_step(log_exceptions=False)
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 470, in _async_step
        #     self._handle_exception(
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 493, in _handle_exception
        #     raise exception
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 468, in _async_step
        #     await getattr(self, handler)()
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 951, in _async_if_step
        #     await self._async_run_script(if_data["if_then"])
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 1069, in _async_run_script
        #     await self._async_run_long_action(
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 666, in _async_run_long_action
        #     return long_task.result()
        #            ^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 1578, in async_run
        #     return await asyncio.shield(run.async_run())
        #            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 420, in async_run
        #     await self._async_step(log_exceptions=False)
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 470, in _async_step
        #     self._handle_exception(
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 493, in _handle_exception
        #     raise exception
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 468, in _async_step
        #     await getattr(self, handler)()
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 704, in _async_call_service_step
        #     response_data = await self._async_run_long_action(
        #                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/script.py", line 666, in _async_run_long_action
        #     return long_task.result()
        #            ^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/core.py", line 2035, in async_call
        #     response_data = await coro
        #                     ^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/core.py", line 2072, in _execute_service
        #     return await target(service_call)
        #            ^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/entity_component.py", line 235, in handle_service
        #     return await service.entity_service_call(
        #            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/service.py", line 876, in entity_service_call
        #     response_data = await _handle_entity_call(
        #                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/helpers/service.py", line 948, in _handle_entity_call
        #     result = await task
        #              ^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/components/media_player/__init__.py", line 715, in async_turn_on
        #     await self.hass.async_add_executor_job(self.turn_on)
        #   File "/usr/local/lib/python3.11/concurrent/futures/thread.py", line 58, in run
        #     result = self.fn(*self.args, **self.kwargs)
        #              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   File "/usr/src/homeassistant/homeassistant/components/cast/media_player.py", line 493, in turn_on
        #     quick_play(chromecast, "default_media_receiver", app_data)
        #   File "/usr/local/lib/python3.11/site-packages/pychromecast/quick_play.py", line 78, in quick_play
        #     controller.quick_play(**data)
        #   File "/usr/local/lib/python3.11/site-packages/pychromecast/controllers/media.py", line 547, in quick_play
        #     raise PyChromecastError()  # pylint: disable=broad-exception-raised
        #     ^^^^^^^^^^^^^^^^^^^^^^^^^
        # pychromecast.error.PyChromecastError

        # keep script on until all players are on, volumes are 0
        - wait_template: "{{ expand(players_on) | selectattr('state', 'eq', 'off') | list | count == 0 }}"
          timeout: 5

        - wait_template: "{{ expand(players_on) | selectattr('attributes.volume_level', 'ne', 0) | list | count == 0 }}"
          timeout: 5
