###################################################################################################
## Turn Media Player On
###################################################################################################
turn_media_player_on:
  alias: "Turn Media Player On"
  description: "Turn on media players, avoid google bloop."
  mode: queued
  fields:
    entity_id:
      description: "List of media players to turn on"
      example: "media_player.dining_room_hub"
    ignore_players:
      description: "List of media players to ignore"
      example: "['media_player.bedroom_tv', 'media_player.office_tv']"
  variables:
    ignore_players: "{{ ignore_players | default([]) }}"
    media_players: >
      {% from 'media.jinja' import single_players %}
      {% set entities = single_players(entity_id) | from_json %}
      {% set ignore_players = single_players(ignore_players|default([])) | from_json %}
      {% set entities = expand(entities)
          | rejectattr('state', 'in', ['playing', 'paused', 'buffering', 'on', 'idle'])
          | rejectattr('entity_id', 'in', ignore_players)
          | map(attribute='entity_id') | list %}
      {% if entities | count == 1 %}
        {% if is_state_attr(entities[0], 'type', 'group') %}
          {% set entities = state_attr('sensor.' ~ entities[0].split('.')[1], 'entity_id') %}
        {% endif %}
      {% endif %}
      {{ entities }}
    #TV webOS - Error calling async_set_volume_level for device Deck TV: Device is off and cannot be controlled
    volume_players: >
      {% set ignored = expand(media_players)
          | selectattr('attributes.device_class', 'eq', 'tv')
          | selectattr('state', 'eq', 'off')
          | map(attribute='entity_id') | list %}
      {{ expand(media_players) | rejectattr('entity_id', 'in' , ignored)
          | map(attribute='entity_id') | list }}
  sequence:
    - if: "{{ volume_players | count > 0 }}"
      then:
        - action: media_player.volume_set
          target:
            entity_id: "{{ volume_players }}"
          data:
            volume_level: 0 # prevent google bloop
          continue_on_error: true

        - delay: 1 # allow volumes to set

    - if: "{{ media_players | count > 0 }}"
      then:
        - variables:
            players_on: > #BITWISE
              {% set players = namespace(entity_id=[]) %}
              {% for item in expand(media_players)
                  | rejectattr('entity_id', 'search', '_internal|_external')
                  | rejectattr('state', 'ne', 'off') %}
                {% if item.attributes.supported_features | bitwise_and(128) %}
                  {% set players.entity_id = players.entity_id + [item.entity_id] %}
                {% endif %}
              {% endfor %}
              {{ players.entity_id }}

        - if: "{{ players_on | count > 0 }}"
          then:
            - action: media_player.turn_on
              target:
                entity_id: "{{ players_on }}"
              continue_on_error: true

        # keep script on until all players are on, volumes are 0
        - wait_template: "{{ expand(media_players) | selectattr('state', 'eq', 'off') | list | count == 0 }}"
          timeout: 5

        - wait_template: "{{ expand(media_players) | selectattr('attributes.volume_level', 'ne', 0) | list | count == 0 }}"
          timeout: 5
