###################################################################################################
## Reset Media Player Volumes
###################################################################################################
media_player_reset_volumes:
  alias: "Media Player Reset Volumes"
  description: "Reset media player volumes."
  icon: mdi:play-box-multiple-outline
  max_exceeded: silent
  fields:
    force_reset:
      description: "Force volume reset even if playing."
      example: "true"
  variables:
    force_reset: "{{ force_reset | default(false) }}"
    #TV roku doesn't support volume set
    #TV webOS no volume attribute if tv off - error
    active_players: >
      {{ expand('group.single_media_players')
          | selectattr('attributes.device_class', 'defined')
          | rejectattr('attributes.device_class', 'eq', 'tv')
          | selectattr('state', 'in', ['playing', 'paused', 'buffering', 'on'])
          | map(attribute='entity_id') | list }}
    inactive_players: >
      {{ expand('group.single_media_players')
          | selectattr('attributes.device_class', 'defined')
          | rejectattr('attributes.device_class', 'eq', 'tv')
          | selectattr('state', 'in', ['off', 'idle', 'standby'])
          | map(attribute='entity_id') | list }}
    google_home_alarms: >
      {{ expand(integration_entities('google_home'))
          | selectattr('domain', 'eq', 'number')
          | selectattr('entity_id', 'contains', 'alarm_volume')
          | map(attribute='entity_id') | list }}
  sequence:
    - if:
        - condition: state
          entity_id: binary_sensor.mobile_phone_in_use
          state: "on"

        - condition: template
          value_template: "{{ active_players | count > 0 }}"
      then:
        - alias: "Store new volumes for active players to restore when phone turns off"
          action: script.media_player_save_volumes
          data:
            entity_id: "{{ active_players }}"
            source: reset
      else:
        - condition: template
          value_template: "{{ active_players | count > 0 }}"

        - alias: "Set new volumes for active players"
          action: script.media_player_set_volumes
          data:
            entity_id: "{{ active_players }}"
            source: reset
            force_reset: "{{ force_reset }}"

    - if:
        - condition: state
          entity_id: binary_sensor.alarm_clock
          state: "on"
      then:
        - alias: "Store new volumes for alarm clock players to restore when alarm clock turns off"
          action: script.media_player_save_volumes
          data:
            entity_id: "{{ state_attr('sensor.alarm_clock_active_media_player', 'entity_id') }}"
            source: reset
          continue_on_error: true

    - if:
        - condition: state
          entity_id: input_boolean.tts
          state: "on"
      then:
        - alias: "Store new volumes for tts players to restore when tts finished"
          action: script.media_player_save_volumes
          data:
            entity_id: "{{ state_attr('sensor.tts_active_media_player', 'entity_id') }}"
            source: reset
          continue_on_error: true

    - if: "{{ inactive_players | count > 0 }}"
      then:
        - alias: "Set new volumes for inactive players"
          action: script.media_player_set_volumes
          data:
            entity_id: "{{ inactive_players }}"
            source: reset
            force_reset: "{{ force_reset }}"

    - if: "{{ google_home_alarms | count > 0 }}"
      then:
        - action: number.set_value
          target:
            entity_id: "{{ google_home_alarms }}"
          data:
            value: "{{ states('input_number.media_default_volume') | int }}"