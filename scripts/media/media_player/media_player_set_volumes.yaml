###################################################################################################
## Set Media Player Volumes
## single players only, group volumes are determined by individual media players
## alarm_clock, tts - no quiet enforcement
## tts_all, phone_all - lower volume during tts play
## source_off - restore saved source volumes
## reset - default/quiet volume
## defaults to reset all media player volumes if no source/media player specified
###################################################################################################
media_player_set_volumes:
  alias: "Media Player Set Volumes"
  description: "Set media player volumes."
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 10
  fields:
    source:
      description: "Source calling this script."
      example: "tts_off"
    force_reset:
      description: "Force volume reset."
      example: "true"
    entity_id:
      description: "Media player list."
      example: "[media_player.dining_room_hub, media_player.kitchen_hub]"
    volume:
      description: "Volume level."
      example: "40"
    quiet_override:
      description: "Override quiet hours limit."
      example: "false"
  sequence:
    - variables:
        source: "{{ source | default('reset') }}"
        source_off: "{{ source in ['tts_off', 'phone_off'] }}"
        force_reset: "{{ force_reset | default(false) }}"
        set_volume: "{{ volume | default(-1) | float(-1) / 100 }}"
        quiet_override: "{{ quiet_override | default(false) or source in ['alarm_clock', 'tts'] }}"
        phone_on: "{{ is_state('binary_sensor.mobile_phone_in_use', 'on') }}"
        speaker_on: "{{ is_state_attr('binary_sensor.mobile_phone_in_use', 'speaker_on', true) }}"
        #TV roku doesn't support volume_set
        #TV exclude TV's (no reset for tts etc.)
        media_players: >
          {% from 'media.jinja' import single_players %}
          {% set ignore_players = ['media_player.office_tv'] if source in ['tv']
              else state_attr('group.tv_media_players', 'entity_id') %}
          {% set entities = expand(single_players(entity_id) | from_json)
              | rejectattr('entity_id', 'in', ignore_players)
              | map(attribute='entity_id') | list %}
          {{ entities }}

    - if: "{{ media_players | count == 0 }}"
      then:
        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

    # do not run if system is muted (kills mute)
    - condition: state
      entity_id: switch.media_mute
      state: "off"

    # filter out muted players so we don't reset mute
    - if: "{{ not force_reset }}"
      then:
        # filter out muted media players so we don't unmute (player must be on for is_volume_muted)
        - variables:
            muted_players: >
              {{ expand(media_players) | selectattr('attributes.is_volume_muted', 'defined')
                  | selectattr('attributes.is_volume_muted', 'eq', true) | map(attribute='entity_id') | list }}
            media_players: >
              {{ expand(media_players) | rejectattr('entity_id', 'in', muted_players) | map(attribute='entity_id') | list }}

    # if source is phone or media when phone is on save current volumes to restore
    - if: "{{ source in ['tts_all', 'phone_all'] or (source == 'media' and phone_on) }}"
      then:
        - action: script.media_player_save_volumes
          data:
            source: "{{ source | replace('_all', '') }}"
            entity_id: "{{ media_players }}"
            volume: "{{ set_volume if source == 'media' else none }}" # save preset volume
          continue_on_error: true

    # don't save tts, alarm_clock, or phone in use volume changes
    - if: >
        {{ source_off or source in ['phone_all', 'tts_all'] or phone_on
            or is_state('input_boolean.tts', 'on')
            or is_state('binary_sensor.alarm_clock', 'on') }}
      then:
        - action: automation.turn_off
          target:
            entity_id: automation.save_media_player_volume
          data:
            stop_actions: false

    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= media_players | count }}"
        sequence:
          - variables:
              player: "{{ media_players[repeat.index - 1] }}"

          - if: "{{ player in state_attr('group.single_media_players', 'entity_id') }}"
            then:
              - variables:
                  player_id: "{{ states[player].object_id }}"
                  source_volume: >
                    {% if source_off %} {{ states('input_number.' ~ player_id ~ '_' ~ source | replace('_off', '')) | float(-1) }}
                    {% else %} -1
                    {% endif %}
              - if:
                  - condition: template
                    alias: "Media player is not unavailable"
                    value_template: "{{ has_value(player) }}"

                  - condition: template
                    alias: "Source volume is not zero if source_off" # user may have adj vol in off state don't override
                    value_template: "{{ source_volume > 0 if source_off else true }}"

                  #BLOOP don't set volumes if media player isn't on to prevent volume adjust pops (phone_all, phone_off)
                  - condition: template
                    alias: "Media player is not off if source is phone_off, phone_all"
                    value_template: "{{ states(player) not in ['idle', 'off'] if source in ['phone_all', 'phone_off'] else true }}"

                  #TV #WARNING (MainThread) [homeassistant.components.webostv.media_player] Error calling async_set_volume_level on entity media_player.bedroom_tv, state:off, error: WebOsTvCommandError("Not connected, can't execute command.")
                  - condition: template
                    alias: "Media player is on if TV"
                    value_template: >
                      {{ is_state(player, ['playing', 'paused', 'buffering', 'on'])
                          if is_state_attr(player, 'device_class', 'tv') else true }}
                then:
                  - variables:
                      lowered_volume: 0.4
                      current_volume: >
                        {{ set_volume if source == 'media'
                            else states('input_number.' ~ player_id ~ '_current_volume') | float(-1) }}
                      default_volume: "{{ states('input_number.' ~ player_id ~ '_default_volume') | float(-1) }}"
                      quiet_volume: "{{ states('input_number.media_quiet_volume') | int / 100 }}"
                      reset_volume: >
                        {% if is_state('binary_sensor.quiet_time', 'on') %}
                          {% set reset_volume = quiet_volume if current_volume > quiet_volume else current_volume
                              if current_volume > 0 and is_state(player, ['playing', 'paused', 'buffering', 'on']) else quiet_volume %}
                        {% else %}
                          {% set reset_volume = iif(is_state(player, ['playing', 'paused', 'buffering', 'on'])
                              and not force_reset, current_volume, default_volume) %}
                        {% endif %}
                        {{ reset_volume }}
                      volume_adjust: >
                        {{ states('input_number.' ~ player_id ~ '_vbalance') | float(0)
                            if is_state('input_boolean.volume_balancing', 'on') else 0 }}
                      new_volume: >
                        {% if set_volume >= 0 %} {% set new_volume = set_volume %}
                        {% elif source in ['phone_all', 'tts_all'] %}
                          {% if source == 'tts_all'
                              and player in state_attr('sensor.tts_active_media_player', 'entity_id') %}
                            {% set new_volume = 0 %}
                          {% else %}
                            {% set new_volume = current_volume if current_volume < lowered_volume else lowered_volume %}
                          {% endif %}
                        {% elif source == 'media' and phone_on %} {% set new_volume = 0 if speaker_on else lowered_volume %}
                        {% elif source_off %} {% set new_volume = source_volume %}
                        {% elif source == 'reset' %} {% set new_volume = reset_volume %}
                        {% else %} {% set new_volume = current_volume %}
                        {% endif %}
                        {% if not quiet_override and is_state('binary_sensor.quiet_time', 'on') %}
                          {% set new_volume = new_volume if source_off or new_volume < quiet_volume else quiet_volume %}
                        {% endif %}
                        {% set new_volume = new_volume + (new_volume * volume_adjust) %}
                        {{ 1 if new_volume > 1 else 0 if new_volume < 0 else new_volume | round(2) }}

                  - action: media_player.volume_set
                    target:
                      entity_id: "{{ player }}"
                    data:
                      volume_level: "{{ new_volume }}"
                    continue_on_error: true
            else:
              - action: system_log.write
                data:
                  logger: "{{ this.entity_id }}"
                  level: error
                  message: "Invalid media player [{{ player }}]."

    # always turn save volume automation back on
    - action: automation.turn_on
      target:
        entity_id: automation.save_media_player_volume
