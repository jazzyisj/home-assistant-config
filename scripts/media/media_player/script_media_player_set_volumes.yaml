###############################################################################
## Set Media Player Volumes
## #NOTE single players only, group volumes are determined by individual media players
## reset - adjusted default/quiet volume
## media_type (radio, spotify, youtube)
## alarm_clock - no quiet enforcement
## tts_all/phone_all - lower volume during tts play
## source_off - restore saved source volumes
## defaults to reset all media single players if no source/media player parameter specified
###############################################################################
media_players_set_volumes:
  alias: 'Media Players Set Volumes'
  description: 'Set media player volumes.'
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 10
  trace:
    stored_traces: 20
  fields:
    source:
      description: 'Source calling this script.'
      example: 'tts_off'
    media_type: # req for alarm_clock
      description: 'Media type if applicable.'
      example: 'radio'
    media_players:
      description: 'Media player list.'
      example: '[media_player.dining_room_hub, media_player.bedroom_hub]'
  variables:
    source: "{{ source|default('reset') }}"
    media_type: '{{ media_type|default(none) }}'
    media_types: "{{ state_attr('sensor.media_types','media_types') }}"
    media_tts: "{{ source[-4:] == '_tts' }}"
    source_off: "{{ media_tts or source in ['alarm_clock_off','phone_off','tts_off'] }}"
  sequence:
    - variables: #VAR variables in sequence to override field
        media_players: > #TV - reject tvs - no volume_level attribute
          {% set media_players = media_players|default(state_attr('group.single_media_players','entity_id')) %}
          {% set media_players = expand(media_players)|rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list %}
          {{ media_players }}

    - condition: state # do not run if system is muted (kills mute)
      entity_id: switch.system_mute
      state: 'off'

    - choose:
        - conditions: >
            {% set found = namespace(value=0) %}
            {% for type in media_types %}
              {% if source == type %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value == 1 and is_state('binary_sensor.mobile_phone_in_use','on') }}
          sequence:
            - service: script.media_players_save_volumes
              data:
                source: phone
                media_players: '{{ media_players }}'

        #TODO if tts is on and source not tts save "source" tts?

        # - conditions: "{{ source == 'phone_all' and is_state('binary_sensor.tts','on') }}"
        #   sequence:
        #     - service: script.media_players_save_volumes
        #       data:
        #         source: phone_tts
        #         media_players: '{{ media_players }}'

        - conditions: "{{ source in ['phone_all','tts_all'] }}"
          sequence:
            - service: script.media_players_save_volumes
              data:
                source: '{{ source[0:-4] }}' # strip '_all'
                media_players: '{{ media_players }}'

    - repeat:
        while:
          - condition: template
            value_template: '{{ repeat.index <= media_players|count }}'
        sequence:
          - variables:
              player: '{{ media_players[repeat.index-1] }}'
              player_name: "{{ player.split('.')[1] }}"
              source_volume: >
                {% if media_tts %}
                  {{ states('input_number.' ~ player_name ~ '_tts')|float(-1) }}
                {% elif source_off %}
                  {{ states('input_number.' ~ player_name ~ '_' ~ source[0:-4])|float(-1) }}
                {% else %}
                  -1
                {% endif %}
          - choose:
              - conditions:
                  - condition: template
                    alias: 'Media player is not unavailable'
                    value_template: "{{ states(player)|lower not in ['unknown','unavailable','none'] }}"

                  - condition: template
                    alias: 'Source volume is not zero if source_off' # user may have adj vol in off state don't override
                    value_template: '{{ source_volume > 0 if source_off else true }}'

                  #BLOOP don't set volumes if media player isn't on to prevent volume adjust pops (phone_all, phone_off)
                  - condition: template
                    alias: 'Media player is not off if source is phone_off, phone_all'
                    value_template: "{{ states(player) not in ['idle','off'] if source in ['phone_all','phone_off'] else true }}"
                sequence:
                  - variables:
                      player_volume: "{{ '%0.2f'|format(state_attr(player,'volume_level')|float(-1)) }}" # vol -1 = off
                      current_volume: "{{ states('input_number.' ~ player_name ~ '_current_volume')|float(-1) }}"
                      default_volume: >
                        {% set def = states('input_number.' ~ player_name ~ '_default_volume')|float(-1) %}
                        {{ def if def > 0 else 0.5 }}
                      quiet_volume: >
                        {{ states('input_number.tv_quiet_volume')|int(-1)/100
                            if state_attr(player,'device_class') == 'tv'
                              else states('input_number.speaker_quiet_volume')|int(-1)/100 }}
                      media_volume: "{{ states('input_number.' ~ source ~ '_volume')|float(-1)/100 if source in media_types }}"
                      tts_volume: "{{ 0 if player in state_attr('sensor.tts_media_player','entity_id') else 0.15 }}"
                      phone_volume: '{{ player_volume if player_volume < 0.2 else 0.2 }}'
                      reset_volume: >
                        {{ states('input_number.media_default_volume')|float/100
                            if media_type in media_types else default_volume }}
                      alarm_clock_volume: >
                        {{ states('input_number.alarm_clock_volume_' ~ state_attr('binary_sensor.alarm_clock','alarm_type'))
                            |float(-1)/100 if source == 'alarm_clock' }}
                      media_adjustment: >
                        {% if media_type in media_types or source in media_types
                            and is_state('input_boolean.media_type_volume_adjustments','on') %}
                          {% set media_type = source if media_type not in media_types else media_type %}
                          {% set media_type =  ('spotify' if 'spotify' in media_type else media_type) %}
                          {{ 1 + states('input_number.' ~ media_type ~ '_volume_adjustment')|float(0) }}
                        {% else %} 1 {# no adjustment #}
                        {% endif %}
                      #NOTE volume default 0.5/0.5 = 1 (no adjustment)
                      volume_factor: >
                        {{ 1/(0.5/default_volume) ** states('input_number.volume_log_factor')|float(-1)
                            if is_state('input_boolean.volume_balancing','on') else 1 }}
                      new_volume: >
                        {% if source_off %} {% set volume = source_volume %}
                        {% elif source == 'tts_all' %} {% set volume = tts_volume %}
                        {% elif source == 'phone_all' or (source in media_types
                            and is_state('binary_sensor.mobile_phone_in_use','on')) %} {% set volume = phone_volume %}
                        {% elif source in media_types %} {% set volume = media_volume %}
                        {% elif source == 'alarm_clock' %} {% set volume = alarm_clock_volume %}
                        {% elif source == 'reset' %} {% set volume = reset_volume %}
                        {% else %} {% set volume = player_volume if player_volume > 0 else current_volume %}
                        {% endif %}

                        {% if is_state('binary_sensor.quiet_time','on') and not source in ['alarm_clock','tts'] %}
                          {% set volume = volume if volume < quiet_volume else quiet_volume %}
                        {% endif %}

                        {% if source_off %}{{ volume }} {# do not adjust restored volumes #}
                        {% else %}
                          {% set volume = volume * media_adjustment|float(1) * volume_factor|float(1) %}
                          {{ 1 if volume > 1 else 0 if volume < 0 else '%0.2f'|format(volume) }}
                        {% endif %}

                  - choose:
                      - conditions:
                          - '{{ new_volume >= 0 }}'

                          #WARNING (MainThread) [homeassistant.components.webostv.media_player] Error calling async_set_volume_level on entity media_player.bedroom_tv, state:off, error: WebOsTvCommandError("Not connected, can't execute command.")
                          - condition: template
                            alias: 'Media player is on if TV'
                            value_template: >
                              {{ states(player) in ['on','home','playing','paused']
                                  if state_attr(player,'device_class') else true }}
                        sequence:
                          - service: media_player.volume_set
                            target:
                              entity_id: '{{ player }}'
                            data:
                              volume_level: '{{ new_volume }}'

    - delay: 1 # allow last volumes to set so we don't trigger automation.media_player_volume_changed
