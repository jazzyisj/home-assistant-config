#######################################################################################################################
## Set Media Player Volumes
# does not set speaker group volumes, group volumes are determined by individual media players
# reset - default/quiet volume or current volume if lower than quiet
# radio/spotify - passed parameter volume/quiet
# alarm_clock - alarm clock volume - no quiet enforcement
# tts_all/phone_all - set all active to quiet volume during tts play
# source_off - restore saved source volumes - no quiet enforcement
# defaults to reset all media players if no source/media player parameter specified
#######################################################################################################################
set_media_player_volumes:
  alias: 'Set Media Player Volumes'
  description: 'Set media player volumes.'
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 10
  fields:
    source:
      description: 'Source calling this script.'
      example: 'tts_off'
    media_players:
      description: 'Media player list.'
      example: '[media_player.dining_room_display, media_player.bedroom_display]'
    media_type: # req for alarm_clock
      description: 'Media type if applicable.'
      example: 'spotify'
  variables:
    media_sensors: "{{ state_attr('group.media_sensors','entity_id') }}"
    media_types: >
      {% set media_types = namespace(value=[]) %}
      {% for sensor in media_sensors %}
        {% set media_types.value = media_types.value + [sensor[14:]] %}
      {% endfor %}
      {{ media_types.value }}
    media_type: "{{ media_type|default('none') }}"
    source: "{{ source|default('none') }}"
    media_tts: "{{ source[-4:] == '_tts' }}"
    source_off: "{{ media_tts or source in ['alarm_clock_off','phone_off','tts_off'] }}"
    players: > #TV_VOL - reject tvs - no volume_level attribute
      {% if media_players not in ['',empty] %}
        {% set players = media_players %}
      {% else %}
        {% set players = state_attr('sensor.media_players','single') %}
      {% endif %}
      {% set players = expand(players)|rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list %}
      {{ players }}
  sequence:
    - condition: state # do not run if system is muted
      entity_id: input_boolean.mute_all
      state: 'off'

    - service: automation.turn_off
      target:
        entity_id: automation.media_player_volume_changed
      data:
        stop_actions: false

    - choose:
        - conditions: >
            {% set found = namespace(value=0) %}
            {% for type in media_types %}
              {% if source == type %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value == 1 and is_state('binary_sensor.mobile_phone_in_use','on') }}
          sequence:
            - service: script.turn_on # checks if phone on to save values
              target:
                entity_id: script.save_media_player_volumes
              data:
                variables:
                  source: phone
                  media_players: '{{ players }}'

        - conditions: "{{ source in ['phone_all','tts_all'] }}"
          sequence:
            - service: script.turn_on # checks if phone on to save values
              target:
                entity_id: script.save_media_player_volumes
              data:
                variables:
                  source: '{{ source[0:-4] }}'
                  media_players: '{{ players }}'

    - repeat:
        while:
          - condition: template
            value_template: '{{ repeat.index <= players|count }}'
        sequence:
          - variables:
              player: '{{ players[repeat.index-1] }}'
              player_name: "{{ player.split('.')[1] }}"
              source_volume: >
                {% if media_tts %}{{ states('input_number.' ~ player_name ~ '_tts')|float(-1) }}
                {% elif source_off %}{{ states('input_number.' ~ player_name ~ '_' ~ source[0:-4])|float(-1) }}
                {% else %} 0
                {% endif %}
          - choose:
              - conditions:
                  - condition: template
                    alias: 'Media player is not unavailable'
                    value_template: "{{ states(player)|lower not in ['unknown','unavailable','none'] }}"

                  - condition: template
                    # user may have adj vol in off state don't override
                    alias: 'Source volume is not zero when source is off'
                    value_template: '{{ source_volume > 0 if source_off else true }}'

                  #BLOOP don't set volumes if media player isn't on to prevent volume adjust pops (phone_all, phone_off)
                  - condition: template
                    alias: 'Media player is not off if source is phone_off, phone_all'
                    value_template: >
                      {{ states(player) not in ['idle','off']
                          if source in ['phone_all','phone_off'] else true }}
                sequence:
                  - variables:
                      player_volume: "{{ '%0.2f'|format(state_attr(player,'volume_level')|float(0)) }}" # vol 0 = off
                      current_volume: "{{ states('input_number.' ~ player_name ~ '_current_volume')|float(-1) }}"
                      default_volume: "{{ states('input_number.' ~ player_name ~ '_default_volume')|float(-1) }}"
                      media_volume: "{{ states('input_number.' ~ source ~ '_volume')|float(-1)/100 if source in media_types }}"
                      alarm_clock_volume: >
                        {{ states('input_number.alarm_clock_volume_' ~ state_attr('binary_sensor.alarm_clock','alarm_type'))
                            |float(-1)/100 if source == 'alarm_clock' }}
                      volume_factor:
                        > # volume default 0.5/0.5 = 1 (no balance adjustment)
                        {# #TODO this is still weird #}
                        {{ (default_volume/0.5) ** states('input_number.volume_log_factor')|float(-1)
                            if is_state('input_boolean.volume_balancing','on') else 1 }}

                  - service: media_player.volume_set
                    target:
                      entity_id: '{{ player }}'
                    data:
                      volume_level: > # volume > -1 value passed in parameters
                        {% set quiet_hours = is_state('binary_sensor.quiet_hours','on')
                            and is_state('binary_sensor.volume_override','off') %}

                        {# SET NEW VOLUME - set all % to float #}
                        {% if source_off %}
                          {% set new = source_volume %}
                        {% elif source == 'tts_all' %}
                          {% set new = 0 if player in state_attr('sensor.tts_media_player','players') else 0.15 %}
                        {% elif source == 'phone_all'
                            or (source in media_types and is_state('binary_sensor.mobile_phone_in_use','on')) %}
                          {% set new = player_volume if player_volume < 0.2 else 0.2 %}
                        {% elif source in media_types %}
                          {% set new = media_volume %}
                        {% elif source == 'alarm_clock' %}
                          {% set new =  alarm_clock_volume %}
                        {% elif source == 'reset' %}
                          {% set new = states('input_number.media_default_volume')|float(-1)/100
                            if media_type in media_types else default_volume %}
                          {% if quiet_hours %}
                            {% set new = new if new < player_volume else player_volume %}
                          {% endif %}
                        {% else %} {# player volume if player on else previous saved value (current) #}
                          {% set new = player_volume if player_volume > 0 else current_volume %}
                        {% endif %}

                        {# MEDIA TYPE VOLUME ADJUSTMENT #}
                        {% if media_type in media_types or source in media_types %}
                          {% set media_type = source if media_type not in media_types else media_type %}
                          {% set media_type =  ('spotify' if 'spotify' in media_type else media_type) %}
                          {% set new = new * ( 1 + states('input_number.' ~ media_type ~ '_volume_adjustment')|float(-1)) %}
                        {% endif %}

                        {# QUIET HOURS ENFORCEMENT #}
                        {% if quiet_hours and not source_off and not source in ['alarm_clock','tts'] %}
                            {% if source in media_types %}
                              {% set quiet_volume = states('input_number.media_quiet_volume')|int(-1)/100 %}
                            {% else %}
                              {% set quiet_volume = states('input_number.tv_quiet_volume')|int(-1)/100
                                  if state_attr(player,'device_class') == 'tv'
                                    else states('input_number.speaker_quiet_volume')|int(-1)/100 %}
                            {% endif %}
                            {% set new = new if new < quiet_volume else quiet_volume %}
                        {% endif %}

                        {# VOLUME EXCEPTIONS GO HERE #}

                        {# LIMIT TO FULL VOLUME #}
                        {% if source_off %}{{ new }} {# do not balance restored volumes #}
                        {% else %}{{ 1.00 if (new * volume_factor) > 1 else '%0.2f'|format((new * volume_factor)) }}
                        {% endif %}

    - delay: 1 # allow volumes to set

    - service: automation.turn_on
      target:
        entity_id: automation.media_player_volume_changed
