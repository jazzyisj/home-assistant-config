###############################################################################
## Set Media Player Volumes
## single players only, group volumes are determined by individual media players
## alarm_clock - no quiet enforcement
## tts_all/phone_all - lower volume during tts play
## source_off - restore saved source volumes
## reset - adjusted default/quiet volume
## defaults to reset all media single players if no source/media player parameter specified
###############################################################################
media_player_set_volumes:
  alias: "Media Player Set Volumes"
  description: "Set media player volumes."
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 10
  trace:
    stored_traces: 20
  fields:
    source:
      description: "Source calling this script."
      example: "tts_off"
    force_reset:
      description: "Force volume reset."
      example: "true"
    entity_id:
      description: "Media player list."
      example: "[media_player.dining_room_hub, media_player.bedroom_hub]"
    volume:
      description: "Volume level."
      example: "40"
  variables:
    #TV roku doesn't support volume set
    #TV exclude TV's (no volume attribute, error if off)
    #MASS set change to hass player
    media_players: >
      {% set entities = entity_id|default('group.single_media_players') %}
      {% if entities is iterable and (entities is string and entities is not mapping) %}
        {% set entities = [entities] %}
      {% endif %}
      {{ expand(entities)
          |rejectattr('attributes.device_class','eq','tv')
          |map(attribute='entity_id')|list|replace('_2','') }}
    source: "{{ source|default('reset') }}"
    force_reset: "{{ force_reset|default(false) }}"
    source_off: "{{ source[0:-4] == '_off' }}"
    volume: "{{ volume|default(-1) }}"
  sequence:
    # do not run if system is muted (kills mute)
    - condition: state
      entity_id: switch.system_mute
      state: "off"

    # filter out muted players so we don't reset mute
    - if: "{{ not force_reset }}"
      then:
        # filter out muted media players so we don't unmute (player must be on for is_volume_muted)
        - variables:
            muted_players: >
              {{ expand(media_players)|selectattr('attributes.is_volume_muted','defined')
                    |selectattr('attributes.is_volume_muted','eq',true)|map(attribute='entity_id')|list }}
            media_players: >
              {{ expand(media_players)|rejectattr('entity_id','in',muted_players)|map(attribute='entity_id')|list }}

    # if source is phone/tts save current volumes to restore
    - if: "{{ source in ['tts_all','phone_all'] }}"
      then:
        - service: script.media_player_save_volumes
          data:
            source: "{{ source[0:-4] }}" # strip '_all'
            entity_id: "{{ media_players }}"

    # don't save restore volumes if lowered volumes, tts, alarm_clock, or phone in use
    - if: >
        {{ source_off or source in ['phone_all','tts_all']
            or is_state('input_boolean.tts','on')
            or is_state('binary_sensor.alarm_clock','on')
            or is_state('binary_sensor.mobile_phone_in_use','on') }}
      then:
        - service: automation.turn_off
          target:
            entity_id: automation.media_player_save_volume
          data:
            stop_actions: false

    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= media_players|count }}"
        sequence:
          - variables:
              player: "{{ media_players[repeat.index-1] }}"
              player_name: "{{ player.split('.')[1] }}"
              source_volume: >
                {% if source_off %} {{ states('input_number.' ~ player_name ~ '_' ~ source[0:-4])|float(-1) }}
                {% else %} -1
                {% endif %}
          - if:
              - condition: template
                alias: "Media player is not unavailable"
                value_template: "{{ has_value(player) }}"

              - condition: template
                alias: "Source volume is not zero if source_off" # user may have adj vol in off state don't override
                value_template: "{{ source_volume > 0 if source_off else true }}"

              #BLOOP don't set volumes if media player isn't on to prevent volume adjust pops (phone_all, phone_off)
              - condition: template
                alias: "Media player is not off if source is phone_off, phone_all"
                value_template: "{{ states(player) not in ['idle','off'] if source in ['phone_all','phone_off'] else true }}"

              #TV #WARNING (MainThread) [homeassistant.components.webostv.media_player] Error calling async_set_volume_level on entity media_player.bedroom_tv, state:off, error: WebOsTvCommandError("Not connected, can't execute command.")
              - condition: template
                alias: "Media player is on if TV"
                value_template: >
                  {{ states(player) in ['playing','paused','buffering','on']
                      if is_state_attr(player,'device_class','tv') else true }}
            then:
              - variables:
                  current_volume: "{{ states('input_number.' ~ player_name ~ '_current_volume')|float(-1) }}"
                  default_volume: "{{ states('input_number.' ~ player_name ~ '_default_volume')|float(-1) }}"
                  volume_factor: >
                    {% if default_volume > 0 and is_state('input_boolean.volume_balancing','on') %}
                      {{ 1/(0.5/default_volume) ** states('input_number.volume_log_factor')|float }}
                    {% endif %}
                  quiet_volume: "{{ states('input_number.speaker_quiet_volume')|int/100 }}"
                  alarm_clock_volume: >
                    {{ states('input_number.alarm_clock_volume_' ~ state_attr('binary_sensor.alarm_clock','alarm_type'))
                        |float(-1)/100 if source == 'alarm_clock' }}
                  reset_volume: >
                    {% if is_state('binary_sensor.quiet_time','on') %}
                      {% set volume = quiet_volume if current_volume > quiet_volume else current_volume
                          if current_volume > 0 and states(player) in ['playing','paused','buffering','on'] else quiet_volume %}
                    {% else %}
                      {% set volume = iif(states(player) in ['playing','paused','buffering','on']
                          and not force_reset, current_volume, default_volume) %}
                    {% endif %}
                    {{ volume }}
                  new_volume: >
                    {% if volume|float > 0 %} {% set new_volume = volume|float/100 %}
                    {% elif source in ['phone_all','tts_all'] %}
                      {% set lvol = 0.25 %}
                      {% set new_volume = current_volume if current_volume < lvol else lvol %}
                    {% elif source_off %} {% set new_volume = source_volume %}
                    {% elif source == 'alarm_clock' %} {% set new_volume = alarm_clock_volume %}
                    {% elif source == 'reset' %} {% set new_volume = reset_volume %}
                    {% else %} {% set new_volume = current_volume %}
                    {% endif %}
                    {% if is_state('binary_sensor.quiet_time','on') and not source in ['alarm_clock','tts'] %}
                      {% set new_volume = new_volume if new_volume < quiet_volume else quiet_volume %}
                    {% endif %}
                    {% set new_volume = new_volume * volume_factor|float(1) %} {# volume factor 1 == no adjustment #}
                    {{ 1 if new_volume > 1 else 0 if new_volume < 0 else '%0.2f'|format(new_volume)|float }}

              - service: media_player.volume_set
                target:
                  entity_id: "{{ player }}"
                data:
                  volume_level: "{{ new_volume }}"
                continue_on_error: true

    # always turn save volume automation back on
    - service: automation.turn_on
      target:
        entity_id: automation.media_player_save_volume
