###############################################################################
## Media Player Save Volumes
###############################################################################
media_player_save_volumes:
  alias: "Media Player Save Volumes"
  description: "Save media player volumes."
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 5
  trace:
    stored_traces: 20
  fields:
    source:
      description: "Source calling this script."
      example: "tts"
    entity_id:
      description: "List of media players."
      example: "[media_player.dining_room_hub, media_player.bedroom_hub]"
    volume:
      description: "Volume to save"
      example: "0.5"
  variables:
    volume: "{{ volume | default(-1) }}"
    media_players: >
      {% set entities = entity_id | default(expand('group.single_media_players')
          | selectattr('state', 'in', ['playing', 'paused', 'buffering'])
          | map(attribute='entity_id') | list) %}
      {% if entities is iterable and (entities is string and entities is not mapping) %}
        {% set entities = [entities] %}
      {% endif %}
      {{ entities }}
  sequence:
    - condition: template
      value_template: "{{ media_players | count > 0 }}"

    - repeat:
        while: "{{ repeat.index <= media_players | count }}"
        sequence:
          - variables:
              player: "{{ media_players[repeat.index-1] }}"
              player_object_id: "{{ player.split('.')[1] | replace('_2', '') }}" #MASS change to hass media player
              # if tts and phone one, use phone vols for tts restore in case phone off before tts
              volume_entity: >
                {% if source == 'reset' %}
                  {% if is_state('binary_sensor.mobile_phone_in_use', 'on') %} input_number.{{ player_object_id ~ '_phone' }}
                  {% else %} input_number.{{ player_object_id ~ '_current_volume' }}
                  {% endif %}
                {% else %} input_number.{{ player_object_id ~ '_' ~ source }}
                {% endif %}
              default_volume: > # volume default 0.5/0.5 = 1 (no adjustment)
                {% set dv = states('input_number.' ~ player_object_id ~ '_default_volume') | float(-1) %}
                {{ dv if dv > 0 else 0.5 }}
              volume_factor: >
                {% if is_state('input_boolean.volume_balancing', 'on') %}
                  {{ 1/(0.5/default_volume) ** states('input_number.volume_log_factor') | float }}
                {% else %} 1 {# no adjustment #}
                {% endif %}
              # if tts and phone on, use phone saved vol for tts restore vol in case phone off before tts
              current_volume: >
                {% if volume > -1 %}
                  {{ volume }}
                {% elif source == 'tts' and is_state('binary_sensor.mobile_phone_in_use', 'on') %}
                  {{ states('input_number.' ~ player_object_id ~ '_phone') | float(-1) }}
                {% else %}
                  {{ states('input_number.' ~ player_object_id ~ '_current_volume') | float(-1) }}
                {% endif %}
              quiet_volume: >
                {% set qv = (states('input_number.speaker_quiet_volume') | int/100) | float(-1) %}
                {{ qv * volume_factor }}
              save_volume: >
                {% if source == 'reset' %}
                  {% if is_state('binary_sensor.quiet_time', 'on') %}
                    {% set sv = quiet_volume if current_volume > quiet_volume else current_volume
                        if current_volume > 0 and is_state(player, ['playing', 'paused', 'buffering', 'on']) else quiet_volume %}
                  {% else %}
                    {% set sv = current_volume if is_state(player, ['playing', 'paused', 'buffering', 'on']) else default_volume %}
                  {% endif %}
                {% else %} {% set sv = current_volume %}
                {% endif %}
                {{ 1.00 if sv > 1 else 0 if sv < 0 else '%0.2f' | format(sv) | float(-1) }}

          - if: "{{ save_volume > -1 }}"
            then:
              - service: input_number.set_value
                target:
                  entity_id: "{{ volume_entity }}"
                data:
                  value: "{{ save_volume }}"
            else:
              - service: system_log.write
                data:
                  logger: "{{ this.entity_id }}"
                  level: info
                  message: "Invalid media player [{{ player }}] or save volume [{{ save_volume }}]."
