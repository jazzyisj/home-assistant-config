###############################################################################
## Media Stop
###############################################################################
media_stop:
  alias: 'Media Stop'
  description: 'Turn off media players, reset volumes.'
  mode: parallel
  fields:
    media_type:
      description: 'Media type to stop.'
      example: 'spotify'
  variables:
    media_type: "{{ media_type|default('all') }}"
    media_types: "{{ state_attr('sensor.media_types','media_types')|default([]) }}"
    alarm_players: "{{ state_attr('sensor.alarm_clock_media_player','entity_id')|default([]) }}"
    media_players: >
      {% if media_type in media_types %}
        {% set media_player = states('sensor.' ~ media_type ~ '_media_player') %}
        {% if media_player|lower not in ['off','','unknown','unavailable','none'] %}
          {% set media_players = expand(state_attr('sensor.radio_media_player','entity_id'))
              |rejectattr('entity_id','in',alarm_players)|map(attribute='entity_id')|list %}
        {% endif %}
      {% endif %}
      {{ media_players|default(state_attr('group.single_media_players','entity_id')) }}
  sequence:
    - choose: # failed booleans not turned off unless turning off all media
        - conditions: "{{ media_type == 'all' }}"
          sequence:
            - service: input_boolean.turn_off
              entity_id: group.media_failed

    - service: input_boolean.turn_off
      target:
        entity_id: >
          {% set items = namespace(value=[]) %}
          {% if media_type == 'all' %}
            {% for item in media_types %}
              {% set items.value = items.value + ['input_boolean.resume_' ~ media_types[loop.index0]] %}
            {% endfor %}
          {% else %} {% set items.value = 'input_boolean.resume_' ~ media_type %}
          {% endif %}
          {{ items.value }}

    - service: input_text.set_value # clear active media player value
      target:
        entity_id: >
          {% set items = namespace(value=[]) %}
          {% if media_type == 'all' %}
            {% for item in media_types %}
              {% set items.value = items.value + ['input_text.active_' ~ media_types[loop.index0] ~ '_media_player'] %}
            {% endfor %}
          {% else %} {% set items.value = 'input_text.active_' ~ media_type ~ '_media_player' %}
          {% endif %}
          {{ items.value }}
      data:
        value: 'off'

    - choose:
        - conditions: '{{ media_players|count > 0 }}'
          sequence:
            - service: script.media_players_off
              data:
                media_players: '{{ media_players }}'

    - choose: #RADIO until streaming radio media player
        - conditions: "{{ media_type == 'radio' or media_type == 'all' }}"
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.radio

    - choose: #YOUTUBE ytube media player not always turning off
        - conditions: >
            {{ (media_type == 'youtube' or media_type == 'all')
                  and not is_state('media_player.ytube_music_player','off') }}
          sequence:
            - service: media_player.turn_off
              target:
                entity_id: media_player.ytube_music_player

    - delay: 2 # media players might still be turning off - prevent volume jump

    - choose:
        - conditions: '{{ media_players|count > 0 }}'
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.media_players_set_volumes
              data:
                variables:
                  media_players: '{{ media_players }}'
                  source: >
                    {% if media_type == 'all' %} reset
                    {% else %} {{ media_type }}_off
                    {% endif %}

    #NOTE browser, vlc stay idle
    - wait_template: "{{ expand(media_players)|selectattr('state','in',['idle','playing','paused'])|list|count == 0 }}"
      timeout: 5
