######################################################################################################################
## Media Stop
######################################################################################################################
media_stop:
  alias: "Media Stop"
  description: "Turn off media players, reset volumes."
  mode: parallel
  fields:
    media_type:
      description: "Media type to stop."
      example: spotify
    reset_volume:
      description: "Run reset volume."
      example: 'false'
  variables:
    reset_volume: "{{ reset_volume|default(false) }}"
    player: "{{ states('input_text.active_' ~ media_type ~ '_media_player') }}"
    players: > # if players|count > 0 player is a group
      {% if player != '' %}
        {% set players = expand(state_attr('sensor.media_players','players'))
            |selectattr('attributes.' ~ player.split('.')[1],'eq',true)|map(attribute='entity_id')|list %}
        {{ [player] if players|count == 0 else players }}
      {% endif %}
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id: "input_boolean.resume_{{ media_type }}"

    - choose:
        - conditions: "{{ is_state('media_player.' ~ media_type,'on') }}"
          sequence:
            - service: media_player.turn_off
              target:
                entity_id: "media_player.{{ media_type }}"

    - choose:
        - conditions: "{{ players|count > 0 }}"
          sequence:
            - condition: not
              conditions:
                  condition: state
                  entity_id: alarm_control_panel.master
                  state: triggered

            - choose: # stop players (req for browser players)
                - conditions: "{{ expand(players)|selectattr('state','in',['playing','paused'])|map(attribute='entity_id')|list|count > 0 }}"
                  sequence:
                    - service: media_player.media_stop
                      target:
                        entity_id: "{{ expand(players)|selectattr('state','in',['playing','paused'])|map(attribute='entity_id')|list }}"

            - choose: # turn off players
                - conditions: "{{ expand(players)|selectattr('state','in',['idle','playing','paused'])|map(attribute='entity_id')|list|count > 0 }}"
                  sequence:
                    - service: media_player.turn_off
                      target:
                        entity_id: "{{ expand(players)|selectattr('state','in',['idle','playing','paused'])|map(attribute='entity_id')|list }}"

            - wait_template: "{{ expand(players)|selectattr('state','in',['playing','paused'])|map(attribute='entity_id')|list|count == 0 }}"
              timeout: # wait for all group media players to stop so we don't get a volume jump
                seconds: 10

    - choose: # reset media player volumes
        - conditions: "{{ reset_volume }}"
          sequence:
            - service: script.set_media_player_volumes
              data:
                source: "{{ media_type }}_off"

    - service: input_text.set_value # clear active media player value
      target:
        entity_id: "input_text.active_{{ media_type }}_media_player"
      data:
        value: ''

    #RADIO until streaming radio media player

    - condition: template
      value_template: "{{ media_type == 'radio' }}"

    - service: input_boolean.turn_off
      entity_id: input_boolean.radio
