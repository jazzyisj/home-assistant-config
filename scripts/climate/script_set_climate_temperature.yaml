#######################################################################################################################
## Set Climate Temperature
#######################################################################################################################
set_climate_temperature:
  alias: Set Climate Temperature
  description: Set thermostat to preset mode/temperatures.
  icon: mdi:thermostat
  mode: restart
  variables:
    hvac_mode: "{{ states('climate.upstairs_thermostat') }}"
    preset_mode: "{{ state_attr('climate.upstairs_thermostat','preset_mode') }}"
    occupancy_mode: "{{ states('input_select.occupancy_mode') }}"
  sequence:
    - service: automation.turn_off # avoid recursive calls
      entity_id: &climate_automations
        - automation.climate_settings_adjusted
        - automation.climate_mode_changed

    - choose: # if climate is off set to previous hvac mode
        - conditions:
            - condition: state
              entity_id: climate.upstairs_thermostat
              state: 'off'
          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.upstairs_thermostat
                hvac_mode: "{{ states('input_select.set_hvac_mode') }}"

    - service: climate.set_preset_mode # if override mode, cancel eco to preheat/cool house when not at home
      data:
        entity_id: climate.upstairs_thermostat
        preset_mode: "{{ 'Away and Eco' if occupancy_mode in ['Away','Vacation'] else 'none' }}"

    - delay: 5 # delay to allow climate mode changes to register (Nest slow))

    - variables:
        hvac_mode: "{{ states('climate.upstairs_thermostat') }}"
        preset_mode: "{{ state_attr('climate.upstairs_thermostat','preset_mode') }}"

    - service: automation.turn_on
      entity_id: *climate_automations

    - wait_template: > # away/vacation test for eco else test for not eco, wait for eco mode to register in away mode (Nest slow)
        {% if occupancy_mode in ['Away','Vacation'] %}{{ true if preset_mode == 'Away and Eco' else false }}
        {% else %}{{ true if not preset_mode == 'Away and Eco' else false }}
        {% endif %}
      timeout: 5

    - condition: template  # error if temp is set in eco mode so check and quit if true
      alias: HVAC mode is not eco, off or away
      value_template: >
        {% if hvac_mode == 'off' %} false
        {% elif preset_mode == 'eco' %} false
        {% elif preset_mode == 'away' %} false
        {% elif preset_mode == 'Away and Eco' %} false
        {% else %} true
        {% endif %}

    - service: climate.set_temperature
      data: # override occupancy mode defaults to Home mode values, temperature defaults to heat temp
        entity_id: climate.upstairs_thermostat
        temperature: >
          {% if hvac_mode == 'heat' %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% elif hvac_mode == 'cool' %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {{ states('input_number.home_heat_temperature')|int }}
          {% endif %}

        target_temp_high: > # set temps for auto mode - temps can't be within 3 degress of eachother!
          {% if (states('input_number.home_cool_temperature')|int) > (states('input_number.home_heat_temperature')|int) %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% endif %}
        target_temp_low: >
          {% if (states('input_number.home_cool_temperature')|int) <= (states('input_number.home_heat_temperature')|int) %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% endif %}