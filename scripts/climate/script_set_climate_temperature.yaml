#######################################################################################################################
## Set Climate Temperature
#######################################################################################################################
set_climate_temperature:
  alias: 'Set Climate Temperature'
  description: 'Set thermostat to preset mode/temperatures.'
  icon: mdi:thermostat
  mode: restart
  variables:
    hvac_mode: "{{ states('climate.upstairs_thermostat') }}"
    preset_mode: "{{ state_attr('climate.upstairs_thermostat','preset_mode') }}"
    occupancy_mode: "{{ states('input_select.occupancy_mode') }}"
  sequence:
    # turn off climate mode automation to avoid recursive calls when climate mode changes
    - service: automation.turn_off
      entity_id: automation.climate_settings_adjusted

    # if climate is turned off set it to auto
    - choose:
        - conditions:
            - condition: state
              entity_id: climate.upstairs_thermostat
              state: 'off'

          sequence:
            - service: climate.set_hvac_mode
              data:
                entity_id: climate.upstairs_thermostat
                hvac_mode: auto

    # set occupancy mode override to cancel eco mode to preheat/cool house when not at home
    # set to away (eco) mode if away, use 'Away and Eco' instead of eco
    - service: climate.set_preset_mode
      data:
        entity_id: climate.upstairs_thermostat
        # none is Nest value for no preset
        preset_mode: "{{ 'Away and Eco' if occupancy_mode in ['Away','Vacation'] else 'none' }}"

    # delay to allow climate mode changes to register
    - delay:
        seconds: 5

    # update variables to current values
    - variables:
        hvac_mode: "{{ states('climate.upstairs_thermostat') }}"
        preset_mode: "{{ state_attr('climate.upstairs_thermostat','preset_mode') }}"

    - service: automation.turn_on
      entity_id: automation.climate_settings_adjusted

    # if away/vacation test for eco else test for not eco
    # wait for eco mode to register in away mode - sometimes delay in Nest response
    - wait_template: >
        {% if occupancy_mode in ['Away','Vacation'] %}{{ true if preset_mode == 'Away and Eco' else false }}
        {% else %}{{ true if not preset_mode == 'Away and Eco' else false }}
        {% endif %}
      timeout:
        seconds: 10
      continue_on_timeout: true

    # error if temp is set in eco mode so check and quit if true
    # don't continue if HVAC mode is eco / off / away
    - condition: template
      value_template: >
        {% if hvac_mode == 'off' %} false
        {% elif preset_mode == 'eco' %} false
        {% elif preset_mode == 'away' %} false
        {% elif preset_mode == 'Away and Eco' %} false
        {% else %} true
        {% endif %}

    # delay to allow state changes to register
    - delay:
        seconds: 5

    # set temps based on HVAC mode
    # override occupancy mode defaults to Home occupancy mode values
    # temp defaults to heat temp
    - service: climate.set_temperature
      data:
        entity_id: climate.upstairs_thermostat
        temperature: >
          {% if hvac_mode == 'heat' %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% elif hvac_mode == 'cool' %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {{ states('input_number.home_heat_temperature')|int }}
          {% endif %}
        # set temps for auto mode - temps can't be within 3 degress of eachother!
        target_temp_high: >
          {% if (states('input_number.home_cool_temperature')|int) > (states('input_number.home_heat_temperature')|int) %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% endif %}
        target_temp_low: >
          {% if (states('input_number.home_cool_temperature')|int) <= (states('input_number.home_heat_temperature')|int) %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_cool_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_cool_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_cool_temperature')|int }}
            {% else %}{{ states('input_number.home_cool_temperature')|int }}
            {% endif %}
          {% else %}
            {% if occupancy_mode == 'Home' %}{{ states('input_number.home_heat_temperature')|int }}
            {% elif occupancy_mode == 'Night' %}{{ states('input_number.night_heat_temperature')|int }}
            {% elif occupancy_mode == 'Guest' %}{{ states('input_number.guest_heat_temperature')|int }}
            {% else %}{{ states('input_number.home_heat_temperature')|int }}
            {% endif %}
          {% endif %}