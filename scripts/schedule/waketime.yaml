###############################################################################
## Waketime
###############################################################################
waketime:
  alias: "Waketime"
  description: "Run morning wake up routine."
  icon: mdi:weather-sunset-up
  sequence:
    - if:
        - or:
            - condition: state
              entity_id: binary_sensor.someone_home
              state: "off"

            - not:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  state: Night

            - condition: state
              entity_id: input_boolean.alarm_triggered # waketime disarms alarm
              state: "on"
      then:
        - action: browser_mod.notification
          data:
            duration: 30000
            message: "Wake up routine cannot be run."

        - stop: "Wake up routine cannot be run."

    - choose:
        - conditions: "{{ is_state('switch.alarm_clock_auto', 'on') }}"
          sequence:
            - action: switch.turn_off
              target:
                entity_id: switch.alarm_clock_auto

        - conditions: "{{ is_state('switch.alarm_clock_manual', 'on') }}"
          sequence:
            - action: switch.turn_off
              target:
                entity_id: switch.alarm_clock_manual

        - conditions: "{{ is_state('switch.alarm_clock_nap', 'on') }}"
          sequence:
            - action: switch.turn_off
              target:
                entity_id: switch.alarm_clock_nap

    - parallel:
        - sequence:
            - if:
                - condition: state
                  entity_id:
                    - binary_sensor.daytime_illuminance_lights
                    - binary_sensor.nighttime_illuminance_lights
                  match: any
                  state: "on"
              then:
                - action: script.turn_light_on
                  data:
                    lights:
                      - light.bedroom_fan_light
                      - light.bathroom_vanity_light_rgb
                      - light.dining_room_light_rgb
                      - light.kitchen_potlights
                      - light.kitchen_cabinet_lights
                    profile: default_min
                    transition: 10
                    activate_timer: false

                - delay: # wait for next set of lights
                    minutes: 10

                - action: script.turn_light_on
                  data:
                    lights:
                      - light.bedroom_fan_light
                      - light.bathroom_vanity_light_rgb
                      - light.dining_room_light_rgb
                      - light.kitchen_potlights
                      - light.bedroom_fan_light
                      - light.kitchen_potlights
                      - light.kitchen_cabinet_lights
                      - light.laundry_room_cabinet_lights
                      - light.living_room_fan_light
                    profile: default_low
                    transition: 120
                    activate_timer: false

                - delay: # wait for next set of lights
                    minutes: 10

                - action: script.turn_light_on
                  data:
                    lights:
                      - light.bedroom_fan_light
                      - light.bathroom_vanity_light_rgb
                      - light.dining_room_light_rgb
                      - light.kitchen_potlights
                      - light.bedroom_fan_light
                      - light.kitchen_potlights
                      - light.kitchen_cabinet_lights
                      - light.laundry_room_cabinet_lights
                      - light.kitchen_sink_light
                      - light.living_room_fan_light
                    profile: default
                    transition: 120
                    activate_timer: false

        - sequence:
            - action: input_select.select_option
              target:
                entity_id: input_select.occupancy_mode
              data:
                option: >
                  {% if is_state('binary_sensor.owner_home', 'on') %} Home
                  {% elif is_state('binary_sensor.guest_home', 'on') %} Guest
                  {% else %} Away
                  {% endif %}
              continue_on_error: true

            - action: script.arm_alarm
              data:
                mode: home
                override: true
              continue_on_error: true

            - if:
                - condition: state
                  entity_id:
                    - input_boolean.occupancy_announcements
                    - input_boolean.alarm_announcements
                  match: any
                  state: "on"
              then:
                - wait_for_trigger:
                    - platform: event
                      event_type: occupancy_notification
                  timeout: 60

            - if:
                - condition: state
                  entity_id: input_boolean.media_preset_enabled_wake
                  state: "on"
              then:
                - action: script.media_play
                  data:
                    preset: wake
                  continue_on_error: true #MASS script does not continue if mass fails

                - delay:
                    minutes: "{{ states('input_number.media_preset_wake_time') | int }}"

                - variables:
                    stop_player: >
                      {{ expand('group.media_players')
                          | selectattr('name', 'eq', states('select.media_preset_speaker_wake'))
                          | map(attribute='entity_id') | join('') }}

                - if: "{{ stop_player != '' }}"
                  then:
                    - action: script.turn_media_player_off
                      data:
                        entity_id: "{{ stop_player }}"
                      continue_on_error: true
              else:
                - delay:
                    minutes: "{{ states('input_number.media_preset_wake_time') | int }}"

            - if:
                - condition: state
                  entity_id: input_boolean.calendar_notifications_jason
                  state: "on"
              then:
                - action: button.press
                  target:
                    entity_id: button.announce_calendar_events_jason
                  continue_on_error: true

            - variables:
                battery: "{{ states('sensor.jphone_battery_level') | int(-1) }}"

            - if: "{{ 0 > battery < 50 }}"
              then:
                - action: script.tts_play
                  data:
                    message: "Just a heads up, your mobile phone battery level is only {{ battery }} percent."
                    quiet_play: true
                    save_message: "{{ is_state('binary_sensor.mobile_phone_in_use','on') }}"
                  continue_on_error: true

            - if:
                - condition: numeric_state
                  entity_id: sensor.tts_saved_messages
                  above: 0
              then:
                - action: script.tts_play_saved_messages
                  continue_on_error: true

            - if:
                - condition: state
                  entity_id: input_boolean.morning_weather_enabled
                  state: "on"
              then:
                - action: script.weather_report
                  continue_on_error: true

            - wait_template: >
                {{ is_state('script.weather_report', 'off')
                    and is_state('input_boolean.tts', 'off') }}

            - if:
                - condition: state
                  entity_id: input_boolean.media_preset_enabled_morning
                  state: "on"
              then:
                - action: script.media_play
                  data:
                    preset: morning
                  continue_on_error: true

###############################################################################
## Wake Up Switch - waketime button / zwave scenes
###############################################################################
waketime_switch:
  alias: "Waketime Switch"
  description: "Turn off alarm clock or run waketime scene."
  max_exceeded: silent
  mode: restart
  sequence:
    - if:
        - condition: state
          entity_id: binary_sensor.alarm_clock
          state: "on"
      then:
        - action: switch.turn_off
          target:
            entity_id: "switch.alarm_clock_{{ state_attr('binary_sensor.alarm_clock', 'alarm_type') }}"
      else:
        - if:
            - condition: state
              entity_id: script.waketime
              state: "on"
          then:
            - action: script.turn_off
              target:
                entity_id: script.waketime
          else:
            - action: script.turn_on
              target:
                entity_id: script.waketime
