#######################################################################################################################
## Spotify Play
#######################################################################################################################
spotify_play:
  alias: Spotify Play
  description: Play spotify playlist.
  icon: mdi:spotify
  mode: single
  #max_exceeded: silent
  fields:
    preset:
      description: Called by preset
      example: sleep
    playlist:
      description: Spotify Playlist
      example: Shower Songs
    device:
      description: Playback media player name.
      example: Dining Room Speaker
    volume:
      description: Playback volume in percent.
      example: 50
    random:
      description: Random playback.
      example: true
    shuffle:
      description: Shuffle playback.
      example: true
    repeat:
      description: Repeat playback.
      example: true
  variables:
    player: >
      {{ expand('group.media_players')|selectattr('name','eq',device)|map(attribute='entity_id')|join('') }}
    playlist: >
      {% if preset == 'wake' %}{{ states('input_select.media_preset_spotify_wake') }}
      {% elif preset == 'morning' %}{{ states('input_select.media_preset_spotify_morning') }}
      {% elif preset == 'sleep' %}{{ states('input_select.media_preset_spotify_sleep') }}
      {% elif preset == 'jason' %}{{ states('input_select.media_preset_spotify_jason') }}
      {% elif preset == 'sheri' %}{{ states('input_select.media_preset_spotify_sheri') }}
      {% elif preset == 'shower' %}{{ states('input_select.media_preset_spotify_shower') }}
      {% elif preset == 'company' %}{{ states('input_select.media_preset_spotify_company') }}
      {% elif playlist != '' %}{{ playlist }}
      {% else %}{{ states('input_select.spotify_playlist') }}
      {% endif %}
    device: >
      {% if preset == 'wake' %}{{ states('input_select.media_preset_speaker_wake') }}
      {% elif preset == 'morning' %}{{ states('input_select.media_preset_speaker_morning') }}
      {% elif preset == 'sleep' %}{{ states('input_select.media_preset_speaker_sleep') }}
      {% elif preset == 'jason' %}{{ states('input_select.media_preset_speaker_jason') }}
      {% elif preset == 'sheri' %}{{ states('input_select.media_preset_speaker_sheri') }}
      {% elif preset == 'shower' %}{{ states('input_select.media_preset_speaker_shower') }}
      {% elif preset == 'company' %}{{ states('input_select.media_preset_speaker_company') }}
      {% elif device != '' %}{{ device }}
      {% else %}{{ states('input_select.spotify_media_player') }}
      {% endif %}
    volume: >
      {% set qvol = states('input_number.media_quiet_volume')|int %}
      {% if preset == 'wake' %}{% set vol = states('input_number.media_preset_volume_wake')|int %}
      {% elif preset == 'morning' %}{% set vol = states('input_number.media_preset_volume_morning')|int %}
      {% elif preset == 'sleep' %}{% set vol = states('input_number.media_preset_volume_sleep')|int %}
      {% elif preset == 'jason' %}{% set vol = states('input_number.media_preset_volume_jason')|int %}
      {% elif preset == 'sheri' %}{% set vol = states('input_number.media_preset_volume_sheri')|int %}
      {% elif preset == 'shower' %}{% set vol = states('input_number.media_preset_volume_shower')|int %}
      {% elif preset == 'company' %}{% set vol = states('input_number.media_preset_volume_company')|int %}
      {% elif volume != '' %}{% set vol =  volume %}
      {% else %}{% set vol = states('input_number.spotify_volume')|int %}
      {% endif %}
      {{ qvol if (is_state('binary_sensor.quiet_hours','on') and vol > qvol) and is_state('input_boolean.volume_override','off') else vol }}
    repeat: "{{ repeat if repeat != '' else is_state('input_boolean.spotify_repeat','on') }}"
    random: "{{ random if random != '' else is_state('input_boolean.spotify_random','on') }}"
    shuffle: "{{ shuffle if shuffle != '' else is_state('input_boolean.spotify_shuffle','on') }}"

  sequence:
    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: input_boolean.mute_all
                  state: 'on'

                - condition: state
                  entity_id:
                    - binary_sensor.emergency_active
                    - input_boolean.alarm_triggered
                  state: 'on'

                - !include /config/include/template/spotify_alarm_clock_active_condition.yaml

          sequence:
            - service: input_boolean.turn_off
              entity_id: input_boolean.spotify_on

            - service: browser_mod.toast
              data:
                duration: 30000
                message: >
                  {% set message = 'Spotify cannot be turned on.' %}
                  {% if is_state('input_boolean.mute_all','on') %} {% set message = message ~ ' The system has been muted.' %}{% endif %}
                  {% if is_state('input_select.occupancy_mode','Vacation') %}{% set message = message ~ ' The house is in vacation mode.' %}{% endif %}
                  {% if is_state('alarm_control_panel.house','triggered') %}{% set message = message ~ ' The house alarm has been triggered.' %}{% endif %}
                  {% if is_state('binary_sensor.emergency_active','on') %}{% set message = message ~ ' The emergency alert is active.' %}{% endif %}
                  {{ message }}

      default:
        # turn off radio if spotify playing on a radio media player
        - choose:
            - conditions:
                - !include /config/include/template/spotify_radio_player_condition.yaml
              sequence:
                - service: input_boolean.turn_off
                  entity_id: input_boolean.radio_on

                # wait for radio media players to turn off before starting spotify
                - wait_template: "{{ states(states('sensor.radio_media_player')) in ['off','idle','unavailable','unknown'] }}"
                  timeout:
                    seconds: 15
                  continue_on_timeout: true

        # prevent recursive call
        - service: automation.turn_off
          data:
            entity_id: automation.spotify_turned_on
            stop_actions: false

        # turn boolean on to keep in sync if called from script
        - service: input_boolean.turn_on
          entity_id: input_boolean.spotify_on

        - service: automation.turn_on
          entity_id: automation.spotify_turned_on

        #BLOOP mute media player volumes to prevent google bloops
        - service: script.set_media_player_volumes
          data:
            media_player: "{{ player }}"
            source: mute

        - delay:
            seconds: 1 #BLOOP let volumes turn down to avoid bloop!

        - service: media_player.turn_on #BLOOP
          data:
            entity_id: "{{ player }}"

        - delay:
            seconds: 1 #BLOOP let volumes turn down to avoid bloop!

        - choose:
            - conditions: "{{ preset == 'playlist' }}"
              sequence:
                - service: spotcast.start
                  data:
                    device_name: "{{ states('sensor.spotify_device_name') }}"
                    uri: !include /config/include/template/spotify_playlist_selection.yaml
                    start_volume: "{{ volume }}"
                    force_playback: true

            - conditions: "{{ preset == 'player' }}"
              sequence:
                - service: spotcast.start
                  data:
                    device_name: "{{ states('input_select.spotify_media_player') }}"
                    start_volume: "{{ volume }}"
                    force_playback: true

            - conditions: "{{ preset == 'resume' }}"
              sequence:
                - service: spotcast.start
                  data:
                    device_name: "{{ states('sensor.spotify_device_name') }}"
                    start_volume: "{{ volume }}"
                    force_playback: true

          default:
            - service: spotcast.start
              data:
                device_name: "{{ device }}"
                uri: !include /config/include/template/spotify_playlist_selection.yaml
                random_song: "{{ random }}"
                repeat: "{{ repeat }}"
                shuffle: "{{ shuffle }}"
                start_volume: 0 #BLOOP "{{ volume }}"
                force_playback: true

        # wait for spotify media player to begin playing
        - wait_template: "{{ is_state(player,'playing') }}"
          timeout:
            seconds: 30
          continue_on_timeout: true

        # turn on spotify failed if media player doesn't play
        - choose:
            - conditions: "{{ not is_state(player,'playing') }}"

              sequence:
                - service: input_boolean.turn_on
                  entity_id: input_boolean.spotify_failed

          default:
            # reset volume after spotcast to set individual media player volumes (balancing)
            - service: script.set_media_player_volumes
              data:
                media_player: "{{ player }}"
                source: spotify
                player_volume: "{{ volume }}"

            #NOTE input_text.active_media_player_spotify set by automation.spotify_media_player_changed

            - service: input_boolean.turn_off
              entity_id: input_boolean.spotify_failed



