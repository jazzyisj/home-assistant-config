###############################################################################
## Someone Arrives Home - separate script so we can turn off with occupancy mode change
###############################################################################
someone_arrives_home:
  alias: 'Someone Arrives Home'
  description: 'Turn on lights, set occupancy mode to home/guest, play morning radio/weather.'
  icon: mdi:home-account
  mode: parallel
  fields:
    person:
      description: Person who arrives home
      example: jason
    first_home:
      description: 'Person arriving is first person home (nobody else home).'
      example: 'true'
  variables:
    owner: "{{ person in ['jason','sheri'] }}"
  sequence:
    - choose:
        - conditions: '{{ owner }}'
          sequence:
            - service: "{{ 'notify.jason' if person == 'jason' else 'notify.sheri' }}"
              data:
                message: clear_notification
                data:
                  tag: '{{ person }}_heading_home'

            - choose: # gps didn't register almost home so send alarm disarm notification here
                - conditions: "{{ is_state('input_boolean.' ~ person ~ '_almost_home','off') }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.arriving_home_notification
                      data:
                        variables:
                          person: '{{ person }}'
              default:
                - service: input_boolean.turn_off
                  target:
                    entity_id: 'input_boolean.{{ person }}_almost_home'

            - service: script.update_traffic_sensors # update traffic sensors to ensure time to home is zeroed out

    - service: input_boolean.turn_on
      target:
        entity_id: 'input_boolean.{{ person }}_just_arrived_home'

    # clear last_person_to_arrive so last_changed attribute gets updated if set value didn't change
    - service: input_select.select_option
      target:
        entity_id: input_select.last_person_to_arrive
      data:
        option: cleared

    - service: input_select.select_option
      target:
        entity_id: input_select.last_person_to_arrive
      data:
        option: '{{ person|title }}'

    # if already in selected mode, state won't change, occupancy automations won't trigger
    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% if is_state('input_select.occupancy_mode','Night') %} Night
          {% elif is_state('binary_sensor.owner_home','on') %} Home
          {% else %} Guest
          {% endif %}

    - choose: # must start alarm reset here if nobody was home when alarm triggered->disarmed
        - conditions:
            - condition: state
              entity_id: input_boolean.alarm_triggered
              state: 'on'

            - condition: state
              entity_id: alarm_control_panel.master
              state: disarmed

            - condition: state
              entity_id: timer.alarm_triggered_reset
              state: idle
          sequence:
            - service: timer.start
              entity_id: timer.alarm_triggered_reset

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.occupancy_announcements
              state: 'on'
          sequence:
            - service: script.tts_play
              data:
                message: "{{ person|title ~ ' is home' if owner else 'A guest has arrived.' }}"

    # wait until person is inside house, then welcome them home, play saved messages etc.
    #IDEA - wait_template: >
    #     {{ is_state('binary_sensor.front_door','on')
    #         or is_state('binary_sensor.back_door','on')
    #         or is_state('binary_sensor.side_door','on')
    #         or is_state('binary_sensor.' ~ person ~ '_home','off') }}
    #   timeout:
    #     minutes: 5

    - delay: 300 # let person get in house

    - choose: # only if person still home (may have come and gone)
        - conditions: >
            {{ is_state('input_boolean.guest_home','on') if person == 'guest'
                else is_state('binary_sensor.' ~ person ~ '_home','on') }}
          sequence:
            - service: script.tts_play
              data:
                message: |
                  {{ states('sensor.tod_greeting') }} {{person|title if person != 'guest' }}!
                  Welcome {{ 'home' if person != 'guest' else 'to our home' }}.

            - choose:
                - conditions: '{{ first_home }}'
                  sequence:
                    - choose:
                        - conditions:
                            - condition: numeric_state
                              entity_id: variable.tts_saved_messages
                              above: 0
                          sequence:
                            - service: script.tts_play_saved_messages

                            - delay: 1 # let saved messages start

                            - wait_template: "{{ is_state('script.tts_play_saved_messages','off') }}"
                              timeout:
                                minutes: 5

                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: input_boolean.media_player_automation
                              state: 'on'

                            - "{{ is_state('input_boolean.media_preset_enabled_' ~ person,'on') }}"
                          sequence:
                            - service: switch.turn_on
                              target:
                                entity_id: 'switch.media_preset_{{ person }}'
