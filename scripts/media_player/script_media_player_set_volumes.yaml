#######################################################################################################################
## Set Media Player Volumes
# - does not set speaker group volumes, group volumes are determined by individual media players
# reset - default/quiet volume or current volume if lower than quiet
# radio/spotify - passed parameter volume/quiet
# alarm_clock - alarm clock volume - no quiet enforcement
# tts_all/phone_all - set all active to quiet volume during tts play
# source_off - restore saved source volumes - no quiet enforcement
# defaults to reset all media players if no source/media player parameter specified
# skip TV if source is tts - really annoying
#######################################################################################################################
set_media_player_volumes:
  alias: Set Media Player Volumes
  description: Set media player volumes.
  icon: mdi:play-box-multiple-outline
  mode: queued
  max: 5
  fields:
    source:
      description: Source calling this script.
      example: tts_off
    media_players:
      description: Media player list.
      example: "[media_player.dining_room_display, media_player.bedroom_display]"
    player_volume:
      description: Volume level (%)
      example: 15
  variables:
    source: "{{ source|default('none') }}"
    player_volume: "{{ player_volume|default(0) }}"
    source_off: "{{ source[-4:] == '_off' and source not in ['radio_off','spotify_off'] }}"
    #WEBOS - reject tvs in reset/phone - no volume attribute
    #tts_off - reject alarm_clock, radio, spotify - volumes are set on media resume
    players: >
      {% if media_players not in ['',empty] %}
        {{ media_players }}

      {% elif source in ['tts_off'] %}
        {% set skip_players = namespace(value=[]) %}

        {% if is_state('binary_sensor.alarm_clock_active','on') %}
          {% set skip_players.value = skip_players.value + state_attr('sensor.alarm_clock_media_player','players') %}
        {% endif %}

        {% if is_state('input_boolean.radio','on') %}
          {% set skip_players.value = skip_players.value + state_attr('sensor.radio_media_player','players') %}
        {% endif %}

        {% if is_state('input_boolean.spotify','on') %}
          {% set skip_players.value = skip_players.value + state_attr('sensor.spotify_media_player','players') %}
        {% endif %}

        {{ expand(state_attr('sensor.media_players_single','players'))
            |rejectattr('entity_id','in',skip_players.value)
            |rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list }}

      {% elif source == 'tts_all' %}
        {{ expand(state_attr('sensor.media_players_single','players'))
            |rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list }}

      {% elif source in ['radio','radio_off'] %}
        {{ state_attr('sensor.radio_media_player','players') }}

      {% elif source in ['spotify','spotify_off'] %}
        {{ state_attr('sensor.spotify_media_player','players') }}

      {% elif source in ['alarm_clock'] %}
        {{ state_attr('sensor.alarm_clock_media_player','players') }}

      {% elif source in ['reset','phone_off','phone_all','alarm_clock_off'] %}
        {{ expand(state_attr('sensor.media_players_single','players'))
            |rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list }}

      {% else %}
        {{ state_attr('sensor.media_players_single','players') }}
      {% endif %}
    player: null
    current_entity: null
    default_entity: null
    source_entity: null
  sequence:
    # - service: system_log.write
    #   data:
    #     level: critical
    #     logger: scipt.set_media_player_volumes
    #     message: |
    #       *
    #       source: {{ source }}
    #       source_off: {{ source_off }}
    #       players: {{ players }}
    #       count: {{ players|count }}

    - service: automation.turn_off
      data:
        entity_id: automation.media_player_volume_changed
        stop_actions: false

    - choose:
        - conditions: "{{ source in ['radio','spotify'] and is_state('binary_sensor.phone_in_use','on') }}"
          sequence:
            - service: script.turn_on # checks if phone on to save values
              data:
                entity_id: script.save_media_player_volumes
                variables:
                  source: phone
                  media_player: "{{ players }}"

        - conditions: "{{ source in ['phone_all','tts_all'] }}"
          sequence:
            - service: script.turn_on # checks if phone on to save values
              data:
                entity_id: script.save_media_player_volumes
                variables:
                  source: "{{ source[0:-4] }}"
                  media_player: "{{ players }}"

    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= players|count }}"

        sequence:
          - variables:
              player: "{{ players[repeat.index-1] }}"
              current_entity: "input_number.{{ player.split('.')[1] }}_current_volume"
              default_entity: "input_number.{{ player.split('.')[1] }}_default_volume"
              source_entity: "{{ 'input_number.' ~ player.split('.')[1] ~ '_' ~ source[0:-4] if source_off else '' }}"
          - choose:
              - conditions:
                  #BLOOP don't set volumes if media player isn't on to prevent volume adjust pops (phone_all, phone_off)
                  - condition: template
                    value_template: >
                      {{ states(player) not in ['idle','off'] if source in ['phone_all','phone_off'] else true }}

                  #BLOOP don't restore zero volumes when source off (media player volume may have been adjusted in off state by user)
                  - condition: template
                    value_template: "{{ states(source_entity)|float > 0 if source_off else true }}"

                sequence:
                  - service: media_player.volume_set
                    data:
                      entity_id: "{{ player }}"
                      volume_level: >
                        {# SET CURRENT VOLUME #}
                        {% if states[player].attributes.volume_level is defined %}{% set current = state_attr(player,'volume_level')|float|round(2) %}
                        {% else %}{% set current = states(current_entity)|float %}
                        {% endif %}

                        {# SET DEFAULT VOLUMES #}
                        {% if source == 'reset' %}
                          {% set radio = states('sensor.radio_media_player') %}
                          {% set spotify = states('sensor.spotify_media_player') %}
                          {% if (is_state('input_boolean.radio','on') and player in state_attr('sensor.radio_media_player','players'))
                              or (is_state('input_boolean.spotify','on') and player in state_attr('sensor.spotify_media_player','players')) %}
                            {% set media = true %}
                            {% set default = states('input_number.media_default_volume')|float/100 %}
                          {% else %}
                            {% set default = states(default_entity)|float %}
                          {% endif %}
                        {% else %}
                          {% set default = states(default_entity)|float %}
                        {% endif %}

                        {# SET NEW VOLUME #}
                        {% if source_off %}{% set new = states(source_entity)|float %}
                        {% elif source == 'tts_all' %}{% set new = 0 if player in state_attr('sensor.tts_media_player','players') else 0.15 %}
                        {% elif source == 'phone_all' or (source in ['radio','spotify']
                            and is_state('binary_sensor.phone_in_use','on')) %}{% set new = 0.20 %}
                        {% elif source in ['radio','spotify'] %}{% set new = player_volume/100 %}
                        {% elif source == 'alarm_clock' %}{% set new = states('input_number.alarm_clock_volume')|float/100 %}
                        {% elif source == 'reset' %}{% set new = default %}
                        {% else %}{% set new = current %} {# radio_off, spotify_off #}
                        {% endif %}

                        {# QUIET HOURS #}
                        {% set quiet_hours = is_state('binary_sensor.quiet_hours','on') and is_state('input_boolean.volume_override','off') %}
                        {% if not source_off and not source in ['alarm_clock','tts'] %}
                          {% if media == true %}{% set quiet = states('input_number.media_quiet_volume')|float/100 %}
                          {% else %}
                            {% set quiet = states('input_number.tv_quiet_volume')|float/100 if state_attr(player,'device_class') == 'tv'
                              else states('input_number.speaker_quiet_volume')|float/100 %}
                          {% endif %}
                          {% set new = (new if new < quiet else quiet) if quiet_hours else new %}
                        {% else %}{% set quiet = 0 %}
                        {% endif %}

                        {# BALANCE VOLUMES: volume * default/0.5 volume default 0.5/0.5 = 1 (no adjustment) #}
                        {% set vol_factor = (states(default_entity)|float/0.5)
                            ** states('input_number.volume_log_factor')|float
                            if is_state('input_boolean.volume_balancing','on') else 1 %}

                        {# VOLUME EXCEPTIONS GO HERE #}

                        {# LIMIT TO FULL VOLUME #}
                        {% if source_off %}
                          {{ new }}
                        {% else %}
                          {{ 1 if new * vol_factor > 1 else (new * vol_factor)|round(2) }}
                        {% endif %}

                  # if source off do not balance, balanced volume/manually set volume was stored

                  # - service: system_log.write
                  #   data:
                  #     logger: script.set_media_player_volumes
                  #     level: error
                  #     message: |
                  #       *
                  #       {# SET CURRENT VOLUME #}
                  #       {%- if states[player].attributes.volume_level is defined %}{% set current = state_attr(player,'volume_level')|float|round(2) %}
                  #       {%- else %}{% set current = states(current_entity)|float %}
                  #       {%- endif %}
                  #       {#- SET DEFAULT VOLUMES #}
                  #       {%- if source == 'reset' %}
                  #         {%- set radio = states('sensor.radio_media_player') %}
                  #         {%- set spotify = states('sensor.spotify_media_player') %}
                  #         {%- if (is_state('input_boolean.radio','on') and player in state_attr('sensor.radio_media_player','players'))
                  #             or (is_state('input_boolean.spotify','on') and player in state_attr('sensor.spotify_media_player','players')) %}
                  #           {%- set media = true %}
                  #           {%- set default = states('input_number.media_default_volume')|float/100 %}
                  #         {%- else %}
                  #           {%- set default = states(default_entity)|float %}
                  #         {%- endif %}
                  #       {%- else %}
                  #         {%- set default = states(default_entity)|float %}
                  #       {%- endif %}
                  #       {# SET NEW VOLUME #}
                  #       {%- if source_off %}{% set new = states(source_entity)|float %}
                  #       {%- elif source == 'tts_all' %}{% set new = 0 if player in state_attr('sensor.tts_media_player','players') else 0.15 %}
                  #       {%- elif source == 'phone_all' %}{% set new = 0.15 %}
                  #       {%- elif source in ['radio','spotify'] %}{% set new = player_volume/100 %}
                  #       {%- elif source == 'alarm_clock' %}{% set new = states('input_number.alarm_clock_volume')|float/100 %}
                  #       {%- elif source == 'reset' %}{% set new = default %}
                  #       {%- else %}{% set new = current %} {# radio_off, spotify_off #}
                  #       {%- endif %}
                  #       {#- QUIET HOURS #}
                  #       {%- set quiet_hours = is_state('binary_sensor.quiet_hours','on') and is_state('input_boolean.volume_override','off') %}
                  #       {%- if not source_off and not source in ['alarm_clock','tts'] %}
                  #         {%- if media == true %}
                  #           {% set quiet = states('input_number.media_quiet_volume')|float/100 %}
                  #         {%- else %}
                  #           {%- set quiet = states('input_number.tv_quiet_volume')|float/100 if state_attr(player,'device_class') == 'tv'
                  #             else states('input_number.speaker_quiet_volume')|float/100 %}
                  #         {%- endif %}
                  #         {%- set new = (new if new < quiet else quiet) if quiet_hours else new %}
                  #       {% else %}{%- set quiet = 0 -%}
                  #       {%- endif %}
                  #       {#- BALANCE VOLUMES: volume * default/0.5 volume default 0.5/0.5 = 1 (no adjustment) #}
                  #       {%- set vol_factor = (states(default_entity)|float/0.5)
                  #            ** states('input_number.volume_log_factor')|float
                  #            if is_state('input_boolean.volume_balancing','on') else 1 %}
                  #       {# VOLUME EXCEPTIONS GO HERE #}
                  #       {# LIMIT TO FULL VOLUME #}
                  #       Player: {{ player }}
                  #       current_entity: {{ current_entity }}
                  #       default_entity: {{ default_entity }}
                  #       source_entity: {{ source_entity }}
                  #       Default Volume: {{ default }}
                  #       Current Volume: {{ current }}
                  #       Player Volume: {{ player_volume }}
                  #       Quiet Volume: {{ quiet }}
                  #       Volume Factor: {{ vol_factor }}
                  #       source: {{ source }}
                  #       source_off: {{ source_off }}
                  #       New Volume:
                  #       {%- if source_off %}
                  #         {{ new }}
                  #       {% else %}
                  #         {{ 1 if new * vol_factor > 1 else (new * vol_factor)|round(2) }}
                  #       {% endif %}

    - delay: 1 # allow volumes to set

    # - service: automation.turn_on
    #   entity_id: automation.media_player_volume_changed