#######################################################################################################################
## Set Media Player Volumes
#NOTE - this does not set speaker group volumes, group volumes are determined by individual media players

# reset - set all idle media players to quiet/default device volumes or current volume if lower
# radio/spotify - set radio media players to passed parameter volume/quiet
# alarm_clock - set active alarm clock media players to alarm clock volume
# tts/phone - set all media players to quiet volume during tts play
# source_off - set active tts media players to saved volumes
# mute - set all media players to 0
#######################################################################################################################
set_media_player_volumes:
  alias: Set Media Player Volumes
  description: Set media player volumes.
  icon: mdi:play-box-multiple-outline
  mode: restart
  fields:
    media_player:
      description: Media player entity_id.
      example: media_player.dining_room_display
    source:
      description: Source calling this script.
      example: tts_off
    player_volume:
      description: Volume level (%)
      example: 15
  variables:
    source_off: "{{ source[0:-4] == '_off' }}"
    # don't include TV's when souce is house_alarm
    players: >
      {% if media_player == 'all' %} {{ state_attr('group.media_players_single','entity_id') }}
      {% elif source in ['house_alarm','house_alarm_off'] %} {{ states.media_player|selectattr('attributes.device_class','eq','speaker')|map(attribute='entity_id')|list }}
      {% else %} {{ states.media_player|selectattr('attributes.device_class','in',['speaker','tv'])|map(attribute='entity_id')|list }}
      {% endif %}
    player: null
    name: null
    volume_entity: null
  sequence:
    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= players|count }}"

        sequence:
          - variables:
              player: "{{ players[repeat.index-1] }}"
              name: "{{ players[repeat.index-1].split('.')[1] }}"
              volume_entity: >
                {% if source_off %}{{ 'input_number.' ~ source[0:-3] ~ name }}
                {% else %}{{ 'input_number.' ~ name }}
                {% endif %}

          - choose:
              - conditions:
                  # is specified media player or media player is in specified speaker group
                  - condition: template
                    value_template: >
                      {% if media_player in ['all',player] %} true
                      {% elif is_state_attr(media_player,'speaker_group',true) %}{{ expand('group.' ~ media_player.split('.')[1])|selectattr('entity_id','eq',player)|list|length > 0 }}
                      {% else %} false {# invalid media player #}
                      {% endif %}

                  #BLOOP # don't run if media player isn't on (phone, tts, mute)
                  - condition: template
                    value_template: "{{ not states(player) in ['idle','off'] if source in ['phone','tts','mute'] else true }}"

                  # don't set zero volumes (source off) - media player volume may have been adjusted in off state by user
                  - condition: template
                    value_template: "{{ states(volume_entity ~ '_current_volume')|float > 0 if source_off else true }}"

                  # skip if TV and source is tts - really annoying
                  - condition: template
                    value_template: "{{ false if source in ['tts','tts_off'] and state_attr(player,'device_class') == 'tv' else true }}"

                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ source in ['radio','spotify'] }}"

                          - condition: state
                            entity_id: sensor.phone_in_use
                            state: 'on'

                        sequence:
                          # checks if phone on to save values
                          - service: script.save_media_player_volumes
                            data:
                              media_player: "{{ player }}"
                              source: phone
                              player_volume: "{{ volume }}"

                  - service: media_player.volume_set
                    data:
                      entity_id: "{{ player }}"
                      #NOTE enforces quiet hours volume limit on radio/spotify play unless override is on
                      volume_level: >
                        {% set quiet_hours = is_state('binary_sensor.quiet_hours','on') and is_state('input_boolean.volume_override','off') %}

                        {# SET VOLUME TYPE VALUES #}
                        {% set alarm = states('input_number.alarm_clock_volume')|float %}

                        {% if source == 'reset' %}{% set default = states(volume_entity ~ '_default_volume')|float %}
                        {% else %}{% set default = states('input_number.volume_default_media')|float %}
                        {% endif %}

                        {% if states[player].attributes.volume_level is defined %}{% set current = state_attr(player,'volume_level')|float*100 %}
                        {% else %}{% set current = states(volume_entity ~ '_current_volume')|float %}
                        {% endif %}

                        {% if source in ['radio','spotify'] %}{% set quiet = states('input_number.media_quiet_volume')|float %}
                        {% else %}{% set quiet =states('input_number.tv_quiet_volume')|float if is_state_attr(player,'device_class','tv') else states('input_number.speaker_quiet_volume')|float %}
                        {% endif %}

                        {# SET NEW VOLUME #}
                        {% if source_off or source in ['tts','phone','house_alarm'] %}{% set new = current if current <= quiet else quiet %}
                        {% elif source in ['radio','spotify'] %}
                          {% if is_state('sensor.phone_in_use','on') %}
                            {% set new = player_volume if player_volume|float <= quiet else quiet %}
                          {% else %}
                            {% if quiet_hours %}{% set new = player_volume if player_volume|float <= quiet else quiet %}
                            {% else %}{% set new = player_volume %}
                            {% endif %}
                          {% endif %}
                        {% elif source == 'alarm' %}{% set new = alarm %}
                        {% elif source == 'mute' %}{% set new = 0 %}
                        {% else %} {# reset #}
                          {% if quiet_hours %}{% set new = current if current <= quiet else quiet %}
                          {% else %}{% set new = default  %}
                          {% endif %}
                        {% endif %}

                        {# BALANCE VOLUMES #}
                        {% set new = new|float/100 %}
                        {% set new = new * ( 1 + states('input_number.' ~ name ~ '_balance')|float) if is_state_attr(media_player,'speaker_group',true) else new %}
                        {{ 1 if new > 1 else new }}
