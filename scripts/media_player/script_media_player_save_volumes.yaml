#######################################################################################################################
## Save Media Player Volumes
#NOTE - does not save speaker group volumes, group volumes are determined by individual media players
#######################################################################################################################
save_media_player_volumes:
  alias: Save Media Player Volumes
  description: Store media player volumes.
  icon: mdi:play-box-multiple-outline
  mode: parallel
  max: 5
  fields:
    source:
      description: Source calling this script.
      example: tts_on
  variables:
    source_on: "{{ source in ['radio_on','tts_on','phone_on','alarm_clock_on','house_alarm_on'] }}"
    source_reset: "{{ source in ['tts_reset','alarm_clock_reset','phone_reset'] }}"
    players: >
      {{ states.media_player|selectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list if source == 'house_alarm_on'
          else states.media_player|selectattr('attributes.device_class','in',['speaker','tv'])|map(attribute='entity_id')|list }}
    player: null
    name: null
  sequence:
    # do not run if alarm is triggered
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.house
          state: triggered

    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= players|count }}"

        sequence:
          - variables:
              player: "{{ players[repeat.index-1] }}"
              name: "{{ players[repeat.index-1].split('.')[1] }}"

          - choose:
              - conditions:
                  # don'tts save if media player is in off state (volume will be null == 0)
                  - condition: template
                    value_template: "{{ not states(player) in ['off','unknown','unavailable','none'] }}"

                  # do not save zero volume values - user may have adjusted media player volume in off state
                  - condition: template
                    value_template: >
                      {% if states[player].attributes.volume_level is defined %}
                      {{ true if source_reset else state_attr(player,'volume_level')|float > 0 }}
                      {% endif %}

                sequence:
                  - choose:
                      # source is radio_on
                      - conditions: "{{ source == 'radio_on' }}"
                        sequence:
                          # phone is on, store radio input volume to restore when phone turns off
                          - condition: template
                            value_template: "{{ is_state('sensor.phone_in_use','on') }}"

                          - service: input_number.set_value
                            data:
                              entity_id: "input_number.{{ 'phone_' ~ name }}"
                              value: "{{ states('input_number.radio_volume')|float }}"

                    default:
                      - service: input_number.set_value
                        data:
                          entity_id: "input_number.{{ source[0:-2] ~ name if source_on else source[0:-5] ~ name }}"

                          # check media player volume if source_on, stored volume if reset
                          # store quiet hours volume if active and current volume is > quiet volume
                          value: >
                            {% set quiet = states('input_number.tv_quiet_volume')|float
                                if is_state_attr(player,'device_class','tv')
                                  else states('input_number.speaker_quiet_volume')|float %}
                            {% set current = '%0.2f'|format(state_attr(player,'volume_level')|float)|float
                                if source_on else states('input_number.' ~ source[0:-5] ~ name)|float %}
                            {{ quiet if is_state('binary_sensor.quiet_hours','on') and current > quiet else current }}