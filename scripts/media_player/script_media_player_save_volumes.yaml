#######################################################################################################################
## Save Media Player Volumes
#NOTE - this does not save speaker group volumes, group volumes are determined by individual media players
#######################################################################################################################
save_media_player_volumes:
  alias: Save Media Player Volumes
  description: Store media player volumes.
  icon: mdi:play-box-multiple-outline
  mode: parallel
  max: 5
  fields:
    source:
      description: Source calling this script.
      example: tts
    media_player:
      description: Media player entity to save.
      example: media_player.dining_room_display
  variables:
    players: >
      {% if media_player == 'all' %}{{ state_attr('group.media_players_single','entity_id') }}
      {% elif is_state_attr(media_player,'speaker_group',true) %}{{ expand('group.' ~ media_player.split('.')[1])|map(attribute='entity_id')|list }}
      {% else %}{{ media_player }}
      {% endif %}
    player: null
    name: null
    new_volume: null
  sequence:
    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= players|count }}"

        sequence:
          - variables:
              player: "{{ players[repeat.index-1] }}"
              name: "{{ players[repeat.index-1].split('.')[1] }}"
              new_volume: >
                {% set current = '%0.2f'|format(state_attr(player,'volume_level')|float)|float %}
                {% set default = states('input_number.' ~ name ~ '_default_volume')|float %}
                {% if source == 'reset' %}
                  {% if is_state_attr(player,'device_class','speaker') %}
                    {% set quiet = states('input_number.speaker_quiet_volume')|float %}
                  {% else %}
                    {% set quiet = states('input_number.tv_quiet_volume')|float %}
                  {% endif %}
                  {% if is_state('binary_sensor.quiet_hours','on') %}{{ quiet if current > quiet else current if current > 0 else quiet }}
                  {% else %}{{ default }}
                  {% endif %}
                {% else %}{{ current }}
                {% endif %}

          - choose:
              - conditions:
                  # don'tts save if media player is in off state (volume will be null == 0)
                  - condition: template
                    value_template: "{{ not states(player)|lower in ['off','unknown','unavailable','none'] }}"

                  # do not save zero volume values - user may have adjusted media player volume in off state
                  - condition: template
                    value_template: "{{ true if source == 'reset' else new_volume > 0 }}"

                sequence:
                  - choose:
                      # phone is on, store radio/spotify volumes to restore when phone turns off
                      - conditions:
                          - condition: template
                            value_template: "{{ source == 'reset' }}"

                          - condition: state
                            entity_id: sensor.phone_in_use
                            state: 'on'

                        sequence:
                          - service: input_number.set_value
                            data:
                              entity_id: "input_number.{{ 'phone_' ~ name }}"
                              value: "{{ new_volume|float/100 }}" #NOTE phone/tts/alarm volumes stored as decimal

                  - service: input_number.set_value
                    data:
                      entity_id: "input_number.{{ name ~ 'current_volume' if source == 'reset' else source ~ '_' ~ name }}"
                      value: "{{ new_volume }}"
