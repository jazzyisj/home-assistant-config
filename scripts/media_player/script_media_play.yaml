#######################################################################################################################
## Media Play
#######################################################################################################################
media_play:
  alias: "Media Play"
  description: "Play media."
  icon: mdi:play-box
  mode: queued
  max: 5
  max_exceeded: error
  fields:
    media_type:
      description: "Media type to play."
      example: spotify
    resume:
      description: "Resume media play."
      example: playlist
    account:
      description: "Spotify account to use (spotify)."
      example: hassio
    device:
      description: "Playback media player name (spotify)."
      example: Dining Room Speaker
    playlist:
      description: "Spotify Playlist (spotify)."
      example: Shower Songs
    random:
      description: "Random playback (spotify)."
      example: 'true'
    shuffle:
      description: "Shuffle playback (spotify)."
      example: 'true'
    repeat:
      description: "Repeat playback (spotify)."
      example: 'true'
  variables:
    resume: "{{ resume|default(false) }}"
    media_types: "{{ ['radio','spotify'] }}"
    speaker_groups: "{{ state_attr('sensor.media_player_groups','players') }}"
    radio_player: "{{ states('sensor.radio_media_player') }}"
    radio_players: "{{ state_attr('sensor.radio_media_player','players') }}"
    spotify_device: > #SPOTIFY sensor.spotify_media_player not populated until playing so determine media player from selected device
      {% if device not in ['',empty] %}{{ device }}
      {% else %}{{ states('input_select.spotify_media_player') }}
      {% endif %}
    spotify_player: "{{ expand(state_attr('sensor.media_players','players'))|selectattr('name','eq',spotify_device)|map(attribute='entity_id')|list|join('') }}"
    spotify_players: "{{ expand(state_attr('sensor.media_players','players'))|selectattr('attributes.' ~ spotify_player.split('.')[1],'eq',true)|map(attribute='entity_id')|list }}"
    alarm_player: "{{ states('sensor.alarm_clock_media_player') }}"
    alarm_players: "{{ state_attr('sensor.alarm_clock_media_player','players') }}"
    player: >
      {% if media_type == 'radio' %}{{ radio_player }}
      {% elif media_type == 'spotify' %}{{ spotify_player }}
      {% endif %}
    players: "{{ state_attr('sensor.' ~ player.split('.')[1],'players') if is_state_attr(player,'type','group') else [player] }}"
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id: "input_boolean.resume_{{ media_type }}"

    - choose:
        - conditions:
            - condition: or
              conditions:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  state:
                    - Away
                    - Vacation

                - condition: state
                  entity_id: input_boolean.mute_all
                  state: 'on'

                - condition: state
                  entity_id: input_boolean.alarm_triggered
                  state: 'on'

                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: 'off'

                - condition: template
                  alias: "Target media player is not playing an alarm clock"
                  value_template: >
                    {% if is_state('binary_sensor.alarm_clock_active','on') %}
                      {% set found = namespace(value=0) %}
                      {% if player in speaker_groups %}
                        {% for pitem in players %}
                          {% if alarm_player in speaker_groups %}
                            {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                          {% elif pitem == alarm_player %}
                            {% set found.value = 1 %}
                          {% endif %}
                        {% endfor %}
                      {% else %}
                        {% if alarm_player in speaker_groups %}
                          {% for item in alarm_players %}{% if item == pitem %}{% set found.value = 1 %}{% endif %}{% endfor %}
                        {% elif item == player %}
                          {% set found.value = 1 %}
                        {% endif %}
                      {% endif %}
                      {{ found.value|int == 1 }}
                    {% else %} false
                    {% endif %}
          sequence:
            - service: browser_mod.toast
              data:
                duration: 30000
                message: >
                  {% set message = 'Media cannot be played. ' %}
                  {% if is_state('input_boolean.mute_all','on') %}{% set message = message ~ 'The system is muted.' %}{% endif %}
                  {% if is_state('input_select.occupancy_mode','Vacation') %}{% set message = message ~ 'The house is in Vacation mode.' %}{% endif %}
                  {% if is_state('alarm_control_panel.master','triggered') or is_state('input_boolean.alarm_triggered','on') %}
                    {% set message = message ~ 'The house alarm has been triggered.' %}
                  {% endif %}
                  {{ message }}

            - service: switch.turn_off
              target:
                entity_id: "switch.{{ media_type }}"
      default:
        - wait_template: "{{ is_state('input_boolean.tts_playing','off') and is_state('script.media_stop','off') }}"
          timeout:  # wait for tts/previous stop script to finish
            seconds: 300

        - choose:
            - conditions: "{{ not wait.completed }}" # something is wrong
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: "input_boolean.{{ media_type }}_failed"
                - service: browser_mod.toast
                  data:
                    duration: 30000
                    message: "{{ media_type|title }} cannot play. Something has gone wrong."
          default:
            - choose:
                - conditions: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on','on') }}"
                  sequence:
                    - service: browser_mod.toast
                      data:
                        duration: 30000
                        message: "{{ media_type|title }} will play when the mobile speakerphone has turned off."
                    - wait_template: "{{ is_state_attr('binary_sensor.mobile_phone_in_use','speaker_on','off') }}"
                      timeout:
                        minutes: 15
                      continue_on_timeout: false # after timeout media will not play

            - variables:
                old_player: >
                  {% if media_type == 'radio' %}{{ spotify_player }}
                  {% elif media_type == 'spotify' %}{{ radio_player }}
                  {% endif %}
                old_sensor: "{{ 'sensor.' ~ old_player.split('.')[1] }}"
                old_type: >
                  {% set found = namespace(value=0) %}
                  {% set old_spotify = namespace(value=0) %}
                  {% if player in speaker_groups %}
                    {% for pitem in players %}
                      {% if old_player in speaker_groups %}
                        {% for olditem in state_attr(old_sensor,'players') %}
                          {% if olditem == pitem %}{% set found.value = 1 %}{% endif %}
                        {% endfor %}
                      {% elif pitem == old_player  %}
                        {% set found.value =1 %}
                      {% endif %}
                    {% endfor %}
                  {% else %}
                    {% if old_player in speaker_groups %}
                      {% for olditem in state_attr(old_sensor,'players') %}
                        {% if olditem == player %}{% set found.value = 1 %}{% endif %}
                      {% endfor %}
                    {% elif old_player == player %}
                      {% set found.value = 1 %}
                    {% endif %}
                  {% endif %}
                  {% if found.value == 1
                    and media_type == 'spotify'
                    and is_state('switch.radio','on') %} radio
                  {% elif found.value == 1
                    and media_type == 'radio'
                    and is_state('switch.spotify','on') %} spotify
                  {% else %} none
                  {% endif %}

            - choose: # stop previous media if new media playing on previous media player or member of previous media speaker group
                - conditions: "{{ old_type in media_types }}"
                  sequence:
                    - service: script.media_stop
                      data:
                        media_type: "{{ old_type }}"
                        reset_volume: false

                    - wait_template: "{{ states(old_player) in ['off','idle'] }}"
                      timeout: 10

            - choose: # check if player available, if speaker group check state for each media_player
                - conditions: >
                    {% if is_state_attr(player,'type','group') %}
                      {% set found = namespace(value=0) %}
                      {% for item in players -%}
                        {% if states(item)|lower in ['unknown','unavailable','none'] %}{% set found.value = 1 %}{% endif %}
                      {% endfor %}
                      {{ found.value|int == 1 }}
                    {% else %}
                      {{ states(player) in ['unknown','unavailable','none'] }}
                    {% endif %}
                  sequence:
                    - service: input_boolean.turn_on
                      target:
                        entity_id: "input_boolean.{{ media_type }}_failed"
                    - service: browser_mod.toast
                      data:
                        duration: 30000
                        message: "{{ media_type|title }} cannot play. Selected media player is unavailable."
              default:
                - choose:
                    - conditions: "{{ resume not in ['station','playlist'] }}"
                      sequence:
                        - service: media_player.volume_set
                          target:
                            entity_id: "{{ players }}"
                          data:
                            volume_level: 0 #BLOOP set volumes to 0 before media play avoid google bloops

                - choose:
                    - conditions: "{{ media_type == 'radio' }}"
                      sequence:
                        - service: media_player.play_media
                          target:
                            entity_id: "{{ player }}"
                          data:
                            media_content_id: >
                              {% for item in state_attr('sensor.streaming_radio_stations','stations') -%}
                                {% if is_state('input_select.radio_station',item.name) %}
                                  {{ item.url }}
                                {% endif %}
                              {% endfor %}
                            media_content_type: music
                            extra:
                              title: "{{ states('input_select.radio_station') }}"
                              thumb: >
                                {% for item in state_attr('sensor.streaming_radio_stations','stations') -%}
                                  {% if is_state('input_select.radio_station',item.name) %}
                                    {{ item.image_url }}
                                  {% endif %}
                                {% endfor %}

                    - conditions: "{{ media_type == 'spotify' }}"
                      sequence:
                        - variables:
                            account: > #SPOTIFY - redo spotify account logic
                              {% if is_state('input_select.spotify_account','Jason') %}{% set spacct = 'jazzyisj' %}
                              {% elif is_state('input_select.spotify_account','Sheri') %}{% set spacct = 'sherigagnon' %}
                              {% else %}{% set spacct = 'hassio' %}
                              {% endif %}
                              {{ account|default(spacct) }}
                            playlist: >
                              {% if playlist not in ['',empty] %}{{ playlist }}
                              {% else %}{{ states('input_select.spotify_playlist_hassio') }}
                              {% endif %}
                            uri: >
                              {% for item in state_attr('sensor.playlists_sensor','playlists') -%}
                                {% if item.name == playlist %}
                                  {{ item.uri }}
                                {% endif %}
                              {% endfor %}
                            repeat: "{{ repeat if repeat not in ['',empty] else is_state('input_boolean.spotify_repeat','on') }}"
                            random: "{{ random if random not in ['',empty] else is_state('input_boolean.spotify_random','on') }}"
                            shuffle: "{{ shuffle if shuffle not in ['',empty] else is_state('input_boolean.spotify_shuffle','on') }}"

                        - choose:
                            - conditions: "{{ resume == 'playlist' }}"
                              sequence:
                                - service: spotcast.start
                                  data:
                                    account: "{{ account }}"
                                    device_name: "{{ spotify_device }}"
                                    uri: "{{ uri }}"
                                    random_song: "{{ random }}"
                                    repeat: "{{ repeat }}"
                                    shuffle: "{{ shuffle }}"
                                    ignore_fully_played: true
                                    force_playback: true

                            - conditions: "{{ resume != false }}"
                              sequence:
                                - service: spotcast.start
                                  data:
                                    account: "{{ account }}"
                                    device_name: "{{ spotify_device }}"
                                    random_song: "{{ random }}"
                                    repeat: "{{ repeat }}"
                                    shuffle: "{{ shuffle }}"
                                    ignore_fully_played: true
                                    force_playback: true
                          default:
                            - service: spotcast.start
                              data:
                                account: "{{ account }}"
                                device_name: "{{ spotify_device }}"
                                uri: "{{ uri }}"
                                random_song: "{{ random }}"
                                repeat: "{{ repeat }}"
                                shuffle: "{{ shuffle }}"
                                ignore_fully_played: true
                                force_playback: true

                - wait_template: "{{ is_state(player,'playing') }}" # wait for spotify media player to begin playing
                  timeout:
                    seconds: 15

                - choose: # turn on media failed boolean if media player doesn't play
                    - conditions: "{{ not is_state(player,'playing') }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: "input_boolean.{{ media_type }}_failed"

                  default:
                    - choose: # turn boolean on to keep in sync if called from script
                        - conditions: "{{ is_state('switch.' ~ media_type,'off') }}"
                          sequence:
                            - service: input_boolean.turn_on
                              target:
                                entity_id: "input_boolean.{{ media_type }}_skip_action"

                            - service: switch.turn_on
                              target:
                                entity_id: "switch.{{ media_type }}"

                    - choose:
                        - conditions: "{{ resume not in ['station','playlist'] }}"
                          sequence:
                            - service: script.set_media_player_volumes
                              data:
                                source: "{{ media_type ~ '_tts' if resume == 'tts' else media_type }}"
                                # volume: "{{ volume }}"

                    - service: input_boolean.turn_off
                      target:
                        entity_id: "input_boolean.{{ media_type }}_failed"
