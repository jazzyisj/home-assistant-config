###############################################################################
## Reset Intrusion Locks
###############################################################################
reset_intrusion_locks:
  alias: "Reset Intrusion Locks"
  description: "Reset intrusion alert entry locks."
  icon: mdi:lock
  variables:
    buttons: >
      {{ states.binary_sensor|selectattr('entity_id','search','_door_lock_intrusion')
            |selectattr('state','eq','on')
            |map(attribute='object_id')|map('regex_replace',find='(.*)_door_lock_intrusion',
              replace='button.\\1_door_lock_idle_home_security_sensor_status',ignorecase=False)|list }}
    locks: >
      {{ expand(buttons)|map(attribute='object_id')
          |map('regex_replace',find='(.*)_door_lock_idle_home_security_sensor_status',
              replace='lock.\\1_door_lock',ignorecase=False)|list }}
  sequence:
    - if:
        - condition: template
          value_template: "{{ locks == none or locks|count == 0 }}"
      then:
        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: warning
            message: "No valid entities."

        - stop: "No valid entities."

    # toggle lock to reset state from unknown
    - service: lock.unlock
      data:
        entity_id: "{{ locks }}"

    - delay: 5

    - service: lock.lock
      data:
        entity_id: "{{ locks }}"

    - wait_template: "{{ expand(locks)|selectattr('state','eq','locked')|list|count == locks|count }}"
      timeout: 60

    - if: "{{ wait.completed }}"
      then:
        - service: button.press
          target:
            entity_id: "{{ buttons }}"
      else:
        - service: script.tts_play
          data:
            message: >
              {% from 'format.jinja' import clist_locks %}
              {%- set plural = 's have' if locks|count > 1 else ' has' %}
              The {{ clist_locks(locks) }} door lock intrusion alerts{{ plural }} not been cleared!
            night_play: true
