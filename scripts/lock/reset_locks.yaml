###################################################################################################
## Reset Door Locks
###################################################################################################
reset_door_locks:
  alias: "Reset Door Locks"
  description: "Reset door locks."
  icon: mdi:lock
  variables:
    alerts: "{{ ['jammed', 'failed' ,'intrusion', 'keypad'] }}"
    fail_count: 0
  sequence:
    - repeat:
        count: "{{ alerts | count }}"
        sequence:
          - variables:
              alert: "{{ alerts[repeat.index - 1] }}"
              sensor_name: >
                {% if alert == 'jammed' %} _door_lock_lock_jammed
                {% elif alert == 'failed' %} _door_lock_system_hardware_failure
                {% elif alert == 'intrusion' %} _door_lock_intrusion
                {% elif alert == 'keypad' %} _door_lock_keypad_temporary_disabled
                {% endif %}
              button_name: >
                {% if alert == 'jammed' %} _door_lock_idle_access_control_lock_state
                {% elif alert == 'failed' %} _door_lock_idle_system_hardware_status
                {% elif alert == 'intrusion' %} _door_lock_idle_home_security_sensor_status
                {% elif alert == 'keypad' %} _door_lock_idle_access_control_keypad_state
                {% endif %}
              locks: >
                {{ states.binary_sensor | selectattr('entity_id', 'contains', sensor_name)
                    | selectattr('state', 'eq', 'on') | map(attribute='object_id')
                    | map('regex_replace', find='(.*)' ~ sensor_name,
                        replace='lock.\\1_door_lock', ignorecase=False) | list }}
              sensors: >
                {{ expand(states.binary_sensor | selectattr('entity_id', 'contains', sensor_name)
                    | selectattr('state', 'eq', 'on')) | map(attribute='entity_id') | list }}
              buttons: >
                {{ expand(states.binary_sensor | selectattr('entity_id', 'contains', sensor_name)
                    | selectattr('state', 'eq', 'on')) | map(attribute='object_id') | list
                    | map('regex_replace', find='(.*)' ~ sensor_name,
                      replace='button.\\1' ~ button_name, ignorecase=False) | list }}

          - if: "{{ locks != none or locks | count > 0 }}"
            then:
              # toggle lock to reset state from unknown
              - action: lock.unlock
                data:
                  entity_id: "{{ locks }}"

              - wait_template: >
                  {{ expand(locks)
                      | selectattr('state', 'in', ['locked', 'unknown'])
                      | list | count == 0 }}
                timeout: 30

              - action: lock.lock
                data:
                  entity_id: "{{ locks }}"

              - wait_template: >
                  {{ expand(locks)
                      | selectattr('state', 'eq', 'unlocked')
                      | list | count == 0 }}
                timeout: 30

              - if: "{{ buttons | count > 0 }}"
                then:
                  - action: button.press
                    target:
                      entity_id: "{{ buttons }}"

              - delay: 1

              - variables:
                  fail_count: >
                    {{ fail_count + expand(sensors)
                        | selectattr('state', 'eq', 'on')
                        | list | count }}

    - if: "{{ fail_count > 0 }}"
      then:
        - action: script.tts_play
          data:
            message: "Attention! The door lock errors did not been reset!"
            alert: true
