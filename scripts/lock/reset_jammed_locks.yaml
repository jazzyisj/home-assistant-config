###############################################################################
## Reset Jammed Locks
###############################################################################
reset_jammed_locks:
  alias: "Reset Jammed Locks"
  description: "Reset jammed entry locks."
  icon: mdi:lock
  variables:
    buttons: >
      {{ states.binary_sensor | selectattr('entity_id', 'contains', '_door_lock_lock_jammed')
            | selectattr('state', 'eq', 'on')
            | map(attribute='object_id') | map('regex_replace', find='(.*)_door_lock_lock_jammed',
              replace='button.\\1_door_lock_idle_access_control_lock_state', ignorecase=False) | list }}
    entities: >
      {{ expand(buttons) | map(attribute='object_id')
          | map('regex_replace', find='(.*)_door_lock_idle_access_control_lock_state',
              replace='lock.\\1_door_lock', ignorecase=False) | list }}
  sequence:
    - if: "{{ entities == none or entities | count == 0 }}"
      then:
        - stop: "No valid entities."
          error: true

    - action: lock.lock
      data:
        entity_id: "{{ entities }}"

    - delay: 5 # allow locks to unlock

    # toggle lock to reset state from unknown
    - action: lock.unlock
      data:
        entity_id: "{{ entities }}"

    - delay: 5 # allow locks to unlock

    - action: lock.lock
      data:
        entity_id: "{{ entities }}"

    - wait_template: "{{ expand(entities) | selectattr('state', 'eq', 'unlocked') | list | count == 0 }}"
      timeout: 60

    - variables:
        buttons: >
          {{ states.binary_sensor | selectattr('entity_id', 'contains', '_door_lock_lock_jammed')
                | selectattr('state', 'eq', 'on')
                | map(attribute='object_id') | map('regex_replace', find='(.*)_door_lock_lock_jammed',
                  replace='button.\\1_door_lock_idle_access_control_lock_state', ignorecase=False) | list }}
        entities: >
          {{ expand(buttons) | map(attribute='object_id')
              | map('regex_replace', find='(.*)_door_lock_idle_access_control_lock_state',
                  replace='lock.\\1_door_lock', ignorecase=False) | list }}

    - if: "{{ buttons | count > 0 }}"
      then:
        - action: button.press
          target:
            entity_id: "{{ buttons }}"

    - if: "{{ entities | count > 0 }}"
      then:
        - action: script.tts_play
          data:
            message: |
              {%- from 'lock.jinja' import list_locks -%}
              {%- set plural = 's have' if entities | count > 1 else ' has' -%}
              The {{ list_locks(entities, 'lock jam') }} not cleared!
            alert: true
