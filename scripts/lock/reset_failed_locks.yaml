###############################################################################
## Reset Failed Locks
###############################################################################
reset_failed_locks:
  alias: "Reset Failed Locks"
  description: "Reset failed entry locks."
  icon: mdi:lock
  variables:
    buttons: >
      {{ states.binary_sensor
          | selectattr('entity_id', 'contains', '_door_lock_system_hardware_failure')
          | selectattr('state', 'eq', 'on') | map(attribute='object_id')
          | map('regex_replace', find='(.*)_door_lock_system_hardware_failure',
            replace='button.\\1_door_lock_idle_system_hardware_status', ignorecase=False) | list }}
    entities: >
      {{ expand(buttons) | map(attribute='object_id')
          | map('regex_replace', find='(.*)_door_lock_idle_system_hardware_status',
              replace='lock.\\1_door_lock', ignorecase=False) | list }}
  sequence:
    - if: "{{ entities == none or entities | count == 0 }}"
      then:
        - stop: "No valid entities."
          error: true

    # toggle lock to reset state from unknown
    - action: lock.unlock
      data:
        entity_id: "{{ entities }}"

    - delay: 5 # allow locks to unlock

    - action: lock.lock
      data:
        entity_id: "{{ entities }}"

    - wait_template: "{{ expand(entities) | selectattr('state', 'eq', 'unlocked') | list | count == 0 }}"
      timeout: 60

    - variables: # recheck alert may have reset automatically when locked
        buttons: >
          {{ states.binary_sensor
              | selectattr('entity_id', 'contains', '_door_lock_system_hardware_failure')
              | selectattr('state', 'eq', 'on') | map(attribute='object_id')
              | map('regex_replace', find='(.*)_door_lock_system_hardware_failure',
                replace='button.\\1_door_lock_idle_system_hardware_status', ignorecase=False) | list }}
        entities: >
          {{ expand(buttons) | map(attribute='object_id')
              | map('regex_replace', find='(.*)_door_lock_idle_system_hardware_status',
                  replace='lock.\\1_door_lock', ignorecase=False) | list }}

    - if: "{{ buttons | count > 0 }}"
      then:
        - action: button.press
          target:
            entity_id: "{{ buttons }}"

    - if: "{{ entities | count > 0 }}"
      then:
        - action: script.tts_play
          data:
            message: |
              {%- from 'lock.jinja' import list_locks -%}
              The {{ list_locks(entities, 'failure') }} not cleared!
            quiet_play: true
