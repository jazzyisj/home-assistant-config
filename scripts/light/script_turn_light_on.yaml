###############################################################################
## Turn Light On
###############################################################################
turn_light_on:
  alias: "Turn Light On"
  description: "Turn light on."
  icon: mdi:lightbulb
  mode: parallel
  fields:
    lights:
      description: "List of light entity ids"
      example: "['light.dining_room_rgb_light','light.dining_potlights']"
    activate_timer:
      description: "Activate light in use timer"
      example: "true"
    timer_minutes:
      description: "Override timer duration minutes"
      example: "10"
    bypass_timer:
      description: "Bypass light in use timer / manual mode"
      example: "false"
    override:
      description: "Override adaptive lighting"
      example: "false"
    profile:
      description: "Light profile to use"
      example: "default"
    transition:
      description: "Transition time"
      example: "5"
  variables:
    entities: "{{ expand(lights|default('group.lights'))|map(attribute='entity_id')|list}}"
    activate_timer: "{{ activate_timer|default(true) }}"
    bypass_timer: "{{ bypass_timer|default(false) }}"
    override: "{{ override|default(false) }}"
    profile: "{{ profile|default(iif(is_state('input_select.occupancy_mode','Night'),'default_dim','default')) }}"
    transition: "{{ transition|default(0) }}"
  sequence:
    - if: "{{ not activate_timer }}"
      then:
        - service: automation.turn_off
          target:
            entity_id: automation.light_in_use_timer

    - repeat:
        for_each: "{{ entities }}"
        sequence:
          - variables:
              timer: >
                {% set timer = '' %}
                {% if state_attr(repeat.item,'rgb_light') not in ['control','slave'] %}
                  {% if state_attr(repeat.item,'rgb_light') == 'master' %}
                    {% set timer = 'timer.' ~ state_attr(repeat.item,'rgb_control').split('.')[1]|default('') %}
                  {% else %}
                    {% set timer = 'timer.' ~ repeat.item.split('.')[1]|default('') %}
                  {% endif %}
                {% endif %}
                {{ timer if has_value(timer) else none }}
              switch: >
                {% if state_attr(repeat.item,'rgb_light') == 'slave' %}
                    {% set light = state_attr(repeat.item,'master') %}
                {% else %} {% set light = repeat.item %}
                {% endif %}
                {{ (states.switch
                    |selectattr('entity_id','search','adaptive_lighting')
                    |selectattr('attributes.configuration','defined')
                    |selectattr('attributes.configuration.lights','defined')
                    |selectattr('attributes.configuration.lights','search',light)
                    |map(attribute='entity_id')|list)[0]|default(none) }}
              manual: >
                {{ repeat.item in state_attr(switch,'manual_control')
                    if switch != none and state_attr(switch,'manual_control') != none else false }}

          - if: "{{ override }}"
            then:
              - service: light.turn_on
                target:
                  entity_id: "{{ repeat.item }}"
                data:
                  profile: "{{ profile }}"
            else:
              - condition: template
                alias: "Timer bypassed, or no timer, or timer idle and not manual mode"
                value_template: >
                  {{ (bypass_timer or timer == none)
                      or (not manual and is_state(timer,'idle')) }}

              - condition: template
                alias: "Light not in active scene"
                value_template: >
                  {{ repeat.item not in state_attr('binary_sensor.scene_active','entity_id')
                      if is_state('binary_sensor.scene_active','on') else true }}

              - if: "{{ switch != none and is_state(switch,'on') }}"
                then:
                  - if: "{{ is_state(repeat.item,'off') }}"
                    then:
                      - service: adaptive_lighting.apply
                        continue_on_error: true
                        data:
                          entity_id: "{{ switch }}"
                          lights: "{{ repeat.item }}"
                          transition: "{{ transition }}"
                          adapt_brightness: true
                          adapt_color: true
                          prefer_rgb_color: true
                          turn_on_lights: true
                else:
                  - service: light.turn_on
                    continue_on_error: true
                    target:
                      entity_id: "{{ repeat.item }}"
                    data:
                      profile: "{{ profile }}"
                      transition: "{{ transition }}"

    - wait_template: >
        {{ states.light|selectattr('entity_id','in',entities)
            |selectattr('state','eq','off')|list|count == 0 }}
      timeout: 30

    - if: "{{ not activate_timer }}"
      then:
        - service: automation.turn_on
          target:
            entity_id: automation.light_in_use_timer
