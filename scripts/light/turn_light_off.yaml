##############################################################################
# Turn Light Off
##############################################################################
turn_light_off:
  alias: "Turn Light Off"
  description: "Turn light off."
  icon: mdi:lightbulb-off
  mode: parallel
  fields:
    entity_id:
      description: "List of light entity ids"
      example: "light.dining_room_light_rgb"
    activate_timer:
      description: "Activate light in use timer"
      example: "true"
    reset:
      description: "Reset manual mode, bypass timer."
      example: "true"
  variables:
    entities: >
      {% from 'light.jinja' import valid_lights %}
      {{ valid_lights(entity_id) | from_json }}
    activate_timer: "{{ activate_timer | default(false) }}"
    reset: "{{ reset | default(true) }}"
  sequence:
    - if: "{{ entities | count == 0 }}"
      then:
        - action: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: info
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - repeat:
        for_each: "{{ entities }}"
        sequence:
          - variables:
              timer: >
                {% from 'light.jinja' import light_timer %}
                {{ light_timer(repeat.item) }}
              switch: >
                {% from 'light.jinja' import adaptive_switch %}
                {{ adaptive_switch(repeat.item) }}
              manual: >
                {% from 'light.jinja' import manual_mode %}
                {{ manual_mode(repeat.item, switch) }}

          - if:
              - condition: template
                alias: "Light is on"
                value_template: "{{ is_state(repeat.item, 'on') }}"

              - condition: template
                alias: "Reset, no timer, or timer is idle and not manual mode"
                value_template: "{{ reset or (timer == none or (not manual and is_state(timer, 'idle'))) }}"

              - condition: template
                alias: "Reset mode or light not in active scene"
                value_template: >
                  {{ reset or repeat.item not in state_attr('binary_sensor.scene_active', 'entity_id')
                      if is_state('binary_sensor.scene_active', 'on') else true }}

              - condition: template
                alias: "Shower scene off if bathroom light"
                value_template: >
                  {{ iif(repeat.item in area_entities('bathroom'),
                      is_state('switch.shower_scene', 'off'), true) }}
            then:
              - if:
                  - condition: template
                    alias: "Reset color"
                    value_template: "{{ reset and is_state_attr(repeat.item, 'rgb', true) }}"
                then:
                  - action: light.turn_on
                    target:
                      entity_id: "{{ repeat.item }}"
                    data:
                      profile: default_min # reset color

              - action: light.turn_off
                target:
                  entity_id: "{{ repeat.item }}"
                continue_on_error: true

          - if: "{{ is_state(repeat.item, 'off') and timer != none }}"
            then:
              - if: >
                  {{ activate_timer
                      and now() - states[repeat.item].last_changed > timedelta(seconds=1) }}
                then:
                  - action: timer.start
                    target:
                      entity_id: "{{ timer }}"
                    continue_on_error: true
                else:
                  - if: "{{ is_state(timer, ['active', 'paused']) }}"
                    then:
                      - action: timer.cancel
                        target:
                          entity_id: "{{ timer }}"

          - if: "{{ reset and switch != none }}"
            then:
              - action: adaptive_lighting.set_manual_control
                data:
                  entity_id: "{{ switch }}"
                  lights: "{{ repeat.item }}"
                  manual_control: false
                continue_on_error: true

          - delay:
              milliseconds: 100 #ZWAVE don't overwhelm the network
