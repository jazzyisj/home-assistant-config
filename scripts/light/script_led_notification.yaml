##################################################################################################
## LED Notification
##################################################################################################
led_notification:
  alias: LED Notification
  description: Set led alarm notification.
  mode: queued
  max: 50
  max_exceeded: error
  fields:
    entities:
      description: One or more entities to control.
      example: ligt.dining_room,light.porch
    alert_type:
      description: alert_type
      example: alarm
    reset:
      description: reset led
      example: 'true'
  variables:
    reset: "{{ reset if reset is defined else false }}"
    quiet: "{{ is_state('binary_sensor.quiet_hours','on') }}"
  sequence:
    - choose:
        - conditions: "{{ alert_type in ['triggered','was_triggered'] }}"
          sequence:
            - service: script.turn_on
              data:
                entity_id: script.inovelli_led_control
                variables:
                  entities: "{{ entities }}"
                  duration: 255
                  color: red
                  brightness: 10
                  effect: "{{ 'fast blink' if alert_type == 'triggered' else 'solid' }}"

        - conditions: "{{ alert_type == 'alarm' }}"
          sequence:
            - variables:
                state: "{{ states('alarm_control_panel.alarmo') }}"
                arm_mode: "{{ state_attr('alarm_control_panel.alarmo','arm_mode') }}"

            - service: script.turn_on
              data:
                entity_id: script.inovelli_led_control
                variables:
                  entities: "{{ entities }}"
                  duration: >
                    {% if is_state('binary_sensor.open_sensor','on') %} 255 {# inf #}
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} 255 {# inf #}
                    {% elif state == 'arming' and arm_mode == 'armed_home' %} 62 {# 2min #}
                    {% elif state == 'arming' and arm_mode == 'armed_night' %} 62 {# 2min #}
                    {% elif state == 'arming' and arm_mode == 'armed_away' %} 62 {# 2min #}
                    {% elif state == 'pending' %} 62 {# 2min #}
                    {% elif state == 'disarmed' %} 255 {# inf #}
                    {% elif state == 'armed_home' %} 255 {# inf #}
                    {% elif state == 'armed_night' %} 255 {# inf #}
                    {% elif state == 'armed_away' %} 255 {# inf #}
                    {% else %} 255
                    {% endif %}
                  color: >
                    {% if is_state('binary_sensor.open_sensor','on') %} orange
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} orange
                    {% elif state == 'arming' and arm_mode == 'armed_home' %} cyan
                    {% elif state == 'arming' and arm_mode == 'armed_night' %} violet
                    {% elif state == 'arming' and arm_mode == 'armed_away' %} pink
                    {% elif state == 'pending' %} orange
                    {% elif state == 'disarmed' %} green
                    {% elif state == 'armed_home' %} cyan
                    {% elif state == 'armed_night' %} violet
                    {% elif state == 'armed_away' %} pink
                    {% else %} blue
                    {% endif %}
                  brightness: >
                    {% if is_state('binary_sensor.open_sensor','on') %} 10
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} 10
                    {% elif state == 'arming' and arm_mode == 'armed_home' %} {{ 2 if quiet else 7 }}
                    {% elif state == 'arming' and arm_mode == 'armed_night' %} {{ 2 if quiet else 7 }}
                    {% elif state == 'arming' and arm_mode == 'armed_away' %} {{ 2 if quiet else 7 }}
                    {% elif state == 'pending' %} {{ 2 if quiet else 7 }}
                    {% elif state == 'disarmed' %} {{ 2 if quiet else 4 }}
                    {% elif state == 'armed_home' %} {{ 2 if quiet else 4 }}
                    {% elif state == 'armed_night' %} {{ 2 if quiet else 4 }}
                    {% elif state == 'armed_away' %} {{ 2 if quiet else 4 }}
                    {% else %} 3
                    {% endif %}
                  effect: >
                    {% if is_state('binary_sensor.open_sensor','on') %} fast blink
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} fast blink
                    {% elif is_state('alert.bypassed_sensor','on') %} slow blink
                    {% elif state == 'arming' and arm_mode == 'armed_home' %} chase
                    {% elif state == 'arming' and arm_mode == 'armed_home' %} chase
                    {% elif state == 'arming' and arm_mode == 'armed_night' %} chase
                    {% elif state == 'arming' and arm_mode == 'armed_away' %} chase
                    {% elif state == 'pending' %} chase
                    {% elif state == 'disarmed' %} solid
                    {% elif state == 'armed_home' %} solid
                    {% elif state == 'armed_night' %} solid
                    {% elif state == 'armed_away' %} solid
                    {% else %} off
                    {% endif %}

        - conditions: "{{ alert_type == 'presence' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('binary_sensor.jason_home','on') and (as_timestamp(now())
                      - as_timestamp(states.binary_sensor.jason_home.last_changed) < 600) %} jason_home
                  {% elif is_state('binary_sensor.sheri_home','on') and (as_timestamp(now())
                      - as_timestamp(states.binary_sensor.sheri_home.last_changed) < 600) %} sheri_home
                  {% elif is_state('input_boolean.guest_home','on') and (as_timestamp(now())
                      - as_timestamp(states.input_boolean.guest_home.last_changed) < 600) %} guest_home
                  {% elif is_state('input_boolean.jason_almost_home','on') %} jason_almost
                  {% elif is_state('input_boolean.sheri_almost_home','on') %} sheri_almost
                  {% elif states('proximity.jhome')|int < 4
                      and state_attr('proximity.jhome','dir_of_travel') == 'towards' %} jason_heading
                  {% elif states('proximity.shome')|int < 4
                      and state_attr('proximity.shome','dir_of_travel') == 'towards' %} sheri_heading
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: >
                        {% if state == 'jason_home' %} 62 {# 2min #}
                        {% elif state == 'sheri_home' %} 62 {# 2min #}
                        {% elif state == 'guest_home' %} 62 {# 2min #}
                        {% elif state == 'jason_almost' %} 62 {# 2min #}
                        {% elif state == 'sheri_almost' %} 255 {# inf #}
                        {% elif state == 'jason_heading' %} 255 {# inf #}
                        {% elif state == 'sheri_heading' %} 255 {# inf #}
                        {% else %} 255
                        {% endif %}
                      color: >
                        {% if state == 'jason_home' %} cyan
                        {% elif state == 'sheri_home' %} pink
                        {% elif state == 'guest_home' %} orange
                        {% elif state == 'jason_almost' %} cyan
                        {% elif state == 'sheri_almost' %} pink
                        {% elif state == 'jason_heading' %} cyan
                        {% elif state == 'sheri_heading' %} pink
                        {% else %} blue
                        {% endif %}
                      brightness: "{{ 2 if quiet else (7 if state != 'off' else 3) }}"
                      effect: >
                        {% if state == 'jason_home' %} solid
                        {% elif state == 'sheri_home' %} solid
                        {% elif state == 'guest_home' %} solid
                        {% elif state == 'jason_almost' %} chase
                        {% elif state == 'sheri_almost' %} chase
                        {% elif state == 'jason_heading' %} pulse
                        {% elif state == 'sheri_heading' %} pulse
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'weather' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('binary_sensor.noaa_alert','on') %}{% set alert = states('input_text.current_noaa_alert_severity') %}
                  {% elif is_state('binary_sensor.envcan_alert','on') %}{% set alert = states('input_select.current_envcan_alert_severity') %}
                  {% endif %}
                  {% if alert == 'extreme' or alert == 'watch' %} extreme
                  {% elif alert == 'severe' or alert == 'warning' %} severe
                  {% elif alert == 'moderate' or alert == 'advisory' %} moderate
                  {% elif alert == 'minor' or alert == 'statement' %} minor
                  {% elif is_state('binary_sensor.storm_approaching_alert','on') %} storm
                  {% elif is_state('binary_sensor.outdoor_high_temperature_alert','on') %} high_temp
                  {% elif is_state('binary_sensor.outdoor_low_temperature_alert','on') %} low_temp
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: 255
                      color: >
                        {% if state == 'extreme' %} red
                        {% elif state == 'severe' %} orange
                        {% elif state == 'moderate' %} orange
                        {% elif state == 'minor' %} yellow
                        {% elif state == 'storm' %} violet
                        {% elif state == 'high_temp' %} orange
                        {% elif state == 'low_temp' %} cyan
                        {% else %} blue
                        {% endif %}
                      brightness: >
                        {% if state in ['extreme','severe','moderate','minor'] %} 10
                        {% elif quiet %} 2
                        {% elif state != 'off' %} 5
                        {% else %} 3
                        {% endif %}
                      effect: >
                        {% if state == 'extreme' %} fast blink
                        {% elif state == 'severe' %} fast blink
                        {% elif state == 'moderate' %} slow blink
                        {% elif state == 'minor' %} slow blink
                        {% elif state == 'storm' %} solid
                        {% elif state == 'high_temp' %} solid
                        {% elif state == 'low_temp' %} solid
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'garage' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('binary_sensor.garage_door_connected','off') %} offline
                  {% elif is_state('alert.garage_door_not_closed','on') %} not_closed
                  {% elif is_state('alert.garage_door_open','on') %} open_alert
                  {% elif is_state('input_boolean.garage_door_switch_alert','on') %} switch_alert
                  {% elif states('cover.garage_door_opener') in ['open','opening','closing'] %} open
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: >
                        {% if state == 'offline' %} 255
                        {% elif state == 'not_closed' %} 62
                        {% elif state == 'open_alert' %} 62
                        {% elif state == 'switch_alert' %} 62
                        {% elif state == 'open' %} 255
                        {% else %} 255
                        {% endif %}
                      color: >
                        {% if state == 'offline' %} red
                        {% elif state == 'not_closed' %} orange
                        {% elif state == 'open_alert' %} orange
                        {% elif state == 'switch_alert' %} orange
                        {% elif state == 'open' %} yellow
                        {% else %} blue
                        {% endif %}
                      brightness: "{{ 2 if quiet else (7 if state != 'off' else 3) }}"
                      effect: >
                        {% if state == 'offline' %} pulse
                        {% elif state == 'not_closed' %} fast blink
                        {% elif state == 'open_alert' %} fast blink
                        {% elif state == 'switch_alert' %} fast blink
                        {% elif state == 'open' %} slow blink
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'alarm_clock' }}"
          sequence:
            - variables:
                state: "{{ states('binary_sensor.alarm_clock_active') }}"
            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: 255
                      color: "{{ 'yellow' if state != 'off' else 'blue' }}"
                      brightness: "{{ 10 if state != 'off' else 3 }}"
                      effect: "{{ 'fast blink' if state == 'on' else 'off' }}"

        - conditions: "{{ alert_type == 'bedtime' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('input_boolean.bedtime_delayed','on') %} delayed
                  {% elif is_state('binary_sensor.bedtime_active','on') %} active
                  {% else %} off
                  {% endif %}
            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: 255
                      color: "{{ 'violet' if state != 'off' else 'blue' }}"
                      brightness: "{{ 5 if state != 'off' else 3 }}"
                      effect: >
                        {% if state == 'delayed' %} pulse
                        {% elif state == 'active' %} chase
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'shower' }}"
          sequence:
            - variables:
                state: "{{ states('script.start_shower') }}"

            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: 255
                      color: "{{ 'cyan' if state != 'off' else 'blue' }}"
                      brightness: "{{ 10 if state != 'off' else 3 }}"
                      effect: "{{ 'chase' if state != 'off' else 'off' }}"

        - conditions: "{{ alert_type == 'media' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('input_boolean.mute_all','on') %} mute
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: "{{ 30 if state != 'off' else 255 }}"
                      color: "{{ 'yellow' if state == 'mute' else 'blue' }}"
                      brightness: "{{ 2 if quiet else (7 if state != 'off' else 3) }}"
                      effect: "{{ 'pulse' if state == 'mute' else 'off' }}"

        - conditions: "{{ alert_type == 'reminder' }}"
          sequence:
            - variables:
                state: >
                  {% if is_state('input_boolean.dexter_medication_active','on') %} dexter
                  {% elif is_state('input_boolean.jason_medication_active','on') %} jason
                  {% elif is_state('input_boolean.maddie_mealtime_active','on') %} maddie
                  {% else %} off
                  {% endif %}
            - choose:
                - conditions: "{{ state == 'off' and not reset }}"
                  sequence:
                    - service: script.led_reset
                      data:
                        entities: "{{ entities }}"

              default:
                - service: script.turn_on
                  data:
                    entity_id: script.inovelli_led_control
                    variables:
                      entities: "{{ entities }}"
                      duration: 255
                      color: >
                        {% if state == 'dexter' %} yellow
                        {% elif state == 'jason' %} cyan
                        {% elif state == 'maddie' %} orange

                        {% else %} blue
                        {% endif %}
                      brightness: "{{ 10 if state != 'off' else 3 }}"
                      effect: "{{ 'chase' if state != 'off' else 'off' }}"

        - conditions: "{{ alert_type == 'hass' }}"
          sequence:
            - service: script.turn_on
              data:
                entity_id: script.inovelli_led_control
                variables:
                  entities: "{{ entities }}"
                  duration: 70
                  color: green
                  brightness: 10
                  effect: solid

      default:
        - service: script.turn_on
          data:
            entity_id: script.inovelli_led_control
            variables:
              entities: "{{ entities }}"
              effect: 'off'
