##############################################################################
# Turn Light Off
##############################################################################
turn_light_off:
  alias: "Turn Light Off"
  description: "Turn light off."
  icon: mdi:lightbulb-off
  mode: parallel
  fields:
    entities:
      description: "List of light entity ids"
      example: "light.dining_room_rgb_light"
    activate_timer:
      description: "Activate light in use timer"
      example: "true"
    bypass_timer:
      description: "Bypass light in use timer"
      example: "false"
    override:
      description: "Override adaptive lighting"
      example: "false"
  variables:
    entities: > # convert to list
      {% set all = expand(state_attr('binary_sensor.lights_on','entity_id'))
          |selectattr('state','in',['on','off'])
          |map(attribute='entity_id')|list %}
      {% set entities = expand(lights|default(all))|map(attribute='entity_id')|list %}
      {{ entities }}
    activate_timer: "{{ activate_timer|default(true) }}"
    bypass_timer: "{{ bypass_timer|default(false) }}"
    override: "{{ override|default(false) }}"
  sequence:
    - if: "{{ not activate_timer and not override }}"
      then:
        - service: automation.turn_off
          target:
            entity_id: automation.light_in_use_timer

    - repeat:
        for_each: "{{ entities }}"
        sequence:
          - variables:
              timer: "timer.{{ repeat.item.split('.')[1]|default('')|replace('_rgb','') }}"

          - if: "{{ is_state(repeat.item,'off') }}"
            then:
              - if: "{{ override and is_state(timer,'idle') }}"
                then:
                  - service: timer.start
                    target:
                      entity_id: "{{ timer }}"
                else:
                  - service: timer.cancel
                    target:
                      entity_id: "{{ timer }}"
            else:
              - if:
                  - condition: template
                    alias: "No timer, timer bypassed or not active."
                    value_template: "{{ is_state(timer,'idle') or bypass_timer or not has_value(timer) }}"

                  - condition: template
                    alias: "Shower scene off if bathroom light"
                    value_template: >
                      {{ iif(repeat.item in area_entities('bathroom'),
                          is_state('input_boolean.shower_scene','off'),true) }}
                then:
                  - service: light.turn_off
                    continue_on_error: true
                    target:
                      entity_id: "{{ repeat.item }}"

    - if: "{{ not activate_timer and not override }}"
      then:
        - delay: 5 # wait for lights turn off

        - service: automation.turn_on
          target:
            entity_id: automation.light_in_use_timer
