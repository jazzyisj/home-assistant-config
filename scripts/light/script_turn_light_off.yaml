##############################################################################
# Turn Light Off
##############################################################################
turn_light_off:
  alias: "Turn Light Off"
  description: "Turn light off."
  icon: mdi:lightbulb-off
  mode: parallel
  fields:
    lights:
      description: "List of light entity ids"
      example: "light.dining_room_light_rgb"
    activate_timer:
      description: "Activate light in use timer"
      example: "true"
    bypass_timer:
      description: "Bypass light in use timer"
      example: "false"
    override:
      description: "Override scene/manual mode."
      example: "false"
    reset:
      description: "Reset manual mode."
      example: "false"
  variables:
    entities: > # convert lights to list
      {% set all = state_attr('group.lights','entity_id')|select('has_value')|list %}
      {% set entities = expand(lights|default(all))|map(attribute='entity_id')|list %}
      {{ entities }}
    activate_timer: "{{ activate_timer|default(true) }}"
    bypass_timer: "{{ bypass_timer|default(false) }}"
    override: "{{ override|default(false) }}"
    reset: "{{ reset|default(false) }}"
  sequence:
    - if:
        - condition: template
          value_template: "{{ entities == none or entities|count == 0 }}"
      then:
        - stop: "No entities specified."
          error: true

    - if: "{{ not activate_timer }}"
      then:
        - service: automation.turn_off
          target:
            entity_id: automation.light_in_use_timer

    - repeat:
        for_each: "{{ entities }}"
        sequence:
          - variables:
              timer: >
                {% set timer = '' %}
                {% if state_attr(repeat.item,'rgb_light') != 'slave' %}
                  {% if state_attr(repeat.item,'rgb_light') == 'master' %}
                    {% set timer = 'timer.' ~ state_attr(repeat.item,'rgb_control').split('.')[1] %}
                  {% else %}
                    {% set timer = 'timer.' ~ repeat.item.split('.')[1]|default('') %}
                  {% endif %}
                {% endif %}
                {{ timer if has_value(timer) else none }}
              switch: >
                {% if state_attr(repeat.item,'rgb_light') == 'slave' %}
                    {% set light = state_attr(repeat.item,'master') %}
                {% else %} {% set light = repeat.item %}
                {% endif %}
                {{ (states.switch
                    |selectattr('entity_id','search','adaptive_lighting')
                    |selectattr('attributes.configuration','defined')
                    |selectattr('attributes.configuration.lights','defined')
                    |selectattr('attributes.configuration.lights','search',light)
                    |map(attribute='entity_id')|list)[0]|default(none) }}
              manual: >
                {{ not override and not reset and repeat.item in state_attr(switch,'manual_control')
                    if switch != none and state_attr(switch,'manual_control') != none else false }}

          - if: "{{ is_state(repeat.item,'off') }}"
            then:
              - if: "{{ timer != none and activate_timer and is_state(timer,'idle') }}"
                then:
                  - service: timer.start
                    target:
                      entity_id: "{{ timer }}"
                    continue_on_error: true
                else:
                  - service: timer.cancel
                    target:
                      entity_id: "{{ timer }}"
                    continue_on_error: true
            else:
              - if:
                  - condition: template
                    alias: "Timer bypassed, or no timer, or timer idle and not manual mode"
                    value_template: >
                      {{ ((bypass_timer or timer == none)
                          or (not manual and is_state(timer,'idle'))) }}

                  - condition: template
                    alias: "Light not in active scene"
                    value_template: >
                      {{ override or repeat.item not in state_attr('binary_sensor.scene_active','entity_id')
                          if is_state('binary_sensor.scene_active','on') else true }}

                  - condition: template
                    alias: "Shower scene off if bathroom light"
                    value_template: >
                      {{ iif(repeat.item in area_entities('bathroom'),
                          is_state('switch.shower_scene','off'),true) }}
                then:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ repeat.item }}"
                    continue_on_error: true

          - if: "{{ reset and switch != none }}"
            then:
              - service: adaptive_lighting.set_manual_control
                data:
                  entity_id: "{{ switch }}"
                  lights: "{{ repeat.item }}"
                  manual_control: false
                continue_on_error: true

    - if: "{{ not activate_timer }}"
      then:
        - service: automation.turn_on
          target:
            entity_id: automation.light_in_use_timer
