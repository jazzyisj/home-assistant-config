###############################################################################
## LED Notification
###############################################################################
led_notification:
  alias: 'LED Notification'
  description: 'Set led alarm notification.'
  mode: queued
  max: 100
  max_exceeded: error
  fields:
    entities:
      description: 'A list object of entities to send notification to.'
      example: "['light.dining_room_potlights','light.front_porch_light']"
    alert_type:
      description: 'Notification type.'
      example: 'alarm'
    reset:
      description: reset led
      example: 'true'
  variables:
    reset: '{{ reset|default(false) }}'
    quiet: "{{ is_state('binary_sensor.quiet_time','on') }}"
  sequence:
    - choose:
        - conditions: "{{ alert_type in ['triggered','was_triggered'] }}"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.inovelli_led_control
              data:
                variables:
                  entities: '{{ entities }}'
                  duration: 255
                  color: 255
                  brightness: 10
                  effect: "{{ 'fast blink' if alert_type == 'triggered' else 'solid' }}"

        - conditions: "{{ alert_type == 'alarm_clock' }}"
          sequence:
            - variables:
                alert_state: "{{ states('binary_sensor.alarm_clock_led_alert') }}"
            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: >
                        {% if is_state('input_boolean.alarm_clock_failed','on') %} orange
                        {% else %}{{ 'yellow' if alert_state != 'off' else 'blue' }}
                        {% endif %}
                      brightness: >
                        {% if is_state('input_boolean.alarm_clock_failed','on') %} 10
                        {% else %}{{ 10 if alert_state != 'off' else 3 }}
                        {% endif %}
                      effect: >
                        {% if is_state('input_boolean.alarm_clock_failed','on') %} chase
                        {% else %}{{ 'fast blink' if alert_state == 'on' else 'off' }}
                        {% endif %}

        - conditions: "{{ alert_type == 'alarm' }}"
          sequence:
            - variables:
                alert_state: "{{ states('alarm_control_panel.master') }}"
                arm_mode: "{{ state_attr('alarm_control_panel.master','arm_mode') }}"

            - service: script.turn_on
              target:
                entity_id: script.inovelli_led_control
              data:
                variables:
                  entities: '{{ entities }}'
                  duration: >
                    {% if is_state('binary_sensor.alarm_open_sensor_alert','on') %} 255 {# inf #}
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} 255 {# inf #}
                    {% elif alert_state == 'arming' and arm_mode == 'armed_home' %} 62 {# 2min #}
                    {% elif alert_state == 'arming' and arm_mode == 'armed_night' %} 62 {# 2min #}
                    {% elif alert_state == 'arming' and arm_mode == 'armed_away' %} 62 {# 2min #}
                    {% elif alert_state == 'pending' %} 62 {# 2min #}
                    {% elif alert_state == 'disarmed' %} 255 {# inf #}
                    {% elif alert_state == 'armed_home' %} 255 {# inf #}
                    {% elif alert_state == 'armed_night' %} 255 {# inf #}
                    {% elif alert_state == 'armed_away' %} 255 {# inf #}
                    {% else %} 255
                    {% endif %}
                  color: >
                    {% if is_state('binary_sensor.alarm_open_sensor_alert','on') %} 15
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} 15
                    {% elif alert_state == 'arming' and arm_mode == 'armed_home' %} 140
                    {% elif alert_state == 'arming' and arm_mode == 'armed_night' %} 180
                    {% elif alert_state == 'arming' and arm_mode == 'armed_away' %} 230
                    {% elif alert_state == 'pending' %} 15
                    {% elif alert_state == 'disarmed' %} 80
                    {% elif alert_state == 'armed_home' %} 140
                    {% elif alert_state == 'armed_night' %} 180
                    {% elif alert_state == 'armed_away' %} 230
                    {% else %} blue
                    {% endif %}
                  brightness: >
                    {% if is_state('binary_sensor.alarm_open_sensor_alert','on') or is_state('binary_sensor.alarm_bypassed_sensor_alert','on') %} 10
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} 10
                    {% elif alert_state == 'arming' and arm_mode == 'armed_home' %} {{ 2 if quiet else 7 }}
                    {% elif alert_state == 'arming' and arm_mode == 'armed_night' %} {{ 2 if quiet else 7 }}
                    {% elif alert_state == 'arming' and arm_mode == 'armed_away' %} {{ 2 if quiet else 7 }}
                    {% elif alert_state == 'pending' %} {{ 2 if quiet else 7 }}
                    {% elif alert_state == 'disarmed' %} {{ 2 if quiet else 4 }}
                    {% elif alert_state == 'armed_home' %} {{ 2 if quiet else 4 }}
                    {% elif alert_state == 'armed_night' %} {{ 2 if quiet else 4 }}
                    {% elif alert_state == 'armed_away' %} {{ 2 if quiet else 4 }}
                    {% else %} 3
                    {% endif %}
                  effect: >
                    {% if is_state('binary_sensor.alarm_open_sensor_alert','on') %} fast blink
                    {% elif is_state('alert.door_lock_jammed','on') or is_state('alert.door_lock_failed','on') %} fast blink
                    {% elif is_state('binary_sensor.alarm_bypassed_sensor_alert','on') %} slow blink
                    {% elif alert_state == 'arming' and arm_mode == 'armed_home' %} chase
                    {% elif alert_state == 'arming' and arm_mode == 'armed_home' %} chase
                    {% elif alert_state == 'arming' and arm_mode == 'armed_night' %} chase
                    {% elif alert_state == 'arming' and arm_mode == 'armed_away' %} chase
                    {% elif alert_state == 'pending' %} chase
                    {% elif alert_state == 'disarmed' %} solid
                    {% elif alert_state == 'armed_home' %} solid
                    {% elif alert_state == 'armed_night' %} solid
                    {% elif alert_state == 'armed_away' %} solid
                    {% else %} off
                    {% endif %}

        - conditions: "{{ alert_type == 'presence' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('binary_sensor.jason_home','on') and (now()
                      - states.binary_sensor.jason_home.last_changed < timedelta(minutes=10)) %} jason_home
                  {% elif is_state('binary_sensor.sheri_home','on') and (now()
                      - states.binary_sensor.sheri_home.last_changed < timedelta(minutes=10)) %} sheri_home
                  {% elif is_state('input_boolean.guest_home','on') and (now()
                      - states.input_boolean.guest_home.last_changed < timedelta(minutes=10)) %} guest_home
                  {% elif is_state('input_boolean.jason_almost_home','on') %} jason_almost
                  {% elif is_state('input_boolean.sheri_almost_home','on') %} sheri_almost
                  {% elif states('proximity.jphone_home')|int(0) < 4
                      and state_attr('proximity.jphone_home','dir_of_travel') == 'towards' %} jason_heading
                  {% elif states('proximity.sphone_home')|int(0) < 4
                      and state_attr('proximity.sphone_home','dir_of_travel') == 'towards' %} sheri_heading
                  {% elif is_state('binary_sensor.jason_phone_connected','off') %} jason_connected
                  {% elif is_state('binary_sensor.sheri_phone_connected','off') %} sheri_connected
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: >
                        {% if alert_state == 'jason_home' %} 62 {# 2min #}
                        {% elif alert_state == 'sheri_home' %} 62 {# 2min #}
                        {% elif alert_state == 'guest_home' %} 62 {# 2min #}
                        {% elif alert_state == 'jason_almost' %} 62 {# 2min #}
                        {% elif alert_state == 'sheri_almost' %} 255 {# inf #}
                        {% elif alert_state == 'jason_heading' %} 255 {# inf #}
                        {% elif alert_state == 'sheri_heading' %} 255 {# inf #}
                        {% elif alert_state == 'jason_connected' %} 255 {# inf #}
                        {% elif alert_state == 'sheri_connected' %} 255 {# inf #}
                        {% else %} 255
                        {% endif %}
                      color: >
                        {% if alert_state == 'jason_home' %} 150
                        {% elif alert_state == 'sheri_home' %} 210
                        {% elif alert_state == 'guest_home' %} 20
                        {% elif alert_state == 'jason_almost' %} 150
                        {% elif alert_state == 'sheri_almost' %} 210
                        {% elif alert_state == 'jason_heading' %} 150
                        {% elif alert_state == 'sheri_heading' %} 210
                        {% elif alert_state == 'jason_connected' %} 150
                        {% elif alert_state == 'sheri_connected' %} 210
                        {% else %} 170
                        {% endif %}
                      brightness: "{{ 2 if quiet else (7 if alert_state != 'off' else 3) }}"
                      effect: >
                        {% if alert_state == 'jason_home' %} solid
                        {% elif alert_state == 'sheri_home' %} solid
                        {% elif alert_state == 'guest_home' %} solid
                        {% elif alert_state == 'jason_almost' %} chase
                        {% elif alert_state == 'sheri_almost' %} chase
                        {% elif alert_state == 'jason_heading' %} pulse
                        {% elif alert_state == 'sheri_heading' %} pulse
                        {% elif alert_state == 'jason_connected' %} fast blink
                        {% elif alert_state == 'sheri_connected' %} fast blink
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'weather' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('binary_sensor.noaa_weather_alert','on') %}{% set alert = state_attr('binary_sensor.noaa_weather_alert','severity') %}
                  {% elif is_state('binary_sensor.envcan_weather_alert','on') %}{% set alert = state_attr('binary_sensor.envcan_weather_alert','severity') %}
                  {% endif %}
                  {% if alert == 'extreme' or alert == 'watch' %} extreme
                  {% elif alert == 'severe' or alert == 'warning' %} severe
                  {% elif alert == 'moderate' or alert == 'advisory' %} moderate
                  {% elif alert == 'minor' or alert == 'statement' %} minor
                  {% elif is_state('binary_sensor.storm_approaching_alert','on') %} storm
                  {% elif is_state('binary_sensor.outdoor_high_temperature_alert','on') %} high_temp
                  {% elif is_state('binary_sensor.outdoor_low_temperature_alert','on') %} low_temp
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: >
                        {% if alert_state == 'extreme' %} 240
                        {% elif alert_state == 'severe' %} 5
                        {% elif alert_state == 'moderate' %} 35
                        {% elif alert_state == 'minor' %} 50
                        {% elif alert_state == 'storm' %} 190
                        {% elif alert_state == 'high_temp' %} 15
                        {% elif alert_state == 'low_temp' %} 25
                        {% else %} 170
                        {% endif %}
                      brightness: >
                        {% if alert_state in ['extreme','severe','moderate','minor'] %} 10
                        {% elif quiet %} 2
                        {% elif alert_state != 'off' %} 5
                        {% else %} 3
                        {% endif %}
                      effect: >
                        {% if alert_state == 'extreme' %} fast blink
                        {% elif alert_state == 'severe' %} solid
                        {% elif alert_state == 'moderate' %} solid
                        {% elif alert_state == 'minor' %} solid
                        {% elif alert_state == 'storm' %} solid
                        {% elif alert_state == 'high_temp' %} solid
                        {% elif alert_state == 'low_temp' %} solid
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'garage' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('binary_sensor.garage_door_connected','off') %} offline
                  {% elif is_state('input_boolean.garage_door_close_alert','on')
                      or is_state('input_boolean.garage_door_open_alert','on')  %} alert
                  {% elif states('cover.garage_door_opener') in ['open','opening','closing'] %} open
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: >
                        {% if alert_state == 'offline' %} 255
                        {% elif alert_state == 'alert' %} 62
                        {% elif alert_state == 'open' %} 255
                        {% else %} 255
                        {% endif %}
                      color: >
                        {% if alert_state == 'offline' %} 0
                        {% elif alert_state == 'alert' %} 15
                        {% elif alert_state == 'open' %} 40
                        {% else %} 170
                        {% endif %}
                      brightness: "{{ 2 if quiet else (7 if alert_state != 'off' else 3) }}"
                      effect: >
                        {% if alert_state == 'offline' %} pulse
                        {% elif alert_state == 'alert' %} fast blink
                        {% elif alert_state == 'open' %} slow blink
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'scene' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('input_boolean.company_scene','on') %} company
                  {% elif is_state('input_boolean.movie_scene','on') %} movie
                  {% elif is_state('input_boolean.chill_scene','on') %} chill
                  {% elif is_state('binary_sensor.waketime_active','on') %} waketime
                  {% elif is_state('input_boolean.bedtime_delayed','on') %} delayed
                  {% elif is_state('binary_sensor.bedtime_active','on') %} bedtime
                  {% else %} off
                  {% endif %}
            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: >
                        {% if alert_state == 'company' %} 125
                        {% elif alert_state == 'movie' %} 145
                        {% elif alert_state == 'chill' %} 165
                        {% elif alert_state == 'waketime' %} 35
                        {% elif alert_state == 'delayed' %} 180
                        {% elif alert_state == 'bedtime' %} 180
                        {% else %} 170
                        {% endif %}
                      brightness: "{{ 5 if alert_state != 'off' else 3 }}"
                      effect: >
                        {% if alert_state in ['movie','company','chill'] %} pulse
                        {% elif alert_state == 'delayed' %} slow blink
                        {% elif alert_state in ['waketime','bedtime'] %} chase
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'shower' }}"
          sequence:
            - variables:
                alert_state: "{{ states('input_boolean.shower_scene') }}"

            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: "{{ '130' if alert_state != 'off' else '170' }}"
                      brightness: "{{ 10 if alert_state != 'off' else 3 }}"
                      effect: "{{ 'chase' if alert_state != 'off' else 'off' }}"

        - conditions: "{{ alert_type == 'media' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('switch.system_mute','on') %} mute
                  {% elif states('variable.tts_saved_messages')|int(0) > 0 %} msg
                  {% else %} off
                  {% endif %}

            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: >
                        {% if alert_state == 'mute' %} 15
                        {% elif alert_state == 'msg' %} 255
                        {% else %} 170
                        {% endif %}
                      brightness: "{{ 2 if quiet else (7 if alert_state != 'off' else 3) }}"
                      effect: >
                        {% if alert_state == 'mute' %} pulse
                        {% elif alert_state == 'msg' %} fast blink
                        {% else %} off
                        {% endif %}

        - conditions: "{{ alert_type == 'reminder' }}"
          sequence:
            - variables:
                alert_state: >
                  {% if is_state('input_boolean.dexter_medication_active','on') %} dexter
                  {% elif is_state('input_boolean.jason_medication_active','on') %} jason
                  {% elif is_state('input_boolean.maddie_mealtime_active','on') %} maddie
                  {% elif is_state('input_boolean.hot_tub_maintenance_active','on') %} hot_tub
                  {% elif is_state('input_boolean.garbage_alert','on') %} garbage
                  {% elif is_state('input_boolean.recycle_alert','on') %} recycle
                  {% elif is_state('input_boolean.yardwaste_alert','on') %} yardwaste
                  {% else %} off
                  {% endif %}
            - choose:
                - conditions: "{{ reset and alert_state == 'off' }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.led_reset
                      data:
                        variables:
                          entities: '{{ entities }}'
                          reset: true
              default:
                - service: script.turn_on
                  target:
                    entity_id: script.inovelli_led_control
                  data:
                    variables:
                      entities: '{{ entities }}'
                      duration: 255
                      color: > # change color confused with garage
                        {% if alert_state == 'dexter' %} 110
                        {% elif alert_state == 'jason' %} 110
                        {% elif alert_state == 'maddie' %} 110
                        {% elif alert_state == 'hot_tub' %} 110
                        {% elif alert_state == 'garbage' %} 35
                        {% elif alert_state == 'recycle' %} 145
                        {% elif alert_state == 'yardwaste' %} 85
                        {% else %} blue
                        {% endif %}
                      brightness: "{{ 10 if alert_state != 'off' else 3 }}"
                      effect: "{{ 'pulse' if alert_state != 'off' else 'off' }}"

        - conditions: "{{ alert_type == 'hass' }}"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.inovelli_led_control
              data:
                variables:
                  entities: '{{ entities }}'
                  duration: 70
                  color: 90
                  brightness: 10
                  effect: solid
