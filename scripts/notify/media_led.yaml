###############################################################################
## Media LED
###############################################################################
media_led:
  alias: "Media LED"
  description: "Set led notification."
  mode: queued
  fields:
    reset:
      description: "Reset LED"
      example: "true"
  variables:
    reset: "{{ reset | default(false) }}"
    entities: "{{ state_attr('group.media_led', 'entity_id') }}"
    quiet: "{{ is_state('binary_sensor.quiet_time', 'on') }}"
    alert_state: >
      {% if states('sensor.tts_saved_messages') | int(0) > 0 %} msg
      {% elif is_state('switch.system_mute', 'on') %} mute
      {% else %} off
      {% endif %}
    duration: 255
    color: >
      {% if alert_state == 'msg' %} 255
      {% elif alert_state == 'mute' %} 15
      {% else %} 170
      {% endif %}
    brightness: "{{ 2 if quiet else (7 if alert_state != 'off' else 3) }}"
    effect: >
      {% if alert_state == 'mute' %} pulse
      {% elif alert_state == 'msg' %} fast blink
      {% else %} off
      {% endif %}
  sequence:
    - if: "{{ entities == none or entities | count == 0 }}"
      then:
        - service: system_log.write
          data:
            logger: "{{ this.entity_id }}"
            level: warning
            message: "Stop: No valid entities."

        - stop: "No valid entities."

    - if: "{{ alert_state == 'off' and not reset }}"
      then:
        - service: script.turn_on
          target:
            entity_id: script.led_reset
          data:
            variables:
              entities: "{{ entities }}"
      else:
        - service: script.turn_on
          target:
            entity_id: script.inovelli_led_control
          data:
            variables:
              entities: "{{ entities }}"
              duration: "{{ duration }}"
              color: "{{ color }}"
              brightness: "{{ brightness }}"
              effect: "{{ effect }}"
