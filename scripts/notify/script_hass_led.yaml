###############################################################################
## HASS LED
###############################################################################
hass_led:
  alias: "HASS LED"
  description: "Set led notification."
  mode: queued
  fields:
    reset:
      description: "Reset LED"
      example: "true"
  variables:
    reset: "{{ reset|default(false) }}"
    entities: >
      {{ expand('group.notify_led')|selectattr('attributes.hass_led','defined')
          |selectattr('attributes.hass_led','eq',true)|map(attribute='entity_id')|list }}
    quiet: "{{ is_state('binary_sensor.quiet_time','on') }}"
    alert_state: >
      {% set status = states('sensor.hass_status') %}
      {% if status in ['severe','extreme'] %} {{ status }}
      {% elif trigger.id == 'startup' %} startup
      {% else %} off
      {% endif %}
    duration: "{{ iif(notification == 'startup',70,255) }}"
    color: >
      {% if alert_state == 'startup' %} 90
      {% elif alert_state == 'extreme' %} 5
      {% elif alert_state == 'severe' %} 25
      {% else %} 170
      {% endif %}
    brightness: "{{ iif(quiet,5,10) }}"
    effect: "{{ iif(alert_state == 'off','off','pulse') }}"
  sequence:
    - if: "{{ alert_state == 'off' and not reset }}"
      then:
        - service: script.turn_on
          target:
            entity_id: script.led_reset
          data:
            variables:
              entities: "{{ entities }}"
      else:
        - service: script.turn_on
          target:
            entity_id: script.inovelli_led_control
          data:
            variables:
              entities: "{{ entities }}"
              duration: "{{ duration }}"
              color: "{{ color }}"
              brightness: "{{ brightness }}"
              effect: "{{ effect }}"
