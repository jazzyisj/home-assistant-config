###############################################################################
## LED Reset
###############################################################################
led_reset:
  alias: 'LED Notification Reset'
  description: 'Reset all led notifcations to current values.'
  mode: queued
  fields:
    entities:
      description: 'List of one or more LED notification entities to reset.'
      example: 'light.front_porch_light'
  sequence:
    #VAR variables in sequence to override field
    - variables:
        entities: > # convert to list
          {% set entities = entities|default(state_attr('group.led_notify','entity_id')) %}
          {% if entities != none and not (entities is iterable and (entities is not string and entities is not mapping)) %}
            {% set entities = [entities] %}
          {% endif %}
          {{ entities }}

    - condition: template
      value_template: '{{ entities|count > 0 }}'

    - repeat:
        count: '{{ entities|count }}'
        sequence:
          - variables:
              entity: '{{ entities[repeat.index-1] }}'

          - service: script.turn_on
            target:
              entity_id: script.led_notification
            data:
              variables:
                entities: '{{ entity }}'
                reset: true
                alert_type: > # priority order
                  {% if is_state('binary_sensor.alarm_clock_led_alert','on') and is_state_attr(entity,'led_alarm_clock',true)%} alarm_clock
                  {% elif is_state('binary_sensor.media_led_alert','on') and is_state_attr(entity,'led_media',true) %} media
                  {% elif is_state('binary_sensor.garage_led_alert','on') and is_state_attr(entity,'led_garage',true) %} garage
                  {% elif is_state('input_boolean.shower_scene','on') and is_state_attr(entity,'led_shower',true) %} shower
                  {% elif is_state('binary_sensor.reminder_led_alert','on') and is_state_attr(entity,'led_reminder',true) %} reminder
                  {% elif is_state('binary_sensor.scene_led_alert','on') and is_state_attr(entity,'led_scene',true) %} scene
                  {% elif is_state('binary_sensor.presence_led_alert','on') and is_state_attr(entity,'led_presence',true) %} presence
                  {% elif is_state('binary_sensor.weather_led_alert','on') and is_state_attr(entity,'led_weather',true) %} weather
                  {% elif is_state_attr(entity,'led_alarm',true) %} alarm
                  {% else %} off
                  {% endif %}
