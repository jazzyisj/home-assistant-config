{%- macro alarm_icon(entity) -%}
{%- if is_state('input_boolean.alarm_enabled', 'off') %} mdi:shield-off
{%- elif is_state(entity, 'disarmed') %} mdi:shield-check
{%- elif is_state(entity, 'armed_home') %} mdi:shield-home
{%- elif is_state(entity, 'armed_night') %} mdi:shield-moon
{%- elif is_state(entity, 'armed_away') %} mdi:shield-lock
{%- elif is_state(entity, 'armed_vacation') %} mdi:shield-airplane
{%- elif is_state(entity, 'arming') %} mdi:shield-half-full
{%- elif is_state(entity, 'pending') %} mdi:shield-alert-outline
{%- elif is_state(entity, 'triggered') %} mdi:shield-alert
{%- else %} mdi:alert
{%- endif -%}
{%- endmacro -%}

{%- macro alarm_state(entity) -%}
{%- if is_state('input_boolean.alarm_enabled', 'off') %} Disabled
{%- else %} {{ states(entity) | replace('_', ' ') | title }}
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_icon(location) -%}
{%- if is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on') %} mdi:smoke-detector-variant-alert
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on') %} mdi:molecule-co
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on') %} mdi:fire-alert
{%- else %} mdi:smoke-detector-variant
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_icon_color(location) -%}
{%- if not has_value('binary_sensor.nest_protect_' ~ location ~ '_smoke_status') %} disabled
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on') %} red
{%- else %} dark-grey
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_badge_icon(location) -%}
{%- if not has_value('binary_sensor.nest_protect_' ~ location ~ '_smoke_status') %} mdi:exclamation-thick
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on') %} mdi:alert
{%- elif states('sensor.nest_protect_' ~ location ~ '_battery_level') | int(0) <=
    states('input_number.battery_alert_threshold') | int %} mdi:battery-alert
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_badge_color(location) -%}
{%- if not has_value('binary_sensor.nest_protect_' ~ location ~ '_smoke_status') %} orange
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on')
      or is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on') %} red
{%- elif states('sensor.nest_protect_' ~ location ~ '_battery_level') | int(0) <=
    states('input_number.battery_alert_threshold') | int %} orange
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_primary(location) -%}
{%- if is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on') %} UPSTAIRS - SMOKE
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on') %} UPSTAIRS - CARBON DIOXIDE
{%- elif is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on') %} UPSTAIRS - HEAT
{%- else %} {{ location | title }} Protect
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_secondary(location) -%}
{%- set sensor = 'binary_sensor.nest_protect_' ~ location ~ '_smoke_status' %}
{%- if not has_value(sensor) %} OFFLINE
{% else %}
{{ iif(is_state('binary_sensor.nest_protect_' ~ location ~ '_smoke_status', 'on')
    or is_state('binary_sensor.nest_protect_' ~ location ~ '_co_status', 'on')
    or is_state('binary_sensor.nest_protect_' ~ location ~ '_heat_status', 'on'), 'ALERT' , 'Safe') }}
{%- from 'easy_time.jinja' import easy_relative_time %}
- {{ easy_relative_time(states.binary_sensor.danger_alarm.last_updated) }}
{%- endif -%}
{%- endmacro -%}

{%- macro smoke_style(location) -%}
ha-card {
  background:
  {%- set sensor = 'binary_sensor.nest_protect_' ~ location ~ '_smoke_status' %}
  {%- set trigger = state_attr('alarm_control_panel.master', 'open_sensors') if state_attr('alarm_control_panel.master', 'open_sensors') else '' %}
  {%- if not has_value(sensor) or is_state('input_boolean.alarm_triggered', 'on') and sensor in trigger %} var(--entity-button-critical-color)
  {%- elif is_state(sensor, 'on') %} var(--entity-button-severe-color)
  {%- else %} var(--ha-card-background)
  {%- endif -%}
  ;
}
{%- endmacro -%}