{%- macro list_events(events) -%}
{%- for event in events %}
  {%- if (event.start is defined) %}
    {%- set start = as_datetime(event.start) | as_local %}
    {%- set end = as_datetime(event.end) | as_local %}
    {%- set today = now().day %}
    {%- set tomorrow = (now() + timedelta(days=1)).day %}
    {% if start.hour == 0 and start.minute == 0 %}
      {%- set time = 'Starting today, ' if start.day == now().day and end - now() >= timedelta(days=1)
            else 'Continuing today, ' if now() - start > timedelta(days=1)
            else 'All day today, ' if start.day == today
            else 'All day tomorrow, ' if (start + timedelta(days=1)).day == tomorrow
            else start.strftime('All day %A, ') %}
    {% else %}
      {% set time = start.strftime('Today at %-I:%M %p, ') if start.day == today
          else start.strftime('Tomorrow at %-I:%M %p, ')
            if (start + timedelta(days=1)).day == tomorrow
          else start.strftime('%A at %-I:%M %p, ') %}
    {% endif %}
    {%- set event = event.summary if event.summary is defined else none %}
    {{ time }} {{ event }}.
  {%- else %}
    {% if event.summary is defined %}{{ event.summary }}{% endif %}.
  {%- endif %}
{%- endfor %}
{%- endmacro -%}

{%- macro leave_home_time(person) -%}
{%- from 'speech_helpers.jinja' import plural %}
{%- set minutes = state_attr('sensor.leave_home_time', 'leave_min') | int(none) %}
{%- set traffic_time = state_attr('sensor.' ~ person ~ '_time_to_work', 'duration_in_traffic') -%}
Your current commute time to work is {{ traffic_time if traffic_time != none else 'expected to be longer than usual' }}.
{%- if minutes != none %}
  {%- if minutes == 0 %}
You need to leave for work right now!
  {%- elif minutes > 0 %}
You need to leave for work in {{ plural('minute', minutes + 1) }}!
  {%- elif minutes > -60 %}
You should have left for work {{ plural('minute', minutes | abs) }} ago!
  {%- else %}
You're either very late or very early.  Figure it out dude.
  {%- endif %}
{%- else %}
Check the clock! Your time to leave for work can not be determined today!
{%- endif -%}
{%- endmacro -%}

{%- macro twelve_hour(entity) -%}
{{- states(entity) | as_timestamp(none) | timestamp_custom('%-I:%M %p', true, 'Off') -}}
{%- endmacro -%}

{# day_and_time - return today, tomorrow, yesterday, day of week or date plus the time #}
{%- macro day_and_time(date) -%}
{# check if valid date, as_local to compare day() #}
{%- set date = as_datetime(date, none) %}
{%- set show_date = false %}
{%- if date != none %}
  {%- set date = as_local(date) %}
  {%- set cdate = as_local(date.replace(hour=0,minute=0,second=0,microsecond=0)) %}
  {%- set today = now().replace(hour=0,minute=0,second=0,microsecond=0) %}
  {%- if cdate.day == today.day %}
    {%- set day = 'Today' %}
  {%- elif cdate - today == timedelta(days=-1) %}
    {%- set day = 'Yesterday' %}
  {%- elif cdate - today == timedelta(days=1) %}
    {%- set day = 'Tomorrow' %}
  {%- else %}
    {%- set day = date.strftime('%A') %}
    {%- set show_date = true if cdate - today > timedelta(days=6)
          or cdate - today < timedelta(days=-1) else false %}
  {%- endif %}
  {{- day }}{{ date.strftime(', %b %-d') if show_date }}{{ date.strftime(' at %-I:%M %p') }}
{%- endif %}
{%- endmacro -%}

{# day_or_date - return today, tomorrow, yesterday, dow, else return date #}
{# date - valid datetime #}
{# short - display short date #}
{# dow - display day of week #}
{# time - display time #}
{%- macro day_or_date(date, short=true, dow=true, time=false) -%}
{%- set date = as_datetime(date, none) %} {# check if valid date #}
{%- if date != none %}
  {%- if dow %}{% set format = '%a, %b %d' if short else '%A, %B %d %Y' %}
  {%- else %}{% set format = '%b %d' if short else '%B %d, %Y' %}
  {%- endif %}
  {%- set date = as_local(date) %} {# as_local to add tz #}
  {%- set reset = today_at(states('input_datetime.day_reset')) %}
  {#- now before reset until day_reset = -1 day to delay day change #}
  {%- set reset = reset - timedelta(days=1) if now() < reset else reset %}
  {%- if date < reset and date >= reset - timedelta(days=1) -%} Yesterday
  {%- elif date >= reset and date < reset + timedelta(days=1) -%} Today
  {%- elif date >= reset + timedelta(days=1) and date < reset + timedelta(days=2) -%} Tomorrow
  {%- elif date >= reset and date < reset + timedelta(days=6) %}{{ date.strftime('%A') }}
  {%- else %}{{ date.strftime(format) }}
  {%- endif %}
  {%- if time %}{{ date.strftime(' at %-I:%M %p') }}{% endif %}
{%- endif -%}
{%- endmacro -%}

{# rdate - add day_reset timedelta to date #}
{%- macro rdate(date) -%}
{%- set date = as_datetime(date, none) -%} {# check if valid date, as_timestamp to add tz #}
{{- as_datetime(as_timestamp(date + as_timedelta(states('input_datetime.day_reset')))) if date != none else none -}}
{%- endmacro -%}

{# rtoday - check if calendar event is today with day_reset #}
{%- macro rtoday(cal) -%}
{# check if valid date, as_timestamp to add tz #}
{%- set start = as_datetime(state_attr(cal, 'start_time'), none) %}
{%- set end = as_datetime(state_attr(cal, 'end_time'), none) %}
{%- set reset = as_timedelta(states('input_datetime.day_reset')) %}
{{- as_datetime(as_timestamp(start)) < now() - reset < as_local(end)
    if start != none and end != none else false }}
{%- endmacro -%}

{# rtoday - check if calendar event ends today with day_reset #}
{%- macro ends_rtoday(cal) -%}
{# check if valid date, as_timestamp to add tz #}
{%- set end = as_datetime(state_attr(cal, 'end_time'), none) %}
{{- as_datetime(as_timestamp(end)) < today_at(states('input_datetime.day_reset')) + timedelta(days=1, minutes=1)
    if is_state(cal, 'on') and end != none else false }}
{%- endmacro -%}

{# rtoday - check if calendar event starts tomorrow with day_reset #}
{%- macro starts_rtomorrow(cal) -%}
{# check if valid date, as_timestamp to add tz #}
{% set start = as_datetime(state_attr(cal, 'start_time'), none) %}
{{- as_datetime(as_timestamp(start)) < today_at(states('input_datetime.day_reset')) + timedelta(days=1, minutes=1)
      if is_state(cal, 'off') and start != none else false }}
{%- endmacro -%}

{%- macro updated(date) -%}
{%- set updated = as_datetime(date,none) %}
  {{- time_since(updated) ~ ' ago' if updated != none }}
{%- endmacro -%}

{%- macro schedule_switch_style(entity) -%}
:host {
  --switch-checked-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--entity-warning-color)
    {% endif %}
  ;
  --switch-checked-button-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--entity-warning-color)
    {% endif %}
  ;
  --switch-checked-track-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--entity-warning-color)
    {% endif %}
  ;
  --switch-unchecked-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--state-inactive-color);
    {% endif %}
  ;
  --switch-unchecked-button-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--state-inactive-color);
    {% endif %}
  ;
  --switch-unchecked-track-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% else %} var(--state-inactive-color);
    {% endif %}
  ;
}
{%- endmacro -%}

{%- macro schedule_cal_sensor_style(cal=none) -%}
:host {
  --state-icon-color:
    {% if is_state('input_boolean.work_schedule', 'off') %} var(--disabled-color)
    {% elif cal != none and is_state(cal, 'on') %} var(--entity-active-color)
    {% else %} var(--state-inactive-color)
    {% endif %}
  ;
}
{%- endmacro -%}