{% macro rain_text() %}
{%- set cond = states('sensor.current_condition') %}
{%- set dist = states('sensor.nearest_storm_distance') | int(-1) %}
{%- set dir = state_attr('sensor.nearest_storm_bearing', 'full_cardinal') %}
{%- set rain_time = state_attr('sensor.rain_start', '12hour') %}
{%- if states('sensor.precipitation_type') in ['rain', 'heavy rain', 'hail'] %}
It is raining now.
{%- elif rain_time != none %}
Possibility of rain around {{ rain_time }}.
{%- endif %}
{%- if dist > 0 %} {# #ISSUE - determine storm overhead? #}
  {{ states('sensor.precipitation_type') | replace('none', '') | title }} storm {{ iif(dist >= 2,
      dist | int ~ iif(dist | int == 1, ' kilometer', ' kilometers') ~ ' away', ' in the immediate vicinity') }}
  {{- iif(dir != none, ' approaching from the ' ~ dir, '') }}.
{%- endif -%}
{% endmacro %}

{% macro list_events(events) %}
{%- for event in events %}
  {%- if (event.start is defined) %}
    {%- if (event.start | as_datetime).day == now().day %}
      {{ event.start | as_timestamp | timestamp_custom('Today at %-I:%M %p') }}: {{ event.summary }}
    {%- else %}
      {{ event.start | as_timestamp | timestamp_custom('%A at %-I:%M %p') }}: {{ event.summary }}
    {%- endif %}
  {%- else %} {{ event.summary }}
  {%- endif %}
  {%- if event.description is defined %} - {{ event.description }}{% endif %}
{%- endfor %}.
{% endmacro %}

{% macro twelve_hour(entity) %}
{{- states(entity) | as_timestamp(none) | timestamp_custom('%-I:%M %p', true, none) -}}
{% endmacro %}

{% macro cardinal_direction(bearing) %}
{%- set directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S',
    'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'] %}
{{- iif(is_number(bearing), directions[((bearing | float(-1)/360) | float*16) | round], 'unknown') -}}
{% endmacro %}

{% macro full_cardinal_direction(bearing) %}
{%- set directions = ['North', 'North-Northeast', 'Northeast', 'East-Northeast', 'East', 'East-Southeast',
    'Southeast', 'South-Southeast', 'South', 'South-Southwest', 'Southwest', 'West-Southwest', 'West',
    'West-Northwest', 'Northwest', 'North-Northwest', 'North'] %}
{{- iif(is_number(bearing), directions[((bearing | float(-1)/360) | float*16) | round], 'unknown') -}}
{% endmacro %}

{% macro clist_locks(locks) %}
{%- set msg = namespace(value='') %}
{%- set qty = namespace(value=0) %}
{%- for item in locks %}
  {%- set qty.value = qty.value | int(0) + 1 %}
  {%- if not loop.first %}{% set msg.value = msg.value ~ ', ' %}{% endif %}
  {%- set msg.value = msg.value ~ item.split('.')[1] | replace('_door_lock', '') | replace('_', ' ') | title %}
{%- endfor %}
{%- set clist = ', and ' if msg.value.split(', ') | count > 2 else ' and ' %}
{%- set plural = 's have' if qty.value | int(0) > 1 else ' has' %}
{{- clist.join(msg.value.rsplit(', ', 1)) -}}
{% endmacro %}

{% macro iarticle(word) %}
{%- if is_number(word) %}
  {%- set word = number_words(word) %}
{%- endif %}
{%- if word[:3] in ['one','uni'] -%} {{ 'a ' }}
{%- elif word[:4] == 'hour' %} {{ 'an ' }}
{%- else -%} {{ iif(word[0] in ['a', 'e', 'i' ,'o', 'u'],'an ', 'a ') }}
{%- endif -%}
{% endmacro %}

{% macro number_words(number) %}
{%- if is_number(number) %}
  {%- from 'speech.jinja' import number_words %}
  {%- set number = number | int %}
  {%- set units = ['', 'one ', 'two ', 'three ', 'four ','five ', 'six ', 'seven ','eight ', 'nine ', 'ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ','sixteen ', 'seventeen ', 'eighteen ', 'nineteen '] %}
  {%- set tens = ['', '', 'twenty ', 'thirty ', 'forty ', 'fifty ', 'sixty ', 'seventy ', 'eighty ', 'ninety '] %}
  {%- if number == 0 -%} zero {% endif %}
  {%- if number < 0 -%} negative {% endif %}
  {%- if number < 20 -%} {{ units[number] }}
  {%- elif number < 100 -%} {{ tens[number // 10] ~ units[number % 10] }}
  {%- elif number < 1000 -%} {{ number_words(number // 100) ~ 'hundred ' ~ number_words(number % 100) }}
  {%- elif number < 1000000 -%} {{ number_words(number // 1000) ~ 'thousand ' ~ number_words(number % 1000) }}
  {%- elif number < 1000000000 -%} {{ number_words(number // 1000000) ~ 'million ' ~ number_words(number % 1000000) }}
  {%- elif number < 1000000000000 -%} {{ number_words(number // 1000000000) ~ 'billion ' ~ number_words(number % 1000000000) }}
  {%- else -%} {{ number_words(number // 1000000000000) ~ 'trillion ' ~ number_words(number % 1000000000000) }}
  {%- endif %}
{%- endif -%}
{% endmacro %}