{%- macro clist_locks(locks) -%}
{%- set msg = namespace(value='') %}
{%- set qty = namespace(value=0) %}
{%- for item in locks %}
  {%- set qty.value = qty.value | int(0) + 1 %}
  {%- if not loop.first %}{% set msg.value = msg.value ~ ', ' %}{% endif %}
  {%- set msg.value = msg.value ~ states[item].object_id | replace('_door_lock', '') | replace('_', ' ') | title %}
{%- endfor %}
{%- set clist = ', and ' if msg.value.split(', ') | count > 2 else ' and ' %}
{%- set plural = 's have' if qty.value | int(0) > 1 else ' has' %}
{{- clist.join(msg.value.rsplit(', ', 1)) -}}
{%- endmacro -%}

{%- macro lock_icon(lock) -%}
{%- if is_state(lock,'unlocked') %} mdi:lock-open
{%- else %} mdi:lock
{%- endif %}
{%- endmacro -%}

{%- macro lock_icon_color(lock) -%}
{%- if not has_value(lock) %} grey
{%- elif is_state(lock, 'unlocked') %} yellow
{%- else %} white
{%- endif %}
{%- endmacro -%}

{%- macro lock_badge(lock) -%}
{%- if has_value(lock) %}
  {%- set lock_slug = lock.split('.')[1] | replace('_lock','') %}
  {%- if is_state('binary_sensor.' ~ lock_slug ~ '_lock_intrusion', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_system_hardware_failure', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_lock_jammed', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_keypad_temporary_disabled', 'on') %} mdi:key-remove
  {%- elif states('sensor.' ~ lock_slug ~ '_lock_battery_level') | int(0) <=
        states('input_number.battery_alert_threshold') | int %} mdi:battery-alert
  {%- endif %}
{%- endif %}
{%- endmacro -%}

{%- macro lock_badge_color(lock) -%}
{%- set lock_slug = lock.split('.')[1] | replace('_lock','') %}
{%- if is_state('binary_sensor.' ~ lock_slug ~ '_lock_intrusion', 'on') %} red
{%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_system_hardware_failure', 'on') %} red
{%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_lock_jammed', 'on') %} orange
{%- elif is_state('binary_sensor.' ~ lock_slug ~ '_lock_keypad_temporary_disabled', 'on') %} yellow
{%- elif states('sensor.' ~ lock_slug ~ '_lock_battery_level') | int(0) <=
      states('input_number.battery_alert_threshold') | int %} orange
{%- endif %}
{%- endmacro -%}

{%- macro lock_secondary(lock) -%}
{%- if has_value('lock.front_door_lock') %}
{{- iif(is_state('lock.front_door_lock', 'unlocked'), 'Unlocked' ,'Locked') }}
{%- from 'easy_time.jinja' import easy_relative_time %}
 - {{ easy_relative_time(states[lock].last_updated) }}
{%- else %} {{ states[lock].state }}
{%- endif %}
{%- endmacro -%}

{%- macro lock_tile_background(lock) -%}
ha-card {
  background:
  {% if not has_value(lock)  %} var(--entity-button-critical-color)
  {% else %} var(--ha-card-background)
  {% endif %}
  ;
}
{%- endmacro -%}