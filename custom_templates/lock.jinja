{%- macro list_locks(entities, word) -%}
{%- from 'speech.jinja' import array_to_clist %}
{%- from 'speech.jinja' import plural_word %}
{%- set entities = expand(entities) | map(attribute='object_id') | list %}
{{- array_to_clist(entities, false) | replace('_door_lock', '') | replace('_', ' ') }} door
{{- ' ' ~ plural_word(word, entities | count, true) }}
{%- endmacro -%}

{%- macro lock_icon(entity) -%}
{%- if is_state(entity, 'unlocked') %} mdi:lock-open
{%- else %} mdi:lock
{%- endif %}
{%- endmacro -%}

{%- macro lock_color(entity) -%}
{%- if not has_value(entity) %} grey
{%- elif is_state(entity, 'unlocked') %} yellow
{%- else %} white
{%- endif %}
{%- endmacro -%}

{%- macro lock_badge(entity) -%}
{%- if has_value(entity) %}
  {%- set entity_slug = entity.split('.')[1] | replace('_lock', '') %}
  {%- if is_state('binary_sensor.' ~ entity_slug ~ '_lock_intrusion', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_system_hardware_failure', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_lock_jammed', 'on') %} mdi:alert
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_keypad_temporary_disabled', 'on') %} mdi:key-remove
  {%- elif states('sensor.' ~ entity_slug ~ '_lock_battery_level') | int(0) <=
        states('input_number.battery_alert_threshold') | int %} mdi:battery-alert
  {%- endif %}
{%- endif %}
{%- endmacro -%}

{%- macro lock_badge_color(entity) -%}
{%- if has_value(entity) %}
  {%- set entity_slug = entity.split('.')[1] | replace('_lock', '') %}
  {%- if is_state('binary_sensor.' ~ entity_slug ~ '_lock_intrusion', 'on') %} red
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_system_hardware_failure', 'on') %} red
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_lock_jammed', 'on') %} orange
  {%- elif is_state('binary_sensor.' ~ entity_slug ~ '_lock_keypad_temporary_disabled', 'on') %} yellow
  {%- elif states('sensor.' ~ entity_slug ~ '_lock_battery_level') | int(0) <=
        states('input_number.battery_alert_threshold') | int %} orange
  {%- endif %}
{%- endif %}
{%- endmacro -%}

{%- macro lock_secondary(entity) -%}
{%- if has_value(entity) %}
  {{- iif(is_state(entity, 'unlocked'), 'Unlocked' , 'Locked') }}
  {%- from 'easy_time.jinja' import easy_relative_time %} - {{ easy_relative_time(states[entity].last_updated) }}
{%- else %}
  {%- if states[entity].state is defined %}{{ states[entity].state }}{% endif %}
{%- endif %}
{%- endmacro -%}

{%- macro lock_tile_background(lock) -%}
ha-card {
  background:
  {% if not has_value(lock)  %} var(--entity-button-critical-color)
  {% else %} var(--ha-card-background)
  {% endif %}
  ;
}
{%- endmacro -%}