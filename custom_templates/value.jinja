{% macro occupancy_mode() %}
{%- set day_reset = today_at(states('input_datetime.day_reset')) %}
{%- set bedtime = states('sensor.bedtime_today') | as_datetime
  if has_value('sensor.bedtime_today') else today_at(states('input_datetime.weekend_bedtime')) %}
{%- set waketime = states('sensor.waketime_today') | as_datetime
  if has_value('sensor.waketime_today') else today_at(states('input_datetime.house_waketime')) %}
{%- set waketime = waketime + timedelta(days=1) if waketime < day_reset < now() else waketime -%}
{%- set bedtime = bedtime + timedelta(days=1) if bedtime < waketime < now() else bedtime -%}
{%- if is_state('binary_sensor.someone_home', 'off') %}
  {% set mode = 'Vacation' if is_state('input_select.occupancy_mode', 'Vacation') else 'Away' %}
{%- elif bedtime < waketime %}
  {%- set mode = 'Night' if is_state('input_boolean.bedtime_delayed', 'off')
    else ('Home' if is_state('binary_sensor.owner_home', 'on') else 'Guest') %}
{%- else %}
  {%- set mode = 'Home' if is_state('binary_sensor.owner_home', 'on') else 'Guest' %}
{%- endif %}
{{- mode -}}
{% endmacro %}

{% macro rain_text() %}
{%- set cond = states('sensor.current_condition') -%}
{%- set dist = states('sensor.nearest_storm_distance') | int(-1) -%}
{%- set dir = state_attr('sensor.nearest_storm_bearing', 'full_cardinal') %}
{%- set rain_time = state_attr('sensor.rain_start', '12hour') %}
{%- if states('sensor.precipitation_type') == 'rain' %}
It is raining now.
{%- elif rain_time != none %}
Possibility of rain around {{ rain_time }}.
{%- endif -%}
{%- if dist > 0 %} {# #ISSUE - determine storm overhead? #}
{{ states('sensor.precipitation_type') | replace('none', '') | title }} storm {{ iif(dist >= 2,
    dist | int ~ iif(dist | int == 1, ' kilometer', ' kilometers') ~ ' away', ' in the immediate vicinity') }}
{{- iif(dir != none, ' approaching from the ' ~ dir, '') }}.
{%- endif -%}
{% endmacro %}

{% macro trigger_person(trigger) %}
{%- if trigger.id == 'lock' %}
  {%- set person = trigger.to_state.state %}
{%- elif trigger.id in ['doorbell', 'danger'] %}
  {%- set person = 'hassio' %}
{%- elif trigger.id == 'zone' %}
  {%- set person = trigger.entity_id %}
{%- elif trigger.event is defined %}
  {%- set person = trigger.event.data['action'] %}
{%- else %}
  {%- set person = trigger.entity_id %}
{%- endif %}
{%- if person | lower | contains('hassio')
    or person | lower | contains('keypad') %} hassio
{%- elif person | lower | contains('guest') %} guest
{%- elif person | lower | contains('jason') %} jason
{%- endif -%}
{% endmacro %}

{% macro list_events(agenda) %}
{%- for event in agenda.events %}
{%- if (event.start | as_datetime).day == now().day %}
{{ event.start | as_timestamp | timestamp_custom('Today at %-I:%M %p') }}: {{ event.summary }}
{%- else %}
{{ event.start | as_timestamp | timestamp_custom('%A at %-I:%M %p') }}: {{ event.summary }}
{%- endif -%}
{%- if event.description is defined %} - {{ event.description }}{% endif %}
{%- endfor %}.
{% endmacro %}

{% macro twelve_hour(entity) %}
{{ states(entity) | as_timestamp(none) | timestamp_custom('%-I:%M %p', true, none) }}
{% endmacro %}

{% macro cardinal_direction(bearing) %}
{% set directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S',
    'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'] %}
{{ iif(is_number(bearing), directions[((bearing | float(-1)/360) | float*16) | round], 'unknown') }}
{% endmacro %}

{% macro full_cardinal_direction(bearing) %}
{% set directions = ['North', 'North-Northeast', 'Northeast', 'East-Northeast', 'East', 'East-Southeast',
    'Southeast', 'South-Southeast', 'South', 'South-Southwest', 'Southwest', 'West-Southwest', 'West',
    'West-Northwest', 'Northwest', 'North-Northwest', 'North'] %}
{{ iif(is_number(bearing), directions[((bearing | float(-1)/360) | float*16) | round], 'unknown') }}
{% endmacro %}

{% macro clist_locks(locks) %}
{%- set msg = namespace(value='') %}
{%- set qty = namespace(value=0) %}
{%- for item in locks %}
{%- set qty.value = qty.value | int(0) + 1 %}
{%- if not loop.first %}{% set msg.value = msg.value ~ ', ' %}{% endif %}
{%- set msg.value = msg.value ~ item.split('.')[1] | replace('_door_lock', '') | replace('_', ' ') | title %}
{%- endfor %}
{%- set clist = ', and ' if msg.value.split(', ') | count > 2 else ' and ' %}
{%- set plural = 's have' if qty.value | int(0) > 1 else ' has' %}
{{- clist.join(msg.value.rsplit(', ', 1)) -}}
{% endmacro %}
