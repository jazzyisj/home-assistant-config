###############################################################################
## Climate - Set Thermostat
###############################################################################
- id: climate_set_thermostat
  alias: '[Climate] Set Thermostat'
  description: 'Set thermostat temperatures.'
  mode: restart
  trigger:
    - platform: state
      id: home
      entity_id:
        - input_number.home_heat_temperature
        - input_number.home_cool_temperature
      to: ~

    - platform: state
      id: night
      entity_id:
        - input_number.night_heat_temperature
        - input_number.night_cool_temperature
      to: ~

    - platform: state
      id: guest
      entity_id:
        - input_number.guest_heat_temperature
        - input_number.guest_cool_temperature
      to: ~

    - platform: state
      entity_id: input_select.hvac_mode
      to: ~

    - platform: state
      id: sensor
      entity_id: sensor.hvac_boost #RELOAD triggers on template reload
      to: ~
  condition:
    - condition: state
      entity_id: input_boolean.climate_automation
      state: 'on'

    - condition: not
      conditions:
        - condition: state
          entity_id: alert.hvac_window_door_open
          state: 'on'

    - condition: template
      alias: 'Current occupancy mode corresponds to trigger preset'
      value_template: >
        {% if trigger._id == 'home' %} {{ is_state('input_select.occupancy_mode','Home') }}
        {% elif trigger._id == 'night' %} {{ is_state('input_select.occupancy_mode','Night') }}
        {% elif trigger._id == 'guest' %} {{ is_state('input_select.occupancy_mode','Guest') }}
        {% else %} true
        {% endif %}

    - condition: template
      alias: 'To/from state not unknown/unavailable' # prevent trigger on template reload
      value_template: >
        {{ trigger.to_state.state not in ['unknown','unavailable']
            and trigger.from_state.state not in ['unknown','unavailable'] if trigger.id == 'sensor' else true }}
  action:
    # delay to allow user to finish setting temps, restart mode will run script with last set value
    - delay: 30

    # turn on script prevent automation fail when set thermostat when Nest rate limit hit (script still fails)
    - service: script.turn_on
      target:
        entity_id: script.set_thermostat

