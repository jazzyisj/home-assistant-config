###############################################################################
## Media Preset - Sleep Preset Play
###############################################################################
- id: media_preset_sleep_preset_play
  alias: "[Media Preset] Sleep Preset Play"
  description: "Turn on sleep preset media player."
  trigger:
    - platform: state
      entity_id: input_select.occupancy_mode
      to: Night
      from:
        - Home
        - Guest
      for: 60 # allow media player auto off to run
  condition:
    - condition: state
      entity_id: input_boolean.media_preset_enabled_sleep
      state: "on"

    - condition: template
      alias: "Within an hour of bedtime"
      value_template: >
        {% if has_value('sensor.bedtime_today') %}
          {% set bedtime = states('sensor.bedtime_today') | as_datetime %}
          {{ now() > bedtime - timedelta(hours=1) and now() - bedtime < timedelta(hours=1) }}
        {% endif %}
  action:
    - action: script.media_play
      data:
        preset: sleep

###############################################################################
## Media Preset - Stop
###############################################################################
- id: media_preset_stop
  alias: "[Media Preset] Stop"
  description: "Turn off preset media player."
  mode: parallel
  trigger:
    - platform: event
      id: sleep
      event_type: timer.finished
      event_data:
        entity_id: timer.media_preset_sleep

    # turn preset off if occupancy mode changes
    - platform: state
      id: sleep
      entity_id: input_select.occupancy_mode
      from: Night

    # turn preset off if occupancy mode changes
    - platform: state
      id: wake
      entity_id: input_select.occupancy_mode
      from: Home
  action:
    - wait_template: "{{ is_state('script.turn_media_player_off','off') }}"
      timeout: 60

    - action: script.turn_media_player_off
      data:
        entity_id: >
          {{ expand('group.media_players')
              | selectattr('name', 'eq', states('select.media_preset_speaker_' ~ trigger.id))
              | map(attribute='entity_id') | list }}

###############################################################################
## Media Preset - Preset Player Turned Off
###############################################################################
- id: media_preset_preset_player_turned_off
  alias: "[Media Preset] Preset Player Turned Off"
  description: "Turn off preset timer."
  trigger:
    - platform: template
      id: sleep
      value_template: >
        {% set sleep_player = expand('group.media_players')
            | selectattr('name', 'eq', states('select.media_preset_speaker_sleep'))
            | map(attribute='entity_id') | join('') %}
        {{ states(sleep_player) not in ['playing', 'paused', 'buffering', 'on']
            and is_state('timer.media_preset_sleep', 'active') }}
      for: 5 # allow queue to change, resume from tts
  action:
    - action: timer.cancel
      data:
        entity_id: "timer.media_preset_{{ trigger.id }}"

###############################################################################
## Media Preset - Preset Timer Changed
###############################################################################
- id: media_preset_preset_timer_changed
  alias: "[Media Preset] Preset Timer Changed"
  description: "Restart timer when time control changed."
  mode: restart
  trigger:
    - platform: state
      id: sleep
      entity_id: input_number.media_preset_sleep_time
      to:
  condition:
    - condition: template
      value_template: "{{ is_state('timer.media_preset_' ~ trigger.id, 'active') }}"

    - condition: state
      entity_id: script.media_play
      state: "off"
  action:
    - action: timer.start
      target:
        entity_id: "timer.media_preset_{{ trigger.id }}"
      data:
        duration:
          minutes: "{{ states('input_number.media_preset_' ~ trigger.id ~ '_time') | int(0) }}"
