#######################################################################################################################
## Media - Volume Changed
## media player expects float value, media volume input is percent
#######################################################################################################################
- id: media_volume_changed
  alias: '[Media] Volume Changed'
  description: 'Change media player volume when media volume control changed.'
  initial_state: true # may have been turned off when automations were reloaded
  mode: queued
  max: 5
  variables:
    media_type: >
      {% set media_sensors = state_attr('group.media_sensors','entity_id') %}
      {% set type = namespace(value='') %}
      {% for sensor in media_sensors %}
        {% set media_type = sensor[14:] %}
        {% if is_state(sensor,'on') and trigger.entity_id == 'input_number.' ~ media_type ~ '_volume' %}
          {% set type.value = media_type %}
        {% endif %}
      {% endfor %}
      {{ type.value }}
    media_volume: "{{ states('input_number.' ~ media_type ~ '_volume')|int(0) }}"
    quiet_volume: "{{ states('input_number.media_quiet_volume')|int(0) }}"
  trigger:
    - platform: state
      entity_id:
        - input_number.radio_volume
        - input_number.spotify_volume
        - input_number.spotify_jason_volume
        - input_number.spotify_sheri_volume
        - input_number.youtube_volume
  condition:
    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'
  action:
    # reset media value if req during quiet hours unless override on
    - choose:
        - conditions: >
            {{ is_state('binary_sensor.volume_override','off')
                and is_state('binary_sensor.quiet_hours','on')
                and media_volume > quiet_volume }}
          sequence:
            - service: automation.turn_off
              target:
                entity_id: '{{ this.entity_id }}'
              data:
                stop_actions: false

            - service: input_number.set_value
              target:
                entity_id: 'input_number.{{ media_type }}_volume'
              data:
                value: '{{ quiet_volume }}'

            - wait_template: >
                {{ states('input_number.' ~ media_type ~ '_volume')|int(0) == quiet_volume }}
              timeout: 5 # wait for volume to change
              continue_on_timeout: true

            - service: automation.turn_on
              target:
                entity_id: '{{ this.entity_id }}'

    - condition: template
      alias: 'New set volume is not equal to the current media player volume'
      value_template:
        > # may have reset - need current value, so no variables here
        {{ '%0.2f'|format(states('input_number.' ~ media_type ~ '_volume')|float(0)/100)
            != '%0.2f'|format(state_attr('media_player.' ~ media_type,'volume_level')|float(0)) }}

    - condition: template
      alias: 'Media type media player is on'
      value_template: "{{ state_attr('sensor.' ~ media_type ~ '_media_player','player_state') in ['playing','paused'] }}"

    - service: automation.turn_off
      target:
        entity_id: automation.media_player_volume_changed
      data:
        stop_actions: false

    - choose:
        - conditions:
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.quiet_hours
                  state: 'on'

                - condition: state
                  entity_id: binary_sensor.volume_override
                  state: 'off'

                - "{{ states('input_number.' ~ media_type ~ 'volume')|int(0) > quiet_volume }}"
          sequence:
            - service: input_number.set_value
              target:
                entity_id: 'input_number.{{ media_type }}_volume'
              data:
                value: 'input_number.media_quiet_volume'

    - service: media_player.volume_set # reset media player volume
      target:
        entity_id: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"
      data:
        volume_level: "{{ '%0.2f'|format(states('input_number.' ~ media_type ~ '_volume')|float/100)|float }}"

    - delay: 1 # allow media player volumes to set

    - service: automation.turn_on
      target:
        entity_id: automation.media_player_volume_changed
