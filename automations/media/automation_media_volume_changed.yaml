###############################################################################
## Media - Volume Changed
###############################################################################
- id: media_volume_changed
  alias: '[Media] Volume Changed'
  description: 'Change media player volume when media volume control changed.'
  mode: queued
  max: 5
  variables:
    media_type: '{{ trigger.entity_id[13:-7] }}'
    media_volume: "{{ states('input_number.' ~ media_type ~ '_volume')|int(0) }}"
    quiet_volume: "{{ states('input_number.media_quiet_volume')|int(0) }}"
  trigger:
    - platform: state
      entity_id:
        - input_number.radio_volume
        - input_number.spotify_volume
        - input_number.spotify_jason_volume
        - input_number.spotify_sheri_volume
        - input_number.youtube_volume
      to: ~
  condition: "{{ is_state('binary_sensor.' ~ media_type,'on') }}"
  action:
    # reset media volume if req during quiet time
    - choose:
        - conditions: >
            {{ is_state('binary_sensor.volume_override','off')
                and is_state('binary_sensor.quiet_time','on')
                and media_volume > quiet_volume }}
          sequence:
            - service: automation.turn_off
              target:
                entity_id: '{{ this.entity_id }}'
              data:
                stop_actions: false

            - service: input_number.set_value
              target:
                entity_id: 'input_number.{{ media_type }}_volume'
              data:
                value: '{{ quiet_volume }}'

            - wait_template: "{{ states('input_number.' ~ media_type ~ '_volume')|int(0) == quiet_volume }}"
              timeout: 5 # wait for volume to change

            - service: automation.turn_on
              target:
                entity_id: '{{ this.entity_id }}'

    - variables:
        media_volume: "{{ states('input_number.' ~ media_type ~ '_volume')|int(0)/100 }}"
        media_volume_adj: >
          {% set type = 'spotify' if 'spotify' in media_type else media_type %}
          {{ media_volume * (1 + states('input_number.' ~ type ~ '_volume_adjustment')|float(-1)) }}

    - choose:
        - conditions: "{{ is_state('input_boolean.resume_' ~ media_type,'on') }}"
          sequence:
            - service: script.media_players_save_volumes
              data:
                source: >
                  {% if is_state('input_boolean.tts_playing','on') %} tts
                  {% elif is_state('binary_sensor.alarm_clock','on') %} alarm_clock
                  {% elif is_state('binary_sensor.mobile_phone_in_use','on') %} phone
                  {% endif %}
                media_players: "{{ state_attr(states('sensor.' ~ media_type ~ '_media_player'),'players') }}"
                save_volume: '{{ media_volume_adj }}'
      default:
        - service: automation.turn_off
          target:
            entity_id: automation.media_player_volume_changed
          data:
            stop_actions: false

        - service: media_player.volume_set # reset media player volume
          target:
            entity_id: "{{ states('sensor.' ~ media_type ~ '_media_player') }}"
          data:
            volume_level: '{{ media_volume_adj }}'

        - delay: 1 # allow media player volumes to set

        - service: automation.turn_on
          target:
            entity_id: automation.media_player_volume_changed
