#######################################################################################################################
## Alarm Clock - Notification
#######################################################################################################################
- id: alarm_clock_notification
  alias: "[Alarm Clock] Notification"
  description: "Notifications for active alarm clock."
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_clock
      to: 'on'
      for: 5 # allow switch to turn back off if conditions fail
  condition:
    - condition: state
      entity_id: binary_sensor.owner_home
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_clock_test_play
      state: 'off'
  action:
    - repeat:
        sequence:
          - choose:
              - conditions: # don't send notification if snoozed, failed, check each loop
                  - condition: state
                    entity_id:
                      - switch.alarm_clock_snooze
                      - input_boolean.alarm_clock_failed
                    state: 'off'
                sequence:
                  - service: >
                      {% if (is_state('input_boolean.jphone_alarm_clock_notifications','on')
                            and is_state('binary_sensor.jason_home','on'))
                          and (is_state('input_boolean.sphone_alarm_clock_notifications','on')
                            and is_state('binary_sensor.sheri_home','on')) %} notify.mobile
                      {% elif is_state('input_boolean.jphone_alarm_clock_notifications','on')
                          and is_state('binary_sensor.jason_home','on') %} notify.jason
                      {% elif is_state('input_boolean.sphone_alarm_clock_notifications','on')
                          and is_state('binary_sensor.sheri_home','on') %} notify.sheri
                      {% endif %}
                    data:
                      title: Wake Up Alarm!
                      message: >
                        {% set current = now().strftime('%-I:%M %p') %}
                        {% set alarm = (as_timestamp(now()) + states('input_number.alarm_clock_play_delay')|int,'ERROR')|timestamp_custom('%-I:%M %p',true,'ERROR') %}
                        Wake up! It's {{ current }}!
                        {% if current != alarm %}<br/>The alarm will sound at {{ alarm }}.{% endif %}
                        The current alarm snooze time is {{ states('input_number.alarm_clock_snooze_time')|int }} minutes.
                      data:
                        tag: alarm_clock
                        group: General
                        channel: Alert # DND might be on
                        importance: max
                        ttl: 0
                        priority: high
                        persistent: true
                        sticky: true
                        color: !secret NOTIFY_COLOR
                        icon_url: !secret ALARM_CLOCK_ICON
                        chronometer: true
                        when: "{{ (as_timestamp(now()) + states('input_number.alarm_clock_play_delay')|int,'ERROR')|int }}"
                        actions:
                          - action: snooze_alarm_clock
                            title: Snooze Alarm
                          - action: turn_off_alarm_clock
                            title: Turn Off Alarm

                  - wait_template: >
                      {{ is_state('binary_sensor.alarm_clock','off')
                          or is_state('switch.alarm_clock_snooze','on')
                          or is_state('input_boolean.alarm_clock_failed','on') }}"
                    timeout: 120 # send a notification every 2 minutes
            default:
              - wait_template: >
                  {{ is_state('switch.alarm_clock_snooze','off') }}
                      or is_state('input_boolean.alarm_clock_failed','on') }}
                timeout: # wait for snooze to turn off, timeout is snooze time
                  minutes: "{{ states('input_number.alarm_clock_snooze_time')|int }}"
        until:
          - condition: or
            conditions:
              - condition: state
                entity_id: binary_sensor.alarm_clock
                state: 'off'

              - condition: state
                entity_id: input_boolean.alarm_clock_failed
                state: 'on'

    - wait_template: "{{ is_state('binary_sensor.alarm_clock','off') }}"

    - service: notify.mobile
      data:
        message: clear_notification
        data:
          tag: alarm_clock
