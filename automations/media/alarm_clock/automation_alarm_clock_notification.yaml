###############################################################################
## Alarm Clock - Notification
###############################################################################
- id: alarm_clock_notification
  alias: '[Alarm Clock] Notification'
  description: 'Notifications for active alarm clock.'
  mode: restart
  variables:
    person: >
      {% if (is_state('input_boolean.jason_phone_alarm_clock_notifications','on')
          and is_state('binary_sensor.jason_home','on'))
        and (is_state('input_boolean.sheri_phone_alarm_clock_notifications','on')
          and is_state('binary_sensor.sheri_home','on')) %} mobile
      {% elif is_state('input_boolean.jason_phone_alarm_clock_notifications','on')
        and is_state('binary_sensor.jason_home','on') %} jason
      {% elif is_state('input_boolean.sheri_phone_alarm_clock_notifications','on')
        and is_state('binary_sensor.sheri_home','on') %} sheri
      {% endif %}
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.alarm_clock
        - switch.alarm_clock_snooze
      to: 'on'
      from: 'off'
      for: 5 # allow switch to turn back off if conditions fail

    - platform: state
      entity_id:
        - switch.alarm_clock_snooze
        - binary_sensor.alarm_clock
      to: 'off'
      from: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.alarm_clock_test_play
      state: 'off'

    - condition: template
      alias: 'Person is valid'
      value_template: "{{ person in ['mobile','jason','sheri'] }}"
  action:
    - if:
        - condition: state
          entity_id: binary_sensor.alarm_clock
          state: 'on'
      then:
        - if: # don't send notification if snoozed
            - condition: state
              entity_id: switch.alarm_clock_snooze
              state: 'on'
          then:
            - service: script.alarm_clock_notification
              data:
                type: snooze
                person: '{{ person }}'
          else:
            - repeat:
                sequence:
                  - if: # don't send notification if snoozed
                      - condition: state
                        entity_id: switch.alarm_clock_snooze
                        state: 'off'
                    then:
                      # when snooze turned off this might fire one more time
                      # delay and check alarm state again
                      - delay: 5

                      - condition: state
                        entity_id: binary_sensor.alarm_clock
                        state: 'on'

                      - service: script.alarm_clock_notification
                        data:
                          type: alarm
                          person: '{{ person }}'

                  - wait_template: "{{ is_state('binary_sensor.alarm_clock','off') }}"
                    timeout: 120 # send a notification every 2 minutes
                until:
                  - condition: state
                    entity_id: binary_sensor.alarm_clock
                    state: 'off'
      else:
        - service: 'notify.{{ person }}'
          data:
            message: clear_notification
            data:
              tag: alarm_clock
