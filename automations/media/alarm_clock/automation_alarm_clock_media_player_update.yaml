###############################################################################
## Alarm Clock - Media Players Update
###############################################################################
- id: alarm_clock_media_players_update
  alias: '[Alarm Clock] Media Players Update'
  description: 'Update alarm clock media player options.'
  mode: restart
  variables:
    selected_players: "{{ state_attr('group.alarm_clock_selected_players','entity_id') }}"
    stored_players: "{{ state_attr('group.alarm_clock_stored_players','entity_id') }}"
  trigger:
    - platform: homeassistant
      id: startup
      event: start
  condition:
    - condition: template
      value_template: >
        {{ state_attr('sensor.alarm_clock_media_player','entity_id')|lower
            not in ['','[]','unknown','unavailable','none'] if trigger.id != 'startup' else true }}
  action:
    - wait_template: "{{ state_attr('group.play_alarm_clock_players','entity_id') != none }}"
      timeout:
        minutes: 10
      continue_on_timeout: false

    - service: automation.turn_off
      target:
        entity_id: automation.alarm_clock_store_player_selection # don't overwrite stored values
      data:
        stop_actions: false

    - service: input_select.set_options
      target:
        entity_id: &alarm_clock_selects
          - input_select.alarm_clock_media_player_auto
          - input_select.alarm_clock_media_player_manual
          - input_select.alarm_clock_media_player_nap
      data:
        options: >
          {% set options = namespace(value=[]) %}
          {% set alarm_clock_players = expand(state_attr('group.play_alarm_clock_players','entity_id'))
              |map(attribute='name')|list %}
          {% for item in alarm_clock_players -%}
            {% set options.value = options.value + [item] %}
          {% endfor %}
          {{ options.value }}

    - choose:
        - conditions: '{{ selected_players|count > 0 }}' #NOTE only req on startup, now automatic
          sequence:
            - repeat: # restore previous selection (values reset when options reloaded)
                count: '{{ selected_players|count }}'
                sequence:
                  - variables:
                      select_entity: '{{ selected_players[repeat.index-1] }}'
                      stored_value: '{{ states(stored_players[repeat.index-1]) }}'

                  - choose:
                      - conditions: "{{ stored_value in state_attr(select_entity,'options') }}"
                        sequence:
                          - service: input_select.select_option
                            target:
                              entity_id: '{{ select_entity }}'
                            data:
                              option: '{{ stored_value }}'

    - service: automation.turn_on
      entity_id: automation.alarm_clock_store_player_selection

###############################################################################
## Alarm Clock - Store Player Selection
###############################################################################
- id: alarm_clock_store_player_selection
  alias: '[Alarm Clock] Store Player Selection'
  description: 'Update stored alarm_clock player selection.'
  mode: queued
  max: 25
  trigger:
    - platform: state
      entity_id: *alarm_clock_selects
  condition: "{{ states(trigger.entity_id)|lower not in ['unknown','unavailable','none'] }}"
  action:
    - service: input_text.set_value
      target:
        entity_id: "{{ trigger.entity_id|replace('input_select','input_text') }}"
      data:
        value: '{{ states(trigger.entity_id) }}'
