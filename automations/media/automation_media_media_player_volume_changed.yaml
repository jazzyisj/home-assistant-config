#######################################################################################################################
## Media Player Media Volume Changed
#######################################################################################################################
- id: media_media_player_volume_changed
  alias: "[Media] Media Player Volume Changed"
  description: "Update media volume when media type media player volume."
  initial_state: true # may have been turned off when automations were reloaded
  mode: queued
  max: 20
  max_exceeded: error
  variables:
    media_type: >
      {% set media_sensors = state_attr('group.media_sensors','entity_id') %}
      {% set type = namespace(value='') %}
      {% for sensor in media_sensors %}
        {% set mtype = sensor[14:] %}
        {% if is_state(sensor,'on')
            and trigger.entity_id == states('sensor.' ~ mtype ~ '_media_player') %}
          {% set type.value = mtype %}
        {% endif %}
      {% endfor %}
      {{ type.value }}
    player_volume: "{{ ('%0.2f'|format(state_attr(trigger.entity_id,'volume_level')|float(0) * 100))|int(-1) }}"
    quiet_volume: "{{ states('input_number.media_quiet_volume')|int(-1) }}"
    new_volume: >
      {% if media_type != '' %}
        {% set media_type = 'spotify' if 'spotify' in media_type else media_type %}
        {% if is_state('binary_sensor.volume_override','off')
            and is_state('binary_sensor.quiet_hours','on')
            and (player_volume > quiet_volume) %}{% set volume = quiet_volume %}
        {% else %}{% set volume = player_volume %}
        {% endif %}
        {# reverse media type adjustment #}
        {{ '%0.02f'|format(volume / (1 + states('input_number.' ~ media_type ~ '_volume_adjustment')|float(-1))) }}
      {% endif %}
  trigger:
    - platform: state
      entity_id: !include /config/include/entities/media_player_entities.yaml
      attribute: volume_level
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - script.media_play
      state: 'off'

    - condition: template
      alias: "Trigger entity is a media type player"
      value_template: "{{ media_type != '' }}"

    - condition: template
      alias: "Volume not changed by media player turning off or unavailable (sets volume to 0)"
      value_template: "{{ states(trigger.entity_id)|lower not in ['off','unknown','unavailable','none'] }}"

    - condition: template
      alias: "Volume not changed by an active alarm clock media player"
      value_template: >
        {% if is_state('binary_sensor.alarm_clock','off') %} true
        {% else %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% if is_state_attr(alarm,'type','group') %}
            {% set found = namespace(value=0) %}
            {% for item in state_attr('sensor.alarm_clock_media_player','players') %}
              {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value|int(0) != 1 }}
          {% else %}{{ alarm != trigger.entity_id }}
          {% endif %}
        {% endif %}

    - condition: template
      alias: "Volume not changed by any active tts media player"
      value_template: >
        {% if is_state('input_boolean.tts_playing','off') %} true
        {% else %}
          {% set tts = states('sensor.tts_media_player') %}
          {% if is_state_attr(tts,'type','group') %}
            {% set found = namespace(value=0) %}
              {% for item in state_attr('sensor.tts_media_player','players') %}
                {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
            {{ found.value|int(0) != 1 }}
          {% else %}{{ tts != trigger.entity_id }}
          {% endif %}
        {% endif %}
  action:
    - service: automation.turn_off
      target:
        entity_id: automation.media_volume_changed
      data:
        stop_actions: false

    - service: input_number.set_value
      target:
        entity_id: "input_number.{{ media_type }}_volume"
      data:
        value: "{{ new_volume }}"

    - service: automation.turn_on
      target:
        entity_id: automation.media_volume_changed

