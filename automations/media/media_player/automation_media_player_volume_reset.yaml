###############################################################################
## Media Player - Volume Reset
###############################################################################
- id: media_player_volume_reset
  alias: '[Media Player] Volume Reset'
  description: 'Reset media player volumes when home mode or quiet time change.'
  mode: restart
  variables:
    media_types: "{{ state_attr('binary_sensor.media_on','media_types')|default([]) }}"
    #BUG #TV_VOL webOS TV's don't report volume level - volume gets set to 0
    media_players: >
      {% set media_players = expand(state_attr('group.single_media_players','entity_id'))
          |rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list %}
      {% set other_players = namespace(value=[]) %}
      {% for media_type in media_types %}
        {% set other_players.value = other_players.value
          + expand(state_attr('sensor.' ~ media_type ~ '_media_player','entity_id'))
            |map(attribute='entity_id')|list %}
      {% endfor %}
      {{ expand(media_players)|rejectattr('entity_id','in',other_players.value)
          |map(attribute='entity_id')|list }}
  trigger:
    - platform: state # reset when quiet time turns on or off
      entity_id: binary_sensor.quiet_time #TEMPLATE trigger on reload
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'

    - platform: state # reset to default when override turned off
      entity_id: binary_sensor.volume_override
      to: 'off'
      from: 'on'

    - platform: state # quiet time/occupancy mode may have changed during while offline/disabled
      entity_id: input_boolean.media_player_automation
      to: 'on'

    - platform: state # always reset volumes on restart
      entity_id: input_boolean.startup_pending
      to: 'off'

    - platform: state # may have been prevented from running during alarm event
      entity_id: alarm_control_panel.master
      to: disarmed
      from: triggered
  condition:
    - condition: state
      entity_id: input_boolean.media_player_automation
      state: 'on'

    - condition: state
      entity_id: input_boolean.startup_pending
      state: 'off'
  action:
    - choose:
        - conditions: '{{ media_types|count > 0 }}'
          sequence:
            # reset all media type players
            - repeat:
                count: '{{ media_types|count }}'
                sequence:
                  - variables:
                      media_type: '{{ media_types[repeat.index -1] }}'

                  - choose:
                      - conditions:
                          - condition: state
                            entity_id: binary_sensor.mobile_phone_in_use
                            state: 'on'
                        sequence:
                          - service: script.media_players_save_volumes # save values to restore when phone off
                            data:
                              media_type: '{{ media_type }}'
                              media_players: "{{ state_attr('sensor.' ~ media_type ~ '_media_player','entity_id') }}"
                              source: reset
                    default:
                      - service: script.media_players_set_volumes # set new media volumes
                        data:
                          media_type: '{{ media_type }}'
                          media_players: "{{ state_attr('sensor.' ~ media_type ~ '_media_player','entity_id') }}"
                          source: reset

    # save new alarm_clock restore volumes if alarm clock is on to restore when alarm clock turns off
    # do this after radio - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: 'on'
          sequence:
            - service: script.media_players_save_volumes
              data:
                media_type: "{{ states('input_select.alarm_clock_sound_' ~ state_attr('binary_sensor.alarm_clock','alarm_type')) }}"
                media_players: "{{ state_attr('sensor.alarm_clock_media_player','entity_id') }}"
                source: reset

    # save new tts volumes if tts on so they are set to new values when tts off
    # do after alarm clock - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.tts
              state: 'on'
          sequence:
            - service: script.media_players_save_volumes
              data:
                media_players: "{{ state_attr('sensor.tts_media_player','entity_id') }}"
                source: reset

    - choose: # reset all other media player volumes
        - conditions: '{{ media_players|count > 0 }}'
          sequence:
            - service: script.media_players_set_volumes
              data:
                media_players: '{{ media_players }}'
                source: reset
