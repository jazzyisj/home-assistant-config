###############################################################################
## Media Player - Volume Reset
###############################################################################
- id: media_player_volume_reset
  alias: '[Media Player] Volume Reset'
  description: 'Reset media player volumes when home mode or quiet time change.'
  mode: restart
  variables:
    media_types: "{{ state_attr('binary_sensor.media_on','media_types')|default([]) }}"
    #BUG #TV webOS TV's don't report volume level - volume gets set to 0
    media_players: >
      {% set media_players = state_attr('group.single_media_players','entity_id') %}
      {% set other_players = namespace(value=[]) %}
      {% for media_type in media_types %}
        {% set other_players.value = other_players.value
          + expand(state_attr('sensor.' ~ media_type ~ '_media_player','entity_id'))
            |map(attribute='entity_id')|list %}
      {% endfor %}
      {{ expand(media_players)|rejectattr('entity_id','in',other_players.value)
          |map(attribute='entity_id')|list }}
  #NOTE also called by automation.trigger
  trigger:
    - platform: state # reset when quiet time turns on or off
      entity_id: binary_sensor.quiet_time
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'

    # always reset volumes on restart
    - platform: state
      entity_id: input_boolean.startup_pending
      to: 'off'

    # may have been prevented from running during alarm event
    - platform: state
      entity_id: input_boolean.alarm_triggered
      to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.startup_pending
      state: 'off'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.mobile_phone_in_use
              state: 'on'
          sequence:
            - service: script.media_players_save_volumes # save values to restore when phone off
              data:
                entity_id: >
                  {{ expand(media_players)|selectattr('state','in',['playing','pause','on'])
                      |map(attribute='entity_id')|list }}
                source: reset
      default:
        - service: script.media_players_set_volumes # set new media volumes
          data:
            entity_id: >
              {{ expand(media_players)|selectattr('state','in',['playing','pause','on'])
                  |map(attribute='entity_id')|list }}
            source: reset

    # save new alarm_clock restore volumes if alarm clock is on to restore when alarm clock turns off
    # do this after radio - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: 'on'
          sequence:
            - service: script.media_players_save_volumes
              data:
                media_type: "{{ states('select.alarm_clock_sound_' ~ state_attr('binary_sensor.alarm_clock','alarm_type')) }}"
                entity_id: "{{ state_attr('sensor.alarm_clock_media_player','entity_id') }}"
                source: reset

    # save new tts volumes if tts on so they are set to new values when tts off
    # do after alarm clock - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.tts
              state: 'on'
          sequence:
            - service: script.media_players_save_volumes
              data:
                entity_id: "{{ state_attr('sensor.tts_media_player','entity_id') }}"
                source: reset

    - choose: # reset all other media player volumes
        - conditions: '{{ media_players|count > 0 }}'
          sequence:
            - service: script.media_players_set_volumes
              data:
                entity_id: '{{ media_players }}'
                source: reset
