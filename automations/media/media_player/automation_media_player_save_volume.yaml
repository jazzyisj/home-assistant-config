###############################################################################
## Media Media Player Save Volume
###############################################################################
- id: media_player_save_volume
  alias: '[Media Player] Save Volume'
  description: 'Save media volume when media player volume changes.'
  mode: queued
  max: 20
  max_exceeded: error
  trace:
    stored_traces: 20
  variables:
    player_volume: "{{ '%0.2f'|format(state_attr(trigger.entity_id,'volume_level')|float(-1))|float }}"
  trigger:
    - platform: state
      entity_id: !include /config/include/media_player_entities_single.yaml
      attribute: volume_level
      to: ~
  condition:
    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: template
      alias: 'Volume not changed by media player turning off or becoming unavailable (sets volume to 0)'
      value_template: "{{ states(trigger.entity_id)|lower not in ['off','unknown','unavailable','none'] }}"

    - condition: template
      alias: 'Volume not changed by an active alarm clock media player'
      value_template: >
        {% if is_state('binary_sensor.alarm_clock','off') %} true
        {% else %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% if is_state_attr(alarm,'type','group') %}
            {% set found = namespace(value=0) %}
            {% for item in state_attr('sensor.alarm_clock_media_player','entity_id') %}
              {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value|int != 1 }}
          {% else %}{{ alarm != trigger.entity_id }}
          {% endif %}
        {% endif %}

    - condition: template
      alias: 'Volume not changed by an active tts media player'
      value_template: >
        {% if is_state('binary_sensor.tts','off') %} true
        {% else %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set tts_sensor = 'sensor.' ~ tts.split('.')[1] %}
          {% if is_state_attr(tts,'type','group') and tts != trigger.entity_id %}
            {% set found = namespace(value=0) %}
              {% for item in state_attr(tts_sensor,'entity_id') %}
                {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
            {{ found.value != 1 }}
          {% else %}{{ tts != trigger.entity_id }}
          {% endif %}
        {% endif %}
  action:
    - service: input_number.set_value
      target:
        entity_id: "input_number.{{ trigger.entity_id.split('.')[1] }}_current_volume"
      data:
        value: '{{ player_volume }}'
