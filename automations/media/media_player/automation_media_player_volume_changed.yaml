###############################################################################
## Media Media Player Volume Changed
###############################################################################
- id: media_player_volume_changed
  alias: '[Media Player] Volume Changed'
  description: 'Update media volume when media type media player volume.'
  mode: queued
  max: 20
  max_exceeded: error
  variables:
    media_type: >
      {% set type = namespace(value='') %}
      {% set media_types = state_attr('binary_sensor.media_on','media_types') %}
      {% for media_type in media_types %}
        {% if trigger.entity_id == states('sensor.' ~ media_type ~ '_media_player') %}
          {% set type.value = media_type %}
        {% endif %}
      {% endfor %}
      {{ type.value }}
    volume: >
      {% set player_volume = ('%0.2f'|format(state_attr(trigger.entity_id,'volume_level')|float(-1) * 100))|int(-1) %}
      {% set quiet_volume = states('input_number.media_quiet_volume')|int(-1) %}

      {% if is_state('binary_sensor.volume_override','off')
          and is_state('binary_sensor.quiet_time','on')
          and (player_volume > quiet_volume) %}{% set volume = quiet_volume %}
      {% else %}{% set volume = player_volume %}
      {% endif %}

      {# reverse media type adjustment #}
      {% set media_type = 'spotify' if 'spotify' in media_type else media_type %}
      {% set volume = (volume / (1 + states('input_number.' ~ media_type ~ '_volume_adjustment')|float(0)))|int %}
      {{ 100 if volume > 100 else 0 if volume < 0 else volume }}
  trigger:
    - platform: state
      entity_id: !include /config/include/entities/media_player_entities.yaml
      attribute: volume_level
      to: ~
  condition:
    # alarm announcements are full volume
    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: state
      entity_id:
        - script.media_play
        - script.media_players_set_volumes
      state: 'off'

    - condition: template
      alias: 'Trigger entity is a media type player'
      value_template: "{{ media_type != '' }}"

    - condition: template
      alias: 'Volume not changed by media player turning off or becoming unavailable (sets volume to 0)'
      value_template: "{{ states(trigger.entity_id)|lower not in ['off','unknown','unavailable','none'] }}"

    - condition: template
      alias: 'Volume not changed by an active alarm clock media player'
      value_template: >
        {% if is_state('binary_sensor.alarm_clock','off') %} true
        {% else %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% if is_state_attr(alarm,'type','group') %}
            {% set found = namespace(value=0) %}
            {% for item in state_attr('sensor.alarm_clock_media_player','players') %}
              {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value|int(0) != 1 }}
          {% else %}{{ alarm != trigger.entity_id }}
          {% endif %}
        {% endif %}

    - condition: template
      alias: 'Volume not changed by any active tts media player'
      value_template: >
        {% if is_state('input_boolean.tts_playing','off') %} true
        {% else %}
          {% set tts = states('sensor.tts_media_player') %}
          {% if is_state_attr(tts,'type','group') %}
            {% set found = namespace(value=0) %}
              {% for item in state_attr('sensor.tts_media_player','players') %}
                {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
            {{ found.value|int(0) != 1 }}
          {% else %}{{ tts != trigger.entity_id }}
          {% endif %}
        {% endif %}
  action:
    - service: input_number.set_value
      target:
        entity_id: 'input_number.{{ media_type }}_volume'
      data:
        value: '{{ volume }}'
