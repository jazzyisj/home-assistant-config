#######################################################################################################################
## Alarm Clock - Media Player Volume Change
# media player volume is float value, input_number is percent value
#######################################################################################################################
- id: alarm_clock_media_player_volume_change
  alias: "[Alarm Clock] Media Player Volume Change"
  description: Change alarm_clock volume control when radio media player volume changes.
  initial_state: true
  mode: queued
  max: 3
  trigger:
    - platform: state
      entity_id: !include /config/include/entities/media_player_entities_single.yaml
      attribute: volume_level
  condition:
    - condition: state
      entity_id: binary_sensor.alarm_clock_active
      state: 'on'

    - condition: state
      entity_id:
        - input_boolean.alarm_clock_resume # prevent alarm changing volume with tts
        - input_boolean.alarm_clock_snooze # prevent alarm changing volume when snoozed
        - input_boolean.tts_playing
      state: 'off'
      for: 10 # wait for alarm clock play to resume or volume set to zero

    - "{{ is_state('sensor.alarm_clock_media_player',trigger.entity_id) }}"

    - condition: template
      alias: Trigger to_state is not off (volume will be set to 0)
      value_template: "{{ states(trigger.entity_id)|lower not in ['off','idle','unknown','unavailable','none'] }}"

    - condition: template
      alias: Media player volume is not already equal to the alarm clock volume.
      value_template: >
          {{ '%0.2f'|format(state_attr(trigger.entity_id,'volume_level')|float)
                != '%0.2f'|format(states('input_number.alarm_clock_volume')|float/100) }}

    - condition: template
      alias: If TTS is playing, tts player is not alarm clock player.
      value_template: >
        {% if is_state('input_boolean.tts_playing','off') %} true
        {% else %}
          {% set tts = states('sensor.tts_media_player') %}
          {% if is_state_attr(tts,'type','group') %}
            {% set found = namespace(value=0) %}
            {% set tts_group = state_attr('sensor.tts_media_player','players') %}
            {% for tts_player in tts_group %}
              {% if trigger.entity_id == tts_player %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value|int == 0 }}
          {% else %}{{ trigger.entity_id != tts }}
          {% endif %}
        {% endif %}
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.alarm_clock_volume
        value: "{{ (state_attr(trigger.entity_id,'volume_level')|float*100)|int }}"
