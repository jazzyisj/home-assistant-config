###############################################################################
## Schedule - Waketime
###############################################################################
- id: schedule_waketime
  alias: "[Schedule] Waketime"
  description: "Run wake up routine."
  triggers:
    #NOTE phone alarms can trigger a couple seconds early forcing next_waktime to jump to next day
    # before it ever gets triggered - so back up trigger by 1 minute
    - trigger: template
      value_template: >
        {% if has_value('sensor.next_waketime') %}
          {{ now().replace(second=0, microsecond=0) == (states('sensor.next_waketime') | as_datetime)
              - timedelta(minutes=1) }}
        {% endif %}
  conditions:
    - condition: state
      entity_id: binary_sensor.someone_home
      state: "on"

    - condition: state
      entity_id: input_select.occupancy_mode
      state: Night
  actions:
    - if:
        - condition: template
          alias: "Wake up enabled."
          value_template: >
            {% if is_state('binary_sensor.owner_home', 'off') %}
              {{ is_state('input_boolean.guest_morning', 'on') }}
            {% else %}
              {{ is_state('input_boolean.workday_morning', 'on') if is_state('binary_sensor.work_today', 'on')
                  else is_state('input_boolean.weekend_morning', 'on') }}
            {% endif %}

        - condition: state
          entity_id: input_boolean.alarm_clock_skip_next
          state: "off"
      then:
        - delay: 60 # compensate for early trigger

        # wait for alarm clock to turn on (auto, manual, nap)
        - wait_template: "{{ is_state('binary_sensor.alarm_clock', 'on') }}"
          timeout: 15

        - wait_template: "{{ is_state('binary_sensor.alarm_clock', 'off') }}"

        - action: script.waketime
      else:
        - action: input_select.select_option
          target:
            entity_id: input_select.occupancy_mode
          data:
            option: >
              {% from 'presence.jinja' import occupancy_mode %}
              {{ occupancy_mode() }}
          continue_on_error: true

        - action: script.arm_alarm
          data:
            mode: home
            override: true
          continue_on_error: true

###############################################################################
## Schedule - Manual Wake Up
###############################################################################
- id: schedule_manual_wake_up
  alias: "[Schedule] Manual Wake Up"
  description: "Someone is up before alarm and has manually selected Home/Guest mode."
  triggers:
    - trigger: state
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
      from: Night
  conditions:
    - condition: state
      entity_id:
        - script.waketime
        - input_boolean.occupancy_override
      state: "off"

    - condition: time
      after: input_datetime.day_reset

    - condition: template
      alias: "Before waketime today"
      value_template: >
        {% if has_value('sensor.waketime_today') %}
          {{ now() < states('sensor.waketime_today') | as_datetime }}
        {% endif %}

    - condition: template
      value_template: >
        {{ (is_state('binary_sensor.work_today', 'on') and is_state('input_boolean.workday_morning', 'on'))
          or (is_state('binary_sensor.work_today', 'off') and is_state('input_boolean.weekend_morning', 'on'))
          or (is_state('binary_sensor.owner_home', 'off') and is_state('input_boolean.guest_morning', 'on')) }}
  actions:
    - action: script.waketime
