###############################################################################
## Schedule - Bedtime
###############################################################################
- id: schedule_bedtime
  alias: '[Schedule] Bedtime'
  description: 'Run bed time routine.'
  trigger:
    - platform: time
      at: sensor.next_bedtime
  condition:
    - condition: state
      entity_id:
        - input_boolean.schedule_automation
        - binary_sensor.someone_home
      state: 'on'

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Home
        - Guest

    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: template
      alias: 'Workday/weekend/guest routine enabled, defaults to house waketime if next_waketime is none'
      value_template: >
        {% if is_state('binary_sensor.owner_home','off') %}
          {{ is_state('input_boolean.guest_night','on') }}
        {% elif (now() > today_at(states('input_datetime.house_waketime'))
            if states('sensor.next_waketime')|lower in ['unknown','unavailable','none']
              else now() > states('sensor.next_waketime')|as_datetime) %}
            {{ is_state('input_boolean.workday_night','on')
                if is_state('binary_sensor.work_tomorrow','on')
                  else is_state('input_boolean.weekend_night','on') }}
        {% else %}
          {{ is_state('input_boolean.workday_night','on') if is_state('binary_sensor.work_today','on')
              else is_state('input_boolean.weekend_night','on') }}
        {% endif %}
  action:
    - service: script.turn_on
      target:
        entity_id: script.bedtime
      data:
        variables:
          warning: true

###############################################################################
## Schedule - Bedtime Clear Notification
###############################################################################
- id: schedule_bedtime_clear_notification
  alias: '[Schedule] Bedtime Clear Notification'
  description: 'Clear notification.'
  max_exceeded: silent
  trigger:
    - platform: state
      id: delay
      entity_id: input_boolean.bedtime_delayed
      to: 'off'

    # no  - always run
    - platform: state
      id: occ
      entity_id: input_select.occupancy_mode
      to: Night

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delay_off
  action:
    - service: "{{ states('sensor.notify_service_home') }}"
      data:
        message: clear_notification
        data:
          tag: bedtime_alert

###############################################################################
## Schedule - Bedtime Delay On
###############################################################################
- id: schedule_bedtime_delay_on
  alias: '[Schedule] Bedtime Delay On'
  description: 'Bedtime delay turned on.'
  max_exceeded: silent
  variables:
    bedtime_delay: "{{ states('input_number.bedtime_delay')|int }}"
  trigger:
    - platform: state
      entity_id: input_boolean.bedtime_delayed
      to: 'on'
      for: 5 # allow next_bedtime calac/turn back off without triggering

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delayed
  condition:
    # no timers/notifications of turned on by scene
    - condition: state
      entity_id: binary_sensor.scene_active
      state: 'off'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Night
                - Away
                - Vacation
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.bedtime_delayed

            - service: browser_mod.toast
              data:
                message: >
                  Bedtime delay has been turned off.
                  The house is in {{ states('input_select.occupancy_mode') }} mode.
                duration: 30000
      default:
        - choose:
            - conditions:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: binary_sensor.bedtime_active
                      state: 'off'
                      for: 30 # detect if script.bedtime was running before scheduled bedtime
              sequence:
                - service: timer.start
                  target:
                    entity_id: timer.bedtime_delay
                  data:
                    duration:
                      minutes: '{{ bedtime_delay }}'

                - wait_template: "{{ states('timer.bedtime_delay') == 'active' }}"
                  timeout: 5
                  continue_on_timeout: false

                - service: script.turn_on
                  target:
                    entity_id: script.tts_play
                  data:
                    variables:
                      message: >
                        Your bedtime has been delayed by {{ bedtime_delay }} minutes.
                        I'll check on you again at {{ state_attr('sensor.next_bedtime','delayed_bedtime') }}.
                      quiet_play: true
                      min_volume: 35

                - service: script.bedtime_notification
          default:
            - service: script.turn_on
              target:
                entity_id: script.tts_play
              data:
                variables:
                  message: |
                    You've elected to stay up past your bedtime today.
                    I've delayed your bedtime by {{ bedtime_delay }} minutes.
                    I'll check up on you at {{ state_attr('sensor.next_bedtime','delayed_bedtime') }} to see if you've come to your senses yet.
                  quiet_play: true
                  min_volume: 35

            - condition: template
              alias: After bedtime
              value_template: >
                {% set next = states('sensor.next_bedtime')|as_datetime %}
                {% set today = states('sensor.bedtime_today')|as_datetime %}
                {% set bedtime = next if now() > today else today %}
                {{ bedtime - now() < timedelta(hours=2) if bedtime|lower
                    not in ['unknown','unavailable','none'] else false }}

            - service: script.bedtime_notification

###############################################################################
## Schedule - Bedtime Delay Turned Off
###############################################################################
- id: schedule_bedtime_delay_off
  alias: '[Schedule] Bedtime Delay Off'
  description: 'Delay bedtime or run bedtime script.'
  mode: restart
  trigger:
    - platform: state
      id: delay_off
      entity_id: input_boolean.bedtime_delayed
      to: 'off'
      for: 5 # allow script.bedtime to turn off

    - platform: event
      id: delay_off
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delay_off

    - platform: event
      id: delay_finished
      event_type: timer.finished
      event_data:
        entity_id: timer.bedtime_delay

    - platform: event
      id: delay_cancelled
      event_type: timer.cancelled
      event_data:
        entity_id: timer.bedtime_delay
  action:
    - choose:
        - conditions:
            - condition: state
              alias: 'Scene is active'
              entity_id: binary_sensor.scene_active
              state: 'on'
          sequence:
            - service: input_boolean.turn_on
              target:
                entity_id: input_boolean.bedtime_delayed

            - service: browser_mod.toast
              data:
                message: 'Bedtime delay cannot be turned off when a scene is active.'
                duration: 30000
      default:
        - service: automation.turn_off
          target:
            entity_id: '{{ this.entity_id }}'
          data:
            stop_actions: false

        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.bedtime_delayed

        - service: timer.cancel
          target:
            entity_id: timer.bedtime_delay

        - service: automation.turn_on
          target:
            entity_id: '{{ this.entity_id }}'

        - choose:
            - conditions: "{{ trigger.id == 'timer_finished' }}"
              sequence:
                - service: script.turn_on
                  target:
                    entity_id: script.tts_play
                  data:
                    variables:
                      message: |
                        Are you still awake? I'm going to turn the lights off soon!
                        Let me know if you'd like to stay up a while longer.
                      quiet_play: true
                      min_volume: 35

                - delay:
                    minutes: "{{ states('input_number.bedtime_warning_delay')|int }}"

                - condition: state
                  entity_id: input_boolean.bedtime_delayed
                  state: 'off'

        # if bedtime_active hasn't been of for at least 30 seconds
        # it was on was on before scheduled bedtime - run bedtime script
        - condition: not
          conditions:
            - condition: state
              entity_id: binary_sensor.bedtime_active
              state: 'off'
              for: 30

        - service: script.turn_on
          target:
            entity_id: script.bedtime
