###############################################################################
## Schedule - Bedtime
###############################################################################
- id: schedule_bedtime
  alias: '[Schedule] Bedtime'
  description: 'Run bed time routine.'
  trigger:
    - platform: time
      at: sensor.next_bedtime
  condition:
    - condition: state
      entity_id:
        - input_boolean.schedule_automation
        - binary_sensor.someone_home
      state: 'on'

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Home
        - Guest

    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: template
      alias: Workday/weekend/guest routine enabled, defaults to house waketime if next_waketime is none
      value_template: >
        {% if is_state('binary_sensor.owner_home','off') %}
          {{ is_state('input_boolean.guest_night','on') }}
        {% elif (now() > today_at(states('input_datetime.house_waketime'))
            if states('sensor.next_waketime')|lower in ['unknown','unavailable','none']
              else now() > states('sensor.next_waketime')|as_datetime) %}
            {{ is_state('input_boolean.workday_night','on') if is_state('binary_sensor.work_tomorrow','on')
                else is_state('input_boolean.weekend_night','on') }}
        {% else %}
          {{ is_state('input_boolean.workday_night','on') if is_state('binary_sensor.work_today','on')
              else is_state('input_boolean.weekend_night','on') }}
        {% endif %}
  action:
    - service: script.turn_on
      target:
        entity_id: script.bedtime

###############################################################################
## Schedule - Bedtime Clear Notification
###############################################################################
- id: schedule_bedtime_clear_notification
  alias: '[Schedule] Bedtime Clear Notification'
  description: 'Clear bedtime notification.'
  mode: restart
  trigger:
    - platform: state
      id: occ
      entity_id: input_select.occupancy_mode
      to: Night

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delay_off
  condition:
    - condition: template
      alias: 'Someone home if trigger is night mode.' # always trigger if notification action
      value_template: "{{ is_state('binary_sensor.owner_home','on') if trigger.id == 'occ' else true }}"
  action:
    - service: "{{ states('sensor.notify_service_home') }}"
      data:
        message: clear_notification
        data:
          tag: bedtime_alert

###############################################################################
## Schedule - Turn On Bedtime Delay
###############################################################################
- id: schedule_turn_on_bedtime_delay
  alias: '[Schedule] Turn On Bedtime Delay'
  description: 'Turn on bedtime delayed boolean.'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delayed
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.bedtime_delayed

###############################################################################
## Schedule - Bedtime Delayed On
###############################################################################
- id: schedule_bedtime_delayed_on
  alias: '[Schedule] Bedtime Delayed On'
  description: 'Bedtime delay turned on.'
  mode: restart
  variables:
    delay: "{{ states('input_number.stay_awake_delay')|int }}"
    delayed_bedtime: "{{ state_attr('sensor.next_bedtime','delayed_bedtime') }}"
  trigger:
    - platform: state
      entity_id: input_boolean.bedtime_delayed
      to: 'on'
  condition:
    - condition: state
      entity_id: binary_sensor.scene_active
      state: 'off'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Night
                - Away
                - Vacation
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.bedtime_delayed

            - service: browser_mod.toast
              data:
                message: "Bedtime delay has been turned off. The house is in {{ states('input_select.occupancy_mode') }} mode."
                duration: 30000
      default:
        - delay: 5 # allow bedtime_active to turn on

        - choose:
            - conditions:
                - condition: state
                  entity_id: binary_sensor.bedtime_active
                  state: 'on'
              sequence:
                - service: script.bedtime_notification

                - service: timer.start
                  target:
                    entity_id: timer.bedtime_delay
                  data:
                    duration:
                      minutes: '{{ delay }}'

                - wait_template: "{{ state_attr('timer.bedtime_delay','finishes_at')|lower != none }}"
                  timeout: 30
                  continue_on_timeout: false

                - variables:
                    delayed_bedtime: "{{ state_attr('sensor.next_bedtime','delayed_bedtime') }}"

                - service: script.turn_on
                  target:
                    entity_id: script.tts_play
                  data:
                    variables:
                      message: >
                        Your bedtime has been delayed by {{ delay }} minutes.
                        I'll check with you again at {{ delayed_bedtime }}.
                      quiet_play: true
                      min_volume: 35
          default:
            - service: script.bedtime_notification

            - service: script.turn_on
              target:
                entity_id: script.tts_play
              data:
                variables:
                  message: |
                    You've elected to stay up past your bedtime today.
                    I've delayed your bedtime by {{ delay }} minutes.
                    I'll check up on you at {{ delayed_bedtime }} to see if you've come to your senses yet.
                  quiet_play: true
                  min_volume: 35

###############################################################################
## Schedule - Bedtime Delay Turned Off
###############################################################################
- id: schedule_bedtime_delay_turned_off
  alias: '[Schedule] Bedtime Delay Turned Off'
  description: 'Delay bedtime or run bedtime script.'
  initial_state: true
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - input_boolean.bedtime_delayed
        - binary_sensor.bedtime_active
      to: 'off'

    - platform: event
      id: timer_finished
      event_type: timer.finished
      event_data:
        entity_id: timer.bedtime_delay

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: bedtime_delay_off
  action:
    - choose:
        - conditions:
            - condition: state
              alias: 'Scene is active'
              entity_id: binary_sensor.scene_active
              state: 'on'
          sequence:
            - service: input_boolean.turn_on
              target:
                entity_id: input_boolean.bedtime_delayed

            - service: browser_mod.toast
              data:
                message: 'Bedtime delay cannot be turned off in movie/company mode.'
                duration: 30000
      default:
        - service: automation.turn_off
          target:
            entity_id: '{{ this.entity_id }}'
          data:
            stop_actions: false

        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.bedtime_delayed

        - service: timer.cancel
          target:
            entity_id: timer.bedtime_delay

        - service: automation.turn_on
          target:
            entity_id: '{{ this.entity_id }}'

        - choose:
            - conditions:
                - condition: state # time is after bedtime but not night mode
                  entity_id: binary_sensor.bedtime_active
                  state: 'on'

                - condition: state
                  entity_id: script.bedtime
                  state: 'off'
              sequence:
                - choose:
                    - conditions: "{{ trigger.id == 'timer_finished' }}"
                      sequence:
                        - service: script.turn_on
                          target:
                            entity_id: script.tts_play
                          data:
                            variables:
                              message: |
                                Are you still awake? I'm going to turn the lights off soon!
                                Let me know if you'd like to stay up a while longer.
                              quiet_play: true
                              min_volume: 35

                        - delay:
                            minutes: "{{ states('input_number.night_mode_delay')|int }}"

                        - condition: state
                          entity_id: input_boolean.bedtime_delayed
                          state: 'off'

                - service: script.turn_on
                  target:
                    entity_id: script.bedtime
