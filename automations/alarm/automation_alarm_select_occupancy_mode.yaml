###############################################################################
# Alarm - Select Occupancy Mode
###############################################################################
- id: alarm_select_occupancy_mode
  alias: '[Alarm] Select Occupancy Mode'
  description: 'Select occupancy mode.'
  mode: queued
  variables:
    arm_mode: "{{ states('alarm_control_panel.master') }}"
    occupancy_mode: "{{ states('input_select.occupancy_mode') }}"
    new_occupancy_mode: >
      {% if arm_mode == 'disarmed' %}
        {{ 'Night' if occupancy_mode == 'Night' else 'Home'
            if is_state('binary_sensor.owner_home','on') else 'Guest' }}
      {% elif arm_mode == 'armed_home' %}
        {{ 'Away' if is_state('binary_sensor.someon_home','off')
            else ('Home' if is_state('binary_sensor.owner_home','on') else 'Guest') }}
      {% elif arm_mode == 'armed_night' %}
        {{ 'Night' if is_state('binary_sensor.someone_home','on') else 'Away' }}
      {% elif arm_mode == 'armed_away' %}
        Away
      {% endif %}
  trigger:
    - platform: state
      entity_id: alarm_control_panel.master
      to:
        - armed_home
        - armed_night
        - armed_away

    - platform: state
      entity_id: alarm_control_panel.master
      to: disarmed
      from:
        - armed_home
        - armed_away
        - armed_night
        - triggered
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_enabled
        - input_boolean.alarm_auto_arming
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_temp_override
      state: 'off'

    - condition: template
      alias: 'New occupancy mode not equal to current occupancy mode'
      value_template: '{{ occupancy_mode != new_occupancy_mode }}'

    - condition: template
      alias: 'Arm mode is not armed_away if current occupancy mode is Vacation'
      value_template: "{{ arm_mode != 'armed_away' if occupancy_mode == 'Vacation' else true }}"

    - condition: template
      alias: 'Someone is home if arm mode is disarmed'
      value_template: "{{ not is_state('binary_sensor.someone_home','off') if arm_mode == 'disarmed' else true }}"
  action:
    # turn on override to bypass auto arm, alarm has just been armed
    - service: input_boolean.turn_on
      entity_id: input_boolean.alarm_temp_override

    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: '{{ new_occupancy_mode }}'

    - service: input_boolean.turn_off
      entity_id: input_boolean.alarm_temp_override
