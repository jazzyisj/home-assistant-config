###################################################################################################
## Arm Alarm
###################################################################################################
- id: arm_alarm
  alias: "Arm Alarm"
  description: "Arm house alarm."
  mode: restart
  triggers:
    - trigger: state
      id: disarmed
      entity_id: alarm_control_panel.house
      to: disarmed # arm alarm if disarmed but nobody home

    - trigger: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation
      for: 1 # allow occupancy mode reset

    - trigger: state
      id: night
      entity_id: input_select.occupancy_mode
      to:
        - Night
      for: 1 # allow occupancy mode reset

    - trigger: state
      id: keypad
      entity_id: # do not arm alarm with garage side door
        - sensor.back_door_lock_status
        - sensor.front_door_lock_status
        - sensor.side_door_lock_status
      to: Locked (Keypad)
      not_from:
        - unknown
        - unavailable

    - trigger: state
      id: lock_code
      entity_id:
        - sensor.back_door_lock_status
        - sensor.front_door_lock_status
        - sensor.side_door_lock_status
        - sensor.garage_side_door_lock_status
      to: #LOCK_CODE
        - Locked (Jason)
        - Locked (Guest)
      not_from:
        - unknown
        - unavailable

    - trigger: state
      id: manual
      entity_id:
        - sensor.back_door_lock_status
        - sensor.front_door_lock_status
        - sensor.side_door_lock_status
        - sensor.garage_side_door_lock_status
      to: Locked (Manual)
      not_from:
        - unknown
        - unavailable
  conditions:
    - condition: state
      entity_id:
        - input_boolean.alarm_enabled
        - input_boolean.alarm_auto_arming
      state: "on"
  actions:
    - choose:
        # rearm alarm if still disarmed and nobody home or night mode
        - conditions:
            - condition: trigger
              id: disarmed
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: "off"
                  sequence:
                    # wait to see if someone came home
                    - wait_template: "{{ is_state('binary_sensor.someone_home', 'on') }}"
                      timeout:
                        minutes: 5

                    - if:
                        - condition: state
                          entity_id: binary_sensor.someone_home
                          state: "off"

                        - condition: state
                          entity_id: input_select.occupancy_mode
                          state: Away
                      then:
                        - action: script.arm_alarm
                          data:
                            mode: away

                - conditions:
                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Night

                    - condition: template
                      alias: "Someone just arrived home"
                      value_template: >
                        {{ now() - states.automation.someone_arrives_home.attributes.last_triggered
                            < timedelta(seconds=60) }}
                  sequence:
                    - wait_template: >
                        {% from 'alarm.jinja' import arm_alarm_check %}
                        {{ arm_alarm_check() }}
                      timeout:
                        minutes: 15

                    - action: script.arm_alarm
                      data:
                        mode: night

        - conditions:
            - condition: trigger
              id: night
          sequence:
            # wait 10 minutes if coming from Away mode - someone just came home, verify they stay home
            - if: "{{ trigger.from_state.state == 'Away' }}"
              then:
                - wait_template: "{{ is_state('binary_sensor.someone_home', 'on') }}"
                  timeout:
                    minutes: 5

                - if: "{{ wait.completed }}"
                  then:
                    - wait_template: >
                        {% from 'alarm.jinja' import arm_alarm_check %}
                        {{ arm_alarm_check() }}
                      timeout:
                        minutes: 15

                    - if:
                        - condition: state
                          entity_id: binary_sensor.someone_home
                          state: "on"

                        - condition: state
                          entity_id: input_select.occupancy_mode
                          state: Night
                      then:
                        - action: script.arm_alarm
                          data:
                            mode: night
              else:
                - wait_template: >
                    {% from 'alarm.jinja' import arm_alarm_check %}
                    {{ arm_alarm_check() }}
                  timeout:
                    minutes: 15

                - if:
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: "on"

                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Night
                  then:
                    - action: script.arm_alarm
                      data:
                        mode: night

        - conditions:
            - condition: trigger
              id: away
          sequence:
            - wait_template: >
                {% from 'alarm.jinja' import arm_alarm_check %}
                {{ arm_alarm_check() }}
              timeout:
                minutes: 15

            - if:
                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: "off"

                - condition: state
                  entity_id: input_select.occupancy_mode
                  state: Away
              then:
                - action: script.arm_alarm
                  data:
                    mode: away

        - conditions:
            - condition: trigger
              id: lock_code
          sequence:
            - wait_template: >
                {% from 'alarm.jinja' import arm_alarm_check %}
                {{ arm_alarm_check() }}
              timeout:
                minutes: 15

            - if:
                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: "off"
              then:
                - action: script.arm_alarm
                  data:
                    mode: away

        - conditions:
            - condition: trigger
              id: manual
          sequence:
            - wait_template: >
                {% from 'alarm.jinja' import arm_alarm_check %}
                {{ arm_alarm_check() }}
              timeout:
                minutes: 15

            - if:
                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: "on"
              then:
                - action: script.arm_alarm
                  data:
                    mode: "{{ 'night' if is_state('input_select.occupancy_mode', 'Night') else 'home' }}"
