###############################################################################
## Alarm - Auto Arm
###############################################################################
- id: alarm_arm_master #OCC
  alias: '[Alarm] Arm Master'
  description: 'Arm alarm master zone.'
  mode: restart
  trigger:
    - platform: state
      id: disarmed
      entity_id: alarm_control_panel.master
      to: disarmed
      for: # wait to see if someone comes home (almost home, plug in dead phone)
        minutes: 5

    - platform: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation

    - platform: state
      id: night
      entity_id: input_select.occupancy_mode
      to: Night

    - platform: state
      id: keypad
      entity_id: # do not auto arm master with garage side door
        - sensor.back_door_lock_status
        - sensor.front_door_lock_status
        - sensor.side_door_lock_status
      to: #LOCK_USER
        - Locked (Keypad)
        - Locked (Jason)
        - Locked (Sheri)
        - Locked (Dawn)

    - platform: state
      id: manual
      entity_id:
        - sensor.back_door_lock_status
        - sensor.front_door_lock_status
        - sensor.side_door_lock_status
      to: Locked (Manual)
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_automation
        - input_boolean.alarm_auto_arming
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_temp_override
      state: 'off'

    - condition: template
      alias: 'Lock automation is enabled if lock trigger'
      value_template: >
        {{ is_state('input_boolean.lock_automation','on')
            if trigger.id in ['keypad','manual'] else true }}

    - condition: template
      alias: 'Previous state not unknown if lock trigger'
      value_template: >
        {{ trigger.from_state.state not in ['unknown','unavailable','none']
            if trigger.id in ['keypad','manual'] else true }}

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
            if trigger.id in ['away','night'] else true }}
  action:
    - choose:
        - conditions: "{{ trigger.id == 'disarmed' }}"
          sequence:
            - choose:
                - conditions: # rearm alarm if still disarmed and nobody home
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: 'off'
                  sequence:
                    - wait_template: "{{ is_state('binary_sensor.someone_home','on') }}"
                      timeout: # wait to see if presence override to turns on
                        minutes: 5

                    - condition: state
                      entity_id: alarm_control_panel.master
                      state: disarmed

                    - service: script.arm_alarm
                      data:
                        mode: away

                - conditions: # rearm alarm if in night mode
                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Night
                  sequence:
                    - wait_template: "{{ not is_state('input_select.occupancy_mode','Night') }}"
                      timeout: # wait to see if Night mode is turned off
                        minutes: 5

                    - condition: state
                      entity_id: alarm_control_panel.master
                      state: disarmed

                    - service: script.arm_alarm
                      data:
                        mode: night
        - conditions:
            - "{{ trigger.id == 'manual' }}"

            - condition: state
              entity_id: alarm_control_panel.master
              state: disarmed
          sequence:
            - service: script.arm_alarm
              data:
                mode: "{{ 'night' if is_state('input_select.occupancy_mode','Night') else 'home' }}"

        - conditions:
            - "{{ trigger.id in ['keypad','away'] }}"

            - condition: not
              alias: 'Alarm not already armed_away'
              conditions:
                - condition: state
                  entity_id: alarm_control_panel.master
                  state:
                    - armed_away
                    - arming
          sequence:
            - choose:
                - conditions: "{{ trigger.id == 'away' or trigger.to_state.state == 'Locked (Keypad)' }}"
                  sequence:
                    # wait to see if everyone leaves
                    - wait_template: "{{ is_state('binary_sensor.someone_home','off') }}"
                      timeout:
                        minutes: 5

                    #NOTE if nobody else left home guest must use lock code to lock door or alarm won't arm in away mode
                    - service: script.arm_alarm
                      data:
                        mode: >
                          {{ 'away' if (states('input_select.occupancy_mode') in ['Away','Vacation']
                                  or is_state('binary_sensor.someone_home','off'))
                                else 'night' if is_state('input_select.occupancy_mode','Night') else 'home' }}

                - conditions: "{{ trigger.to_state.state == 'Locked (Jason)' }}"
                  sequence:
                    - service: script.arm_alarm
                      data:
                        mode: away
                        code: !secret ALARMO_JASON

                - conditions: "{{ trigger.to_state.state == 'Locked (Sheri)' }}"
                  sequence:
                    - service: script.arm_alarm
                      data:
                        mode: away
                        code: !secret ALARMO_SHERI

                - conditions: "{{ trigger.to_state.state == 'Locked (Dawn)' }}"
                  sequence:
                    - service: script.arm_alarm
                      data:
                        mode: away
                        code: !secret ALARMO_DAWN

        - conditions:
            - "{{ trigger.id == 'night' }}"

            - condition: not
              alias: 'Alarm not already armed_night'
              conditions:
                - condition: state
                  entity_id: alarm_control_panel.master
                  state:
                    - armed_night
                    - arming
          sequence:
            - service: script.arm_alarm
              data:
                mode: night
