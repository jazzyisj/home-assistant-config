###############################################################################
## Alarm - Triggered Notification
###############################################################################
- id: alarm_triggered_notification
  alias: "[Alarm] Triggered Notification"
  description: "Create alarm snapshots, send alarm notifications."
  mode: restart
  variables:
    trigger_entity: >
      {% set open_sensors = expand(state_attr('alarm_control_panel.master', 'open_sensors'))
          | map(attribute='entity_id') | list %}
      {{ 'unknown' if open_sensors | count == 0 else open_sensors[0] }}
    message: |
      Trigger: {{ states('input_text.current_alarm') }}
      Time: {{ as_local(states.alarm_control_panel.master.last_changed).strftime('%-I:%M %p') }}
  trigger:
    - platform: state
      entity_id:
        - input_boolean.alarm_pending
        - input_boolean.alarm_triggered
      to: "on"
      for: 5 # allow trigger_entity, current_alarm, danger_alarm to calculate
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_enabled
        - input_boolean.alarm_notifications
      state: "on"

    - condition: state
      entity_id: binary_sensor.danger_alarm
      state: "off"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.alarm_triggered
              state: "on"
          sequence:
            - action: persistent_notification.create
              data:
                title: "Alarm Triggered!"
                message: "{{ message }}"
                notification_id: alarm_triggered
              continue_on_error: true

            - condition: template
              alias: "A TV is on"
              value_template: "{{ states('sensor.notify_service_tv') != 'none' }}"

            - action: "notify.{{ states('sensor.notify_service_tv') }}"
              data:
                message: "{{ message }}"
              continue_on_error: true

        - conditions:
            - condition: state
              entity_id: input_boolean.alarm_pending
              state: "on"

            - condition: template
              alias: "A TV is on"
              value_template: "{{ states('sensor.notify_service_tv') != 'none' }}"
          sequence:
            - action: "notify.{{ states('sensor.notify_service_tv') }}"
              data:
                message: "{{ message }}"
              continue_on_error: true

    - variables: #TEMP disabled cameras replaced
        cam1: > # main snapshot for mobile notification
          {% if trigger_entity in state_attr('group.south_side_house_sensors', 'entity_id') %}
            side_door
          {% elif trigger_entity in state_attr('group.front_house_sensors', 'entity_id') %}
            front_door
          {% elif trigger_entity in state_attr('group.front_north_side_house_sensors', 'entity_id') %}
            front_door
          {% elif trigger_entity in state_attr('group.back_north_side_house_sensors', 'entity_id')  %}
            back_door
          {% elif trigger_entity in state_attr('group.back_house_sensors', 'entity_id') %}
            back_door
          {% elif trigger_entity in state_attr('group.garage_sensors', 'entity_id') %}
            side_door
          {% else %}
            front_door
          {% endif %}

        cam2: >
          {% if trigger_entity in state_attr('group.south_side_house_sensors', 'entity_id') %}
            side_drive
          {% elif trigger_entity in state_attr('group.front_house_sensors', 'entity_id') %}
            front_drive
          {% elif trigger_entity in state_attr('group.front_north_side_house_sensors', 'entity_id') %}
            front_yard
          {% elif trigger_entity in state_attr('group.back_north_side_house_sensors', 'entity_id') %}
            patio_door
          {% elif trigger_entity in state_attr('group.back_house_sensors', 'entity_id') %}
            patio_door
          {% elif trigger_entity in state_attr('group.garage_sensors', 'entity_id') %}
            back_house
          {% else %}
            side_drive
          {% endif %}

        cam3: >
          {% if trigger_entity in state_attr('group.south_side_house_sensors', 'entity_id') %}
            front_door
          {% elif trigger_entity in state_attr('group.front_house_sensors', 'entity_id') %}
            front_yard
          {% elif trigger_entity in state_attr('group.front_north_side_house_sensors', 'entity_id') %}
            front_door
          {% elif trigger_entity in state_attr('group.back_north_side_house_sensors', 'entity_id')  %}
            back_house
          {% elif trigger_entity in state_attr('group.back_house_sensors', 'entity_id') %}
            back_house
          {% elif trigger_entity in state_attr('group.garage_sensors', 'entity_id') %}
            side_drive
          {% else %}
            back_house
          {% endif %}

        cam4: >
          {% if trigger_entity in state_attr('group.south_side_house_sensors', 'entity_id') %}
            back_house
          {% elif trigger_entity in state_attr('group.front_house_sensors', 'entity_id') %}
            side_drive
          {% elif trigger_entity in state_attr('group.front_north_side_house_sensors', 'entity_id') %}
            side_gate_front
          {% elif trigger_entity in state_attr('group.back_north_side_house_sensors', 'entity_id')   %}
            side_gate_back
          {% elif trigger_entity in state_attr('group.back_house_sensors', 'entity_id') %}
            side_gate_back
          {% elif trigger_entity in state_attr('group.garage_sensors', 'entity_id') %}
            back_door
          {% else %}
            patio_door
          {% endif %}

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.alarm_triggered
              state: "on"
          sequence:
            - repeat:
                sequence:
                  - variables:
                      file1: "alarm_snapshots/{% from 'camera.jinja'import snapshot_filename %}{{ snapshot_filename(cam1) }}"
                      file2: "alarm_snapshots/{% from 'camera.jinja'import snapshot_filename %}{{ snapshot_filename(cam2) }}"
                      file3: "alarm_snapshots/{% from 'camera.jinja'import snapshot_filename %}{{ snapshot_filename(cam3) }}"
                      file4: "alarm_snapshots/{% from 'camera.jinja'import snapshot_filename %}{{ snapshot_filename(cam4) }}"

                  - action: camera.snapshot
                    target:
                      entity_id: "camera.{{ cam1 }}_frigate"
                    data:
                      filename: "/config/www/{{ file1 }}"
                    continue_on_error: true

                  - action: camera.snapshot
                    target:
                      entity_id: "camera.{{ cam2 }}_frigate"
                    data:
                      filename: "/config/www/{{ file2 }}"
                    continue_on_error: true

                  - action: camera.snapshot
                    target:
                      entity_id: "camera.{{ cam3 }}_frigate"
                    data:
                      filename: "/config/www/{{ file3 }}"
                    continue_on_error: true

                  - action: camera.snapshot
                    target:
                      entity_id: "camera.{{ cam4 }}_frigate"
                    data:
                      filename: "/config/www/{{ file4 }}"
                    continue_on_error: true

                  - action: persistent_notification.create
                    data:
                      title: "Alarm Snapshots!"
                      notification_id: "alarm_snapshots{{ repeat.index }}"
                      message: |
                        Snapshot Time: {{ now().strftime('%a %-I:%M %p') }}

                        ![image](/local/{{ file1 }})

                        ![image](/local/{{ file2 }})

                        ![image](/local/{{ file3 }})

                        ![image](/local/{{ file4 }})
                    continue_on_error: true

                  - action: notify.jason
                    data:
                      title: "Alarm Triggered"
                      message: "{{ message }}"
                      data:
                        tag: "alarm_triggered{{ repeat.index }}"
                        group: Alarm
                        channel: alarm_stream # bypass DND
                        persistent: true
                        sticky: true
                        notification_icon: "{{ states.input_boolean.alarm_triggered.attributes.icon }}"
                        icon_url: !secret ALARM_ICON
                        image: "/local/{{ file1 }}"
                        ledColor: !secret CRITICAL_COLOR
                        color: !secret CRITICAL_COLOR
                        vibrationPattern: !secret ALARM_STREAM_VIBRATION
                        clickAction: /ui-mobile/alarm
                        actions:
                          - title: "Alarm"
                            action: URI
                            uri: !secret ALARM_URI

                          - title: "Cameras"
                            action: URI
                            uri: !secret LOREX_URI
                    continue_on_error: true

                  - if:
                      - condition: state
                        entity_id: input_boolean.alarm_emails
                        state: "on"

                      - "{{ repeat.index == 1 }}"
                    then: # send email notification, send to work also if at work
                      - action: "{{ 'notify.jason_email_work' if is_state('person.jason', 'Work') else 'notify.jason_email' }}"
                        data:
                          title: "House Alarm Triggered!"
                          message: |
                            {%- from 'presence.jinja' import list_people -%}
                            The house alarm was triggered by the {{ states('input_text.current_alarm') }} at {{ now().strftime('%-I:%M %p') }}.
                            {{ list_people(state_attr('binary_sensor.someone_home', 'home'), true) }} home.
                          data:
                            images:
                              - "/config/www/{{ file1 }}"
                              - "/config/www/{{ file2 }}"
                              - "/config/www/{{ file3 }}"
                              - "/config/www/{{ file4 }}"
                            html: >
                              <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
                              <html lang="en" xmlns="http://www.w3.org/1999/xhtml">
                                  <head>
                                      <meta charset="UTF-8">
                                      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                      <title>House Alarm Alert</title>
                                      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.5/css/bootstrap.min.css">
                                      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
                                      <style type="text/css">
                                          @font-face {
                                            font-family: 'Open Sans';
                                            font-style: normal;
                                            font-weight: 300;
                                            src: local('Open Sans Light'), local('OpenSans-Light'), url(http://fonts.gstatic.com/s/opensans/v13/DXI1ORHCpsQm3Vp6mXoaTZS3E-kSBmtLoNJPDtbj2Pk.ttf) format('truetype');
                                          }
                                          h1,h2,h3,h4,h5,h6 {
                                              font-family:'Open Sans',Arial,sans-serif;
                                              font-weight:400;
                                              margin:10px 0
                                          }
                                      </style>
                                  </head>
                                  <body>
                                    <div class="jumbotron jumbotron-fluid" style="background-color: #f00a2d; color: white;">
                                        <div class="container py-0">
                                            <h1>ALARM TRIGGERED!</h1>
                                        </div>
                                    </div>
                                    <div class="container-fluid">
                                      <div class="row">Trigger: {{ states('input_text.current_alarm') }}
                                      <div class="row">Time: {{ as_local(states.alarm_control_panel.master.last_changed).strftime('%-I:%M %p') }}</div>
                                    </div>
                                    <br>
                                    <div class="container-fluid">
                                      <div class="row">
                                        <div class="col-xs-12 col-md-6 px-0">
                                          <img class="rounded" style="width: 100%;"
                                              alt="snapshot1" src="cid:{{ file1 }}" />
                                        </div>
                                        <div class="col-xs-12 col-md-6 px-0">
                                          <img class="rounded" style="width: 100%;"
                                              alt="snapshot2" src="cid:{{ file2 }}" />
                                        </div>
                                      </div>
                                      <br>
                                    </div>
                                  </body>
                                  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
                                  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.5/js/bootstrap.min.js"></script>
                              </html>
                        continue_on_error: true

                  - wait_template: "{{ not is_state('alarm_control_panel.master', 'triggered') }}"
                    timeout: 60 # seconds between alerts

                until: "{{ repeat.index == 4 or not is_state('alarm_control_panel.master', 'triggered') }}"

        - conditions:
            - condition: state
              entity_id: input_boolean.alarm_pending
              state: "on"
          sequence:
            - variables:
                file1: "alarm_snapshots/{% from 'camera.jinja'import snapshot_filename %}{{ snapshot_filename(cam1) }}"

            - action: camera.snapshot
              target:
                entity_id: "camera.{{ cam1 }}_frigate"
              data:
                filename: "/config/www/{{ file1 }}"
              continue_on_error: true

            - action: notify.jason
              data:
                title: "<span style='color:red'>Alarm Pending</span>"
                message: "<span style='color:red'>{{ message }}</span>"
                data:
                  tag: alarm_pending
                  group: Alarm
                  channel: Alert
                  persistent: true
                  sticky: true
                  chronometer: true
                  when: "{{ now().timestamp() + state_attr('alarm_control_panel.master', 'delay') | int(0) }}"
                  notification_icon: "{{ states.input_boolean.alarm_pending.attributes.icon }}"
                  icon_url: !secret ALARM_ICON
                  image: "/local/{{ file1 }}"
                  ledColor: !secret CRITICAL_COLOR
                  color: !secret CRITICAL_COLOR
                  vibrationPattern: !secret ALERT_VIBRATION
                  clickAction: /ui-mobile/alarm
                  actions:
                    - title: "Alarm"
                      action: URI
                      uri: !secret ALARM_URI

                    - title: "Cameras"
                      action: URI
                      uri: !secret LOREX_URI
              continue_on_error: true
