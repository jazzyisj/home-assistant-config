###############################################################################
## Alarm - Disarm
###############################################################################
- id: alarm_auto_disarm
  alias: '[Alarm] Auto Disarm'
  description: 'Automatically disarm house alarm.'
  trigger:
    - platform: state
      entity_id: input_boolean.alarm_enabled
      to: 'off'
      from: 'on'
      for: 5 # allow automation check to turn boolean back on
  action:
    - service: script.disarm_alarm
      data:
        zone: all
        person: hassio

###############################################################################
# Alarm - Disarm Arrive Home
###############################################################################
- id: alarm_disarm_arrive_home
  alias: '[Alarm] Disarm Arrive Home'
  description: 'Disarm alarm when arriving home.'
  mode: queued
  variables:
    person: >
      {% if trigger.id == 'lock' %}{% set to_state = trigger.to_state.state %}
      {% else %}{% set action = trigger.event.data['action'] %}
      {% endif %}
      {% if action in ['disarm_alarm_jason','open_garage_jason'] or to_state == 'Unlocked (Jason)' %} jason
      {% elif action in ['disarm_alarm_sheri','open_garage_sheri'] or to_state == 'Unlocked (Sheri)' %} sheri
      {% elif to_state in ['Unlocked (Dawn)'] %} dawn
      {% else %} hassio
      {% endif %}
  trigger:
    - platform: state
      id: lock
      entity_id:
        - sensor.side_door_lock_status
        - sensor.front_door_lock_status
        - sensor.back_door_lock_status
      to: #LOCK_USER
        - Unlocked (Jason)
        - Unlocked (Sheri)
        - Unlocked (Dawn)
        - Unlocked (Keypad)
      not_from:
        - unknown
        - unavailable

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: disarm_alarm_jason

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: disarm_alarm_sheri

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: open_garage_jason

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: open_garage_sheri
  condition:
    - condition: state
      entity_id: input_boolean.alarm_enabled
      state: 'on'
  action:
    - if: "{{ person in ['jason','sheri'] }}"
      then:
        - service: 'notify.{{ person }}'
          data:
            message: clear_notification
            data:
              tag: '{{ person }}_almost_home'

    - condition: template
      alias: 'Alarm zones not disarmed'
      value_template: >
        {{ not is_state('alarm_control_panel.house','disarmed')
            and  not is_state('alarm_control_panel.garage','disarmed') }}

    - if:
        - condition: trigger
          alias: 'Alarm was disarmed with a lock keypad'
          id: lock
      then:
        - service: script.disarm_alarm
          data:
            person: '{{ person }}'
      else:
        - wait_template: > #TEMP #ISSUE locked sensor not updating fast enough
            {% if person == 'jason' %}
              {{ (states('binary_sensor.jphone_device_locked') in ['on','off']
                    and (is_state('binary_sensor.jason_home','on') or is_state('input_boolean.jason_almost_home','on')))
                  or is_state('alarm_control_panel.house','disarmed')
                  or is_state('alarm_control_panel.garage','disarmed') }}
            {% elif person == 'sheri' %}
              {{ (states('binary_sensor.sphone_device_locked') in ['on','off']
                    and (is_state('binary_sensor.sheri_home','on') or is_state('input_boolean.sheri_almost_home','on')))
                  or is_state('alarm_control_panel.house','disarmed')
                  or is_state('alarm_control_panel.garage','disarmed') }}
            {% elif trigger.id == 'lock' %} true
            {% endif %}
          timeout: 600

        - if: >
            {{ not is_state('alarm_control_panel.house','disarmed')
                or not is_state('alarm_control_panel.garage','disarmed') }}
          then:
            - if: '{{ wait.completed }}' # device unlocked
              then:
                - service: script.disarm_alarm
                  data:
                    person: '{{ person }}'
                    zone: all
              else:
                - service: browser_mod.toast
                  data:
                    duration: 30000
                    message: '{{ person|title }} attempted to disarm the alarm with a locked device.'

                - service: notify.mobile
                  data:
                    title: 'Alarm Error'
                    message: '{{ person|title }} attempted to disarm the alarm with a locked device.'
                    data:
                      tag: '{{ person }}_almost_home'
                      group: Alarm
                      channel: Alert
                      importance: max
                      ttl: 0
                      priority: high
                      timeout: 3600
                      notification_icon: mdi:shield-alert
                      icon_url: !secret ALERT_ICON
                      ledColor: !secret WARNING_COLOR
                      color: !secret WARNING_COLOR
                      vibrationPattern: !secret ALERT_VIBRATION
                      clickAction: /lovelace-mobile/alarm
                      actions:
                        - title: 'Alarm'
                          action: URI
                          uri: !secret ALARM_URI

                        - title: 'Cameras'
                          action: URI
                          uri: !secret LOREX_URI

    - wait_template: >
        {{ not is_state('alarm_control_panel.house','disarmed')
            or not is_state('alarm_control_panel.garage','disarmed') }}
      timeout: # wait then rearm alarm if wasn't already rearmed
        minutes: 10

    - service: script.arm_alarm
      data:
        mode: >
          {% if is_state('binary_sensor.someone_home','off') %} away
          {% elif is_state('input_select.occupancy_mode','Night') %} night
          {% elif states('input_select.occupancy_mode') in ['Home','Guest'] %} home
          {% endif %}
