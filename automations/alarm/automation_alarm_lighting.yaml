######################################################################################################################
# Alarm - Lighting
######################################################################################################################
- id: alarm_lighting
  alias: "[Alarm] Lighting"
  description: House alarm lighting.
  initial_state: true
  mode: queued # arming waiting -> triggered
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarmo
      to:
        - arming
        - pending
        - triggered
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: alarm_control_panel.alarmo
              state: arming
          sequence:
            - service: scene.create
              data:
                scene_id: alarm_arming_lights_restore
                entities:
                  light.side_entrance_light:
                    state: "{{ states('light.side_entrance_light') }}"
                    brightness: "{{ state_attr('light.side_entrance_light','brightness') }}"
                  light.kitchen_potlights:
                    state: "{{ states('light.kitchen_potlights') }}"
                    brightness: "{{ state_attr('light.kitchen_potlights','brightness') }}"
                  light.dining_room_potlights:
                    state: "{{ states('light.dining_room_potlights') }}"
                    brightness: "{{ state_attr('light.dining_room_potlights','brightness') }}"

            - choose:
                - conditions: "{{ is_state('binary_sensor.auto_light_on','on') and is_state('binary_sensor.someone_home','on') }}"
                  sequence:
                    - service: light.turn_on
                      data:
                        entity_id: light.side_entrance_light
                        brightness: 255

                    - service: light.turn_on
                      data:
                        entity_id: light.kitchen_potlights
                        brightness: >
                          {% set current = state_attr('light.kitchen_potlights','brightness') %}
                          {{ 100 if current < 100 else current }}

                    - service: light.turn_on
                      data:
                        entity_id: light.dining_room_potlights
                        brightness: >
                          {% set current = state_attr('light.dining_room_potlights','brightness') %}
                          {{ 100 if current < 100 else current }}

                    - wait_template: "{{ not is_state('alarm_control_panel.alarmo','arming') or is_state('alarm_control_panel.alarmo','triggered') }}"
                      timeout: "{{ state_attr('alarm_control_panel.alarmo','delay')|int }}"

                    - choose:
                        - conditions: "{{ not is_state('alarm_control_panel.alarmo','triggered') }}"
                          sequence:
                            - delay: 30 # wait for occupancy mode to change before restoring lights

                            - condition: template
                              alias: House is still in Home,Guest or Override mode.
                              value_template: "{{ states('input_select.occupancy_mode') in ['Home','Guest','Override'] }}"

                            - service: script.turn_on
                              data:
                                entity_id: script.activate_scene
                                variables:
                                  scene: alarm_arming_lights_restore

        - conditions:
            - condition: state
              entity_id: alarm_control_panel.alarmo
              state: pending
          sequence:
            - service: scene.create
              data:
                scene_id: alarm_pending_lights_restore
                entities:
                  light.side_entrance_light:
                    state: "{{ states('light.side_entrance_light') }}"
                    brightness: "{{ state_attr('light.side_entrance_light','brightness')|int }}"
                  light.kitchen_potlights:
                    state: "{{ states('light.kitchen_potlights') }}"
                    brightness: "{{ state_attr('light.kitchen_potlights','brightness')|int }}"
                  light.dining_room_potlights:
                    state: "{{ states('light.dining_room_potlights') }}"
                    brightness: "{{ state_attr('light.dining_room_potlights','brightness')|int }}"
                  light.upstairs_hallway_potlights:
                    state: "{{ states('light.upstairs_hallway_potlights') }}"
                    brightness: "{{ state_attr('light.upstairs_hallway_potlights','brightness')|int }}"

            - delay: 5 # wait for scene to save

            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.auto_light_on
                      state: 'on'
                  sequence:
                    - service: light.turn_on
                      data:
                        entity_id: light.side_entrance_light
                        brightness: 255

                    - service: light.turn_on
                      data:
                        entity_id: light.kitchen_potlights
                        brightness: >
                          {% set current = state_attr('light.kitchen_potlights','brightness') %}
                          {{ 100 if current < 100 else current }}

                    - service: light.turn_on
                      data:
                        entity_id: light.dining_room_potlights
                        brightness: >
                          {% set current = state_attr('light.dining_room_potlights','brightness') %}
                          {{ 100 if current < 100 else current }}

                    - service: light.turn_on
                      data:
                        entity_id: light.upstairs_hallway_potlights
                        brightness: >
                          {% set current = state_attr('light.upstairs_hallway_potlights','brightness') %}
                          {{ 100 if current < 100 else current }}

        - conditions:
            - condition: state
              entity_id: alarm_control_panel.alarmo
              state: triggered
          sequence:
            - service: scene.create
              data:
                scene_id: alarm_triggered_lights_restore
                entities: !include /config/include/entities/all_lights_scene_entities.yaml

            - delay: 5 # wait for scene to save, allow tts etc to trigger before turning lights on

            - service: script.turn_on
              entity_id: script.lights_on

#######################################################################################################################
## Alarm - Restore Lights
#######################################################################################################################
- id: alarm_restore_lights
  alias: "[Alarm] Restore Lights"
  description: Restore pre alarm light conditions.
  initial_state: true
  mode: queued
  trigger:
    - platform: state
      entity_id: input_boolean.alarm_pending
      to: 'off'
      for: 30 # allow triggered light scene to restore first

    - platform: state
      entity_id: input_boolean.alarm_triggered
      to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'
  action:
    - service: script.turn_on
      data:
        entity_id: script.activate_scene
        variables:
          scene: >
            {{ 'alarm_pending_lights_restore' if trigger.entity_id == 'input_boolean.alarm_pending'
                  else 'alarm_triggered_lights_restore' }}

    - condition: template
      alias: Alarm pending is off if alarm triggered is automation trigger
      value_template: >
          {{ is_state('input_boolean.alarm_pending','off')
              if trigger.entity_id == 'input_boolean.alarm_triggered' else true }}

    - condition: template
      alias: Previous occupancy mode was night/away, it's dark out, and someone is home now
      value_template: > # lights were off if previous mode was night/away etc so turn a couple lights on if it's dark out
        {{ is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.auto_light_on','on')
            and states('input_select.previous_occupancy_mode') in ['Night','Away','Vacation','Override'] }}

    - service: script.turn_on
      data:
        entity_id: script.activate_scene
        variables:
          scene: night_lights