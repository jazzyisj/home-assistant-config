###############################################################################
## Alarm - Notifications
###############################################################################
- id: alarm_notifications
  alias: '[Alarm] Notifications'
  description: 'Send alarm notifications.'
  mode: queued
  variables:
    type: "{{ states('sensor.alarm_type') }}"
  trigger:
    - platform: state
      id: pending
      entity_id: alarm_control_panel.master
      to: pending
      for: 10 # allow alarm_type, current_alarm, snapshots to set

    - platform: state
      id: triggered
      entity_id: alarm_control_panel.master
      to: triggered
      for: 10 # allow alarm_type, current_alarm, snapshots to set

    - platform: state
      entity_id:
        - input_boolean.alarm_pending
        - input_boolean.alarm_triggered
      to: 'off'

  action:
    - choose:
        - conditions: "{{ trigger.id == 'pending' }}"
          sequence:
            - repeat: # must have a repeat.index for image/icon templates
                count: 1
                sequence:
                  - service: notify.alarm # not an alert entity becasuse of icon/image template
                    data:
                      title: 'Alarm Pending'
                      message: "{{ states('input_text.current_alarm') }}"
                      data:
                        tag: alarm_pending
                        group: Alarm
                        channel: Alert
                        importance: max
                        ttl: 0
                        timeout: "{{ state_attr('alarm_control_panel.master','delay')|int(60) }}"
                        priority: high
                        chronometer: true
                        when: "{{ now().timestamp() + state_attr('alarm_control_panel.master','delay')|int(60) }}"
                        notification_icon: '{{ states.input_boolean.alarm_pending.attributes.icon }}'
                        icon_url: !secret ALARM_ICON
                        image: !secret ALARM_IMAGE
                        ledColor: !secret WARNING_COLOR
                        color: !secret WARNING_COLOR
                        vibrationPattern: !secret ALERT_VIBRATION
                        clickAction: /lovelace-mobile/alarm
                        actions:
                          - title: 'Alarm'
                            action: URI
                            uri: app://com.thanksmister.iot.mqtt.alarmpanel

                          - action: URI
                            title: 'Cameras'
                            uri: app://com.flir.consumer.flir.lorexcloud

        - conditions: "{{ trigger.entity_id == 'input_boolean.alarm_pending' }}"
          sequence:
            - service: notify.mobile # do not send clear_notifications to TVs
              data:
                message: clear_notification
                data:
                  tag: alarm_pending

        - conditions: "{{ trigger.id == 'triggered' }}"
          sequence:
            - service: persistent_notification.create
              data:
                title: >
                  {% if type == 'tornado' %} Tornado Alert!
                  {% elif type == 'burglar' %} Burglar Alarm!
                  {% endif %}
                message: >
                  {% if type == 'tornado' %} Tornado Alert - Take Cover!
                  {% elif type == 'burglar' %} Trigger: {{ states('input_text.current_alarm') }}
                  {% endif %}
                  {{ now().strftime('%H:%M  %Y-%m-%d') }}
                notification_id: alarm_triggered

            - repeat:
                sequence:
                  - service: notify.alarm # not an alert entity becasuse of icon/image template
                    data:
                      title: >
                        {% set type = states('sensor.alarm_type') %}
                        {% if type == 'tornado' %} Tornado Alert!
                        {% elif type == 'burglar' %} Burglar Alarm!
                        {% endif %}
                      message: >
                        {%- set type = states('sensor.alarm_type') -%}
                        {%- if type == 'tornado'-%} Tornado Alert - Take Cover!
                        {%- elif type == 'burglar' -%} {{ states('input_text.current_alarm') }}
                        {%- endif -%}
                      data:
                        tag: 'alarm_triggered{{ repeat.index }}'
                        group: Alarm
                        channel: alarm_stream
                        importance: max
                        ttl: 0
                        priority: high
                        persistent: true
                        notification_icon: '{{ states.input_boolean.alarm_triggered.attributes.icon }}'
                        icon_url: !secret ALARM_ICON
                        image: !secret ALARM_IMAGE
                        ledColor: !secret CRITICAL_COLOR
                        color: !secret CRITICAL_COLOR
                        vibrationPattern: !secret ALARM_STREAM_VIBRATION
                        clickAction: /lovelace-mobile/alarm
                        actions:
                          - title: 'Alarm'
                            action: URI
                            uri: app://com.thanksmister.iot.mqtt.alarmpanel

                          - title: 'Cameras'
                            action: URI
                            uri: app://com.flir.consumer.flir.lorexcloud

                  - wait_template: "{{ not is_state('alarm_control_panel.master','triggered') }}"
                    timeout: 60 # delay between notifications
                until: "{{ not is_state('alarm_control_panel.master','triggered') or repeat.index == 3 }}"

        - conditions: "{{ trigger.entity_id == 'input_boolean.alarm_triggered' }}"
          sequence:
            - repeat:
                count: 3
                sequence:
                  - delay: 1 # throttle notifications
                  - service: notify.mobile # do not send clear_notifications to TVs
                    data:
                      message: clear_notification
                      data:
                        tag: 'alarm_triggered{{ repeat.index }}'
