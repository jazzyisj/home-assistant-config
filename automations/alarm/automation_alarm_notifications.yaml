###############################################################################
## Alarm - Notifications
###############################################################################
- id: alarm_notifications
  alias: "[Alarm] Notifications"
  description: "Create alarm snapshots, send alarm notifications."
  mode: restart
  variables:
    trigger_entity: >
      {{ (expand(state_attr('alarm_control_panel.master','open_sensors'))
          |map(attribute='entity_id')|list)[0] }}
    message: >
      {{ states('input_text.current_alarm') }}
      <br>Triggered at: {{ as_local(states.alarm_control_panel.master.last_changed).strftime('%-I:%M %p')  }}
  trigger:
    - platform: state
      entity_id: alarm_control_panel.master
      to:
        - pending
        - triggered
      for: 2 # allow current_alarm to populate
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_enabled
        - input_boolean.alarm_alerts
      state: "on"

    - condition: state
      entity_id: binary_sensor.danger_alarm
      state: "off"
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: alarm_control_panel.master
              state: pending

            - condition: template
              alias: "A TV is on"
              value_template: "{{ states('sensor.notify_service_tv') != 'none' }}"
          sequence:
            - service: "notify.{{ states('sensor.notify_service_tv') }}"
              data:
                message: "{{ message }}"
              continue_on_error: true

        - conditions:
            - condition: state
              entity_id: alarm_control_panel.master
              state: triggered
          sequence:
            - service: persistent_notification.create
              data:
                title: "Alarm Triggered!"
                message: "{{ message }}"
                notification_id: alarm_triggered
              continue_on_error: true

            - condition: template
              alias: "A TV is on"
              value_template: "{{ states('sensor.notify_service_tv') != 'none' }}"

            - service: "notify.{{ states('sensor.notify_service_tv') }}"
              data:
                message: "{{ message }}"
              continue_on_error: true

    - repeat:
        sequence:
          - variables: #TEMP #DISABLED disabled cameras replaced
              cam1: > # main snapshot for mobile notification
                {% if trigger_entity in state_attr('group.south_side_house_sensors','entity_id') %}
                  side_door
                {% elif trigger_entity in state_attr('group.front_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.front_north_side_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.back_north_side_house_sensors','entity_id')  %}
                  back_door
                {% elif trigger_entity in state_attr('group.back_house_sensors','entity_id') %}
                  back_door
                {% elif trigger_entity in state_attr('group.garage_sensors','entity_id') %}
                  side_door
                {% else %}
                  side_drive
                {% endif %}

              cam2: >
                {% if trigger_entity in state_attr('group.south_side_house_sensors','entity_id') %}
                  side_drive
                {% elif trigger_entity in state_attr('group.front_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.front_north_side_house_sensors','entity_id') %}
                  back_door
                {% elif trigger_entity in state_attr('group.back_north_side_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.back_house_sensors','entity_id') %}
                  patio_door
                {% elif trigger_entity in state_attr('group.garage_sensors','entity_id') %}
                  back_house
                {% else %}
                  front_door
                {% endif %}

              cam3: >
                {% if trigger_entity in state_attr('group.south_side_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.front_house_sensors','entity_id') %}
                  side_drive
                {% elif trigger_entity in state_attr('group.front_north_side_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.back_north_side_house_sensors','entity_id')  %}
                  patio_door
                {% elif trigger_entity in state_attr('group.back_house_sensors','entity_id') %}
                  back_door
                {% elif trigger_entity in state_attr('group.garage_sensors','entity_id') %}
                  side_drive
                {% else %}
                  front_door
                {% endif %}

              cam4: >
                {% if trigger_entity in state_attr('group.south_side_house_sensors','entity_id') %}
                  back_house
                {% elif trigger_entity in state_attr('group.front_house_sensors','entity_id') %}
                  front_door
                {% elif trigger_entity in state_attr('group.front_north_side_house_sensors','entity_id') %}
                  patio_door
                {% elif trigger_entity in state_attr('group.back_north_side_house_sensors','entity_id')   %}
                  back_house
                {% elif trigger_entity in state_attr('group.back_house_sensors','entity_id') %}
                  back_door
                {% elif trigger_entity in state_attr('group.garage_sensors','entity_id') %}
                  back_door
                {% else %}
                  back_house
                {% endif %}

              url1: "{% from 'file.jinja' import snapshot_filename %}{{ snapshot_filename('alarm_snapshots',cam1) }}"
              url2: "{% from 'file.jinja' import snapshot_filename %}{{ snapshot_filename('alarm_snapshots',cam2) }}"
              url3: "{% from 'file.jinja' import snapshot_filename %}{{ snapshot_filename('alarm_snapshots',cam3) }}"
              url4: "{% from 'file.jinja' import snapshot_filename %}{{ snapshot_filename('alarm_snapshots',cam4) }}"

          - repeat:
              count: 4
              sequence:
                - service: camera.snapshot
                  target:
                    entity_id: "camera.{{ cam1 }}_frigate"
                  data:
                    filename: "/config/www{{ url1 }}"
                  continue_on_error: true

                - delay: 1 # throttle

                - service: camera.snapshot
                  target:
                    entity_id: "camera.{{ cam2 }}_frigate"
                  data:
                    filename: "/config/www{{ url2 }}"
                  continue_on_error: true

                - delay: 1 # throttle

                - service: camera.snapshot
                  target:
                    entity_id: "camera.{{ cam3 }}_frigate"
                  data:
                    filename: "/config/www{{ url3 }}"
                  continue_on_error: true

                - delay: 1 # throttle

                - service: camera.snapshot
                  target:
                    entity_id: "camera.{{ cam4 }}_frigate"
                  data:
                    filename: "/config/www{{ url4 }}"
                  continue_on_error: true

          - choose:
              - conditions:
                  - condition: state
                    entity_id: alarm_control_panel.master
                    state: pending
                sequence:
                  - service: notify.jason
                    data:
                      title: "Alarm Pending"
                      message: "{{ message }}"
                      data:
                        tag: alarm_pending
                        group: Alarm
                        channel: Alert
                        importance: max
                        ttl: 0
                        priority: high
                        visibility: private
                        persistent: true
                        sticky: true
                        chronometer: true
                        when: "{{ (now().timestamp() + state_attr('alarm_control_panel.master','delay')|int(0))|int }}"
                        notification_icon: "{{ states.input_boolean.alarm_pending.attributes.icon }}"
                        icon_url: !secret ALARM_ICON
                        image: "/local{{ url1 }}"
                        ledColor: !secret CRITICAL_COLOR
                        color: !secret CRITICAL_COLOR
                        vibrationPattern: !secret ALERT_VIBRATION
                        clickAction: /ui-mobile/alarm
                        actions:
                          - title: "Alarm"
                            action: URI
                            uri: !secret ALARM_URI

                          - title: "Cameras"
                            action: URI
                            uri: !secret LOREX_URI

                          - title: "Dismiss"
                            action: clear_pending
                    continue_on_error: true

              - conditions:
                  - condition: state
                    entity_id: alarm_control_panel.master
                    state: triggered
                sequence:
                  - service: notify.jason
                    data:
                      title: "Alarm Triggered"
                      message: "{{ message }}"
                      data:
                        tag: "alarm_triggered{{ repeat.index }}"
                        group: Alarm
                        channel: alarm_stream
                        importance: max
                        ttl: 0
                        priority: high
                        visibility: private
                        persistent: true
                        sticky: true
                        notification_icon: "{{ states.input_boolean.alarm_triggered.attributes.icon }}"
                        icon_url: !secret ALARM_ICON
                        image: "/local{{ url1 }}"
                        ledColor: !secret CRITICAL_COLOR
                        color: !secret CRITICAL_COLOR
                        vibrationPattern: !secret ALARM_STREAM_VIBRATION
                        clickAction: /ui-mobile/alarm
                        actions:
                          - title: "Alarm"
                            action: URI
                            uri: !secret ALARM_URI

                          - title: "Cameras"
                            action: URI
                            uri: !secret LOREX_URI

                          - title: "Dismiss"
                            action: clear_triggered
                    continue_on_error: true

                  - if:
                      - condition: state
                        entity_id: input_boolean.alarm_emails
                        state: "on"
                    then: # send email notification, send to work also if at work
                      - service: "{{ 'notify.jason_email_work' if is_state('person.jason','Work') else 'notify.jason_email' }}"
                        data:
                          title: "House Alarm Alert!"
                          message: |
                            The house alarm was triggered by the {{ states('input_text.current_alarm') }} at {{ now().strftime('%-I:%M %p') }}.

                            Jason is {{ 'home' if is_state('binary_sensor.jason_home','on')
                                else ('Away' if is_state('person.jason','not_home') else 'at ' ~ states('person.jason')|title) }}.
                            {% if is_state('input_boolean.guest_home','on') %} There is a guest at home. {% endif %}
                          data:
                            images:
                              - "/config/www{{ url1 }}"
                              - "/config/www{{ url2 }}"
                              - "/config/www{{ url3 }}"
                              - "/config/www{{ url4 }}"
                        continue_on_error: true

                  - service: persistent_notification.create
                    data:
                      title: "Alarm Snapshots!"
                      notification_id: "alarm_snapshots{{ repeat.index }}"
                      message: |
                        Snapshot Time: {{ now().strftime('%a %-I:%M %p') }}

                        ![image](/local{{ url1 }})

                        ![image](/local{{ url2 }})

                        ![image](/local{{ url3 }})

                        ![image](/local{{ url4 }})
                    continue_on_error: true

          - if:
              - condition: state
                entity_id: alarm_control_panel.master
                state: triggered
            then:
              - delay: 60 # seconds between alerts
        until:
          - condition: template
            value_template: "{{ not is_state('alarm_control_panel.master','triggered') or repeat.index == 3 }}"

###############################################################################
## Alarm - Clear Notifications
###############################################################################
- id: alarm_clear_notifications
  alias: "[Alarm] Clear Notifications"
  description: "Clear alarm notifications."
  mode: queued
  trigger:
    - platform: event
      id: pending
      event_type: mobile_app_notification_action
      event_data:
        action: clear_pending

    - platform: event
      id: triggered
      event_type: mobile_app_notification_action
      event_data:
        action: clear_triggered
  action:
    - if: "{{ trigger.id == 'pending' }}"
      then:
        - service: notify.jason
          data:
            message: clear_notification
            data:
              tag: alarm_pending

    - if: "{{ trigger.id == 'triggered' }}"
      then:
        - repeat:
            count: 3
            sequence:
              - service: notify.jason
                data:
                  message: clear_notification
                  data:
                    tag: "alarm_triggered{{ repeat.index }}"

              - delay: 1 # throttle notifications

