###################################################################################################
## Update HASS Groups
###################################################################################################
- id: update_hass_groups
  alias: "Update HASS Groups"
  description: "Create and update groups."
  mode: single
  max_exceeded: silent
  triggers:
    - trigger: homeassistant
      id: startup
      event: start

    - trigger: event
      event_type: call_service
      event_data:
        domain: group
        service: reload

    - trigger: time_pattern
      minutes: "/1"
  actions:
    - action: group.set
      data:
        object_id: unknown_browsers
        entities: >
          {{ expand('group.connected_browsers')
              | selectattr('attributes.authorized', 'ne', true)
              | map(attribute='entity_id')
              | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: offline_integrations
        entities: >
          {{ expand('group.integration_connected_sensors') | selectattr('state', 'in', ['off', 'unknown', 'unavailable'])
              | map(attribute='entity_id') | sort }}

    - action: group.set
      data:
        object_id: hass_alerts
        entities: >
          {{ states.alert
              | selectattr('attributes.category', 'in',
                  ['hass', 'network', 'system', 'zwave', 'bluetooth'])
                  | map(attribute='entity_id') | sort }}

    - action: group.set
      data:
        object_id: low_batteries
        entities: >
          {% set low_batteries = namespace(value=[]) %}
          {% set batteries = expand(integration_entities('battery_notes'))
              | selectattr('domain', 'eq', 'sensor')
              | selectattr('attributes.device_class', 'eq', 'battery')
              | map(attribute='entity_id') | sort %}
          {% for item in batteries %}
            {% if states(item) == 'on' or (states(item) | int(-1) != -1 and states(item) | int(0)
                < states('input_number.battery_alert_threshold') | int) %}
              {% set low_batteries.value = low_batteries.value + [item] %}
            {% endif %}
          {% endfor %}
          {{ low_batteries.value }}

    - action: group.set
      data:
        object_id: available_updates
        entities: >
          {{ states.update
              | selectattr('state', 'eq', 'on')
              | map(attribute='entity_id') | sort }}

    - action: group.set
      data:
        object_id: connected_browsers
        entities: >
          {{ states.sensor
              | selectattr('entity_id', 'contains', '_browser_user')
              | rejectattr('entity_id', 'contains', '_browser_useragent')
              | map(attribute='entity_id') | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: integration_connected_sensors
        entities: >
          {{ states.binary_sensor
              | rejectattr('entity_id', 'in', label_entities('ignored'))
              | selectattr('entity_id', 'contains', '_integration_connected')
              | map(attribute='entity_id')
              | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: add_on_memory_sensors
        entities: >
          {{ expand(integration_entities('hassio'))
              | selectattr('entity_id', 'contains', '_memory_percent')
              | rejectattr('entity_id', 'in', ['sensor.home_assistant_core_memory_percent',
                  'sensor.home_assistant_supervisor_memory_percent'])
              | map(attribute='entity_id')
              | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: add_on_cpu_sensors
        entities: >
          {{ expand(integration_entities('hassio'))
              | selectattr('entity_id', 'contains', '_cpu_percent')
              | rejectattr('entity_id', 'in', ['sensor.home_assistant_core_cpu_percent',
                  'sensor.home_assistant_supervisor_cpu_percent'])
              | map(attribute='entity_id')
              | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: google_home_timers
        entities: >
          {{ states.sensor | selectattr('attributes.integration', 'eq', 'google_home')
              | selectattr('entity_id', 'contains', 'timer')
              | map(attribute='entity_id') | list
              | select('has_value') | sort }}

    - action: group.set
      data:
        object_id: occupancy_automations
        entities: >
          {{ states.automation
              | selectattr('entity_id', 'in', label_entities('Occupancy'))
              | map(attribute='entity_id') | sort }}

    - action: group.set
      data:
        object_id: presence_sensors
        entities:
          - binary_sensor.jason_home
          - binary_sensor.guest_home

    - action: group.set
      data:
        object_id: presence_override_controls
        entities:
          - input_boolean.jason_home_override

    - action: group.set
      data:
        object_id: indoor_humidity_sensors
        entities:
          - sensor.thermostat_humidity
          - sensor.bathroom_sensor_humidity
          - sensor.living_room_sensor_humidity
          - sensor.bedroom_sensor_humidity

    - action: group.set
      data:
        object_id: indoor_temperature_sensors
        entities:
          - sensor.thermostat_temperature
          # - sensor.bathroom_sensor_air_temperature #ISSUE often exceeds thresholds
          - sensor.living_room_sensor_temperature
          - sensor.bedroom_sensor_temperature