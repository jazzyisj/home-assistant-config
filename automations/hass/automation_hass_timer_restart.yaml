#######################################################################################################################
## Hass - Save Timers
#NOTE too many timers - state > 255 char error
#######################################################################################################################
- id: hass_save_timers
  alias: '[Hass] Save Timers'
  description: 'Save timers for system restart.'
  mode: queued
  max: 25
  max_exceeded: error
  trigger:
    platform: state
    entity_id: &restart_timers
      - timer.alarm_clock_nap
      - timer.alarm_clock_snooze
      - timer.alarm_triggered_reset
      - timer.arrive_home_lights
      - timer.fan_schedule_duration
      - timer.fan_schedule_delay
      - timer.bedtime_delay
      - timer.media_preset_sleep
      - timer.timed_mute_duration
      - timer.guest_alarm_reset
      - timer.auto_workday_alarm_reset
      - timer.auto_weekend_alarm_reset
      - timer.manual_alarm_reset
      - timer.jphone_alarm_reset
      - timer.sphone_alarm_reset
      - timer.dining_room_display_alarm_reset
      - timer.bedroom_display_alarm_reset
      - timer.bathroom_speaker_alarm_reset
      - timer.living_room_speaker_alarm_reset
      - timer.laundry_room_speaker_alarm_reset
      - timer.garage_speaker_alarm_reset
  action:
    - variables:
        timers: *restart_timers
        modes:
          - active
          - paused
    - repeat:
        count: 2
        sequence:
          - variables:
              mode: '{{ modes[repeat.index-1] }}'
          - service: input_text.set_value
            target:
              entity_id: 'input_text.timers_{{ mode }}'
            data:
              value: >
                {% set ns = namespace(timers = []) %}
                {% for t in expand(timers)|selectattr('state', 'eq', mode)|list  %}
                  {% set d = t.attributes.remaining.split(':')|map('int')|list %}
                  {% set s = d[0]*3600 + d[1]*60 + d[2] + (t.last_changed.timestamp()|int(0) if mode == 'active' else 0) %}
                  {% set ns.timers = ns.timers + ['{} {}'.format(t.object_id, s)] %}
                {% endfor %}
                {{ ns.timers|join(',') }}

#######################################################################################################################
## Hass - Restore Timers
#######################################################################################################################
- id: hass_restore_timers
  alias: '[Hass] Restore Timers'
  description: 'Restore saved timers on system restart.'
  trigger:
    platform: homeassistant
    event: start
  action:
    - variables:
        modes:
          - active
          - paused
    - repeat:
        count: 2
        sequence:
          - variables:
              mode: '{{ modes[repeat.index-1] }}'
              timers_text: "{{ states('input_text.timers_' ~ mode) }}"

          - choose:
              - conditions: '{{ timers_text|length > 0 }}'
                sequence:
                  - variables:
                      timers: "{{ timers_text.split(',') }}"

                  - repeat:
                      count: '{{ timers|count }}'
                      sequence:
                        - variables:
                            t: '{{ timers[repeat.index-1].split() }}'
                            id: 'timer.{{t[0]}}'
                            d: "{{ t[1]|int(0) - (now().timestamp()|int(0) if mode == 'active' else 0) }}"

                        - condition: template
                          value_template: '{{ d > 0 }}'

                        - service: timer.start
                          target:
                            entity_id: '{{ id }}'
                          data:
                            duration: '{{ d }}'

                        - condition: template
                          value_template: "{{ mode == 'paused' }}"

                        - service: timer.pause
                          target:
                            entity_id: '{{ id }}'
