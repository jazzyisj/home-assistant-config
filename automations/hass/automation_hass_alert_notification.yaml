###############################################################################
## Hass - Alert Notification
###############################################################################
- id: hass_alert_notification
  alias: "[Hass] Alert Notification"
  description: "Send or clear hass alert notifications."
  mode: parallel
  variables:
    tag: "{{ trigger.entity_id.split('.')[1]|replace('_filtered','') }}"
    sensor: "sensor.{{ trigger.entity_id.split('.')[1] }}"
  trigger:
    - platform: state
      entity_id:
        - sensor.available_updates
        - sensor.offline_integrations
        - sensor.unavailable_entities_filtered
        - sensor.unavailable_media_players
        - sensor.unknown_browsers
        - sensor.unknown_devices
      attribute: entity_id
      to: ~
      for: 60 # throttle alerts, ignore momentary changes

    # must trigger when alert turns on/off
    - platform: state
      entity_id:
        - alert.available_updates
        - alert.offline_integrations
        - alert.unavailable_entities
        - alert.unavailable_media_players
        - alert.unknown_browsers
        - alert.unknown_devices
  condition: "{{ is_state('input_boolean.' ~ state_attr('alert.' ~ tag,'category') ~ '_alerts','on') }}"
  action:
    - wait_template: "{{ is_state('input_boolean.startup_pending','off') }}"
      timeout:
        minutes: 10
      continue_on_timeout: true

    - if: "{{ is_state('alert.' ~ tag,'on') }}"
      then:
        - if: "{{ state_attr(sensor,'entity_id')|count > 0 }}"
          then:
            - service: notify.jason
              data:
                title: "{{ tag|replace('_',' ')|title }}"
                message: >
                  - {{ expand(state_attr(sensor,'entity_id'))
                        |map(attribute='name')|sort|join('<br>- ')|truncate(500) }}
                data:
                  tag: "{{ tag }}"
                  group: System
                  channel: Alert
                  importance: max
                  ttl: 0
                  priority: high
                  visibility: public
                  notification_url: mdi:alert-circle
                  icon_url: !secret HASS_ICON
                  ledColor: !secret WARNING_COLOR
                  color: !secret WARNING_COLOR
                  vibrationPattern: !secret ALERT_VIBRATION
                  clickAction: /ui-system/hass
                  actions:
                    - title: "Pause Alert"
                      action: "pause_alert_{{ tag }}"

                    - title: "View"
                      action: "view_{{ tag }}"
      else:
        - service: notify.jason
          data:
            message: clear_notification
            data:
              tag: "{{ tag }}"

###############################################################################
## HASS - Notification Actions
###############################################################################
- id: hass_notification_actions
  alias: "[HASS] Notification Actions"
  description: "HASS alert notification actions."
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_available_updates

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_offline_integrations

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unavailable_entities

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unavailable_media_players

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unknown_devices

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unknown_browsers

    - platform: event
      id: restart
      event_type: mobile_app_notification_action
      event_data:
        action: restart_hass

    - platform: event
      id: reboot
      event_type: mobile_app_notification_action
      event_data:
        action: reboot_server

    - platform: event
      id: shutdown
      event_type: mobile_app_notification_action
      event_data:
        action: shutdown_server
  action:
    #TODO phone needs to be unlocked
    - choose:
        - conditions: "{{ trigger.id == 'restart' }}"
          sequence:
            - service: homeassistant.restart

        - conditions: "{{ trigger.id == 'reboot' }}"
          sequence:
            - service: hassio.host_reboot

        - conditions: "{{ trigger.id == 'shutdown' }}"
          sequence:
            - service: hassio.host_shutdown
      default:
        - service: button.press
          target:
            entity_id: button.jason_phone_open_mobile_app

        - wait_template: >
            {{ states('sensor.jphone_app_internal_browser_user','Jason')
                or states('sensor.jphone_app_external_browser_user','Jason') }}
          timeout: 60
          continue_on_timeout: false

        - service: browser_mod.navigate
          data:
            path: "/ui-system/{{ iif(trigger.event.data['action'] =='x','network','hass') }}"
            browser_id:
              - jphone_app_internal
              - jphone_app_external
