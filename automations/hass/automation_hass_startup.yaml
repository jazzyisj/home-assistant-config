#######################################################################################################################
## Hass - Startup
#######################################################################################################################
- id: hass_startup
  alias: '[Hass] Startup'
  description: Turn on delayed automations, send restart notification.
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'
          sequence:
            - service: system_log.write
              data:
                level: critical
                logger: automation.hass_startup
                message: '**** HOME ASSISTANT START ****'

    - service: persistent_notification.create
      data:
        title: Automation Startup
        message: Waiting for startup to complete.
        notification_id: startup_delay

    # wait for entities to initialize before continuing
    # use integration group state - binary sensor will always be on at startup
    # use offline devices sensor - binary sensor will always be on at startup
    - wait_template: >
        {{ is_state('group.integration_online_sensors','on')
            and is_state('sensor.offline_devices','0')
            and is_state('sensor.unavailable_sensors','0') }}
      timeout:
        minutes: 5

    - service: input_boolean.turn_off
      entity_id: input_boolean.startup_pending

    - service: browser_mod.window_reload #BUGFIX browser unresponsive sometimes after startup

    - service: script.turn_on
      entity_id: script.internet_speedtest # manually update, unknown at startup

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'
          sequence:
            - service: system_log.write
              data:
                level: critical
                logger: automation.hass_startup
                message: '**** HOME ASSISTANT STARTUP COMPLETE ****'

    - service: persistent_notification.dismiss
      data:
        notification_id: startup_delay

    - service: persistent_notification.create
      data:
        title: &start_title Home Assistant Restarted
        message: &start_message "Startup completed at {{ now().strftime('%H:%M %p') }}."
        notification_id: hass_restart

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.system_alerts
              state: 'on'

          sequence:
            - service: notify.jason
              data:
                title: *start_title
                message: *start_message
                data:
                  tag: &start_tag hass_restart
                  group: System
                  channel: General
                  importance: max
                  ttl: 0
                  priority: high
                  clickAction: &start_url /lovelace/home
                  color: !secret NOTIFY_COLOR
                  icon_url: !secret &start_icon HASSIO_ICON

            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.jason_home
                      state: 'on'

                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Home

                    - condition: state # push causes error if no wan
                      entity_id: binary_sensor.wan_connected
                      state: 'on'

                  sequence:
                    - service: notify.push
                      data:
                        title: *start_title
                        message: *start_message
                        target: jlaptop
                        data:
                          tag: *start_tag
                          timestamp: '{{ as_timestamp(now()) }}'
                          priority: high
                          ttl: 0
                          renotify: true
                          silent: true
                          requireInteraction: false
                          url: *start_url
                          image: !secret HASSIO_IMAGE
                          icon: *start_icon
                          badge: !secret HASSIO_BADGE
                          actions:
                            - title: Close
                              action: close_hass_restart


    - delay:
        minutes: 5 # must delay automation reload so all other hass startup automations can run

    #BUG Zwave Scene Automations not firing after restart unless reloaded
    - service: automation.reload #BUGFIX

#######################################################################################################################
## Hass - Close Restart Notification
#######################################################################################################################
- id: hass_close_restart_notifications
  alias: '[Hass] Close Restart Notifications'
  description: Dismiss notifications on all devices.
  initial_state: true
  max_exceeded: silent
  trigger:
    - platform: event  # from_state of dismissed persistent notifcations is unknown, use state_changed event
      event_type: state_changed
      event_data:
        entity_id: persistent_notification.hass_restart

    - platform: event #BUG html5 closed event doesn't work if notification is in tray
      event_type: html5_notification.closed
      event_data:
        tag: hass_restart

    - platform: event
      event_type: html5_notification.clicked
      event_data:
        action: close_hass_restart

    - platform: event
      event_type: mobile_app_notification_cleared
      event_data:
        tag: hass_restart
  condition: #BUGFIX conditions required as workaround for unknown persistent notification state
    - condition: or
      conditions:
        - "{% if trigger.event is defined %}{{ trigger.event.data['tag'] == 'hass_restart' }}{% endif %}"
        - "{% if trigger.event is defined %}{{ trigger.event.data['action'] == 'close_hass_restart' }}{% endif %}"
        - "{% if trigger.event is defined %}{{ trigger.event.event_type == 'state_changed' and not is_state('persistent_notification.hass_restart','notifying') }}{% endif %}"
  action:
    - service: notify.jason
      data:
        message: clear_notification
        data:
          tag: hass_restart

    - service: html5.dismiss
      data:
        data:
          tag: hass_restart

    - service: persistent_notification.dismiss
      data:
        notification_id: hass_restart

    - delay:
        seconds: 30 # prevent recursive triggers
