###############################################################################
## Hass - Startup
###############################################################################
- id: hass_startup
  alias: "[Hass] Startup"
  description: "Turn off boolean when devices loaded, send restart notifications."
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: system_log.write
      data:
        logger: "{{ this.entity_id }}"
        level: critical
        message: "**** HOME ASSISTANT START ****"

    - service: persistent_notification.create
      data:
        title: "Automation Startup"
        message: "Waiting for startup to complete."
        notification_id: hass_restart

    # wait for entities to initialize before continuing
    # use offline zwave devices sensor - binary sensor will always be on at startup
    - wait_template: >
        {{ is_state('input_boolean.startup_pending','off')
            or (is_state('binary_sensor.wan_connected','on')
              and is_state('sensor.offline_integrations','0')
              and is_state('binary_sensor.zwave_network','on')
              and is_state('sensor.offline_zwave_devices','0')) }}
      timeout:
        minutes: 5

    - service: input_boolean.turn_off
      entity_id: input_boolean.startup_pending

    - service: persistent_notification.create
      data:
        title: &start_title "HASS Restarted"
        message: &start_message "Restarted at {{ now().strftime('%-I:%M %p') }}."
        notification_id: hass_restart

    - if:
        - condition: state
          entity_id: input_boolean.hass_alerts
          state: "on"
      then:
        - service: notify.jason
          data:
            title: *start_title
            message: *start_message
            data:
              tag: hass_restart
              group: System
              channel: General
              importance: max
              ttl: 0
              priority: high
              visibility: public
              notification_icon: "{{ states.input_boolean.startup_pending.attributes.icon }}"
              icon_url: !secret HASS_ICON
              ledColor: !secret NOTIFY_COLOR
              color: !secret NOTIFY_COLOR
              vibrationPattern: !secret GENERAL_VIBRATION
              clickAction: /ui-mobile/home

        - if:
            - condition: state
              entity_id:
                - binary_sensor.wan_connected # push causes error if no wan
                - binary_sensor.jason_home
              state: "on"

            - condition: state
              entity_id: device_tracker.jason_laptop_wifi
              state: home
          then:
            - service: notify.push
              data:
                title: *start_title
                message: *start_message
                target: jlaptop_external
                data:
                  tag: hass_restart
                  timestamp: "{{ now().timestamp() }}"
                  priority: high
                  ttl: 0
                  renotify: true
                  silent: true
                  requireInteraction: false
                  url: /ui/home
                  image: !secret HASS_IMAGE
                  icon: !secret HASS_ICON
                  badge: !secret HASS_BADGE
                  actions:
                    - title: "Close"
                      action: close_hass_restart

    - service: system_log.write
      data:
        logger: "{{ this.entity_id }}"
        level: critical
        message: "**** HOME ASSISTANT STARTUP COMPLETE ****"

###############################################################################
## Hass - Clear Restart Notification
###############################################################################
- id: hass_clear_restart_notification
  alias: "[Hass] Clear Restart Notification"
  description: "Clear notification."
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: html5_notification.closed
      event_data:
        tag: hass_restart

    - platform: event
      event_type: html5_notification.clicked
      event_data:
        action: close_hass_restart

    - platform: event
      event_type: mobile_app_notification_cleared
      event_data:
        tag: hass_restart
  action:
    - service: notify.jason
      data:
        message: clear_notification
        data:
          tag: hass_restart

    - service: html5.dismiss
      data:
        data:
          tag: hass_restart

    - service: persistent_notification.dismiss
      data:
        notification_id: hass_restart

    - delay:
        seconds: 30 # prevent recursive triggers
