###############################################################################
## Hass - Alert Notification
###############################################################################
- id: hass_alert_notification
  alias: "[Hass] Alert Notification"
  description: "Send or clear hass alert notifications."
  mode: parallel
  variables:
    tag: "{{ states[trigger.entity_id].object_id | replace('_filtered', '') }}"
    group: >
      {% if trigger.entity_id == 'alert.unavailable_entities' %}
        group.unavailable_entities_filtered
      {% else %}
        group.{{ states[trigger.entity_id].object_id }}
      {% endif %}
  triggers:
    - platform: state
      entity_id:
        - group.available_updates
        - group.offline_integrations
        - group.unavailable_entities_filtered
        - group.unknown_browsers
        - group.unknown_devices
      attribute: entity_id
      to:
      for: 60

    # must trigger when alert turns on/off
    - platform: state
      entity_id:
        - alert.available_updates
        - alert.offline_integrations
        - alert.unavailable_entities
        - alert.unknown_browsers
        - alert.unknown_devices
  conditions: "{{ is_state('input_boolean.' ~ state_attr('alert.' ~ tag, 'category') ~ '_alerts', 'on') }}"
  actions:
    # avoid false alerts at startup
    - wait_template: "{{ is_state('input_boolean.startup_pending', 'off') }}"
      timeout:
        minutes: 10
      continue_on_timeout: true

    - delay: 1 # avoid blank notifications (let alert turn off)

    - if: "{{ is_state('alert.' ~ tag, 'on') }}"
      then:
        - if: "{{ state_attr(group, 'entity_id') | count > 0 }}"
          then:
            - action: notify.jason
              data:
                title: "{{ tag | replace('_', ' ') | title }}"
                message: |
                  {{- expand(state_attr(group, 'entity_id'))
                      | map(attribute='name') | sort | join('\n') | truncate(500) -}}
                data:
                  tag: "{{ tag }}"
                  group: System
                  channel: Alert
                  visibility: public
                  notification_url: mdi:alert-circle
                  icon_url: !secret HASS_ICON
                  ledColor: !secret WARNING_COLOR
                  color: !secret WARNING_COLOR
                  vibrationPattern: !secret ALERT_VIBRATION
                  actions:
                    - title: "Pause"
                      action: "pause_alert_{{ tag }}"

                    - title: "View"
                      action: "view_{{ tag }}"
      else:
        - action: notify.jason
          data:
            message: clear_notification
            data:
              tag: "{{ tag }}"

###############################################################################
## HASS - Notification Actions
###############################################################################
- id: hass_notification_actions
  alias: "[Hass] Notification Actions"
  description: "HASS alert notification actions."
  max_exceeded: silent
  triggers:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_available_updates

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_offline_integrations

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unavailable_entities

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unknown_devices

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: view_unknown_browsers

    - platform: event
      id: restart
      event_type: mobile_app_notification_action
      event_data:
        action: restart_hass

    - platform: event
      id: reboot
      event_type: mobile_app_notification_action
      event_data:
        action: reboot_server

    - platform: event
      id: shutdown
      event_type: mobile_app_notification_action
      event_data:
        action: shutdown_server
  actions:
    # forces phone to be unlocked and admin user logged into app
    - action: button.press
      target:
        entity_id: button.jason_phone_open_mobile_app

    - wait_template: >
        {{ states('sensor.jphone_app_internal_browser_user', 'Jason')
            or states('sensor.jphone_app_external_browser_user', 'Jason') }}
      timeout: 60
      continue_on_timeout: false

    - choose:
        - conditions:
            - condition: trigger
              id: restart
          sequence:
            - action: homeassistant.restart

        - conditions:
            - condition: trigger
              id: reboot
          sequence:
            - action: hassio.host_reboot

        - conditions:
            - condition: trigger
              id: shutdown
          sequence:
            - action: hassio.host_shutdown
      default:
        - action: browser_mod.navigate
          data:
            path: >
              {% if trigger.id == 'view_available_updates' %}/config/updates
              {% elif trigger.id in ['view_offline_integrations',
                  'view_unavailable_entities','view_unknown_browsers'], %} hass
              {% elif trigger.id in ['view_unknown_devices'] %} network
              {% else %} home
              {% endif %}
            browser_id:
              - jphone_app_internal
              - jphone_app_external
