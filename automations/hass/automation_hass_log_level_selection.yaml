#######################################################################################################################
## Hass - Log Level Selection
#######################################################################################################################
- id: hass_log_level_selection
  alias: "[Hass] Log Level Selection"
  description: "Change system log level to set value."
  variables:
    level: >
      {% if trigger.entity_id == 'binary_sensor.wan_connected_alert'
          and is_state('binary_sensor.wan_connected_alert','on') %} critical
      {% else %} {{ states('input_select.log_level') }}
      {% endif %}
  trigger:
    - platform: state
      entity_id: input_select.log_level

    - platform: state
      entity_id: input_boolean.startup_pending
      to: 'off'

    - platform: state
      entity_id: binary_sensor.wan_connected_alert
  condition:
    - condition: state
      entity_id: input_boolean.startup_pending
      state: 'off'
  action:
    - service: logger.set_default_level
      data:
        level: "{{ level }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'
          sequence:
            - service: system_log.write
              data:
                logger: "{{ this.entity_id }}"
                level: critical
                message: |
                  ***** HASS LOG LEVEL SET TO : {{ level }} *****
                  {%- if trigger.entity_id == 'binary_sensor.wan_connected_alert' %}
                  ***** WAN DOWN: states('binary_sensor.wan_connected_alert') *****
                  {%- endif -%}

    - condition: template
      value_template: "{{ trigger.entity_id == 'input_boolean.startup_pending' }}"

    - choose:
        - conditions: "{{ level == 'info' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_info.yaml

        - conditions: "{{ level == 'warn' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_warn.yaml

        - conditions: "{{ level == 'error' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_error.yaml

        - conditions: "{{ level == 'critical' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_critical.yaml

        - conditions: "{{ level == 'fatal' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_fatal.yaml

        - conditions: "{{ level == 'debug' }}"
          sequence:
            - service: logger.set_level
              data: !include /config/logging/include/component_log_debug.yaml















