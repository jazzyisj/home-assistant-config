###################################################################################################
## Camera Object Detected
###################################################################################################
- id: camera_object_detected
  alias: "Camera Object Detected"
  description: "Camera object detected notification."
  max_exceeded: silent
  trace:
    stored_traces: 50
  variables:
    id: "{{ trigger.payload_json['after']['id'] }}"
    camera: "{{ trigger.payload_json['after']['camera'] }}"
    object: "{{ trigger.payload_json['after']['label'] }}"
    start_time: "{{ trigger.payload_json['after']['start_time'] }}"
    entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
    current_zones: "{{ trigger.payload_json['after']['current_zones'] }}"
    score: "{{ trigger.payload_json['after']['score'] | float(-1) }}"
    stationary: "{{ trigger.payload_json['after']['stationary'] | default(false) }}"
  triggers:
    - trigger: mqtt
      id: new
      topic: frigate/events
      payload: new
      value_template: "{{ value_json.type }}"

    - trigger: mqtt
      id: update
      topic: frigate/events
      payload: update
      value_template: "{{ value_json.type }}"
  conditions:
    - condition: template
      alias: "Throttle notifications"
      value_template: >
        {{ true if this.attributes.last_triggered == none or trigger.id == 'new'
            else now() - this.attributes.last_triggered > timedelta(seconds=120) }}

    - condition: template
      alias: "Object is new and not stationary."
      value_template: >
        {{ trigger.id == 'new' or (not stationary
            and now() - as_datetime(start_time) < timedelta(seconds=60)) }}

    - condition: template
      alias: "Detected object is is valid and in required zone."
      value_template: >
        {% if object == 'car' and score >= 0.65 %}
          {% if camera == 'front_driveway' %} {{ 'driveway' in entered_zones }}
          {% else %} {{ true }}
          {% endif %}
        {% elif object == 'person' and score >= 0.65 %}
          {% if camera == 'front_driveway' %} {{ 'near_house' in entered_zones }}
          {% elif camera == 'side_door' %} {{ 'driveway' in entered_zones }}
          {% elif camera == 'front_door' %} {{ 'porch' in entered_zones }}
          {% elif camera == 'front_yard' %} {{ 'near_house' in entered_zones }}
          {% elif camera == 'back_door' %} {{ 'back_door_deck' in entered_zones }}
          {% elif camera == 'patio_door' %} {{ 'patio_deck' in entered_zones }}
          {% else %} {{ true }}
          {% endif %}
        {% endif %}

    # prevent notification when arriving home
    - condition: state
      alias: "Someone hasn't just arrived home"
      entity_id: binary_sensor.someone_home
      attribute: just_arrived
      state: false
  actions:
    - parallel:
        - sequence:
            - if:
                - condition: template
                  alias: "Someone home and camera event tod, or alarm not disarmed, or priority camera"
                  value_template: >
                    {{ is_state('input_boolean.camera_object_announcements', 'on')
                        and is_state('binary_sensor.someone_home', 'on')
                        and (is_state('binary_sensor.camera_event_announce_tod', 'on')
                          or not is_state('alarm_control_panal.home', 'disarmed')
                          or camera in ['front_driveway', 'front_door']) }}
              then:
                - if:
                    - condition: template
                      alias: "At least 2 minutes since last announcement or camera is front door"
                      value_template: >
                        {{ true if this.attributes.last_triggered == none or camera == 'front_door'
                            else now() - this.attributes.last_triggered > timedelta(minutes=2) }}
                  then:
                    - action: script.turn_on
                      target:
                        entity_id: script.tts_play
                      data:
                        variables:
                          message: |
                            Attention!
                            {%- if camera in ['front_door', 'side_door', 'back_door', 'patio_door', 'back_house',
                                'side_gate_front', 'side_gate_back'] %} {% set prep = 'at' %}
                            {%- else %} {% set prep = 'in' %}
                            {%- endif %}
                            There is a {{ object }} {{ prep }} the {{ camera | replace('_', ' ') }}!
                          provider: "HASS"
                          language: "English (USA)"
                          voice: "Jenny:assistant"
                          always_play: true
                          save_message: false
                      continue_on_error: true

                # - action: script.turn_on #DISABLED until kiosk navigation is resolved
                #   target:
                #     entity_id: script.kiosk_display_camera
                #   data:
                #     variables:
                #       camera: "{{ camera }}"
                #   continue_on_error: true

        - sequence:
            - if:
                - condition: state
                  entity_id: input_boolean.camera_object_notifications
                  state: "on"
              then:
                - delay: 2 # allow snapshot to save

                - action: notify.jason
                  data:
                    title: "{{ camera | replace('_', ' ') | title }} Camera"
                    message: "{{ object |title }} detected at {{ start_time | timestamp_custom('%-I:%M %p') }}."
                    data:
                      tag: "{{ id }}"
                      group: Camera
                      channel: Camera
                      visibility: public
                      when: "{{ start_time }}"
                      notification_icon: mdi:cctv
                      icon_url: !secret CAMERA_ICON
                      image: "{{ states('sensor.hass_base_url') }}/api/frigate/notifications/{{ id }}/thumbnail.jpg?format=android"
                      ledColor: !secret WARNING_COLOR
                      color: !secret WARNING_COLOR
                      vibrationPattern: !secret ALERT_VIBRATION
                      clickAction: "/ui-mobile/{{ camera | replace('_', '-') ~ '-camera' }}"
                      actions:
                        - title: "Pause"
                          action: pause_camera_object_notifications

                        - title: "Disable Cam"
                          action: disable_{{ camera }}_camera_events

                        - title: "Cameras"
                          action: URI
                          uri: !secret LOREX_URI
