###############################################################################
## Camera - Object Detected
###############################################################################
- id: camera_object_detected
  alias: "[Camera] Object Detected"
  description: "Object detected notification."
  mode: parallel
  variables:
    id: "{{ trigger.payload_json['after']['id'] }}"
    object: "{{ trigger.payload_json['after']['label'] }}"
    camera: "{{ trigger.payload_json['after']['camera'][:-8] }}"
    start_time: "{{ trigger.payload_json['after']['start_time'] }}"
    new: "{{ trigger.payload_json['type'] == 'new' }}"
    entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
  trigger:
    - platform: mqtt
      topic: frigate/events
  condition:
    - condition: template
      value_template: "{{ new }}"

    - condition: template
      value_template: "{{ object in ['person', 'car'] }}"

    - condition: template
      value_template: "{{ iif(camera == 'front_drive', 'driveway' in entered_zones, true) }}"

    - condition: template
      value_template: "{{ iif(camera == 'front_door', 'porch' in entered_zones, true) }}"
  action:
    - parallel:
        - sequence:
            - if:
                - condition: template
                  value_template: >
                    {{ is_state('input_boolean.object_tts_announcements', 'on')
                        and is_state('binary_sensor.someone_home', 'on')
                        and (is_state('binary_sensor.camera_object_tod', 'on')
                          or camera in ['front_door', 'side_door']) }}
              then:
                - service: script.tts_play
                  data:
                    media_player: media_player.kiosk
                    tts_service: tts.piper
                    min_volume: 60
                    night_play: true
                    message: |
                      {%- if camera in ['front_door', 'side_door', 'back_door', 'patio_door', 'back_house',
                          'side_gate_front', 'side_gate_back'] %}
                      There is a {{ object }} at the {{ camera | replace('_', ' ') }}!
                      {%- elif camera in ['side_drive', 'front_drive'] %}
                      There is a {{ object }} in the {{ camera | replace('_', ' ') }}way!
                      {%- elif camera in ['front_yard', 'back_yard'] %}
                      There is a {{ object }} in the {{ camera | replace('_', ' ') }}!
                      {%- else %}
                      An object was detected!
                      {%- endif -%}
                  continue_on_error: true

                - service: script.cast_camera
                  data:
                    camera: "{{ camera }}"
                  continue_on_error: true

        - sequence:
            - if:
                - condition: state
                  entity_id: input_boolean.object_mobile_notifications
                  state: "on"

                - condition: template
                  value_template: "{{ object != 'dog' }}"
              then:
                - service: notify.jason
                  data:
                    title: "{{ camera | replace('_', ' ') | title }} Camera"
                    message: "A {{ object }} was detected @ {{ start_time | timestamp_custom('%-I:%M %p') }}."
                    data:
                      tag: "{{ id }}"
                      group: Alarm
                      channel: Alert
                      visibility: private
                      when: "{{ start_time }}"
                      notification_icon: mdi:cctv
                      icon_url: !secret ALARM_ICON
                      image: "{{ states('input_text.base_url') }}/api/frigate/notifications/{{ id }}/thumbnail.jpg?format=android"
                      ledColor: !secret WARNING_COLOR
                      color: !secret WARNING_COLOR
                      vibrationPattern: !secret ALERT_VIBRATION
                      clickAction: "/ui-mobile/{{ camera | replace('_', '-') ~ '-camera' }}"
                      actions:
                        - title: "Pause"
                          action: pause_camera_object_notifications

                        - title: "Cameras"
                          action: URI
                          uri: !secret LOREX_URI

                        - title: "Disable Cam"
                          action: "{{ camera }}_detection_off"
