###############################################################################
## Camera - Object Detection Control
###############################################################################
- id: camera_object_detection_control
  alias: "[Camera] Object Detection Control"
  description: "Control camera detection mode."
  mode: queued
  variables:
    state: "{{ states('alarm_control_panel.master') | replace('armed_vacation', 'armed_away') | replace('armed_', '') }}"
    on_cams: >
      {{ expand('group.frigate_cameras') | selectattr('attributes.' ~ state, 'eq', true)
          | rejectattr('attributes.location', 'eq', 'indoor') | map(attribute='entity_id') | list }}
    off_cams: >
      {{ expand('group.frigate_cameras') | rejectattr('attributes.' ~ state, 'eq', true)
          | rejectattr('attributes.location', 'eq', 'indoor') | map(attribute='entity_id') | list }}
  triggers:
    #BUGFIX reset detect/motion after frigate restart
    - trigger: state
      entity_id:
        - binary_sensor.frigate_integration_connected
        - input_boolean.camera_object_detection
      to: "on"

    - trigger: state
      entity_id: input_boolean.camera_object_detection
      to: "off"
      for:
        hours: 8

    - trigger: state
      entity_id: alarm_control_panel.master
      to:
        - disarmed
        - armed_home
        - armed_night
        - armed_away
        - armed_vacation
  actions:
    - wait_template: "{{ is_state('binary_sensor.frigate_integration_connected', 'on') }}"
      timeout:
        minutes: 10 # frigate takes a while on restart
      continue_on_timeout: false

    - action: switch.turn_on
      target:
        # no detection on side gate, back yard cams
        entity_id: >
          {% set detect = on_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_detect', ignorecase=False) | list %}
          {% set motion = on_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_motion', ignorecase=False) | list %}
          {% set recordings = on_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_recordings', ignorecase=False) | list %}
          {% set snapshots = on_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_snapshots', ignorecase=False) | list %}
          {{ detect + motion + recordings + snapshots }}

    - action: switch.turn_off
      target:
        entity_id: >
          {% set detect = off_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_detect', ignorecase=False) | list %}
          {% set recordings = off_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_recordings', ignorecase=False) | list %}
          {% set snapshots = off_cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_snapshots', ignorecase=False) | list %}
          {{ detect + recordings + snapshots }}

    # detect switches must bet turned off first or motion switches won't turn off
    - action: switch.turn_off
      target:
        entity_id: >
          {{ off_cams | map('regex_replace', find='camera.(.*)',
                replace='switch.\\1_motion', ignorecase=False) | list }}

###############################################################################
## Camera - Turn Off Object Detection
###############################################################################
- id: camera_turn_off_object_detection
  alias: "[Camera] Turn Off Object Detection"
  description: "Turn off camera object detection."
  max_exceeded: silent
  variables:
    cams: "{{ expand('group.frigate_cameras') | map(attribute='entity_id') | list }}"
  triggers:
    - trigger: state
      entity_id: input_boolean.camera_object_detection
      to: "off"

    - trigger: event
      event_type: mobile_app_notification_action
      event_data:
        action: disable_object_detection
  actions:
    - wait_template: "{{ is_state('binary_sensor.frigate_integration_connected', 'on') }}"
      timeout:
        minutes: 10
      continue_on_timeout: false

    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.camera_object_detection

    - action: switch.turn_off
      target:
        entity_id: >
          {% set detect = cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_detect', ignorecase=False) | list %}
          {% set recordings = cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_recordings', ignorecase=False) | list %}
          {% set snapshots = cams | map('regex_replace',
              find='camera.(.*)', replace='switch.\\1_snapshots', ignorecase=False) | list %}
          {{ detect + recordings + snapshots }}

    # detect switches must bet turned off first or motion switches won't turn off
    - action: switch.turn_off
      target:
        entity_id: >
          {{ cams | map('regex_replace', find='camera.(.*)',
                replace='switch.\\1_motion', ignorecase=False) | list }}
