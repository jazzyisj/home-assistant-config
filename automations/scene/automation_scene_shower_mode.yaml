
#######################################################################################################################
## Scene - Shower Mode On
#######################################################################################################################
- id: scene_shower_mode_on
  alias: "[Scene] Shower Mode On"
  description: "Turn on shower mode."
  trigger:
    - platform: state
      entity_id: input_boolean.shower_mode
      to: 'on'
  action:
    - service: timer.start
      target:
        entity_id: timer.shower_mode
      data:
        duration:
          minutes: "{{ states('input_number.shower_mode_duration')|int }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.light_automation
              state: 'on'
          sequence:
            - choose:
                - conditions:
                    - condition: numeric_state
                      entity_id: sensor.upstairs_bathroom_sensor_illuminance
                      below: 50
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: light.upstairs_bathroom_vanity_rgb_light
                      data:
                        profile: warm

            - service: light.turn_on
              target:
                entity_id: light.upstairs_bathroom_shower_light
              data:
                profile: warm_max

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.vent_fan_automation
              state: 'on'
          sequence:
            - service: automation.turn_off # turn off automation so we don't trigger device in use timer
              entity_id: automation.vent_fan_upstairs_bathroom_fan_in_use

            - service: fan.turn_on
              target:
                entity_id: fan.upstairs_bathroom_fan
              data:
                percentage: 100

            - delay: # delay to allow devices to change state
                seconds: 5 #ZWAVE fans are slow to change

            - service: automation.turn_on # turn off automation so we don't trigger device in use timer
              entity_id: automation.vent_fan_upstairs_bathroom_fan_in_use

    - choose:
        - conditions:
            - condition: state
              entity_id:
                - input_boolean.media_player_automation
                - input_boolean.media_preset_enabled_shower
              state: 'on'

            - condition: not
              conditions:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  state: Night
          sequence:
            - choose:
                - conditions:
                    - condition: or
                      alias: Radio/Spotify already playing in bathroom
                      conditions:
                        - condition: template
                          value_template: >
                            {{ is_state('binary_sensor.radio','on') and expand(state_attr('sensor.radio_media_player','players'))
                              |selectattr('entity_id','eq','media_player.bathroom_speaker')|list|count > 0 }}

                        - condition: template
                          value_template: >
                            {{ is_state('binary_sensor.spotify','on') and expand(state_attr('sensor.spotify_media_player','players'))
                              |selectattr('entity_id','eq','media_player.bathroom_speaker')|list|count > 0 }}

                        - condition: template
                          value_template: >
                            {{ is_state('binary_sensor.youtube','on') and expand(state_attr('sensor.youtube_media_player','players'))
                              |selectattr('entity_id','eq','media_player.bathroom_speaker')|list|count > 0 }}
                  sequence:
                    - service: media_player.volume_set
                      target:
                        entity_id: media_player.bathroom_speaker
                      data:
                        volume_level: "{{ states('input_number.media_preset_volume_shower')|float/100 }}"
              default:
                - service: switch.turn_on
                  target:
                    entity_id: switch.media_preset_shower

#######################################################################################################################
## Scene - Shower Mode Off
## vent fans turn off with sensor/timer
#######################################################################################################################
- id: scene_shower_mode_off
  alias: "[Scene] Shower Mode Off"
  description: "Turn off shower mode."
  max_exceeded: silent # recursive call
  trigger:
    - platform: state
      entity_id: input_boolean.shower_mode
      to: 'off'

    - platform: state
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation

    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.shower_mode
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.shower_mode

    - service: timer.cancel
      entity_id: timer.shower_mode

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Night
        - Home
        - Guest

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.light_automation
              state: 'on'
          sequence:
            - choose:
                - conditions:
                    - condition: numeric_state
                      entity_id: sensor.upstairs_bathroom_sensor_illuminance
                      below: input_number.bathroom_illuminance_threshold
                  sequence:
                    - service: light.turn_on # no motion will turn it off
                      target:
                        entity_id: light.upstairs_bathroom_vanity_rgb_light
                      data:
                        profile: warm
                        transition: 2
              default:
                - service: light.turn_off
                  target:
                    entity_id: light.upstairs_bathroom_vanity_rgb_light
                  data:
                    transition: 2

            - service: light.turn_off
              target:
                entity_id: light.upstairs_bathroom_shower_light
              data:
                transition: 2

    - choose: # if shower media player is only bathroom speaker, turn it off
        - conditions:
            - condition: state
              entity_id:
                - input_boolean.media_player_automation
                - input_boolean.media_preset_enabled_shower
              state: 'on'
          sequence:
            - variables:
                media_types: "{{ ['radio','spotify','spotify_jason','spotify_sheri','youtube'] }}"

            - choose: # if shower media player is only bathroom speaker, turn it off
                - conditions:
                    - condition: state
                      entity_id: media_player.bathroom_speaker
                      state:
                        - playing
                        - paused
                        - idle

                    - condition: template
                      value_template: >
                        {% set found = namespace(value=false) %}
                        {% for type in media_types %}
                          {% if is_state('binary_sensor.' ~ type,'on')
                              and is_state('sensor.radio_media_player','media_player.bathroom_speaker') %}
                            {% set found.value = true %}
                          {% endif %}
                        {% endfor %}
                  sequence:
                    - service: media_player.turn_off
                      entity_id: media_player.bathroom_speaker
              default:
                - repeat:
                    count: "{{ media_types|count }}"
                    sequence:
                      - variables:
                          media_type: "{{ media_types[repeat.index - 1] }}"

                      - choose:
                          - conditions:
                              - condition: and
                                conditions:
                                  - condition: template
                                    value_template: "{{ is_state('binary_sensor.' ~ media_type,'on') }}"

                                  - condition: state
                                    entity_id: input_select.occupancy_mode
                                    state: Night
                            sequence:
                              - service: media_player.turn_off
                                target:
                                  entity_id: "media_player.{{ media_type }}"

                          - conditions:
                              - condition: template
                                value_template: >
                                  {{ is_state('binary_sensor.' ~ media_type,'on')
                                      and expand(state_attr('sensor.' ~ media_type ~ '_media_player','players'))
                                        |selectattr('entity_id','eq','media_player.bathroom_speaker')|list|count > 0 }}
                            sequence:
                              - service: media_player.volume_set
                                target:
                                  entity_id: media_player.bathroom_speaker
                                data:
                                  volume_level: "{{ states('input_number.' ~ media_type ~ '_volume')|float / 100 }}"
                        default:
                          - service: media_player.volume_set
                            target:
                              entity_id: media_player.bathroom_speaker
                            data:
                              volume_level: "{{ states('input_number.bathroom_speaker_default_volume')|float }}"
