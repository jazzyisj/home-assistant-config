#######################################################################################################################
## Scene Reset
#######################################################################################################################
- id: scene_reset #OCC
  alias: "[Scene] Reset"
  description: "Reset to scene to default scene when scene turned off."
  mode: restart
  trigger:
    - platform: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation

    - platform: state
      id: home
      entity_id: input_select.occupancy_mode
      to:
        - Home
      from:
        - Night
        - Away
        - Vacation

    - platform: state
      id: night
      entity_id: input_select.occupancy_mode
      to: Night
      from: Night
        - Home
        - Guest

    - platform: state
      id: scene_off
      entity_id:
        - switch.company_mode
        - switch.movie_mode
      to: 'off'

    - platform: state
      id: scene_on
      entity_id:
        - script.scene_wake_up
        - script.scene_bedtime
        - switch.company_mode
        - switch.movie_mode
      to: 'on'
  condition:
    - condition: template
      alias: "Precence automation is on if triggered by occupancy mode"
      value_template: "{{ is_state('input_boolean.presence_automation','on') if trigger.id in ['home','away'] else true }}"
  action:
    - service: automation.turn_off
      target:
        entity_id: "{{ this.entity_id }}"
      data:
        stop_actions: false

    - choose:
        - conditions: "{{ is_state('switch.movie_mode','on') and trigger.entity_id != 'switch.movie_mode' }}"
          sequence:
            - service: switch.turn_off
              entity_id: switch.movie_mode

    - choose:
        - conditions: "{{ is_state('switch.company_mode','on') and trigger.entity_id != 'switch.company_mode' }}"
          sequence:
            - service: switch.turn_off
              entity_id: switch.company_mode

    - choose:
        - conditions: "{{ trigger.id == 'away' }}"
          sequence:
            - service: homeassistant.turn_off
              entity_id:
                - script.someone_arrives_home
                - switch.shower_mode

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_wake_up' }}"
          sequence:
            - service: script.turn_off
              entity_id:
                - script.scene_wake_up
                - script.morning_lights

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_bedtime' }}"
          sequence:
            - service: script.turn_off
              entity_id:
                - script.scene_bedtime
                - script.bedtime_lights

    - choose:
        - conditions:
            - condition: template
              alias: "Wakup/Bedtime script is not running"
              value_template: "{{ is_state('script.scene_wake_up','off') and is_state('script.scene_bedtime','off') }}"

            - condition: template
              alias: "Trigger is not scene_wake_up/scene_bedtime" # duplicates home/night
              value_template: "{{ trigger.entity_id not in ['script.scene_wake_up','script.scene_bedtime'] }}"

            - condition: template
              alias: "Media mode switch not on"
              value_template: "{{ is_state('switch.movie_mode','off') and is_state('switch.company_mode','off') }}"
          sequence:
            - delay: 1 # allow before mode scenes to run on switches

            - service: script.activate_scene
              data:
                scene: rgb_reset # reset rgb lights to warm profile

            - delay: 1 # allow light states to change

            - service: script.activate_scene
              data:
                scene: rgb_reset_off # turn rgb lights off

            - choose:
                conditions:
                  - condition: state
                    entity_id: input_select.occupancy_mode
                    state:
                      - Home
                      - Guest
                sequence:
                  # auto_light/illuminance sensor may have come on while scene script was active
                  - service: script.activate_scene
                    data:
                      scene: >
                        {% if is_state('binary_sensor.auto_light_on','on') %}
                          {{ 'quiet_hours' if is_state('binary_sensor.quiet_hours','on') else 'evening' }}
                        {% elif is_state('binary_sensor.illuminance_light_on','on') %}
                          day_lights
                        {% else %}
                          reset_daytime
                        {% endif %}

    - service: automation.turn_on
      target:
        entity_id: "{{ this.entity_id }}"
