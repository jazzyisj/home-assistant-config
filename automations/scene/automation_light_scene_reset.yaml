#######################################################################################################################
## Light - Scene Reset
#######################################################################################################################
- id: light_scene_reset #OCC
  alias: "[Light] Scene Reset"
  description: Reset to defaults when scene turned off or occupancy mode changes.
  initial_state: true
  mode: restart
  trigger:
    - platform: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Night
        - Away
        - Vacation

    - platform: state
      id: home
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Override
      from: Night

    - platform: state
      id: scene
      entity_id:
        - script.scene_company
        - script.scene_movie
      to: 'off'
      from: 'on' # req it triggers on script reload

    - platform: state
      entity_id:
        - script.scene_wake_up
        - script.scene_bedtime
        - script.scene_movie
        - script.scene_company
      to: 'on'

  condition:
    - condition: template
      alias: Precence automation is on if triggered by occupancy mode
      value_template: "{{ is_state('input_boolean.presence_automation','on') if trigger.id in ['home','away'] else true }}"
  action:
    - service: homeassistant.turn_off
      entity_id:
        - input_boolean.bedtime_delayed
        - input_boolean.volume_override

    - choose:
        - conditions: "{{ trigger.id == 'away' }}"
          sequence:
            - service: script.turn_off
              entity_id:
                - script.someone_arrives_home
                - script.scene_shower

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_wake_up' }}"
          sequence:
            - service: script.turn_off
              entity_id:
                - script.scene_wake_up
                - script.scene_morning_lights

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_bedtime' }}"
          sequence:
            - service: script.turn_off
              entity_id:
                - script.scene_bedtime
                - script.scene_bedtime_lights

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_movie' }}"
          sequence:
            - service: script.turn_off
              entity_id: script.scene_movie

    - choose:
        - conditions: "{{ trigger.entity_id != 'script.scene_company' }}"
          sequence:
            - service: script.turn_off
              entity_id: script.scene_company
      default:
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.media_player_automation
                  state: 'on'
              sequence:
                - service: input_boolean.turn_off
                  entity_id:
                    - input_boolean.radio
                    - input_boolean.spotify

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.light_automation
              state: 'on'
          sequence:
            - service: scene.turn_on
              entity_id: scene.rgb_reset # reset rgb lights to warm

            - delay: 1 # allow light states to chnage

            - service: scene.turn_on
              entity_id: scene.rgb_reset_off

            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Home
                - Guest

            - service: script.activate_scene
              data:
                scene: "{{ 'scene.evening' if is_state('binary_sensor.auto_light_on','on') else 'scene.reset_daytime' }}"
