#######################################################################################################################
## Automation - Hass Startup
#######################################################################################################################
- id: automation_hass_startup
  alias: "[Automation] Hass Startup"
  description: "Turn on delayed automations, send restart notification."
  initial_state: true
  mode: single
  trigger:
    - platform: homeassistant
      event: start

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'

          sequence:
            - service: system_log.write
              data:
                message: "**** HOME ASSISTANT START ****"
                level: critical

    - service: persistent_notification.create
      data:
        title: "Automation Startup"
        message: "Waiting for startup to complete."
        notification_id: startup_delay

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.manual_mode
              state: 'on'

          sequence:
            - service: automation.trigger
              entity_id: automation.automation_manual_mode

    # wait for entities to initialize before continuing
    # use integration group state - binary sensor will always be on at startup
    # use offline devices sensor - binary sensor will always be on at startup
    # use zwave_unavailable_devices sensor - binary sensor will always on at startup
    - wait_template: >
        {{ is_state('group.integration_connected_sensors','on')
            and is_state('sensor.zwave_unavailable_devices','0')
            and is_state('sensor.offline_devices','0')
            and is_state('sensor.unavailable_sensors','0') }}
      timeout:
        minutes: 5
      continue_on_timeout: true  # don't hold up rest of startup

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'

          sequence:
            - service: system_log.write
              data:
                message: "**** HOME ASSISTANT STARTUP COMPLETE ****"
                level: critical

    - service: input_boolean.turn_off
      entity_id: input_boolean.startup_pending

    # select appropriate occupancy mode
    #NOTE default to Home/Guest if waketime_today or bedtime_today is Off
    - service: input_select.select_option
      data:
        entity_id: input_select.occupancy_mode
        option: >
          {% set time = states('sensor.time') %}
          {% set bed = states('sensor.bedtime_today') %}
          {% set wake = states('sensor.waketime_today') %}
          {% if is_state('binary_sensor.someone_home','off') %}
            {{ 'Vacation' if is_state('input_select.occupancy_mode','Vacation') else 'Away' }}
          {% elif bed == 'Off' or wake == 'Off' %}
             {{ 'Home' if is_state('binary_sensor.owner_home','on') else 'Guest' }}
          {% elif (bed < time < wake if bed < wake else ( bed < time > wake or bed > time < wake )) %}
            {{ 'Night' if is_state('input_boolean.bedtime_delayed','off') else ('Home' if is_state('binary_sensor.owner_home','on') else 'Guest') }}
          {% else %}
            {{ 'Home' if is_state('binary_sensor.owner_home','on') else 'Guest' }}
          {% endif %}

    - service: persistent_notification.dismiss
      data:
        notification_id: startup_delay

    - service: persistent_notification.create
      data:
        title: &start_title "Home Assistant Restarted"
        message: &start_message "Home Assistant was restarted at {{now().strftime('%H:%M %p')}}."
        notification_id: hass_restart

    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.alerts_enabled
              state: 'on'

          sequence:
            - service: notify.mobile_app_jphone
              data:
                title: *start_title
                message: *start_message
                data:
                  tag: &start_tag hass_restart
                  group: System
                  channel: General
                  importance: normal
                  vibrationPattern: '100, 100, 100'
                  ledColor: !secret NOTIFY_COLOR
                  priority: &start_priority high
                  ttl: &start_ttl 0
                  timeout: 3600
                  persistent: false
                  sticky: false
                  clickAction: &start_url /lovelace/home
                  color: !secret NOTIFY_COLOR
                  icon_url: &start_icon !secret HASSIO_ICON

            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.jason_home
                      state: 'on'

                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Home

                  sequence:
                    - service: notify.push
                      data:
                        title: *start_title
                        message: *start_message
                        target: jlaptop
                        data:
                          tag: *start_tag
                          timestamp: "{{ as_timestamp(now()) }}"
                          priority: *start_priority
                          ttl: *start_ttl
                          renotify: true
                          silent: true
                          requireInteraction: false
                          url: *start_url
                          image: !secret HASSIO_IMAGE
                          icon: *start_icon
                          badge: !secret HASSIO_BADGE
                          actions:
                            - title: Close
                              action: close_hass_restart

    - wait_template: "{{ is_state('zwave.living_room_cove_light','ready') }}"
      timeout:
        minutes: 15
      continue_on_timeout: true

    - service: script.zwave_led_reset

    # avoid error if zwave device doesn't initialize
    - choose:
        - conditions:
            - condition: state
              entity_id: zwave.living_room_cove_light
              state: ready

          sequence:
            - service: zwave.set_config_parameter
              data:
                node_id: "{{ state_attr('zwave.living_room_cove_light','node_id')|int }}"
                parameter: 16
                size: 4
                value: 88803920 # color: 80 , brightness 10, duration 15m, pulse

    - choose:
        - conditions:
            - condition: state
              entity_id: zwave.kitchen_potlights
              state: ready

          sequence:
            - service: zwave.set_config_parameter
              data:
                node_id: "{{ state_attr('zwave.kitchen_potlights','node_id')|int }}"
                parameter: 16
                size: 4
                value: 88803920 # color: 80 , brightness 10, duration 15m, pulse

    # set log level to value set in UI, set to info in config so we always log startup
    - service: logger.set_default_level
      data:
        level: "{{ states('input_select.log_level') }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'

          sequence:
            - service: system_log.write
              data:
                message: "***** DEFAULT LOG LEVEL SET TO : {{ states('input_select.log_level') }} *****"
                level: critical

    # manually update speedtest sensors so they are not unknown at startup
    - service: speedtestdotnet.speedtest

#######################################################################################################################
## Automation - Hass Shutdown
#######################################################################################################################
- id: automation_hass_shutdown
  alias: "[Automation] Hass Shutdown"
  description: "Display message on home assistant stop."
  initial_state: true
  mode: single
  trigger:
    - platform: homeassistant
      event: shutdown

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.supplemental_logging
              state: 'on'

          sequence:
            #TIMER fan, radio, alarm clock timers
              # store time_end attribute in variable
              # on restart  if time_end then now - time
              # if 0 or negative fire timer finished event
              # if not, reset timer for time remaining

              # https://community.home-assistant.io/t/how-to-make-active-timers-survive-a-restart/146248/38

            - service: system_log.write
              data:
                message: "**** HOME ASSISTANT STOP ****"
                level: critical

#######################################################################################################################
## Automation - Close Hass Restart Notification
#######################################################################################################################
- id: automation_close_hass_restart_notifications
  alias: "[Automation] Close Hass Restart Notifications"
  description: "Dismiss notifications on all devices."
  initial_state: true
  mode: single
  max_exceeded: silent
  trigger:
    # from_state of dismissed persistent notifcations is unknown, use state_changed event
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: persistent_notification.hass_restart

    #BUG html5 closed event doesn't work if notification is in tray
    - platform: event
      event_type: html5_notification.closed
      event_data:
        tag: hass_restart

    - platform: event
      event_type: html5_notification.clicked
      event_data:
        action: close_hass_restart

    - platform: event
      event_type: mobile_app_notification_cleared
      event_data:
        tag: hass_restart

  condition:
    #BUGFIX conditions required as workaround for unknown persistent notification state
    - condition: or
      conditions:
        - "{% if trigger.event is defined %}{{ trigger.event.data['tag'] == 'hass_restart' }}{% endif %}"
        - "{% if trigger.event is defined %}{{ trigger.event.data['action'] == 'close_hass_restart' }}{% endif %}"
        - "{% if trigger.event is defined %}{{ trigger.event.event_type == 'state_changed' and not is_state('persistent_notification.hass_restart','notifying') }}{% endif %}"

  action:
    - service: script.close_notifications
      data:
        target: mobile_app_jphone
        tag: hass_restart

    - delay:
        seconds: 180 # prevent recursive triggers