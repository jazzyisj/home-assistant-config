#######################################################################################################################
## Media Player Volume Changed
#BUG volume changes aren't picked up when media player is off state - no fix
#######################################################################################################################
- id: media_player_volume_changed #VOL
  alias: "[Media Player] Volume Changed"
  description: Change stored volume when media player volume changes.
  initial_state: true
  mode: queued
  max: 5
  max_exceeded: error
  variables:
    media_type: >
      {% if is_state('input_boolean.radio','on')
          and (trigger.entity_id == states('sensor.radio_media_player')
            or trigger.entity_id in state_attr('sensor.radio_media_player','players')) %} radio
      {% elif is_state('input_boolean.spotify','on')
          and (trigger.entity_id == states('sensor.spotify_media_player')
            or trigger.entity_id in state_attr('sensor.spotify_media_player','players')) %} spotify
      {% else %} none
      {% endif %}
    is_media: "{{ media_type in ['radio','spotify'] }}"
    is_group: "{{ trigger.entity_id in state_attr('sensor.media_player_groups','players') }}"
    volume_entity: >
      {% if is_media %} input_number.{{ media_type }}_volume
      {% elif not is_group %} input_number.{{ trigger.entity_id.split('.')[1] }}_current_volume
      {% endif %}
    default_entity: "input_number.{{ trigger.entity_id.split('.')[1] }}_default_volume"
    current_volume: "{{ state_attr(trigger.entity_id,'volume_level')|float|round(2) }}"
    media_entity: >
      {% if media_type == 'radio' %}{{ states('sensor.radio_media_player') }}
      {% elif media_type == 'radio' %}{{ states('sensor.spotify_media_player') }}
      {% endif %}
    quiet_volume: >
      {% if is_media %}{% set quiet_volume = states('input_number.media_quiet_volume')|float/100 %}
      {% elif is_state_attr(trigger.entity_id,'device_class','tv') %}{% set quiet_volume = states('input_number.tv_quiet_volume')|float/100 %}
      {% else %}{% set quiet_volume = states('input_number.speaker_quiet_volume')|float/100 %}
      {% endif %}
      {# test/set balanced volume #}
      {% set vol_factor = 1 if is_group or is_state('input_boolean.volume_balancing','off')
          else (states(default_entity)|float/0.5) ** states('input_number.volume_log_factor')|float %}
      {{ (quiet_volume * vol_factor)|round(2) }}
    limit_volume: >
      {{ is_state('input_boolean.volume_override','off') and is_state('binary_sensor.quiet_hours','on')
          and (current_volume > quiet_volume) }}
    new_volume: "{% set volume = quiet_volume if limit_volume else current_volume %}{{ (volume*100)|int if is_media else volume }}"
  trigger:
    - platform: state
      entity_id: #VOL !include /config/include/entities/media_player_entities.yaml
        # - media_player.all_speakers
        # - media_player.broadcast_speakers
        # - media_player.music_speakers
        # - media_player.quiet_speakers
        # - media_player.night_speakers
        # - media_player.inside_speakers
        - media_player.living_room_speaker
        - media_player.dining_room_display
        - media_player.bedroom_display
        - media_player.bathroom_speaker
        - media_player.laundry_room_speaker
        - media_player.garage_speaker
        # - media_player.living_room_tv
        # - media_player.bedroom_tv
        # - media_player.living_room_chromecast
        # - media_player.office_chromecast
        # - media_player.deck_chromecast
        # - media_player.browser_jlaptop_chrome_nabucasa
        # - media_player.browser_jlaptop_chrome_direct
        # - media_player.browser_jlaptop_chrome_local
      attribute: volume_level
      for: 2
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - script.media_play
        - script.media_stop
      state: 'off'

    - condition: template
      alias: Volume not changed by media player turning off or unavailable (sets volume to 0)
      value_template: "{{ states(trigger.entity_id)|lower not in ['off','unknown','unavailable','none'] }}"

    - condition: template
      alias: Trigger is not a group unless group is radio/spotify player.
      value_template: "{{ false if (is_group and not is_media) or (is_media and not trigger.entity_id == media_entity) else true }}"

    - condition: template
      alias: New volume is not already equal to set volume.
      value_template: "{{ current_volume != states(volume_entity)|float/100|round(2) if is_media else current_volume != states(volume_entity)|float|round(1) }}"

    - condition: template
      alias: Volume not changed by any active alarm clock media player.
      value_template: >
        {% if is_state('binary_sensor.alarm_clock_active','off') %} true
        {% else %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% if is_state_attr(alarm,'type','group') %}
            {% set found = namespace(value=0) %}
            {% for item in state_attr('sensor.alarm_clock_media_player','players') %}
              {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
            {% endfor %}
            {{ found.value|int != 1 }}
          {% else %}{{ alarm != trigger.entity_id }}
          {% endif %}
        {% endif %}

    - condition: template
      alias: Volume not changed by any active tts media player.
      value_template: >
        {% if is_state('input_boolean.tts_playing','off') %} true
        {% else %}
          {% set tts = states('sensor.tts_media_player') %}
          {% if is_state_attr(tts,'type','group') %}
            {% set found = namespace(value=0) %}
              {% for item in state_attr('sensor.tts_media_player','players') %}
                {% if item == trigger.entity_id %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
            {{ found.value|int != 1 }}
          {% else %}{{ tts != trigger.entity_id }}
          {% endif %}
        {% endif %}
  action:
    - service: system_log.write #TEMP comment out
      data:
        level: error
        logger: automation.media_player_volume_changed
        message: |
          *
          trigger: {{ trigger.entity_id }}
          media_type: {{ media_type }}
          is_media: {{ is_media }}
          is_group: {{ is_group }}
          volume_entity: {{ volume_entity }}
          current_volume: {{ current_volume }}
          entity volume: {{ states(volume_entity)|float/100|round(1) if is_media else states(volume_entity)|float|round(1) }}
          quiet_volume: {{ quiet_volume }}
          limit_volume: {{ limit_volume }}
          new_volume: {{ new_volume }}

    - choose: # quiet hours enforcement on volume change
        - conditions: "{{ limit_volume }}"
          sequence:
            - service: automation.turn_off
              data:
                entity_id: automation.media_player_volume_changed
                stop_actions: false

            - service: media_player.volume_set
              data:
                entity_id: "{{ trigger.entity_id }}"
                volume_level: "{{ quiet_volume }}"

            - service: automation.turn_on #VOL
              entity_id: automation.media_player_volume_changed

    #VOL if media type media player, set media type volume


    - choose:
        - conditions: "{{ not is_group }}"
          sequence:
            - service: automation.turn_off
              data:
                entity_id: automation.media_player_media_volume_changed
                stop_actions: false

            - service: input_number.set_value
              data:
                entity_id: "{{ volume_entity }}"
                value: "{{ new_volume }}"

            - service: automation.turn_on
              entity_id: automation.media_player_media_volume_changed

            # - choose:
            #     - conditions: "{{ is_media }}"
            #       sequence:
            #         - service: automation.turn_off
            #           data:
            #             entity_id: automation.media_player_media_volume_changed
            #             stop_actions: false

            #         - service: input_number.set_value
            #           data:
            #             entity_id: "input_number.{{ media_type }}_volume"
            #             value: "{{ new_volume }}"

            #         - service: automation.turn_on
            #           entity_id: automation.media_player_media_volume_changed

      default: