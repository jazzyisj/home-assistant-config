#######################################################################################################################
## Media Player - Volume Reset
#BUG webOS TV's don't report volume level - exclude or they volume gets set to 0 (excludes chromcast too - ok, keeps all TV behaviour the same)
#######################################################################################################################
- id: media_player_volume_reset
  alias: "[Media Player] Volume Reset"
  description: "Reset media player volumes when home mode or quiet hours change."
  initial_state: true
  mode: restart
  variables:
    other_players: >
      {% set radio_group = expand(state_attr('sensor.radio_media_player','players'))|selectattr('state','in',['playing','paused'])
          |map(attribute='entity_id')|list if is_state('input_boolean.radio','on') else [] %}
      {% set spotify_group = expand(state_attr('sensor.spotify_media_player','players'))|selectattr('state','in',['playing','paused'])
          |map(attribute='entity_id')|list if is_state('input_boolean.spoityf_on','on') else [] %}
      {% set tts_group = expand(state_attr('sensor.tts_media_player','players'))|selectattr('state','in',['playing','paused'])
          |map(attribute='entity_id')|list if is_state('binary_sensor.alarm_clock_active','on') else [] %}
      {% set alarm_clock_group = expand(state_attr('sensor.alarm_clock_media_player','players'))|selectattr('state','in',['playing','paused'])
          |map(attribute='entity_id')|list if is_state('input_boolean.tts_playing','on') else [] %}
      {{ expand(state_attr('sensor.media_players_single','players'))|rejectattr('attributes.device_class','eq','tv')
          |rejectattr('entity_id','in',radio_group)
          |rejectattr('entity_id','in',spotify_group)
          |rejectattr('entity_id','in',tts_group)
          |rejectattr('entity_id','in',alarm_clock_group)
          |map(attribute='entity_id')|list }}
    players: >
      {{ expand(state_attr('sensor.media_players_single','players'))
            |rejectattr('attributes.device_class','eq','tv')|map(attribute='entity_id')|list }}
    player: null
    name: null
    volume: null
  trigger:
    - platform: state # reset when quiet hours turns on or off
      entity_id: binary_sensor.quiet_hours

    - platform: state # reset to default when override turned off
      entity_id: input_boolean.volume_override
      to: 'off'

    - platform: state # quiet hours/occupancy mode may have changed during while offline/disabled
      entity_id: input_boolean.media_player_automation
      to: 'on'

    - platform: state # always reset volumes on restart
      entity_id: input_boolean.startup_pending
      to: 'off'

    - platform: state # may have been prevented from running during alarm event
      entity_id: alarm_control_panel.alarmo
      to: disarmed
      from: triggered
  condition:
    - condition: state
      entity_id: input_boolean.media_player_automation
      state: 'on'
  action:
    - service: automation.turn_off
      entity_id: &volume_automations
        - automation.media_player_volume_changed
        - automation.media_player_media_volume_changed

    - service: media_player.volume_set #BLOOP set volume to 0 before setting volume to avoid google volume pops
      target:
        entity_id: '{{ players }}'
      data:
        volume_level: 0

    - repeat: # set all players default/quiet (current if < default/quiet and != 0)
        while:
          - condition: template
            value_template: '{{ repeat.index <= players|count }}'
        sequence:
          - variables:
              player: '{{ players[repeat.index-1] }}'
              name: "{{ player.split('.')[1] }}"
              volume: > # reset 0 values to quiet in quiet hours
                {% set current = (states('input_number.' ~ name ~ '_current_volume')|float)|round(2) %}
                {% set default = (states('input_number.' ~ name ~ '_default_volume')|float)|round(2) %}

                {% if is_state_attr(player,'device_class','speaker') %}
                  {% set quiet = (states('input_number.speaker_quiet_volume')|float/100)|round(2) %}
                {% else %}
                  {% set quiet = (states('input_number.tv_quiet_volume')|float/100)|round(2) %}
                {% endif %}

                {% if is_state('binary_sensor.quiet_hours','on') %}{{ quiet if current > quiet else (current if current > 0 else quiet) }}
                {% else %}{{ default }}
                {% endif %}

          - service: input_number.set_value  # automation turned off - set input to match volume
            target:
              entity_id: "input_number.{{ name ~ '_current_volume' }}"
            data:
              value: '{{ volume }}'

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.radio
              state: 'on'
          sequence:
            - choose: # save new phone volumes if phone in use so they are set to new values when phone turns off
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.mobile_phone_in_use
                      state: 'on'
                  sequence:
                    - service: script.save_media_player_volumes
                      data:
                        media_player: "{{ state_attr('sensor.radio_media_player','players') }}"
                        source: reset
              default:
                - service: script.set_media_player_volumes # set new radio volumes
                  data:
                    media_players: "{{ state_attr('sensor.radio_media_player','players') }}"
                    source: reset

                - delay: 1

                - service: input_number.set_value # automation turned off - set input to match current volume
                  target:
                    entity_id: input_number.radio_volume
                  data:
                    value: "{{ ((state_attr(states('sensor.radio_media_player'),'volume_level')|float)*100)|int }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.spotify
              state: 'on'
          sequence:
            - choose: # save new phone volumes if phone in use so they are set to new values when phone turns off
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.mobile_phone_in_use
                      state: 'on'
                  sequence:
                    - service: script.save_media_player_volumes
                      data:
                        media_player: "{{ state_attr('sensor.spotify_media_player','players') }}"
                        source: reset
              default:
                - service: script.set_media_player_volumes # set new spotify volumes
                  data:
                    media_players: "{{ state_attr('sensor.spotify_media_player','players') }}"
                    source: reset

                - delay: 1

                - service: input_number.set_value # automation turned off - set input to match current volume
                  target:
                    entity_id: input_number.spotify_volume
                  data:
                    value: "{{ ((state_attr(states('sensor.spotify_media_player'),'volume_level')|float)*100)|int }}"

    # save new alarm_clock restore volumes if alarm_clock on so they are set to new values when alarm clock off
    # do this after radio - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.alarm_clock_active
              state: 'on'
          sequence:
            - service: script.save_media_player_volumes
              data:
                media_player: "{{ state_attr('sensor.alarm_clock_media_player','players') }}"
                source: reset

    # save new tts volumes if tts on so they are set to new values when tts off
    # do after alarm clock - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.tts_playing
              state: 'on'
          sequence:
            - service: script.save_media_player_volumes
              data:
                media_player: "{{ state_attr('sensor.tts_media_player','players') }}"
                source: reset

    - choose: # reset all other media player volumes
        - conditions: "{{ other_players|count > 0 }}"
          sequence:
            - service: script.set_media_player_volumes
              data:
                media_players: "{{ other_players }}"
                source: reset

    - service: automation.turn_on
      entity_id: *volume_automations
