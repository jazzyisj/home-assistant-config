#######################################################################################################################
## Media Player - Volume Reset #NEW_MEDIA_PLAYER
#######################################################################################################################
- id: media_player_volume_reset
  alias: "[Media Player] Volume Reset"
  description: Reset media player volumes according to home mode or quiet hours.
  initial_state: true
  mode: restart
  variables:
    players: "{{ state_attr('group.media_players_single','entity_id') }}"
    player: null
    name: null
    volume: null
  trigger:
    - platform: state
      entity_id: binary_sensor.quiet_hours

    # quiet hours/occupancy mode may have changed during while offline
    - platform: state
      entity_id: binary_sensor.startup_complete
      to: 'on'

    # may have been prevented from running during alarm event
    - platform: state
      entity_id: alarm_control_panel.house
      to: disarmed
      from: triggered

  condition:
    - condition: state
      entity_id: input_boolean.media_player_automation
      state: 'on'

    # wait until startup complete, quiet hours always off at startup
    - condition: state
      entity_id: binary_sensor.startup_complete
      state: 'on'

  action:
    - repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= players|count }}"

        sequence:
          - variables:
              player: "{{ players[repeat.index-1] }}"
              name: "{{ player.split('.')[1] }}"
              volume: >
                {% set current = states('input_number.' ~ name ~ '_volume')|float %}

                {% if is_state_attr(player,'device_class','speaker') %}
                  {% set quiet = states('input_number.speaker_quiet_volume')|float %}
                {% else %}
                  {% set quiet = states('input_number.tv_quiet_volume')|float %}
                {% endif %}

                {% if is_state('binary_sensor.quiet_hours','on') %}{{ quiet if current > quiet else current if current > 0 else quiet }}
                {% else %}{{ states('input_number.' ~ name ~ '_default')|float }}
                {% endif %}

          - service: input_number.set_value
            data:
              entity_id: "input_number.{{ name ~ '_volume' }}"
              value: "{{ volume }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.radio_on
              state: 'on'

          sequence:
            # save new phone volumes if phone in use so they are set to new values when phone turns off
            - choose:
                - conditions:
                    - condition: state
                      entity_id: sensor.phone_in_use
                      state: 'on'

                  sequence:
                    - service: script.save_media_player_volumes
                      data:
                        media_player: "{{ states('sensor.radio_media_player') }}"
                        source: reset

              default:
                # set new radio volumes
                - service: script.set_media_player_volumes
                  data:
                    media_player: "{{ states('sensor.radio_media_player') }}"
                    source: reset

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.spotify_on
              state: 'on'

          sequence:
            # save new phone volumes if phone in use so they are set to new values when phone turns off
            - choose:
                - conditions:
                    - condition: state
                      entity_id: sensor.phone_in_use
                      state: 'on'

                  sequence:
                    - service: script.save_media_player_volumes
                      data:
                        media_player: "{{ states('input_text.active_media_player_spotify') }}"
                        source: reset

              default:
                # set new spotify volumes
                - service: script.set_media_player_volumes
                  data:
                    media_player: "{{ states('input_text.active_media_player_spotify') }}"
                    source: reset

    # save new alarm_clock volumes if alarm_clock on so they are set to new values when alarm clock off
    # do this after radio - smore recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.alarm_clock_active
              state: 'on'

          sequence:
            - service: script.save_media_player_volumes
              data:
                media_player: "{{ states('sensor.alarm_clock_media_player') }}"
                source: reset

    # save new tts volumes if tts on so they are set to new values when tts off
    # do after alarm clock - more recent values for overlapping players
    - choose:
        - conditions:
            - condition: state
              entity_id: binary_sensor.tts_playing
              state: 'on'

          sequence:
            - service: script.save_media_player_volumes
              data:
                media_player: "{{ states('sensor.tts_media_player') }}"
                source: reset

    # reset all idle/off media player volumes - done so alarm_clock/tts aren't reset - spotify/radio done above
    #NOTE volumes won't be reset if something else (ie. youtube) is playing on the media player
    - choose:
        - conditions: "{{ states.media_player|select('in', expand('group.media_players'))|selectattr('state','in',['off','idle'])|map(attribute='entity_id')|list|count > 0 }}"
          sequence:
            - service: script.set_media_player_volumes
              data:
                media_player: "{{ states.media_player|select('in', expand('group.media_players'))|selectattr('state','in',['off','idle'])|map(attribute='entity_id')|join(',') }}"
                source: reset