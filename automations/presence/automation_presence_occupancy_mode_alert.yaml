#######################################################################################################################
## Presence - Occupancy Mode Alert
#######################################################################################################################
- id: presence_occupancy_mode_alert
  alias: "[Presence] Occupancy Mode Alert"
  description: Send notification when occupancy mode out of sync with presence or alarm state.
  initial_state: true
  mode: single
  trigger:
    - platform: state
      entity_id:
        - alert.occupancy_mode
        - binary_sensor.startup_complete
      to: 'on'

  condition:
    - condition: state
      entity_id:
        - alert.occupancy_mode
        # binary_sensor.someone_home always off at startup
        - binary_sensor.startup_complete
      state: 'on'

  action:
    - repeat:
        sequence:
          - service: script.tts_play
            data:
              play_message: |
                Hey you!
                Pay attention and get it together dumbass!
                {%- if (is_state('binary_sensor.someone_home','on') and is_state('alarm_control_panel.house','armed_away'))
                  or (is_state('binary_sensor.someone_home','off') and states('alarm_control_panel.house') in ['disarmed','armed_home']) %}
                    {{ 'Someone' if is_state('binary_sensor.someone_home','on')  else  'Nobody' }} is home but the house alarm is {{ states('sensor.alarm_status') }}.
                {%- elif ( states('input_select.occupancy_mode') not in ['Night','Override'] and is_state('alarm_control_panel.house','armed_night')) %}
                  The house is in {{ states('input_select.occupancy_mode') }} mode but the alarm is {{ states('sensor.alarm_status') }}.
                {%- elif ( is_state('binary_sensor.someone_home','on') and states('input_select.occupancy_mode') in ['Away','Vacation'])
                  or (is_state('binary_sensor.someone_home','off') and states('input_select.occupancy_mode') in ['Home','Guest','Night']) %}
                    {{ 'Someone' if is_state('binary_sensor.someone_home','on') else 'Nobody' }} is home but house is in {{ states('input_select.occupancy_mode') }} mode.
                {%- endif %}
                {%- if is_state('binary_sensor.someone_home','on') %}
                  {%- if states('input_select.occupancy_mode') in ['Away','Vacation'] %} Have you forgotten to activate home mode?
                  {%- elif states('alarm_control_panel.house') in ['armed_away'] %} Have you forgotten to disarm the alarm?
                  {%- endif %}
                {%- else %}
                  Has your phone not connected to the network?
                  {%- if states('input_select.occupancy_mode') in ['Home','Night','Guest'] %}
                        Or have you just forgotten to activate away mode again?
                  {%- elif states('alarm_control_panel.house') in ['disarmed','armed_home','armed_night'] %}
                        Or have you just forgotten to arm the alarm, yet again?
                  {%- endif %}
                {%- endif %}
              quiet_play: true
              ignore_away: true

          # wait for alert to turned off/dismissed
          - wait_template: "{{ not is_state('alert.occupancy_mode','on') }}"
            timeout:
              minutes: 15

        until:
          - condition: not
            conditions:
              - condition: state
                entity_id: alert.occupancy_mode
                state: 'on'

#######################################################################################################################
## Presence - Close Occupancy Mode Notifications
#######################################################################################################################
- id: presence_close_occupancy_mode_notifications
  alias: "[Presence] Close Occupancy Mode Notifications"
  description: Dismiss notifications on all devices.
  initial_state: true
  mode: single
  #max_exceeded: silent
  trigger:
    - platform: state
      entity_id: alert.occupancy_mode
      to:
        - idle
        - 'off'

    - platform: event
      event_type: mobile_app_notification_cleared
      event_data:
        tag: occupancy_mode

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_home_mode

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_away_mode

  action:
    - service: script.close_notifications
      data:
        target: mobile_app_jphone
        tag: occupancy_mode

    - delay:
        seconds: 180 # prevent recursive triggers

