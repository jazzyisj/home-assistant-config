###############################################################################
## Presence - Someone Arrives Home
###############################################################################
- id: presence_someone_arrives_home
  alias: "[Presence] Someone Arrives Home"
  description: "Determine who arrived home and run arrive home script."
  mode: parallel
  variables:
    person: "{{ trigger.entity_id.split('.')[1]|replace('_home','') }}"
    first_home: >
      {% set home = states.person
          |rejectattr('entity_id','eq','person.' ~ person)
          |selectattr('state','eq','home')|list %}
      {{ home|count == 0 and is_state('input_boolean.guest_home','off') }}
  trigger:
    - platform: state
      entity_id: binary_sensor.jason_home
      to: "on"
      not_from:
        - unknown
        - unavailable

    - platform: state
      entity_id: input_boolean.guest_home
      to: "on"
  action:
    - service: script.turn_on
      target:
        entity_id: script.arrive_home_lighting

    - if: "{{ person != 'guest' }}"
      then:
        - service: input_boolean.turn_off
          target:
            entity_id: "input_boolean.{{ person }}_almost_home"

        - service: "notify.{{ person }}"
          data:
            message: clear_notification
            data:
              tag: "{{ person }}_heading_home"

        - service: script.update_traffic_sensors # update traffic sensors to ensure time to home is zeroed out
          continue_on_error: true

    # clear last_person_to_arrive so last_changed attribute gets updated if set value didn't change
    - service: input_select.select_option
      target:
        entity_id: input_select.last_person_to_arrive
      data:
        option: none

    - service: input_select.select_option
      target:
        entity_id: input_select.last_person_to_arrive
      data:
        option: "{{ person|title }}"

    # if already in selected mode, state won't change, occupancy automations won't trigger
    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% from 'value.jinja' import occupancy_mode %}
          {{ occupancy_mode() }}
    - if:
        - condition: state
          entity_id: input_boolean.occupancy_announcements
          state: "on"
      then:
        - service: script.turn_on
          target:
            entity_id: script.tts_play
          data:
            variables:
              message: "{{ 'A guest has arrived.' if person == 'guest' else person|title ~ ' is home' }}"
          continue_on_error: true

    - delay: 120 # let person get in house

    # only if person still home (may have come and gone)
    - if:
        - condition: template
          alias: "Person is still home"
          value_template: >
            {{ is_state('input_boolean.guest_home','on') if person == 'guest'
                else is_state('binary_sensor.' ~ person ~ '_home','on') }}

        - condition: state
          entity_id: input_boolean.occupancy_announcements
          state: "on"
      then:
        - service: script.turn_on
          target:
            entity_id: script.tts_play
          data:
            variables:
              message: >
                Good {{ states('sensor.tod_greeting') }} {{person|title if person != 'guest' }}!
                Welcome {{ 'home' if person != 'guest' else 'to our home' }}.
          continue_on_error: true

        - delay: 1 # ensure welcome home before media play

        - if: "{{ first_home }}"
          then:
            - if:
                - condition: numeric_state
                  entity_id: sensor.tts_saved_messages
                  above: 0
              then:
                - service: script.tts_play_saved_messages
                  continue_on_error: true

                - delay: 1 # let saved messages start

                - wait_template: "{{ is_state('script.tts_play_saved_messages','off') }}"
                  timeout:
                    minutes: 5

            - if: "{{ is_state('input_boolean.media_preset_enabled_' ~ person,'on') }}"
              then:
                - service: script.media_play
                  data:
                    preset: "{{ person }}"
                  continue_on_error: true
