###############################################################################
## Presence - Occupancy Mode
###############################################################################
- id: presence_occupancy_mode #OCC
  alias: '[Presence] Occupancy Mode'
  description: 'Set occupancy mode options, validate occupancy mode change.'
  mode: restart
  variables:
    prev_mode: '{{ trigger.from_state.state }}'
  trigger:
    - platform: state
      entity_id: input_select.occupancy_mode
      to: ~
  action:
    - condition: state
      entity_id: input_boolean.presence_automation
      state: 'on'

    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Home
          sequence:
            - service: script.turn_off
              target:
                entity_id:
                  - script.bedtime
                  - script.bedtime_lights

            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    # select guest if guest home or previous occupancy mode if not
                    - service: input_select.select_option
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: "{{ 'Guest' if is_state('input_boolean.guest_home','on') else prev_mode }}"

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_off
                  entity_id: input_boolean.guest_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Night
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    - service: input_select.select_option # back to previous mode
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: '{{ prev_mode }}'

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: timer.cancel # light timers cancelled here so lights can turn off
                  target:
                    entity_id: "{{ states.timer|selectattr('attributes.type','eq','light')|map(attribute='entity_id')|list }}"

                - service: homeassistant.turn_off
                  target:
                    entity_id:
                      - input_boolean.bedtime_delayed
                      - script.someone_arrives_home
                      - script.arrive_home_lights
                      - script.arriving_home_notification
                      - script.waketime
                      - script.morning_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Away
                - Vacation
          sequence:
            - service: homeassistant.turn_off
              target:
                entity_id:
                  - input_boolean.guest_home
                  - input_boolean.bedtime_delayed
                  - script.someone_arrives_home
                  - script.arrive_home_lights
                  - script.arriving_home_notification
                  - script.waketime
                  - script.morning_lights
                  - script.bedtime
                  - script.bedtime_lights

            - service: timer.cancel # light timers cancelled here so lights / fans can turn off
              target:
                entity_id: >
                  {{ states.timer|selectattr('attributes.type','in',['light','ceiling_fan','vent_fan'])
                      |map(attribute='entity_id')|list }}

            - service: timer.cancel # cancel arrive home light timer (away->home->away)
              target:
                entity_id: timer.arrive_home_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Guest
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'on'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    - service: input_boolean.turn_on
                      target:
                        entity_id: input_boolean.guest_home

                    - service: input_select.select_option # back to previous mode if night/override else home mode
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: "{{ prev_mode if prev_mode == 'Night' else 'Home' }}"

                    - service: automation.turn_on
                      target:
                        entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.guest_home

###############################################################################
## Presence - Set Occupancy Mode
###############################################################################
- id: presence_set_occupancy_mode
  alias: '[Presence] Set Occupancy Mode'
  description: 'Set occupancy mode.'
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_home_mode

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_away_mode
  action:
    - choose:
        - conditions: "{{ trigger.event.data['action'] == 'set_home_mode' }}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.occupancy_mode
              data:
                option: Home

        - conditions: "{{ trigger.event.data['action'] == 'set_away_mode' }}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.occupancy_mode
              data:
                option: Away

###############################################################################
## Presence - Occupancy Mode Reset
###############################################################################
- id: presence_occupancy_mode_reset
  alias: '[Presence] Occupancy Mode Reset'
  description: 'Auto select occupancy mode.'
  trigger:
    - platform: state
      entity_id: input_boolean.startup_pending
      to: 'off'
      for: 60 # let sensor states register
  condition:
    - condition: state
      entity_id: input_boolean.presence_automation
      state: 'on'
  action:
    # defaults to Home/Guest if bedtime_today/waketime_today is none
    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% set wake = states('sensor.waketime_today')|as_datetime
            if states('sensor.waketime_today')|lower not in ['unknown','unavailable','none']
              else today_at(states('input_date.house_waketime')) %}
          {% set bed = states('sensor.bedtime_today')|as_datetime
            if states('sensor.bedtime_today')|lower not in ['unknown','unavailable','none'] else none %}
          {% if is_state('binary_sensor.someone_home','off') %}
            {{ 'Vacation' if is_state('input_select.occupancy_mode','Vacation') else 'Away' }}
          {% elif bed == none %}
            {{ 'Guest' if is_state('binary_sensor.owner_home','off') else 'Home' }}
          {% elif bed < now() < wake %}
            {{ 'Night' if is_state('input_boolean.bedtime_delayed','off') else ('Home' if is_state('binary_sensor.owner_home','on') else 'Guest') }}
          {% else %}
            {{ 'Guest' if is_state('input_boolean.guest_home','on') and is_state('binary_sensor.owner_home','off') else 'Home' }}
          {% endif %}

###############################################################################
## Presence - Occupancy Notification
###############################################################################
- id: presence_occupancy_notification #OCC
  alias: '[Presence] Occupancy Notification'
  description: 'Send notification when occupancy mode or alarm state has changed.'
  mode: restart
  variables:
    run_delay: 15
    occupancy_changed: >
      {{ is_state('input_boolean.occupancy_announcements','on')
          and now() - states.input_select.occupancy_mode.last_changed
            < timedelta(seconds=run_delay) }}
    alarm_changed: >
      {{ is_state('input_boolean.alarm_announcements','on')
          and now() - states.alarm_control_panel.master.last_changed
            < timedelta(seconds=run_delay) }}
  trigger:
    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
        - Night
        - Away
        - Vacation

    - platform: state
      id: armed
      entity_id: alarm_control_panel.master
      to:
        - armed_home
        - armed_night
        - armed_away

    - platform: state
      id: disarmed
      entity_id: alarm_control_panel.master
      to: disarmed
      from:
        - armed_home
        - armed_night
        - armed_away
        - triggered
  condition:
    - condition: template
      alias: 'Temp disarm override is not on'
      value_template: >
        {{ is_state('input_boolean.alarm_temp_override','off')
            if trigger.id == 'disarmed' else true }}

    - condition: template
      alias: 'Alarm automation is enabled if alarm trigger'
      value_template: >
        {{ is_state('input_boolean.alarm_automation','on')
            if trigger.id in ['armed','disarmed'] else true }}

    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.master
          state:
            - triggered
            - pending
  action:
    # allow alarm to enter arming state
    # allow corresponding occupancy/alarm mode state to set, prevents double tts
    - delay: '{{ run_delay }}'

    - variables:
        arm_delay: "{{ state_attr('alarm_control_panel.master','delay')|int(0) }}"

    - wait_template: >
        {{ not is_state('alarm.control_panel.master','arming')
             and is_state('script.arm_alarm','off') }}
      timeout: '{{ arm_delay if arm_delay > 60 else 60 }}'

    - variables:
        occupancy_mode: "{{ states('input_select.occupancy_mode') }}"
        alarm_mode: "{{  states('sensor.alarm_status') }}"

    - choose:
        - conditions:
            - "{{ is_state('input_boolean.occupancy_announcements','on')
              if trigger.id == 'occupancy' else true }}"
            - "{{ is_state('input_boolean.alarm_announcements','on')
              if trigger.id in ['armed','disarmed'] else true }}"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.tts_play
              data:
                variables:
                  message: |
                    {%- if occupancy_changed -%}
                    The house is now in {{ occupancy_mode }} mode
                    {%- endif %}
                    {%- if occupancy_changed and alarm_changed %}, and the{% elif occupancy_changed %}.{% elif alarm_changed %} The{% endif %}
                    {%- if alarm_changed %} house alarm is {{ alarm_mode }}.{% endif %}
                    {{ 'Personalized occupant automations are disabled in Guest mode.' if occupancy_mode == 'Guest' }}
                  ignore_away: true
                  min_volume: "{{ 20 if is_state_attr(states('sensor.tts_media_player'),'type','group') else 30 }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.occupancy_notifications
              state: 'on'
          sequence:
            - service: notify.mobile
              data:
                title: 'Occupancy Mode'
                message: >-
                  <b>Mode: {{ occupancy_mode }} | {{ alarm_mode }}.</b>
                  {%- if is_state('input_boolean.alarm_triggered','on') -%}
                    Alarm Trigger: {{ states('input_text.current_alarm') -}}
                    <br/>Disarmed By: {{ states('input_text.alarm_disarmed_by') -}}
                  {%- else -%}
                  {%- endif -%}
                  {%- if is_state('binary_sensor.jason_home','on') -%}<br/> Jason is home. {%- endif -%}
                  {%- if is_state('binary_sensor.sheri_home','on') -%}<br/> Sheri is home. {%- endif -%}
                  {%- if is_state('input_boolean.guest_home','on') -%}<br/> A guest is home. {%- endif -%}
                data:
                  subject: 'Mode: {{ occupancy_mode }} | Alarm: {{ alarm_mode }}.'
                  tag: occupancy_notification
                  group: General
                  channel: General
                  importance: max
                  ttl: 0
                  priority: high
                  notification_icon: '{{ states.input_select.occupancy_mode.attributes.icon }}'
                  icon_url: !secret OCCUPANCY_ICON_TEMPLATE
                  ledColor: !secret NOTIFY_COLOR
                  color: !secret NOTIFY_COLOR
                  vibrationPattern: !secret GENERAL_VIBRATION
                  clickAction: /lovelace-mobile/presence
                  actions:
                    - title: 'Home'
                      action: set_home_mode

                    - title: 'Away'
                      action: set_away_mode

                    - title: 'Alarm'
                      action: URI
                      uri: app://com.thanksmister.iot.mqtt.alarmpanel

###############################################################################
## Presence - Turn Off Occupancy Notifications
###############################################################################
- id: presence_turn_off_occupancy_notifications
  alias: '[Presence] Turn Off Occupancy Notifications'
  description: 'Turn off occupancy notifications boolean.'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: turn_off_occupancy_notifications
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.occupancy_notifications

    - service: notify.jason
      data:
        message: clear_notification
        data:
          tag: occupancy_notification
