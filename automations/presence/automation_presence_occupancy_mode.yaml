###############################################################################
## Presence - Occupancy Mode
###############################################################################
- id: presence_occupancy_mode #OCC
  alias: '[Presence] Occupancy Mode'
  description: 'Set occupancy mode options, validate occupancy mode change.'
  mode: restart
  variables:
    prev_mode: '{{ trigger.from_state.state }}'
  trigger:
    - platform: state
      entity_id: input_select.occupancy_mode
  action:
    - condition: state
      entity_id: input_boolean.presence_automation
      state: 'on'

    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Home
          sequence:
            - service: script.turn_off
              target:
                entity_id:
                  - script.bedtime
                  - script.bedtime_lights

            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    # select guest if guest home or previous occupancy mode if not
                    - service: input_select.select_option
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: "{{ 'Guest' if is_state('input_boolean.guest_home','on') else prev_mode }}"

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_off
                  entity_id: input_boolean.guest_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Night
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    - service: input_select.select_option # back to previous mode
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: '{{ prev_mode }}'

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: timer.cancel # light timers cancelled here so lights can turn off
                  target:
                    entity_id: "{{ states.timer|selectattr('attributes.type','eq','light')|map(attribute='entity_id')|list }}"

                - service: homeassistant.turn_off
                  target:
                    entity_id:
                      - input_boolean.bedtime_delayed
                      - script.someone_arrives_home
                      - script.arrive_home_lights
                      - script.arriving_home_notification
                      - script.waketime
                      - script.morning_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Away
                - Vacation
          sequence:
            - service: homeassistant.turn_off
              target:
                entity_id:
                  - input_boolean.guest_home
                  - input_boolean.bedtime_delayed
                  - script.someone_arrives_home
                  - script.arrive_home_lights
                  - script.arriving_home_notification
                  - script.waketime
                  - script.morning_lights
                  - script.bedtime
                  - script.bedtime_lights

            - service: timer.cancel # light timers cancelled here so lights / fans can turn off
              target:
                entity_id: >
                  {{ states.timer|selectattr('attributes.type','in',['light','ceiling_fan','vent_fan'])
                      |map(attribute='entity_id')|list }}

            - service: timer.cancel # cancel arrive home light timer (away->home->away)
              target:
                entity_id: timer.arrive_home_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Guest
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'on'
                  sequence:
                    - service: automation.turn_off
                      target:
                        entity_id: group.occupancy_bypass_automations
                      data:
                        stop_actions: false

                    - service: input_boolean.turn_on
                      target:
                        entity_id: input_boolean.guest_home

                    - service: input_select.select_option # back to previous mode if night/override else home mode
                      target:
                        entity_id: input_select.occupancy_mode
                      data:
                        option: "{{ prev_mode if prev_mode == 'Night' else 'Home' }}"

                    - service: automation.turn_on
                      target:
                        entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.guest_home

###############################################################################
## Presence - Set Occupancy Mode
###############################################################################
- id: presence_set_occupancy_mode
  alias: '[Presence] Set Occupancy Mode'
  description: 'Set occupancy mode.'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_home_mode

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_away_mode
  action:
    - choose:
        - conditions: "{{ trigger.event.data['action'] == 'set_home_mode' }}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.occupancy_mode
              data:
                option: Home

        - conditions: "{{ trigger.event.data['action'] == 'set_away_mode' }}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.occupancy_mode
              data:
                option: Away

###############################################################################
## Presence - Occupancy Mode Reset
###############################################################################
- id: presence_occupancy_mode_reset
  alias: '[Presence] Occupancy Mode Reset'
  description: 'Auto select occupancy mode.'
  trigger:
    - platform: state
      entity_id: input_boolean.startup_pending
      to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.presence_automation
      state: 'on'
  action:
    # defaults to Home/Guest if next_waketime or next_bedtime is Off
    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% set wake = 'off' if states('sensor.next_waketime') == 'off' else as_datetime(states('sensor.next_waketime')) %}
          {% if states('sensor.next_bedtime') == 'off' %} off
          {% else %}
            {% set bed = today_at(state_attr('sensor.next_bedtime','24hour')) %}
            {% set bed = bed + timedelta(days=1) if bed < today_at(states('input_datetime.day_reset')) < now() else bed %}
          {% endif %}

          {% if is_state('binary_sensor.someone_home','off') %}
            {{ 'Vacation' if is_state('input_select.occupancy_mode','Vacation') else 'Away' }}
          {% elif (bed == 'off' or wake == 'off') %}
            {{ 'Guest' if is_state('binary_sensor.owner_home','off') else 'Home' }}
          {% elif bed < now() < wake %}
            {{ 'Night' if is_state('input_boolean.bedtime_delayed','off') else ('Home' if is_state('binary_sensor.owner_home','on') else 'Guest') }}
          {% else %}
            {{ 'Guest' if is_state('input_boolean.guest_home','on') and is_state('binary_sensor.owner_home','off') else 'Home' }}
          {% endif %}

###############################################################################
## Presence - Occupancy Notification
###############################################################################
- id: presence_occupancy_notification #OCC
  alias: '[Presence] Occupancy Notification'
  description: 'Send notification when occupancy mode or alarm state has changed.'
  mode: restart
  trigger:
    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
        - Night
        - Away
        - Vacation

    - platform: state
      id: alarm
      entity_id: alarm_control_panel.master
      to:
        - armed_home
        - armed_night
        - armed_away

    - platform: state
      id: disarmed
      entity_id: alarm_control_panel.master
      to: disarmed
      from:
        - armed_home
        - armed_night
        - armed_away
        - triggered
  condition:
    - "{{ is_state('input_boolean.alarm_temp_override','off') if trigger.id == 'disarmed' else true }}"

    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.master
          state:
            - triggered
            - arming
            - pending
  action:
    - delay: 5 # allow corresponding occupancy/alarm mode state to set, prevent double tts

    - variables:
        occ_mode: "{{ states('input_select.occupancy_mode') }}"
        occupancy_changed: '{{ now() - states.input_select.occupancy_mode.last_changed < timedelta(minutes=1) }}'
        alarm_changed: '{{ now() - states.alarm_control_panel.master.last_changed < timedelta(minutes=1)  }}'
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.occupancy_announcements
              state: 'on'
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.tts_play
              data:
                variables:
                  message: |
                    {%- if occupancy_changed -%}
                    The house is now in {{ occ_mode }} mode
                    {%- endif %}
                    {%- if occupancy_changed and alarm_changed -%}, and the
                    {% elif occupancy_changed %}.
                    {% elif alarm_changed %} The {% endif %}
                    {%- if alarm_changed and is_state('input_boolean.alarm_announcements','on') -%}
                      house alarm is {{ states('sensor.alarm_status') -}}
                    {%- endif %}.
                    {{ 'Personalized occupant automations are disabled in Guest mode.' if is_state(occ_mode,'Guest') }}
                  ignore_away: true
                  min_volume: "{{ 20 if is_state_attr(states('sensor.tts_media_player'),'type','group') else 30 }}"

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.occupancy_notifications
              state: 'on'

            - '{{ occupancy_changed }}'
          sequence:
            - service: notify.jason #TEMP
              data:
                title: 'Home Occupancy Mode'
                message: >-
                  Mode: {{ states('input_select.occupancy_mode') }} | {{ alarm_mode }}.
                  {%- if is_state('input_boolean.alarm_triggered','on') -%}
                    Alarm Trigger: {{ states('input_text.current_alarm') -}}
                    <br/>Disarmed By: {{ states('input_text.alarm_disarmed_by') -}}
                  {%- else -%}
                  {%- endif -%}
                  {%- if is_state('binary_sensor.jason_home','on') -%}<br/> Jason is home. {%- endif -%}
                  {%- if is_state('binary_sensor.sheri_home','on') -%}<br/> Sheri is home. {%- endif -%}
                  {%- if is_state('input_boolean.guest_home','on') -%}<br/> A guest is home. {%- endif -%}
                data:
                  subject: "Mode: {{ states('input_select.occupancy_mode') }} | Alarm: {{ alarm_mode }}."
                  tag: occupancy_notification
                  group: General
                  channel: General
                  importance: max
                  ttl: 0
                  priority: high
                  clickAction: /lovelace/presence
                  color: !secret NOTIFY_COLOR
                  icon_url: !secret OCCUPANCY_ICON_TEMPLATE
                  actions:
                    - title: 'Arm Home'
                      action: arm_alarm_home
                    - title: 'Arm Away'
                      action: arm_alarm_away
                    - title: 'Cameras'
                      action: URI
                      uri: app://com.flir.consumer.flir.lorexcloud

###############################################################################
## Presence - Turn Off Occupancy Notifications
###############################################################################
- id: presence_turn_off_occupancy_notifications
  alias: '[Presence] Turn Off Occupancy Notifications'
  description: 'Turn off occupancy notifications boolean.'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: turn_off_occupancy_notifications
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.occupancy_notifications

    - service: notify.jason
      data:
        message: clear_notification
        data:
          tag: occupancy_notification
