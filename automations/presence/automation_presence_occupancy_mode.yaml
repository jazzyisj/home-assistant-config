#######################################################################################################################
## Presence - Occupancy Mode
#######################################################################################################################
- id: presence_occupancy_mode #OCC
  alias: "[Presence] Occupancy Mode"
  description: Actions when occupancy mode changes.
  initial_state: true
  mode: restart
  variables:
    prev_mode: "{{ trigger.from_state.state }}"
  trigger:
    - platform: state
      entity_id: input_select.occupancy_mode
  condition:
    - condition: state
      entity_id: input_boolean.presence_automation
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Home
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      data:
                        entity_id: group.occupancy_bypass_automations
                        stop_actions: false

                    - service: input_select.select_option # select guest if guest home or previous occupancy mode if not
                      data:
                        entity_id: input_select.occupancy_mode
                        option: "{{ 'Guest' if is_state('input_boolean.guest_home','on') else prev_mode }}"

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_off
                  entity_id: input_boolean.guest_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Night
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.someone_home
                      state: 'off'
                  sequence:
                    - service: automation.turn_off
                      data:
                        entity_id: group.occupancy_bypass_automations
                        stop_actions: false

                    - service: input_select.select_option # back to previous mode
                      data:
                        entity_id: input_select.occupancy_mode
                        option: "{{ prev_mode }}"

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: timer.cancel # timers cancelled here so lights can turn off
                  data:
                    entity_id: "{{ states.timer|selectattr('attributes.type','eq','light')|map(attribute='entity_id')|list }}"

                - service: input_boolean.turn_off
                  entity_id: input_boolean.bedtime_delayed

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Away
                - Vacation
          sequence:
            - service: input_boolean.turn_off # make sure guest boolean is off
              entity_id: input_boolean.guest_home

            - service: timer.cancel # timers cancelled here so lights / fans can turn off
              data:
                entity_id: "{{ states.timer|selectattr('attributes.type','in',['light','ceiling_fan','vent_fan'])|map(attribute='entity_id')|list }}"

            - service: timer.cancel # cancel arrive home light timer (away->home->away)
              data:
                entity_id: timer.arrive_home_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Guest
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: binary_sensor.owner_home
                      state: 'on'
                  sequence:
                    - service: automation.turn_off
                      data:
                        entity_id: group.occupancy_bypass_automations
                        stop_actions: false

                    - service: input_boolean.turn_on
                      entity_id: input_boolean.guest_home

                    - service: input_select.select_option # back to previous mode if night/override else home mode
                      data:
                        entity_id: input_select.occupancy_mode
                        option: "{{ prev_mode if prev_mode in ['Night','Override'] else 'Home' }}"

                    - service: automation.turn_on
                      entity_id: group.occupancy_bypass_automations
              default:
                - service: input_boolean.turn_on
                  entity_id: input_boolean.guest_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Override
          sequence:
            - wait_template: "{{ not is_state('input_select.occupancy_mode','Override') }}"
              timeout:
                minutes: 30

            - condition: state
              entity_id: input_select.occupancy_mode
              state: Override

            - service: automation.turn_off
              data:
                entity_id: group.occupancy_bypass_automations
                stop_actions: false

            - service: input_select.select_option
              data:
                entity_id: input_select.occupancy_mode
                option: "{{ prev_mode }}"

            - service: automation.turn_on
              entity_id: group.occupancy_bypass_automations

