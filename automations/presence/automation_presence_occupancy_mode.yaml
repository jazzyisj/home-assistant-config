###############################################################################
## Presence - Occupancy Mode
###############################################################################
- id: presence_occupancy_mode
  alias: "[Presence] Occupancy Mode"
  description: "Set occupancy mode options, validate occupancy mode change."
  mode: restart
  variables:
    prev_mode: "{{ trigger.from_state.state }}"
  trigger:
    - platform: state
      entity_id: input_select.occupancy_mode
      to: ~
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Home
          sequence:
            - service: script.turn_off
              target:
                entity_id: script.bedtime

            - if:
                - condition: state
                  entity_id: binary_sensor.owner_home
                  state: "off"
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.occupancy_override

                # select guest if guest home or previous occupancy mode if not
                - service: input_select.select_option
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ 'Guest' if is_state('input_boolean.guest_home','on') else prev_mode }}" # should be away/vacation

                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.occupancy_override

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Night
          sequence:
            - if:
                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: "off"
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.occupancy_override

                - service: input_select.select_option # back to previous mode
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ prev_mode }}" # should be away/vacation

                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.occupancy_override
              else:
                # turn off to stop actions occuring in night mode
                - service: automation.turn_off
                  target:
                    entity_id: automation.presence_someone_arrives_home
                  data:
                    stop_actions: true

                - service: automation.turn_on
                  target:
                    entity_id: automation.presence_someone_arrives_home

                - variables:
                    off_entities:
                      - input_boolean.bedtime_delayed
                      - script.waketime
                      - script.waketime_lights
                      - switch.company_scene
                      - switch.movie_scene
                      - switch.chill_scene

                - repeat:
                    for_each: "{{ off_entities }}"
                    sequence:
                      - if: "{{ is_state(repeat.item,'on') }}"
                        then:
                          - service: homeassistant.turn_off
                            target:
                              entity_id: "{{ repeat.item }}"

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Away
                - Vacation
          sequence:
            # turn off to stop actions occuring in away/vaction mode
            - service: automation.turn_off
              target:
                entity_id: automation.presence_someone_arrives_home
              data:
                stop_actions: true

            - service: automation.turn_on
              target:
                entity_id: automation.presence_someone_arrives_home

            - variables:
                off_entities:
                  - input_boolean.bedtime_delayed
                  - script.waketime
                  - script.waketime_lights
                  - script.bedtime
                  - switch.company_scene
                  - switch.movie_scene
                  - switch.chill_scene
                  - switch.shower_scene

            - repeat:
                for_each: "{{ off_entities }}"
                sequence:
                  - if: "{{ is_state(repeat.item,'on') }}"
                    then:
                      - service: homeassistant.turn_off
                        target:
                          entity_id: "{{ repeat.item }}"

            # cancel arrive home light timer (away->home->away before timer finished)
            - service: timer.cancel
              target:
                entity_id: timer.arrive_home_lights

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Guest
          sequence:
            - if:
                - condition: state
                  entity_id: binary_sensor.owner_home
                  state: "on"
              then:
                - service: input_boolean.turn_on
                  target:
                    entity_id: input_boolean.occupancy_override

                - service: input_select.select_option
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ 'Night' if prev_mode == 'Night' else 'Home' }}"

                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.occupancy_override

###############################################################################
## Presence - Set Occupancy Mode
###############################################################################
- id: presence_set_occupancy_mode
  alias: "[Presence] Set Occupancy Mode"
  description: "Set occupancy mode."
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_home_mode

    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: set_away_mode
  action:
    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: "{{ (trigger.event.data['action'])[4:-5]|title }}"

###############################################################################
## Presence - Occupancy Mode Reset
###############################################################################
- id: presence_occupancy_mode_reset
  alias: "[Presence] Occupancy Mode Reset"
  description: "Auto select occupancy mode."
  trigger:
    - platform: homeassistant
      event: start
  action:
    - delay: 120

    - service: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}

          {% set waketime = states('sensor.next_waketime')|as_datetime
            if has_value('sensor.waketime_today') else house %}
          {% set bedtime = states('sensor.bedtime_today')|as_datetime
            if has_value('sensor.bedtime_today') else today_at(states('input_datetime.days_bedtime')) %}

          {% if is_state('binary_sensor.someone_home','off') %}
            {{ 'Vacation' if is_state('input_select.occupancy_mode','Vacation') else 'Away' }}
          {% elif bedtime == none or waketime == none %}
            {{ 'Home' if is_state('binary_sensor.owner_home','on') else 'Guest' }}
          {% elif bedtime < now() < waketime %}
            {{ 'Night' if is_state('input_boolean.bedtime_delayed','off')
                else ('Home' if is_state('binary_sensor.owner_home','on') else 'Guest') }}
          {% else %}
            {{ 'Home' if is_state('binary_sensor.owner_home','on') else 'Guest' }}
          {% endif %}
