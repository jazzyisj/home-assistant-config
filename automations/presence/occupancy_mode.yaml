
###################################################################################################
## Set Occupancy Mode
###################################################################################################
- id: set_occupancy_mode
  alias: "Set Occupancy Mode"
  description: "Set occupancy mode."
  max_exceeded: silent
  triggers:
    - trigger: state
      id: startup
      entity_id: input_boolean.startup_pending
      to: "off"

    - trigger: state
      id: arrive
      entity_id:
        - binary_sensor.someone_home
        - binary_sensor.owner_home
      to: "on"
      not_from:
        - unknown
        - unavailable

    - trigger: state
      id: leave
      entity_id:
        - binary_sensor.someone_home
        - binary_sensor.owner_home
      to: "off"
      not_from:
        - unknown
        - unavailable
      for: 60 # make sure everyone is gone

    - trigger: state
      id: night
      entity_id: alarm_control_panel.house
      to: armed_night

    - trigger: event
      id: home
      event_type: mobile_app_notification_action
      event_data:
        action: set_home_mode

    - trigger: event
      id: away
      event_type: mobile_app_notification_action
      event_data:
        action: set_away_mode
  conditions:
    - condition: state
      entity_id: input_boolean.startup_pending
      state: "off"

    - condition: template
      value_template: >
        {{ is_state('input_boolean.alarm_auto_arming', 'on')
            if trigger.id == 'night' else is_state('input_boolean.occupancy_mode_automation', 'on') }}
  actions:
    - action: input_select.select_option
      target:
        entity_id: input_select.occupancy_mode
      data:
        option: >
          {% from 'presence.jinja' import occupancy_mode %}
          {{ iif(trigger.id in ['startup', 'arrive', 'leave'], occupancy_mode(), trigger.id | title) }}

###################################################################################################
## Occupancy Mode Changed
###################################################################################################
- id: occupancy_mode_changed
  alias: "Occupancy Mode Changed"
  description: "Set occupancy mode options, validate occupancy mode change."
  mode: queued
  variables:
    prev_mode: "{{ trigger.from_state.state }}"
  triggers:
    - trigger: state
      entity_id: input_select.occupancy_mode
      to:
  conditions:
    - condition: state
      entity_id: input_boolean.occupancy_mode_automation
      state: "on"
  actions:
    - choose:
        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Home
          sequence:
            - variables:
                overrides: >
                  {{ expand('group.presence_override_controls')
                      | selectattr('state', 'eq', 'on')
                      | map(attribute='entity_id') | list }}

            - if: "{{ overrides | count > 0 }}"
              then:
                - repeat:
                    count: "{{ overrides | count > 0 }}"
                    sequence:
                      - variables:
                          person: "{{ overrides[repeat.index-1].split('.')[1] | replace('_home_override', '') }}"

                      - if: "{{ is_state('person.' ~ person, 'home') }}"
                        then:
                          - action: input_boolean.turn_off
                            target:
                              entity_id: "input_boolean.{{ person }}_home_override"

            - delay: 1

            - if:
                - condition: state
                  entity_id: binary_sensor.owner_home
                  state: "off"
              then:
                - action: automation.turn_off
                  target:
                    entity_id: &group "{{ state_attr('group.occupancy_automations', 'entity_id') }}"
                  data:
                    stop_actions: false

                # select guest if guest home or previous occupancy mode (should be away/vacation)
                - action: input_select.select_option
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ 'Guest' if is_state('binary_sensor.guest_home', 'on') else prev_mode }}"

                - action: automation.turn_on
                  target:
                    entity_id: *group

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Night
          sequence:
            - if:
                - condition: state
                  entity_id: binary_sensor.someone_home
                  state: "off"
              then:
                - action: automation.turn_off
                  target:
                    entity_id: *group
                  data:
                    stop_actions: false

                - action: input_select.select_option # back to previous mode
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ prev_mode }}" # should be away/vacation

                - action: automation.turn_on
                  target:
                    entity_id: *group
              else:
                # turn off to stop actions occuring in night mode
                - action: automation.turn_off
                  target:
                    entity_id: automation.someone_arrives_home
                  data:
                    stop_actions: true

                - action: automation.turn_on
                  target:
                    entity_id: automation.someone_arrives_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state:
                - Away
                - Vacation
          sequence:
            - if:

              then:
                - action: script.turn_presence_override_on
                  data:
                    people: "{{ state_attr('binary_sensor.someone_home', 'home') }}"
                    home: turn_off

            # turn off to stop actions occuring in away/vaction mode
            - action: automation.turn_off
              target:
                entity_id: automation.someone_arrives_home
              data:
                stop_actions: true

            - action: automation.turn_on
              target:
                entity_id: automation.someone_arrives_home

        - conditions:
            - condition: state
              entity_id: input_select.occupancy_mode
              state: Guest
          sequence:
            - action: input_boolean.turn_on
              target:
                entity_id: input_boolean.guest_home

            - if:
                - condition: state
                  entity_id: binary_sensor.owner_home
                  state: "on"
              then:
                - action: automation.turn_off
                  target:
                    entity_id: *group
                  data:
                    stop_actions: false

                - action: input_select.select_option
                  target:
                    entity_id: input_select.occupancy_mode
                  data:
                    option: "{{ 'Night' if prev_mode == 'Night' else 'Home' }}"

                - action: automation.turn_on
                  target:
                    entity_id: *group
