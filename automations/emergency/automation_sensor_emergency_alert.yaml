#######################################################################################################################
## Emergency - Alert
#IDEA if alarm and nobody home send additional alerts, sms to neighbours, family
#IDEA extended alert - notify others, phone dialer to call phones or 911?
#######################################################################################################################
- id: sensor_emergency_alert
  alias: "[Sensor] Emergency Alert"
  description: Turn on all lights, create notification when alarm turns on.
  initial_state: true
  mode: queued
  max: 5
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.co_detected_alert
        - binary_sensor.smoke_detected_alert
      to: 'on'

  action:
    - service: browser_mod.popup
      data:
        title: Emergency
        deviceID: "{{ states.sensor|selectattr('attributes.type','eq','browser_mod')|map(attribute='attributes.deviceID')|list }}"
        large: true
        card: !include /config/lovelace/include/picture_entity/emergency_card.yaml

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.light_automation
              state: 'on'

          sequence:
            - service: scene.create
              data:
                scene_id: emergency_lights_restore
                entities: !include /config/include/entities/all_lights_scene_entities.yaml

            - service: script.turn_on
              entity_id: script.lights_on

            - service: persistent_notification.create
              data:
                title: >
                  {% if trigger.entity_id == 'binary_sensor.co_detected_alert' %} Carbon Monoxide Alert!
                  {% elif trigger.entity_id == 'binary_sensor.smoke_detected_alert' %} Smoke Alert!
                  {% endif %}
                message: >
                  {% if trigger.entity_id == 'binary_sensor.co_detected_alert' %} There was an active carbon monoxide alert at {{ now().strftime('%H:%M  %Y-%m-%d') }}.
                  {% elif trigger.entity_id == 'binary_sensor.smoke_detected_alert' %} There was an active smoke alert at {{ now().strftime('%H:%M  %Y-%m-%d') }}.
                  {% endif %}
                notification_id: >
                  {% if trigger.entity_id == 'binary_sensor.co_detected_alert' %} co_alert
                  {% elif trigger.entity_id == 'binary_sensor.smoke_detected_alert' %} smoke_alert
                  {% endif %}

            # delay to allow all media players to turn off (auto off) before casting #TEST
            # delay to allow lights to turn on before rgb lights
            - delay:
                seconds: 10

            - service: light.turn_on
              data:
                entity_id: light.dining_room_rgb_light
                brightness: 255
                rgb_color: [255,0,0]
                
            # cast emergency card to displays
            - service: cast.show_lovelace_view
              data:
                entity_id: group.cast_media_players #TEST
                dashboard_path: lovelace
                view_path: emergency

#######################################################################################################################
## Sensor - Emergency Finished
#######################################################################################################################
- id: sensor_emergency_finished
  alias: "[Sensor] Emergency Finished"
  description: Restore lighting, dismiss notificaions.
  initial_state: true
  mode: single
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.co_detected_alert
        - binary_sensor.smoke_detected_alert
      to: 'off'

  condition:
    - condition: state
      entity_id:
        - binary_sensor.co_detected_alert
        - binary_sensor.smoke_detected_alert
      state: 'off'

  action:
    - service: browser_mod.close_popup

    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.light_automation
              state: 'on'

          sequence:
            - service: script.turn_on
              data:
                entity_id: script.activate_scene
                variables:
                  scene: scene.emergency_lights_restore

    - service: media_player.turn_off
      entity_id: group.cast_media_players #TEST

    - service: script.zwave_led_reset

    - delay:
        minutes: 10

    - service: notify.mobile
      data:
        message: clear_notification
        data:
          tag: emergency