###################################################################################################
## Turn Light Timer On
## #NOTE can't be triggered by brightness change because adaptive lighting would trigger
## so no brightness timers from ui
###################################################################################################
- id: turn_light_timer_on
  alias: "Turn Light Timer On"
  description: "Turn in use timer on when light turns on."
  mode: parallel
  max: 25
  variables:
    timer: >
      {% from 'light.jinja' import light_timer %}
      {{ light_timer(trigger.entity_id) }}
  triggers:
    - trigger: state
      entity_id:
        - light.bathroom_vanity_light_rgb
        - light.bathroom_shower_light
        - light.side_entrance_light
      to: "on"
  conditions: "{{ has_value(timer) }}"
  actions:
    - action: timer.start
      target:
        entity_id: "{{ timer }}"

###################################################################################################
## Turn Light Timer Off
###################################################################################################
- id: turn_light_timer_off
  alias: "Turn Light Timer Off"
  description: "Turn in use timer off when light turns off."
  mode: parallel
  max: 25
  variables:
    timer: >
      {% from 'light.jinja' import light_timer %}
      {{ light_timer(trigger.entity_id) }}
  triggers:
    - trigger: state
      entity_id:
        - light.bathroom_vanity_light_rgb
        - light.bathroom_shower_light
        - light.back_house_potlights
        - light.back_yard_tree_lights
        - light.bedroom_fan_light
        - light.bedroom_potlights
        - light.dining_room_light_rgb
        - light.dining_room_potlights
        - light.front_house_potlights
        - light.front_porch_light
        - light.hallway_potlights
        - light.kitchen_sink_light
        - light.kitchen_potlights
        - light.living_room_cove_light
        - light.living_room_fan_light
        - light.living_room_potlights
        - light.master_bedroom_light
        - light.office_fan_light
        - light.office_potlights
        - light.outside_garage_lights
        - light.side_entrance_light
      to: "off"
  conditions: "{{ has_value(timer) }}"
  actions:
    - action: timer.cancel
      target:
        entity_id: "{{ timer }}"

###################################################################################################
## Light Timer Changed
###################################################################################################
- id: light_timer_changed
  alias: "Light Timer Changed"
  description: "Toggle manual mode with light in use timer."
  mode: parallel
  max: 50
  variables:
    light: >
      {% from 'light.jinja' import timer_light %}
      {{ timer_light(trigger.entity_id) }}
    switch: >
      {% from 'light.jinja' import adaptive_switch %}
      {{ adaptive_switch(light) }}
  triggers:
    - trigger: state
      entity_id:
        - timer.bathroom_vanity_light
        - timer.bathroom_shower_light
        - timer.side_entrance_light
        - timer.back_house_potlights
        - timer.back_yard_tree_lights
        - timer.bedroom_fan_light
        - timer.bedroom_potlights
        - timer.dining_room_light
        - timer.dining_room_potlights
        - timer.front_house_potlights
        - timer.front_porch_light
        - timer.hallway_potlights
        - timer.kitchen_sink_light
        - timer.kitchen_potlights
        - timer.living_room_cove_light
        - timer.living_room_fan_light
        - timer.living_room_potlights
        - timer.master_bedroom_light
        - timer.office_fan_light
        - timer.office_potlights
        - timer.outside_garage_lights
      to:
      for: 2 # allow light to change state, avoid changing level before state
  actions:
    - delay: 1 # let light turn on

    - if: "{{ switch != none and is_state(switch, 'on') }}"
      then:
        - action: adaptive_lighting.set_manual_control
          data:
            entity_id: "{{ switch }}"
            lights: "{{ light }}"
            manual_control: "{{ is_state(light, 'on') and is_state(trigger.entity_id, 'active') }}"
