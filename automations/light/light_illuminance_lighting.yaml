###############################################################################
## Light - Illuminance Lighting
###############################################################################
- id: light_illuminance_lighting
  alias: "[Light] Illuminance Lighting"
  description: "Turn lights on based on outdoor illuminance."
  mode: restart
  max_exceeded: silent
  trigger:
    - platform: homeassistant
      id: startup
      event: start

    - platform: state
      id: day_lux
      entity_id: binary_sensor.daytime_illuminance_lights
      to:
        - "on"
        - "off"
      not_from:
        - unknown
        - unavailable
      for: 5 # allow nighttime to turn on before off trigger

    - platform: state
      id: night_lux
      entity_id: binary_sensor.nighttime_illuminance_lights
      to:
        - "on"
        - "off"
      not_from:
        - unknown
        - unavailable

    - platform: state
      id: home
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
      from:
        - Night
        - Away
        - Vacation
      for: 5 # allow waketime_active / scene_active to turn on

    - platform: zone #VERIFY
      id: home
      entity_id: person.jason
      zone: zone.almost_home
      event: enter

    - platform: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation
      for:
        minutes: 2 # allow scene_active to turn off, occupant to exit

    - platform: state
      id: night
      entity_id: input_select.occupancy_mode
      to: Night
      for: 5 # allow scene_active to turn off

    - platform: state
      entity_id: script.waketime
      to: "off"
  condition:
    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - input_boolean.occupancy_override
        - script.waketime
      state: "off"
  action:
    - if:
        - condition: trigger
          id: startup
      then:
        - wait_template: "{{ has_value('group.lights') }}"
          timeout: 300

    - variables:
        day_lux: >
          {{ expand('group.lights')
              | selectattr('attributes.day_lux', 'defined')
              | selectattr('attributes.day_lux', 'eq', true)
              | map(attribute='entity_id') | list }}
        night_lux: >
          {{ expand('group.lights')
              | selectattr('attributes.night_lux', 'defined')
              | selectattr('attributes.night_lux', 'eq', true)
              | map(attribute='entity_id') | list }}
        night_lights: >
          {{ expand('group.lights')
              | selectattr('attributes.night', 'defined')
              | selectattr('attributes.night', 'eq', true)
              | map(attribute='entity_id') | list }}
        away_lights: >
          {{ expand('group.lights')
              | selectattr('attributes.away', 'eq', true)
              | map(attribute='entity_id') | list }}
        night_away_lights: >
          {{ expand('group.lights')
              | selectattr('attributes.night', 'defined')
              | selectattr('attributes.away', 'eq', true)
              | selectattr('attributes.night', 'eq', true)
              | map(attribute='entity_id') | list }}
        timed_lights: >
          {{ expand('group.lights')
              | selectattr('attributes.timed', 'eq', true)
              | map(attribute='entity_id') | list }}

    - choose:
        - conditions:
            - condition: trigger
              id: day_lux
          sequence:
            - condition: state
              entity_id: binary_sensor.nighttime_illuminance_lights
              state: "off"

            - if:
                - condition: state
                  entity_id: binary_sensor.daytime_illuminance_lights
                  state: "on"
              then:
                - condition: state
                  entity_id: input_select.occupancy_mode
                  match: any
                  state:
                    - Home
                    - Guest

                - service: script.turn_light_on
                  data:
                    lights: "{{ day_lux }}"
                    activate_timer: false
              else:
                - service: script.turn_light_off
                  data:
                    lights: "{{ day_lux }}"
                    activate_timer: false
      default:
        - if:
            - condition: state
              entity_id: binary_sensor.nighttime_illuminance_lights
              state: "on"
          then:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: input_select.occupancy_mode
                      match: any
                      state:
                        - Home
                        - Guest
                  sequence:
                    - if: # no outside lights in morning
                        - condition: state
                          entity_id: binary_sensor.morning_hours
                          state: "on"
                      then:
                        - service: script.light_scene_on
                          data:
                            scene: morning
                      else:
                        # turn on night lights
                        - service: script.turn_light_on
                          data:
                            lights: "{{ night_lux }}"
                            activate_timer: false

                - conditions:
                    - condition: state
                      entity_id: input_select.occupancy_mode
                      match: any
                      state:
                        - Away
                        - Vacation
                  sequence:
                    # turn on away lights
                    - service: script.turn_light_on
                      data:
                        lights: >
                          {% set bedtime = states('sensor.bedtime_today') %}
                          {% set night =  now() > bedtime | as_datetime if bedtime != none else false %}
                          {{ iif(night,night_away_lights , away_lights) }}
                        activate_timer: false
                        bypass_timer: true
                        reset: true

                    # turn off all lights except away lights #VERIFY
                    - service: script.turn_light_off
                      data:
                        lights: >
                          {% set bedtime = states('sensor.bedtime_today') %}
                          {% set night =  now() > bedtime | as_datetime if bedtime != none else false %}
                          {{ expand('group.lights')
                              | rejectattr('entity_id', 'in', iif(night,night_away_lights , away_lights))
                              | selectattr('state', 'eq', 'on')
                              | map(attribute='entity_id') | list }}
                        activate_timer: false
                        bypass_timer: true
                        reset: true

                - conditions:
                    - condition: state
                      entity_id: input_select.occupancy_mode
                      state: Night
                  sequence:
                    # turn on night lights
                    - service: script.turn_light_on
                      data:
                        lights: "{{ night_lights }}"
                        activate_timer: false
                        bypass_timer: true

                    # turn off all lights except night/timed/arrive lights
                    - service: script.turn_light_off
                      data:
                        lights:
                          > # don't turn off arrive home lights if coming from away mode
                          {% set arrive = state_attr('scene.arrive_home', 'entity_id')
                              if trigger.id == 'night' and trigger.from_state.state == 'Away' else '' %}
                          {{ expand('group.lights')
                              | rejectattr('entity_id', 'in', night_lights)
                              | rejectattr('entity_id', 'in', timed_lights)
                              | rejectattr('entity_id', 'in', arrive)
                              | selectattr('state', 'eq', 'on')
                              | map(attribute='entity_id') | list }}
                        activate_timer: false
                        bypass_timer: true
          else:
            - if:
                - condition: state
                  entity_id: binary_sensor.daytime_illuminance_lights
                  state: "on"

                - condition: state
                  entity_id: input_select.occupancy_mode
                  match: any
                  state:
                    - Home
                    - Guest
              then:
                # turn on day lights
                - service: script.turn_light_on
                  data:
                    lights: "{{ day_lux }}"
                    activate_timer: false

                # turn off all lights except day/timed lights
                - service: script.turn_light_off
                  data:
                    lights: >
                      {{ expand('group.lights')
                          | rejectattr('entity_id', 'in', day_lux)
                          | rejectattr('entity_id', 'in', timed_lights)
                          | selectattr('state', 'eq', 'on')
                          | map(attribute='entity_id') | list }}
                    activate_timer: false
              else:
                # turn off all lights
                - service: script.turn_light_off
                  data:
                    activate_timer: false
                    bypass_timer: "{{ is_state('input_select.occupancy_mode', ['Night', 'Away', 'Vacation']) }}"
                    reset: "{{ is_state('input_select.occupancy_mode', ['Night', 'Away', 'Vacation']) }}"
