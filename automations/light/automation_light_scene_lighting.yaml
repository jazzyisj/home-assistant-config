###############################################################################
## Light - Scene Lighting
###############################################################################
- id: light_scene_lighting
  alias: "[Light] Scene Lighting"
  description: "Turn lights on based on scene state."
  mode: queued
  variables:
    scene: >
      {% if trigger.entity_id in ['switch.chill_scene','switch.company_scene',
        'switch.movie_scene'] %} {{ trigger.entity_id.split('.')[1][:-6] }}
      {% elif trigger.entity_id == 'binary_sensor.waketime_active' %} morning
      {% endif %}
    scene_lights: &scene_lights >
      {{ expand(state_attr('scene.' ~ scene,'entity_id'))
          |rejectattr('attributes.night_lux','eq',true)
          |map(attribute='entity_id')|list }}
    night_lights: &night_lights >
      {{ states.light
          |selectattr('attributes.night_lux','defined')
          |selectattr('attributes.night_lux','eq',true)
          |map(attribute='entity_id')|list }}
    adaptive_lights: &adaptive_lights >
      {{ expand(states.switch.adaptive_lighting_main_lights.attributes.configuration['lights'])
            |selectattr('entity_id','in',state_attr('scene.' ~ scene,'entity_id'))
            |map(attribute='entity_id')|list
          + expand(states.switch.adaptive_lighting_rgb_lights.attributes.configuration['lights'])
            |selectattr('entity_id','in',state_attr('scene.' ~ scene,'entity_id'))
            |map(attribute='entity_id')|list }}
  trigger:
    - platform: state
      id: scene_on
      entity_id:
        - switch.chill_scene
        - switch.company_scene
        - switch.movie_scene
      to: "on"
      for: 2 # allow scene off to trigger first

    - platform: state
      id: scene_off
      entity_id:
        - binary_sensor.waketime_active
        - switch.chill_scene
        - switch.company_scene
        - switch.movie_scene
      to: "off"
      not_from:
        - unknown
        - unavailable
      for: 2 # allow rgb to reset first
  condition:
    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: "off"

    # illuminance lighting takes precedence in night/away
    - condition: state
      entity_id: input_select.occupancy_mode
      match: any
      state:
        - Home
        - Guest
  action:
    - if: "{{ trigger.id == 'scene_on' }}"
      then:
        # turn manual control on so scene settings aren't changed by adaptive lighting
        - service: adaptive_lighting.set_manual_control
          data:
            entity_id: switch.adaptive_lighting_main_lights
            lights: "{{ adaptive_lights }}"
            manual_control: true

        - service: script.light_scene_on
          data:
            scene: "{{ scene }}"

        - delay: 5 # wait for scene lights to come on to determine which lights are still off

        - variables:
            lights_off: >
              {{ expand(adaptive_lights)|selectattr('state','eq','off')
                  |map(attribute='entity_id')|list }}

        - if: "{{ lights_off|count > 0 }}"
          then:
            - service: adaptive_lighting.set_manual_control
              data:
                entity_id: switch.adaptive_lighting_main_lights
                lights: "{{ lights_off }}"
                manual_control: false
      else:
        # only if no other scene is still on, non-scene lights are turned off by new scene entity
        - wait_template: "{{ is_state('binary_sensor.scene_active','off') }}"
          timeout: 15
          continue_on_timeout: false

        - if:
            - condition: state
              entity_id: binary_sensor.nighttime_illuminance_lights
              state: "on"
          then:
            - if:
                - condition: state
                  entity_id: binary_sensor.morning_hours
                  state: "on"
              then:
                - service: script.light_scene_on
                  data:
                    scene: morning
              else:
                # turn night lux lights on
                - if: "{{ night_lights|count > 0 }}"
                  then:
                    - service: script.turn_light_on
                      data:
                        lights: *night_lights
                        activate_timer: false
                        bypass_timer: true
                        reset: true

                # turn non-night lux scene lights off
                - if: "{{ scene_lights|count > 0 }}"
                  then:
                    - service: script.turn_light_off
                      data:
                        lights: *scene_lights
                        activate_timer: false
                        bypass_timer: true
                        reset: true
          else:
            - service: script.turn_light_off
              data:
                lights: *scene_lights
                activate_timer: false
                bypass_timer: true
                reset: true

            - service: script.turn_light_off
              data:
                lights: *night_lights
                activate_timer: false
                bypass_timer: true
                reset: true

###############################################################################
## Scene - Scene Light Color
###############################################################################
- id: scene_scene_light_color
  alias: "[Scene] Scene Light Color"
  mode: restart
  variables:
    scene: >
      {{ trigger.entity_id.split('.')[1][4:] if trigger.id =='sensor'
          else trigger.entity_id.split('.')[1] }}
  trigger:
    - platform: state
      id: sensor
      entity_id:
        - sensor.rgb_company_scene
        - sensor.rgb_chill_scene
        - sensor.rgb_movie_scene
      not_to:
        - unknown
        - unavailable
      for: 5 # throttle

    - platform: state
      id: scene
      entity_id:
        - switch.chill_scene
        - switch.company_scene
        - switch.movie_scene
      to: "on"
      for: 10 # allow scene lights to turn on first
      not_from:
        - unknown
        - unavailable
  condition:
    - condition: template
      alias: "Scene rgb color sensor is valid"
      value_template: "{{ has_value('sensor.rgb_' ~ scene) }}"

    - condition: template
      alias: "Scene switch is on"
      value_template: "{{ is_state('switch.' ~ scene ,'on') }}"
  action:
    - service: adaptive_lighting.set_manual_control
      data:
        entity_id: switch.adaptive_lighting_rgb_lights
        lights: light.dining_room_light_rgb
        manual_control: true

    - service: automation.turn_off
      target:
        entity_id: automation.light_in_use_timer
      data:
        stop_actions: false

    - service: script.turn_light_on
      data:
        lights: light.dining_room_light_rgb
        rgb_color: "{{ state_attr('sensor.rgb_' ~ scene,'rgb_color') }}"
        transition: 5
        activate_timer: false
        bypass_timer: true
        override: true
      continue_on_error: true

    - service: automation.turn_on
      target:
        entity_id: automation.light_in_use_timer
