###############################################################################
## Light - Dining Room Light Flux Off
###############################################################################
- id: light_dining_room_light_flux_off
  alias: '[Light] Dining Room Light Flux Off'
  description: 'Turn light flux off.'
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - alert.work_commute_jason
        - alert.work_commute_sheri
        - alert.late_for_work_jason
        - alert.late_for_work_sheri
      to: 'on'

    - platform: state
      entity_id: binary_sensor.work_commute_active
      to: 'on'
      from: 'off'

    - platform: state
      id: switch
      entity_id: input_boolean.media_color_light_sync
      to: 'on'
      from: 'off'

    - platform: state
      entity_id:
        - input_boolean.chill_scene
        - input_boolean.company_scene
      to: 'on'
      from: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'
  action:
    - service: switch.turn_off
      target:
        entity_id: switch.light_flux_dining_room

###############################################################################
## Light - Dining Room Light Flux On
###############################################################################
- id: light_dining_room_light_flux_on
  alias: '[Light] Dining Room Light Flux On'
  description: 'Control light flux state.'
  mode: restart
  trigger:
    - platform: state
      entity_id: light.dining_room_rgb_light
      to: 'off'
      from: 'on'

    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
        - Night
      from:
        - Night
        - Away
        - Vacation

    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.dining_room_light

    - platform: state
      entity_id:
        - binary_sensor.scene_active
        - binary_sensor.work_commute_active
        - input_boolean.media_color_light_sync
      to: 'off'
      from: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - binary_sensor.light_scene_active
      state: 'off'

    - "{{ is_state('input_boolean.media_color_light_sync','off')
      if trigger.id != 'occuapancy' else true }}"

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
              and is_state('input_boolean.occupancy_override','off')
            if trigger.id in ['away','night'] else true }}
  action:
    - service: switch.turn_on
      target:
        entity_id: switch.light_flux_dining_room

###############################################################################
## Light - Dining Room Light Nobody Home
###############################################################################
- id: light_dining_room_light_nobody_home
  alias: '[Light] Dining Room Light Nobody Home'
  description: 'Turn light on when nobody is home.'
  max_exceeded: silent
  variables:
    current: "{{ state_attr('light.dining_room_rgb_light','brightness')|int(0) }}"
    brightness: >
      {% if is_state('binary_sensor.quiet_time','on') %}
        {{ 30 if current > 30 or current == 0 else current }}
      {% else %}
        {{ 90 if current < 90 else current }}
      {% endif %}
    rgb_color: >
      {% if is_state('input_select.occupancy_mode','Night') %}
        {{ state_attr('sensor.flux_color_dining_room','rgb_color')
            if states.sensor.flux_color_dining_room.attributes.rgb_color != none else [255, 101, 0] }}
      {% else %}
        {{ state_attr('sensor.flux_color_dining_room','rgb_color')
            if states.sensor.flux_color_dining_room.attributes.rgb_color != none else [255, 180, 60] }}
      {% endif %}
  trigger:
    - platform: state
      id: lux
      entity_id: binary_sensor.nighttime_illuminance_lights
      to: 'on'
      from: 'off'

    - platform: state
      id: quiet
      entity_id: binary_sensor.quiet_time
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'

    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation
      for:
        minutes: 2 # must be after away mode has run

    - platform: time_pattern
      minutes: '/15'
  condition:
    - condition: state
      entity_id:
        - input_boolean.light_automation
        - input_boolean.presence_automation
        - binary_sensor.nighttime_illuminance_lights
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Away
        - Vacation

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
              and is_state('input_boolean.occupancy_override','off')
            if trigger.id in ['away','night'] else true }}
  action:
    - service: light.turn_on
      target:
        entity_id: light.dining_room_rgb_light
      data:
        brightness: '{{ brightness }}'
        rgb_color: '{{ rgb_color }}'

###############################################################################
## Light - Dining Room Light Auto On
###############################################################################
- id: light_dining_room_light_auto_on
  alias: '[Light] Dining Room Light Auto On'
  description: 'Turn on light.'
  max_exceeded: silent
  variables:
    current: "{{ state_attr('light.dining_room_rgb_light','brightness')|int(0) }}"
    brightness: >
      {% if is_state('input_select.occupancy_mode','Night') %} 50
      {% elif is_state('binary_sensor.quiet_time','on') %} {{ 100 if current > 100 else current }}
      {% else %} {{ 150 }}
      {% endif %}
    rgb_color: >
      {% if is_state('input_select.occupancy_mode','Night') %}
        {{ state_attr('sensor.flux_color_dining_room','rgb_color')
            if states.sensor.flux_color_dining_room.attributes.rgb_color != none else [255, 101, 0] }}
      {% else %}
        {{ state_attr('sensor.flux_color_dining_room','rgb_color')
            if states.sensor.flux_color_dining_room.attributes.rgb_color != none else [255, 180, 60] }}
      {% endif %}
  trigger:
    - platform: state
      id: lux
      entity_id:
        - binary_sensor.nighttime_illuminance_lights
        - binary_sensor.daytime_illuminance_lights
      to: 'on'
      from: 'off'

    - platform: state
      id: quiet
      entity_id: binary_sensor.quiet_time
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'

    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Home
        - Guest
        - Night
      from:
        - Night
        - Away
        - Vacation
      for:
        seconds: 5 # allow scene_active to turn on, current scene to save

    - platform: state
      id: scene
      entity_id:
        - script.morning_lights
        - binary_sensor.scene_active
      to: 'off'
      from: 'on' # script reload
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
              and is_state('input_boolean.occupancy_override','off')
            if trigger.id in ['away','night'] else true }}

    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.nighttime_illuminance_lights
          state: 'on'

        - condition: state
          entity_id: binary_sensor.daytime_illuminance_lights
          state: 'on'

    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - binary_sensor.light_scene_active
      state: 'off'

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Home
        - Guest

    - condition: template
      alias: 'Timer is not on if trigger is lux quiet'
      value_template: >
        {{ is_state('timer.dining_room_light','idle')
            if trigger.id in ['lux','quiet'] else true }}

    - condition: template
      alias: 'Light is on if trigger is quiet time light.'
      value_template: "{{ is_state('light.dining_room_rgb_light','on') if trigger.id == 'quiet' else true }}"

    - condition: template
      alias: 'Light not on and already at set brightness.'
      value_template: '{{ brightness != current if current > 0 else true }}'
  action:
    - service: light.turn_on
      target:
        entity_id: light.dining_room_rgb_light
      data:
        brightness: '{{ brightness }}'
        rgb_color: '{{ rgb_color }}'

###############################################################################
## Light - Dining Room Light Auto Off
###############################################################################
- id: light_dining_room_light_auto_off
  alias: '[Light] Dining Room Light Auto Off'
  description: 'Turn off light.'
  max_exceeded: silent
  trigger:
    - platform: state
      id: lux
      entity_id:
        - binary_sensor.nighttime_illuminance_lights
        - binary_sensor.daytime_illuminance_lights
      to: 'off'
      from: 'on'

    - platform: state
      id: scene
      entity_id:
        - script.morning_lights
        - binary_sensor.scene_active
      to: 'off'
      from: 'on' # script/template reload

    - platform: state
      id: away
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation
      for:
        minutes: 2 # allow occupant to leave, timer cancel

    - platform: state
      id: night
      entity_id: input_select.occupancy_mode
      to: Night
      for:
        minutes: 5
  condition:
    - condition: state
      entity_id:
        - light.dining_room_rgb_light
        - input_boolean.light_automation
      state: 'on'

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
            if trigger.id in ['away','night'] else true }}

    - condition: state
      entity_id:
        - input_boolean.alarm_triggered
        - binary_sensor.light_scene_active
      state: 'off'

    - condition: template
      value_template: >
        {{ is_state('binary_sensor.nighttime_illuminance_lights','off')
              and is_state('binary_sensor.daytime_illuminance_lights','off')
            if trigger.id == 'scene' else true }}

    - condition: template
      value_template: >
        {% if is_state('binary_sensor.someone_home','on') %}
          {% if trigger.entity_id == 'binary_sensor.daytime_illuminance_lights'%}
            {{ is_state('binary_sensor.nighttime_illuminance_lights','off') }}
          {% elif trigger.entity_id == 'binary_sensor.nighttime_illuminance_lights' %}
            {{ is_state('binary_sensor.daytime_illuminance_lights','off') }}
          {% else %} true
          {% endif %}
        {% else %} true
        {% endif %}

    - condition: template
      alias: 'Timer is idle if trigger is night mode'
      value_template: "{{ is_state('timer.dining_room_light','idle') if trigger.id == 'night' else true }}"
  action:
    - service: light.turn_off
      target:
        entity_id: light.dining_room_rgb_light
