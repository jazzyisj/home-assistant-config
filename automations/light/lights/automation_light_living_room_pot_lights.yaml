#######################################################################################################################
## Light - Living Room Pot Light In Use
#######################################################################################################################
- id: light_living_room_potlights_in_use
  alias: "[Light] Living Room Potlights In Use"
  description: "Turn in use timer on when device state changes."
  mode: restart
  trigger:
    - platform: state
      entity_id: light.living_room_pot_lights
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'
  action:
    - service: timer.start
      entity_id: timer.living_room_pot_lights

#######################################################################################################################
## Light - Living Room Potlights Auto On
#######################################################################################################################
- id: light_living_room_potlights_auto_on
  alias: "[Light] Living Room Potlights Auto On"
  description: "Turn on lights."
  max_exceeded: silent
  variables:
    current: "{{ state_attr('light.living_room_pot_lights','brightness')|int }}"
    default: 45
    quiet: 20
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.auto_light_on
        - binary_sensor.illuminance_light_on
      to: 'on'

    - platform: state
      entity_id: binary_sensor.quiet_hours
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: template
      value_template: "{{ is_state('input_boolean.presence_automation','on') if trigger.entity_id == 'input_select.occupancy_mode' else true }}"

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Home
        - Guest
      for:
        seconds: 5 # allow light scripts to start

    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.auto_light_on
          state: 'on'

        - condition: state
          entity_id: binary_sensor.illuminance_light_on
          state: 'on'

    - condition: template
      value_template: "{{ current > quiet if trigger.entity_id == 'binary_sensor.quiet_hours' else current < default }}"

    - condition: state
      entity_id: binary_sensor.light_scene_active
      state: 'off'
  action:
    - service: automation.turn_off # turn off automation so we don't trigger device in use timers
      entity_id: automation.light_living_room_potlights_in_use

    - service: light.turn_on
      target:
        entity_id: light.living_room_pot_lights
      data:
        brightness: "{{ quiet if is_state('binary_sensor.quiet_hours','on') else default }}"

    - delay:
        seconds: 5 # allow device to change state

    - service: automation.turn_on
      entity_id: automation.light_living_room_potlights_in_use

#######################################################################################################################
## Light - Living Room Potlights Auto Off
#######################################################################################################################
- id: light_living_room_potlights_auto_off #OCC
  alias: "[Light] Living Room Potlights Auto Off"
  description: "Turn off lights."
  max_exceeded: silent # reloading templates (illuminance sensor)
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.auto_light_on
        - binary_sensor.illuminance_light_on
      to: 'off'

    - platform: state
      entity_id: input_select.occupancy_mode
      to:
        - Night
        - Away
        - Vacation
      for:
        minutes: 2 # allow timer to cancel, occupant to leave
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: template
      value_template: "{{ is_state('input_boolean.presence_automation','on') if trigger.entity_id == 'input_select.occupancy_mode' else true }}"

    - condition: template
      value_template: >
        {% if is_state('binary_sensor.someone_home','on') %}
          {{ is_state('binary_sensor.auto_light_on','off') if trigger.entity_id == 'binary_sensor.illuminance_light_on'
              else (is_state('binary_sensor.illuminance_light_on','off') if trigger.entity_id == 'binary_sensor.auto_light_on' else true) }}
        {% else %} true
        {% endif %}

    - condition: state
      entity_id:
        - binary_sensor.light_scene_active
        - input_boolean.alarm_triggered
      state: 'off'
  action:
    - service: automation.turn_off # turn off automation so we don't trigger device in use timers
      entity_id: automation.light_living_room_potlights_in_use

    - service: light.turn_off
      entity_id: light.living_room_pot_lights

    - delay:
        seconds: 5 # allow device to change state

    - service: automation.turn_on
      entity_id: automation.light_living_room_potlights_in_use
