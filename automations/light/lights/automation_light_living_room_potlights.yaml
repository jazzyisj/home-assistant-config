###############################################################################
## Light - Living Room Potlights Auto On
###############################################################################
- id: light_living_room_potlights_auto_on
  alias: '[Light] Living Room Potlights Auto On'
  description: 'Turn on lights.'
  max_exceeded: silent
  variables:
    current: "{{ state_attr('light.living_room_potlights','brightness')|int(0) }}"
    brightness: >
      {% if is_state('binary_sensor.quiet_time','on') %}
        {{ 15 if current > 15 or current == 0 else current }}
      {% else %}
        {{ 30 if current < 30 else current }}
      {% endif %}
  trigger:
    - platform: state
      id: quiet
      entity_id: binary_sensor.quiet_time
      to:
        - 'on'
        - 'off'
      from:
        - 'on'
        - 'off'

    - platform: state
      id: scene
      entity_id: binary_sensor.scene_active
      to: 'off'
      from: 'on' # script/template reload
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'

    - condition: state
      entity_id:
        - binary_sensor.light_scene_active
        - input_boolean.alarm_triggered
      state: 'off'

    - condition: state
      entity_id: input_select.occupancy_mode
      state:
        - Home
        - Guest

    - condition: state
      entity_id: binary_sensor.nighttime_illuminance_lights
      state: 'on'

    - condition: template
      alias: 'Light is on but timer is not if trigger is quiet time'
      value_template: >
        {{ is_state('light.living_room_potlights','on') and is_state('timer.living_room_potlights','idle')
            if trigger.id == 'quiet' else true }}

    - condition: template
      alias: 'Light is not already at new brightness.'
      value_template: '{{ brightness != current if current > 0 else true }}'
  action:
    - service: light.turn_on
      target:
        entity_id: light.living_room_potlights
      data:
        brightness: '{{ brightness }}'

###############################################################################
## Light - Living Room Potlights Auto Off
###############################################################################
- id: light_living_room_potlights_auto_off
  alias: '[Light] Living Room Potlights Auto Off'
  description: 'Turn off lights.'
  max_exceeded: silent
  trigger:
    - platform: state
      id: lux
      entity_id: binary_sensor.nighttime_illuminance_lights
      to: 'off'
      from: 'on'

    - platform: state
      id: scene
      entity_id: binary_sensor.scene_active
      to: 'off'
      from: 'on' # script/template reload

    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Night
        - Away
        - Vacation
  condition:
    - condition: state
      entity_id:
        - light.living_room_potlights
        - input_boolean.light_automation
      state: 'on'

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
              and is_state('input_boolean.occupancy_override','off')
            if trigger.id == 'occupancy' else true }}

    - condition: state
      entity_id:
        - binary_sensor.light_scene_active
        - input_boolean.alarm_triggered
      state: 'off'

    - condition: template
      alias: "Don't turn off after scene if night lux on"
      value_template: >
        {{ is_state('binary_sensor.nighttime_illuminance_lights','off')
            if trigger.id == 'scene' else true }}

    - condition: template
      alias: 'Timer is not on if trigger is lux'
      value_template: >
        {{ is_state('timer.living_room_potlights','idle')
            if trigger.id == 'lux' else true }}
  action:
    - service: light.turn_off
      target:
        entity_id: light.living_room_potlights
