###############################################################################
## Light - Bathroom Shower Light In Use
###############################################################################
- id: light_bathroom_shower_light_in_use
  alias: '[Light] Bathroom Shower Light In Use'
  description: 'Turn in use timer on/off when device state changes.'
  mode: restart
  trigger:
    - platform: state
      entity_id: light.bathroom_shower_light
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: light.bathroom_shower_light
              state: 'on'
          sequence:
            - service: timer.start
              entity_id: timer.bathroom_shower_light
      default:
        - service: timer.cancel
          entity_id: timer.bathroom_shower_light

###############################################################################
## Light - Bathroom Shower Lights Auto On
###############################################################################
- id: light_bathroom_shower_light_auto_on
  alias: '[Light] Bathroom Shower Lights Auto On'
  description: 'Turn on light.'
  mode: restart
  trigger:
    - platform: state
      id: shower
      entity_id: input_boolean.shower_scene
      to: 'on'
      from: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.light_automation
      state: 'on'
  action:
    - service: light.turn_on
      target:
        entity_id: light.bathroom_shower_light

###############################################################################
## Light - Bathroom Shower Light Auto Off
###############################################################################
- id: light_bathroom_shower_light_auto_off
  alias: '[Light] Bathroom Shower Light Auto Off'
  description: 'Turn off light.'
  max_exceeded: silent
  trigger:
    - platform: state # specify from state, unknown at startup
      id: motion
      entity_id: binary_sensor.bathroom_sensor_motion
      to: 'off'
      from: 'on'
      for:
        minutes: 5

    - platform: state
      id: occupancy
      entity_id: input_select.occupancy_mode
      to:
        - Away
        - Vacation
      for:
        minutes: 2 # allow timer to cancel, occupant to leave

    - platform: state
      id: shower
      entity_id: input_boolean.shower_scene
      to: 'off'
      from: 'on'

    # req if motion/timer expired during restart
    - platform: state
      id: startup
      entity_id: input_boolean.startup_pending
      to: 'off'
      from: 'on'

    - platform: event
      id: timer
      event_type: timer.finished
      event_data:
        entity_id: timer.bathroom_shower_light
  condition:
    - condition: state
      entity_id:
        - light.bathroom_shower_light
        - input_boolean.light_automation
      state: 'on'

    - condition: state
      entity_id: input_boolean.alarm_triggered
      state: 'off'

    - condition: template
      alias: 'Presence automation is enabled if occupancy trigger'
      value_template: >
        {{ is_state('input_boolean.presence_automation','on')
            if trigger.id == 'occupancy' else true }}

    - condition: template
      alias: 'Timer idle if trigger is motion'
      value_template: >
        {{ is_state('timer.bathroom_shower_light','idle')
            if trigger.id == 'motion' else true }}

    - condition: template
      alias: 'Motion off if trigger is timer'
      value_template: >
        {{ is_state('binary_sensor.bathroom_sensor_motion','off')
            if trigger.id == 'timer' else true }}

    - condition: state
      entity_id: input_boolean.shower_scene
      state: 'off'
  action:
    - service: automation.turn_off
      target:
        entity_id: automation.light_bathroom_shower_light_in_use

    - service: light.turn_off
      target:
        entity_id: light.bathroom_shower_light

    - service: automation.turn_on
      target:
        entity_id: automation.light_bathroom_shower_light_in_use
