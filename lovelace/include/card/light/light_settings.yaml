type: entities
entities:
  - entity: binary_sensor.lutron_connected
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if is_state('binary_sensor.lutron_connected','off') %} var(--entity-critical-color)
            {% else %} var(--state-icon-color)
            {% endif %}
          ;
        }

  - entity: binary_sensor.lutron_bridge_connected
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if is_state('binary_sensor.lutron_bridge_connected','off') %} var(--entity-critical-color)
            {% else %} var(--state-icon-color)
            {% endif %}
          ;
        }

  - entity: sensor.day_night

  - type: custom:auto-entities
    filter:
      include:
        - domain: light
      exclude:
        - state: 'off'
        - attributes: #BUG attributes must be separated or they don't work
            light_group: true
        - attributes:
            rgb_control: true
        - attributes:
            rgb_light: slave
        - attributes:
            type: volume
    card:
      type: custom:fold-entity-row
      head:
        entity: binary_sensor.lights_on
        state_color: true

  - type: custom:auto-entities
    filter:
      include:
        - domain: timer
          attributes:
            type: light
      exclude:
        - state: idle
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: binary_sensor.light_in_use
        state_color: true
      group_config:
        secondary_info: last-changed

  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.nighttime_auto_light
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('input_boolean.auto_light_enabled','off')
                  or is_state('input_boolean.auto_light_override','on') %} var(--entity-warning-color)
              {% elif is_state('binary_sensor.nighttime_auto_light','on') %} var(--state-icon-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: input_boolean.auto_light_enabled
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.auto_light_enabled','off') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
      - entity: input_boolean.auto_light_override
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.auto_light_override','on') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
      - type: conditional
        conditions:
          - entity: input_boolean.auto_light_enabled
            state: 'on'
        row:
          entity: sensor.sun_elevation

      - type: conditional
        conditions:
          - entity: input_boolean.auto_light_enabled
            state: 'on'
        row:
          entity: input_number.lighting_on_sun_elevation
          name: Lights on

      - type: conditional
        conditions:
          - entity: input_boolean.auto_light_enabled
            state: 'on'
        row:
          entity: input_number.lighting_off_sun_elevation
          name: Lights off

  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.daytime_illuminance_light
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('input_boolean.illuminance_light_enabled','off') %} var(--entity-warning-color)
              {% elif is_state('binary_sensor.daytime_illuminance_light','on') %} var(--state-icon-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: input_boolean.illuminance_light_enabled
      - type: conditional
        conditions:
          - entity: input_boolean.illuminance_light_enabled
            state: 'on'
        row:
          entity: sensor.outdoor_illuminance

      - type: conditional
        conditions:
          - entity: input_boolean.illuminance_light_enabled
            state: 'on'
        row:
          entity: input_number.illuminance_threshold

  - entity: input_number.bathroom_illuminance_threshold

  - !include /config/lovelace/include/entity/scene/scene_settings.yaml

  - type: custom:fold-entity-row
    head:
      entity: switch.light_flux_dining_room 
    entities:
      - !include /config/lovelace/include/entity/light/light_flux_dining_room.yaml
      - !include /config/lovelace/include/entity/light/light_flux_bathroom.yaml
      - !include /config/lovelace/include/entity/light/light_flux_bedroom.yaml

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','light')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.light_alerts
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                  {% if is_state('input_boolean.light_alerts','on') and states.alert|selectattr('attributes.category','eq','light')
                      |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-critical-color)
                  {% elif is_state('input_boolean.light_alerts','off') %} var(--entity-warning-color)
                  {% else %} var(--state-icon-color)
                  {% endif %}
                ;
            }
      padding: 5

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: "automation.light_*"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.light_automation
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.light_automation','off') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
      padding: 5

  - type: custom:paper-buttons-row
    buttons:
      - entity: script.lights_on
        name: Lights On
        icon: mdi:lightbulb-multiple
        style:
          button:
            color: var(--state-icon-active-color)
            background-color: var(--table-row-alternative-background-color)
            border-radius: 40px
            padding: 10px
            font-size: 1.2rem
        tap_action:
          action: call-service
          service: script.lights_on

      - entity: script.lights_off
        name: Lights Off
        icon: mdi:lightbulb-multiple-off-outline
        style:
          button:
            color: var(--state-icon-active-color)
            background-color: var(--table-row-alternative-background-color)
            border-radius: 40px
            padding: 10px
            font-size: 1.2rem
        tap_action:
          action: call-service
          service: script.lights_off
card_mod:
  class: popup

