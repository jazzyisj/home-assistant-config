###############################################################################
## Hass Monitor Card
###############################################################################
type: entities
title: Home Assistant
icon: mdi:home-assistant
show_header_toggle: false
entities:
  - type: custom:template-entity-row
    name: "Home Assistant Uptime: {{ states('sensor.home_assistant_uptime') }}"
    secondary: "Last Restart: {{ states('sensor.last_restart_date_time') }}"
    icon: mdi:clock-start

  - type: custom:auto-entities
    filter:
      include:
        - group: group.integrations_connected_sensors
          options:
            secondary_info: last-changed
            card_mod:
              style: |
                :host {
                  --paper-item-icon-color:
                    {% if is_state(config.entity,'off') %} var(--entity-warning-color)
                    {% else %} var(--entity-ok-color)
                    {% endif %}
                  ;
                }
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: binary_sensor.integrations_connected
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('binary_sensor.integrations_connected','off') %} var(--entity-warning-color)
                {% else %} var(--entity-ok-color)
                {% endif %}
              ;
            }
      padding: 5

  - entity: binary_sensor.remote_ui
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if states('binary_sensor.remote_ui')|lower in ['off','unknown','unavailable','none'] %} var(--entity-critical-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:auto-entities
    show_empty: true
    unique: true
    sort:
      method: name # don't sort by attribute: last_seen - constantly updating
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.connected_browsers
        tap_action:
          action: call-service
          service: browser_mod.debug
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.unknown_browser_alert','on') %} var(--entity-critical-color)
              {% else %} var(--state-icon-color)
              {% endif %}
              ;
          }
    filter:
      include:
        - entity_id: 'sensor.browser_*'
          options:
            secondary_info: last-changed
            style: |
              :host {
                --paper-item-icon-color:
                  {% if is_state_attr(config.entity,'authorized',true) %}
                    {{ 'var(--state-icon-active-color)' if states(config.entity)|int(0) > 0 else 'var(--state-icon-color)' }}
                  {% else %} var(--entity-warning-color)
                  {% endif %}
                  ;
              }

  - entity: sensor.connected_clients

  - type: custom:template-entity-row
    entity: sensor.last_successful_authentication
    state: "{{ state_attr('sensor.last_successful_authentication','Hostname') }}"
    secondary: "User: {{ state_attr('sensor.last_successful_authentication','Username') }}"
    card_mod:
      style: |
        :host {
          --paper-item-icon-color: var(--entity-ok-color);
        }

  - type: custom:template-entity-row
    entity: binary_sensor.hass_update
    secondary: "Home Assistant v{{ states('sensor.home_assistant_version') }}"
    tap_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        deviceID: this
        title: Hass System Updates
        card: !include /config/lovelace/card/hass/hass_updates.yaml
    double_tap_action:
      action: more-info
    hold_action:
      action: navigate
      navigation_path: /hassio/dashboard
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if states('sensor.breaking_change_warnings')|int(0) > 0 %} var(--entity-critical-color)
            {% elif is_state('binary_sensor.hass_update','on') %}  var(--entity-warning-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:template-entity-row
    entity: sensor.backup_state
    name: System Backups
    icon: mdi:folder-sync
    state: "{{ 'Problem' if is_state('binary_sensor.backups_stale','on') else 'OK' }}"
    secondary: >
      Backups: {{ state_attr('sensor.backup_state','backups_in_home_assistant') }}
      -  Latest: {{ (state_attr('sensor.backup_state','last_backup')|as_datetime).strftime('%b %-d,%Y %H:%M %p') }}
    tap_action:
      action: more-info
    double_tap_action:
      action: navigate
      navigation_path: /hassio/backups
    hold_action:
      action: navigate
      navigation_path: /hassio/ingress/cebe7a76_hassio_google_drive_backup
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if is_state('binary_sensor.backups_stale','on') %} var(--entity-critical-color)
            {% elif not is_state('sensor.backup_state','backed_up') %} var(--entity-warning-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - entity: sensor.home_assistant_alerts
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if 'persistent_notification.hass_alert' in states.persistent_notification|map(attribute='entity_id')|list %} var(--entity-warning-color)
            {% elif states('sensor.home_assistant_alerts')|lower in ['unknown','unavailable','none'] %} var(--entity-warning-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }
    tap_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        deviceID: this
        title: Home Assistant Alerts
        card: !include /config/lovelace/card/hass/hass_alerts_markdown.yaml
card_mod:
  class: basic
