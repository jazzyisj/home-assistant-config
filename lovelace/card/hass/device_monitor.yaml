###############################################################################
## Device and Sensor Monitor
###############################################################################
type: entities
title: 'Devices and Sensors'
icon: mdi:devices
show_header_toggle: false
state_color: true
entities:
  - type: custom:auto-entities
    show_empty: true
    unique: true
    filter:
      template: "{{ state_attr('sensor.offline_devices','entity_id') }}"
    sort:
      method: state
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.offline_devices
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.offline_devices')|int(0) > 0 %} var(--entity-warning-color)
              {% elif states('sensor.offline_devices')|int(0) == 0 %} var(--entity-ok-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }

  - type: custom:auto-entities
    show_empty: true
    unique: true
    sort:
      method: state
    filter:
      template: "{{ state_attr('sensor.offline_zwave_devices','entity_id') }}"
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.offline_zwave_devices
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% set status = states('sensor.zwave_status') %}
                {% if status == 'critical' %} var(--entity-critical-color)
                {% elif status == 'severe' %} var(--entity-severe-color)
                {% elif status == 'warning' %} var(--entity-warning-color)
                {% elif status == 'minor' %} var(--entity-minor-color)
                {% elif status == 'ok' %} var(--entity-ok-color)
                {% else %} var(--entity-disabled-color)
                {% endif %}
              ;
            }

  - type: custom:auto-entities
    show_empty: true
    unique: true
    filter:
      template: "{{ state_attr('sensor.unavailable_sensors','entity_id') }}"
    sort:
      method: state
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.unavailable_sensors
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.unavailable_sensors')|int(0) > 0 %} var(--entity-warning-color)
              {% elif states('sensor.unavailable_sensors')|int(0) == 0 %} var(--entity-ok-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }

  - type: custom:auto-entities
    show_empty: true
    unique: true
    filter:
      template: "{{ state_attr('sensor.unavailable_entities','entity_id') }}"
    sort:
      method: state
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.unavailable_entities
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.unavailable_entities')|int(0) > 0 %} var(--entity-warning-color)
              {% elif states('sensor.unavailable_entities')|int(0) == 0 %} var(--entity-ok-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }
card_mod:
  class: basic
