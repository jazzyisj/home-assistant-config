###############################################################################
## System Settings Card
###############################################################################
type: entities
title: System Settings
icon: mdi:desktop-classic
show_header_toggle: false
state_color: true
entities:
  - entity: input_select.log_level

  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.low_battery_alert
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.low_battery_alert','on') %} var(--entity-critical-color)
              {% else %} var(--state-icon-color)
              {% endif %}
              ;
          }
    entities:
      - entity: input_number.battery_alert_threshold

  - entity: input_boolean.dev_mode
  - entity: input_boolean.startup_pending

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','hass')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.hass_alerts
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                  {% if is_state('input_boolean.hass_alerts','off') %} var(--entity-warning-color)
                  {% else %} var(--state-icon-color)
                  {% endif %}
              ;
              --paper-item-icon-active-color:
                {% if states.alert|selectattr('attributes.category','eq','hass')
                    |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-severe-color)
                {% else %} var(--state-icon-active-color).
                {% endif %}
              ;
            }
        padding: 5

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: 'automation.hass_*'
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.hass_automation
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.system_automation','off') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
        padding: 5

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','system')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.system_alerts
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                  {% if is_state('input_boolean.system_alerts','off') %} var(--entity-warning-color)
                  {% else %} var(--state-icon-color)
                  {% endif %}
              ;
              --paper-item-icon-active-color:
                {% if states.alert|selectattr('attributes.category','eq','system')
                    |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-severe-color)
                {% else %} var(--state-icon-active-color)
                {% endif %}
              ;
            }
        padding: 5

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: 'automation.system_*'
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.system_automation
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.system_automation','off') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
        padding: 5
footer:
  type: buttons
  entities:
    - entity: hassio.host_reboot
      icon: mdi:restore-alert
      name: Reboot
      tap_action:
        action: call-service
        confirmation:
          text: Are you sure you want to reboot the server?
        service: hassio.host_reboot

    - entity: homeassistant.restart
      icon: mdi:home-assistant
      name: Restart
      tap_action:
        action: call-service
        confirmation:
          text: Are you sure you want to restart Home Assistant?
        service: homeassistant.restart

    - entity: browser_mod.lovelace_reload
      icon: mdi:file-refresh
      name: Reload
      tap_action:
        action: call-service
        confirmation:
          text: Are you sure you want to reload this lovelace dashboard?
        service: browser_mod.lovelace_reload

    - entity: browser_mod.window_reload
      icon: mdi:file-refresh
      name: Refresh
      tap_action:
        action: call-service
        confirmation:
          text: Are you sure you want to refresh your browser?
        service: browser_mod.window_reload
card_mod:
  class: basic
