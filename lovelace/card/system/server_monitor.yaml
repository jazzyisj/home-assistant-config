###############################################################################
## Server Monitor
###############################################################################
type: entities
title: 'Server Monitor'
icon: mdi:server
state_color: true
show_header_toggle: false
entities:
  - type: custom:template-entity-row
    name: "Server Uptime: {{ states('sensor.server_uptime') }}"
    secondary: "Last Boot: {{ states('sensor.last_boot_date_time') }}"
    icon: mdi:clock-start

  - entity: sensor.local_ip
    name: 'IPV4'
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if states('sensor.local_ip')|lower
                not in ['unknown','unavailable','none'] %} var(--entity-ok-color)
            {% else %} var(--entity-severe-color)
            {% endif %}
          ;
        }

  - entity: sensor.ipv6_address_eth0
    name: 'IPV6'
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if states('sensor.ipv6_address_eth0')|lower
                not in ['unknown','unavailable','none'] %} var(--entity-ok-color)
            {% else %} var(--entity-severe-color)
            {% endif %}
          ;
        }

  - entity: sensor.cpu_temperature
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% set status = states('sensor.cpu_temp_status') %}
            {% if status == 'critical' %} var(--entity-critical-color)
            {% elif status == 'severe' %} var(--entity-severe-color)
            {% elif status == 'warning' %} var(--entity-warning-color)
            {% elif status == 'minor' %} var(--entity-minor-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:fold-entity-row
    padding: 5
    head:
      entity: sensor.processor_use_percent
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set status = states('sensor.processor_use_status') %}
              {% if status == 'critical' %} var(--entity-critical-color)
              {% elif status == 'severe' %} var(--entity-severe-color)
              {% elif status == 'warning' %} var(--entity-warning-color)
              {% elif status == 'minor' %} var(--entity-minor-color)
              {% else %} var(--entity-ok-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.load_1m
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% set load = states('sensor.load_1m')|float(-1) %}
                {% if load > 3 %} var(--entity-critical-color)
                {% elif load > 2 %} var(--entity-severe-color)
                {% elif load > 1.5 %} var(--entity-warning-color)
                {% elif load > 1 %} var(--entity-minor-color)
                {% else %} var(--entity-ok-color)
                {% endif %}
              ;
            }

      - entity: sensor.load_5m
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% set load = states('sensor.load_5m')|float(-1) %}
                {% if load > 3 %} var(--entity-critical-color)
                {% elif load > 2 %} var(--entity-severe-color)
                {% elif load > 1.5 %} var(--entity-warning-color)
                {% elif load > 1 %} var(--entity-minor-color)
                {% else %} var(--entity-ok-color)
                {% endif %}
              ;
            }

      - entity: sensor.load_15m
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% set load = states('sensor.load_15m')|float(-1) %}
                {% if load > 3 %} var(--entity-critical-color)
                {% elif load > 2 %} var(--entity-severe-color)
                {% elif load > 1.5 %} var(--entity-warning-color)
                {% elif load > 1 %} var(--entity-minor-color)
                {% else %} var(--entity-ok-color)
                {% endif %}
              ;
            }

  - entity: sensor.memory_use_percent
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% set status = states('sensor.memory_use_status') %}
            {% if status == 'critical' %} var(--entity-critical-color)
            {% elif status == 'severe' %} var(--entity-severe-color)
            {% elif status == 'warning' %} var(--entity-warning-color)
            {% elif status == 'minor' %} var(--entity-minor-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - entity: sensor.swap_use_percent
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% set status = states('sensor.swap_use_status') %}
            {% if status == 'critical' %} var(--entity-critical-color)
            {% elif status == 'severe' %} var(--entity-severe-color)
            {% elif status == 'warning' %} var(--entity-warning-color)
            {% elif status == 'minor' %} var(--entity-minor-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - !include /config/lovelace/card/include/disk_use_entity.yaml

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','system')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      padding: 5
      head:
        entity: input_boolean.system_alerts
        card_mod:
          style: |
            :host {
              --paper-item-icon-color: var(--entity-warning-color);
              --paper-item-icon-active-color:
                {% if states.alert|selectattr('attributes.category','eq','system')
                    |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-severe-color)
                {% else %} var(--state-icon-active-color)
                {% endif %}
              ;
            }

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: 'automation.system_*'
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      padding: 5
      head:
        entity: sensor.dummy
        name: 'System Automations'
        icon: mdi:sync-alert
        state: ''
        tap_action:
          action: none

  - type: buttons
    entities:
      - entity: hassio.host_reboot
        icon: mdi:restore-alert
        name: 'Reboot'
        tap_action:
          action: call-service
          confirmation:
            text: 'Are you sure you want to reboot the server?'
          service: hassio.host_reboot
    card_mod:
      style:
        hui-buttons-base $: |
          .ha-scrollbar {
            justify-content: center;
          }
card_mod:
  class: basic
