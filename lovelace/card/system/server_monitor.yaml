type: entities
title: Server Monitor
icon: mdi:server
card_mod:
  class: basic
entities:
  - type: custom:template-entity-row
    name: "Server Uptime: {{ states('sensor.server_uptime') }}"
    secondary: "Last Boot: {{ states('sensor.last_boot_date_time') }}"
    icon: mdi:clock-start

  - entity: sensor.local_ip
    name: IPV4
  - entity: sensor.ipv6_address_eth0
    name: IPV6

  - type: section
    label: Disk Use

  - entity: sensor.disk_use_percent_home
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if is_state('sensor.disk_status','critical') %} var(--entity-critical-color)
            {% elif is_state('sensor.disk_status','severe') %} var(--entity-severe-color)
            {% elif is_state('sensor.disk_status','warning') %} var(--entity-warning-color)
            {% elif is_state('sensor.disk_status','minor') %} var(--entity-minor-color)
            {% elif is_state('sensor.disk_status','ok') %} var(--entity-ok-color)
            {% else %} var(--state-icon-color)
            {% endif %}
          ;
        }

  - type: custom:fold-entity-row
    head:
      entity: sensor.hassio_db
      name: 'Hassio Database'
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.hassio_db')|int(0) > 1000 %} var(--entity-severe-color)
              {% elif states('sensor.hassio_db')|int(0) > 750 %} var(--entity-warning-color)
              {% else %} var(--entity-ok-color)
              {% endif %}
            ;
          }
    padding: 5
    entities:
      - type: call-service
        service: script.purge_database
        name: 'Purge HASS Database'
        action_name: PURGE

  - entity: sensor.home_assistant_log
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if states('sensor.home_assistant_log')|int(0) > 100 %} var(--entity-severe-color)
            {% elif states('sensor.home_assistant_log')|int(0) > 50 %} var(--entity-warning-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:template-entity-row
    name: 'Backup Disk Use'
    icon: mdi:folder-sync
    state: "{{ state_attr('sensor.backup_state','size_in_home_assistant') }}"
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {% if state_attr('sensor.backup_state','size_in_home_assistant')[:-2]|int(-1) > 11 %} var(--entity-warning-color)
            {% elif state_attr('sensor.backup_state','size_in_home_assistant')[:-2]|int(-1) > 8 %} var(--entity-minor-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:fold-entity-row
    head:
      entity: sensor.alarm_snapshots
      name: 'Alarm Snapshot Disk Use'
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.alarm_snapshots')|int(-1) > 100 %} var(--entity-warning-color)
              {% elif states('sensor.alarm_snapshots')|int(-1) > 50 %} var(--entity-minor-color)
              {% else %} var(--entity-ok-color)
              {% endif %}
            ;
          }
    padding: 5
    entities:
      - type: call-service
        service: shell_command.alarm_snapshots_purge_all
        icon: mdi:database-sync
        name: Purge Motion Capture
        action_name: PURGE

  - type: custom:fold-entity-row
    head:
      entity: sensor.tts
      name: 'TTS Cache Disk Use'
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.tts')|int(-1) > 100 %} var(--entity-warning-color)
              {% elif states('sensor.tts')|int(-1) > 50 %} var(--entity-minor-color)
              {% else %} var(--entity-ok-color)
              {% endif %}
            ;
          }
    padding: 5
    entities:
      - type: call-service
        service: shell_command.tts_purge_all
        icon: mdi:database-sync
        name: 'Purge TTS Cache'
        action_name: PURGE

  - type: section
    label: Settings
  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.low_battery_alert
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.low_battery_alert','on') %} var(--entity-critical-color)
              {% else %} var(--state-icon-color)
              {% endif %}
              ;
          }
    entities:
      - entity: input_number.battery_alert_threshold

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','system')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.system_alerts
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                  {% if is_state('input_boolean.system_alerts','off') %} var(--entity-warning-color)
                  {% else %} var(--state-icon-color)
                  {% endif %}
              ;
              --paper-item-icon-active-color:
                {% if states.alert|selectattr('attributes.category','eq','system')
                    |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-severe-color)
                {% else %} var(--state-icon-active-color)
                {% endif %}
              ;
            }
        padding: 5

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: 'automation.system_*'
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.system_automation
        state_color: true
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.system_automation','off') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }
        padding: 5
footer:
  type: buttons
  entities:
    - entity: hassio.host_reboot
      icon: mdi:restore-alert
      name: Reboot
      tap_action:
        action: call-service
        confirmation:
          text: Are you sure you want to reboot the server?
        service: hassio.host_reboot
