###############################################################################
## TTS Settings
###############################################################################
type: entities
title: 'TTS Announcement Settings'
show_header_toggle: false
state_color: true
entities:
  - entity: input_boolean.tts_enabled
  - entity: input_boolean.hass_tts_enabled
  - entity: input_boolean.kiosk_tts_enabled
  - entity: input_boolean.jason_phone_tts_enabled
  - entity: input_boolean.sheri_phone_tts_enabled
  - entity: input_boolean.tts_playing

  - type: custom:fold-entity-row
    head:
      type: custom:template-entity-row
      name: 'TTS Services'
      icon: mdi:account-voice
    entities:
      - entity: input_select.tts_service
        name: 'TTS Service'

      - type: conditional
        conditions:
          - entity: input_select.tts_service
            state: 'Nabu Casa'
        row:
          entity: input_select.tts_cloud_voice

      - entity: input_select.tts_media_player
        name: 'Announcement Media Player'
      - entity: input_number.tts_volume
        name: 'Announcement Volume'

      - type: divider
      - entity: input_select.tts_media_player_quiet
        name: 'Quiet Time Media Player'
      - entity: input_number.tts_volume_quiet
        name: 'Quiet Time Volume'

      - type: divider
      - entity: input_select.tts_media_player_night
        name: 'Night Mode Media Player'
      - entity: input_number.tts_volume_night
        name: 'Night Mode Volume'

      - type: divider
      - entity: input_select.tts_media_player_alert
      - entity: input_number.tts_volume_alert

  - type: custom:auto-entities
    filter:
      template: "{{ states.alert|selectattr('attributes.category','eq','tts')|map(attribute='entity_id')|list }}"
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        entity: input_boolean.tts_alerts
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                  {% if is_state('input_boolean.tts_alerts','on') and states.alert|selectattr('attributes.category','eq','tts')
                      |selectattr('state','ne','idle')|list|count > 0 %} var(--entity-critical-color)
                  {% elif is_state('input_boolean.tts_alerts','off') %} var(--entity-warning-color)
                  {% else %} var(--state-icon-color)
                  {% endif %}
                ;
            }
      padding: 5

  - type: custom:auto-entities
    filter:
      include:
        - entity_id: 'automation.tts_*'
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      head:
        type: custom:template-entity-row
        icon: mdi:account-voice
        name: 'TTS Automations'
      padding: 0

  - type: buttons
    entities:
      - entity: script.tts_play_last_message
        name: 'Last Message'
        show_name: true
        show_icon: true
        tap_action:
          action: call-service
          service: script.tts_play_last_message

      - entity: script.tts_play_saved_messages
        name: 'Saved Messages'
        show_name: true
        show_icon: true
        tap_action:
          action: call-service
          service: script.tts_play_saved_messages
    card_mod:
      style:
        hui-buttons-base $: |
          .ha-scrollbar {
            justify-content: center;
          }
card_mod:
  class: basic
