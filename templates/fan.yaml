###################################################################################################
## Templates - Fan
###################################################################################################
- binary_sensor:
    - name: "Fan On"
      unique_id: fan_on
      icon: mdi:fan
      device_class: running
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {{ expand('group.fans') | selectattr('state', 'eq', 'on')
              | map(attribute='entity_id') | sort }}

    - name: "Fan In Use"
      unique_id: fan_in_use
      icon: mdi:fan
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {{ expand('group.fan_timers') | selectattr('state', 'ne', 'idle')
              | map(attribute='entity_id') | sort }}

    - name: "Unavailable Fans"
      unique_id: unavailable_fans
      icon: mdi:fan
      device_class: problem
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: "{{ expand('group.fans') | map(attribute='entity_id') | reject('has_value') | sort }}"

    - name: "Schedule Fan"
      unique_id: schedule_fan
      icon: mdi:fan-auto
      state: >
        {{ is_state('input_boolean.fan_schedule', 'on')
            and is_state('timer.fan_schedule_duration', 'active') }}

    - name: "Climate Fan"
      unique_id: climate_fan
      icon: mdi:fan-auto
      state: >
        {{ is_state('binary_sensor.house_furnace', 'on')
            and is_state('input_boolean.climate_fan', 'on') }}

    - name: "Bathroom Sensor Fan"
      unique_id: bathroom_sensor_fan # used for UI
      icon: mdi:fan-auto
      state: >
        {{ is_state('binary_sensor.bathroom_humidity_fan', 'on')
            or is_state('binary_sensor.bathroom_mold_fan', 'on')
            or is_state('binary_sensor.bathroom_temperature_fan', 'on') }}

    - name: "Bathroom Humidity Fan"
      unique_id: bathroom_humidity_fan
      icon: mdi:water-alert
      device_class: moisture
      delay_off: 300 # will run for at least 5 minutes
      state: >
        {% set indoor = states('sensor.indoor_humidity') | int('unknown') %}
        {% set bath = states('sensor.bathroom_sensor_humidity') | int %}
        {% set limit = states('input_number.bathroom_humidity_threshold') | int %}
        {% set change = states('sensor.bathroom_humidity_change') | int(-1) %}
        {{ change > 1 or (indoor < bath > limit if is_number(indoor) else bath > limit) }}
      availability: "{{ is_number(states('sensor.bathroom_sensor_humidity')) }}"

    - name: "Bathroom Mold Fan"
      unique_id: bathroom_mold_fan
      icon: mdi:mushroom
      device_class: moisture
      delay_off: 300 # will run for at least 5 minutes
      state: "{{ states('sensor.mold_indicator') | int > states('input_number.mold_risk_threshold') | int }}"
      availability: "{{ is_number(states('sensor.mold_indicator')) }}"

    # uses absolute value so we can use temp above or below (negative value)
    # adjusts for seasons - doesn't run if outside is colder than inside, vice versa for warmer outside
    # bathroom colder than thermostat temp diff, colder outside than thermostat - on
    # bathroom warmer than thermostat temp diff, warmer outside than thermostat - on
    - name: "Bathroom Temperature Fan"
      unique_id: bathroom_temperature_fan
      icon: mdi:thermometer-lines
      device_class: heat
      delay_off: 300 # run at least 5 minutes
      state: >
        {% set tempdiff = (states('sensor.bathroom_sensor_air_temperature') | int - states('sensor.indoor_temperature') | int | abs) %}
        {{ (states('sensor.bathroom_sensor_air_temperature') | int > states('input_number.high_temperature_threshold') | int)
            or (is_number(states('sensor.outdoor_temperature'))
              and ((states('sensor.bathroom_sensor_air_temperature') | int < states('input_number.low_temperature_threshold') | int)
              or (states('sensor.bathroom_sensor_air_temperature') | int < states('sensor.indoor_temperature') | int
                  and states('sensor.outdoor_temperature') | int < states('sensor.indoor_temperature') | int
                  and tempdiff >= states('input_number.bathroom_temperature_differential') | int)
              or (states('sensor.bathroom_sensor_air_temperature') | int > states('sensor.indoor_temperature') | int
                  and states('sensor.outdoor_temperature') | int > states('sensor.indoor_temperature') | int
                  and tempdiff >= states('input_number.bathroom_temperature_differential') | int))) }}
      availability: >
        {{ is_number(states('sensor.bathroom_sensor_air_temperature'))
            and is_number(states('sensor.indoor_temperature')) }}

    - name: "Living Room Temperature Fan"
      unique_id: living_room_temperature_fan
      icon: mdi:thermometer-lines
      device_class: heat
      delay_off: 300 # run at least 5 minutes
      state: >
        {{ states('sensor.living_room_sensor_temperature') | float
              > states('sensor.indoor_temperature') | float + 2
            or 'sensor.living_room_sensor_temperature'
              in state_attr('binary_sensor.indoor_high_temperature_alert', 'entity_id') }}
      availability: >
        {{ is_number(states('sensor.living_room_sensor_temperature'))
            and is_number(states('sensor.indoor_temperature'))
            and state_attr('binary_sensor.indoor_high_temperature_alert', 'entity_id') != none }}

    - name: "Bedroom Temperature Fan"
      unique_id: bedroom_temperature_fan
      icon: mdi:thermometer-lines
      device_class: heat
      delay_off: 300 # run at least 5 minutes
      state: >
        {{ states('sensor.bedroom_sensor_temperature') | float
              > states('sensor.indoor_temperature') | float + 2
            or 'sensor.bedroom_sensor_temperature'
              in state_attr('binary_sensor.indoor_high_temperature_alert', 'entity_id') }}
      availability: >
        {{ is_number(states('sensor.bedroom_sensor_temperature'))
            and is_number(states('sensor.indoor_temperature'))
            and state_attr('binary_sensor.indoor_high_temperature_alert', 'entity_id') != none }}
