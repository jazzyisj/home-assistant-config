###################################################################################################
## Templates - Climate
###################################################################################################
- button:
    - name: "Reset Thermostat"
      unique_id: reset_thermostat
      icon: mdi:thermostat
      press:
        - action: script.set_thermostat

- trigger:
    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: climate.house
      attribute: temperature
      to:

    - trigger: state
      entity_id: climate.house
      attribute: target_temp_low
      to:

    - trigger: state
      entity_id: climate.house
      attribute: target_temp_high
      to:
  condition:
    - condition: or
      conditions:
        - condition: numeric_state
          entity_id: climate.house
          attribute: temperature
          above: 0

        - condition: and
          conditions:
            - condition: numeric_state
              entity_id: climate.house
              attribute: target_temp_high
              above: 0

            - condition: numeric_state
              entity_id: climate.house
              attribute: target_temp_low
              above: 0

    - condition: state
      entity_id: script.set_thermostat
      state: "off"
  action:
    - variables:
        temp: >
          {% set climate = states('climate.house') %}
          {% set temp = state_attr('climate.house', 'temperature') %}
          {% set high = state_attr('climate.house', 'target_temp_high') %}
          {% set low = state_attr('climate.house', 'target_temp_low') %}
          {% set stored = states('input_number.thermostat_target_temperature') %}
          {% set outdoor = states('sensor.outdoor_temperature') %}
          {% if climate in ['heat', 'cool'] %}
            {{ temp if is_number(temp) else stored }}
          {% elif climate == 'heat_cool' %}
            {% if is_number(high) and is_number(low) and is_number(outdoor) %}
              {# determine if heat or a/c temp #}
              {% if outdoor | float > high | float %} {{ high }}
              {% else %} {{ low }}
              {% endif %}
            {# defaults to heat target if no outdoor temp #}
            {% else %} {{ low }}
            {% endif %}
          {# defaults to stored if climate off #}
          {% else %} {{ stored }}
          {% endif %}

    # don't set eco temps as target temp
    - if: "{{ state_attr('climate.house', 'preset_mode') != 'eco' }}"
      then:
        - action: input_number.set_value
          target:
            entity_id: input_number.thermostat_target_temperature
          data:
            value: "{{ temp }}"
  sensor:
    - name: "Indoor Temperature Target"
      unique_id: indoor_temperature_target
      device_class: temperature
      state_class: measurement
      unit_of_measurement: Â°C
      state: "{{ temp }}"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/1"
  binary_sensor:
    - name: "Nest Integration Connected"
      unique_id: nest_integration_connected
      picture: !secret NEST_ICON
      device_class: connectivity
      state: "{{ integration_entities('nest') | select('has_value') | list | count > 0 }}"

- binary_sensor:
    - name: "Nest Connected Alert"
      unique_id: nest_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.nest_integration_connected', 'off')
            and is_state('input_boolean.climate_alerts', 'on') }}

- binary_sensor:
    - name: "House Furnace"
      unique_id: house_furnace
      icon: mdi:thermostat
      device_class: running
      state: >
        {{ not state_attr('climate.house', 'hvac_action') in ['idle', none]
            or is_state_attr('climate.house', 'fan_mode', 'on') }}

    - name: "Indoor Low Temperature Alert"
      unique_id: indoor_low_temperature_alert
      icon: mdi:snowflake-alert
      device_class: cold
      delay_on: 900 # allow fans to come on, temp to stabalize
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {% set entities = namespace(value=[]) %}
          {% set sensors = state_attr('group.indoor_temperature_sensors', 'entity_id') %}
          {% if sensors != none %}
            {% set thresh = states('input_number.low_temperature_threshold') | float %}
            {% for item in sensors if is_number(states(item)) and states(item) | float <= thresh %}
              {% set entities.value = entities.value + [item] %}
            {% endfor %}
          {% endif %}
          {{ entities.value }}

    - name: "Indoor High Temperature Alert"
      unique_id: indoor_high_temperature_alert
      icon: mdi:sun-thermometer-outline
      device_class: heat
      delay_on: 900 # allow fans to come on, temp to stabalize
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {% set entities = namespace(value=[]) %}
          {% set sensors = state_attr('group.indoor_temperature_sensors', 'entity_id') %}
          {% if sensors != none %}
            {% set thresh = states('input_number.high_temperature_threshold') | float %}
            {% for item in sensors if is_number(states(item)) and states(item) | float >= thresh %}
              {% set entities.value = entities.value + [item] %}
            {% endfor %}
          {% endif %}
          {{ entities.value }}

    - name: "Indoor High Humidity Alert"
      unique_id: indoor_high_humidity_alert
      icon: mdi:water-alert
      device_class: moisture
      delay_on: 900 # allow fans to come on, humidity to stabalize
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {% set entities = namespace(value=[]) %}
          {% set sensors = state_attr('group.indoor_humidity_sensors', 'entity_id') %}
          {% if sensors != none %}
            {% set thresh = states('input_number.high_humidity_threshold') | float %}
            {% for item in sensors if is_number(states(item)) and states(item) | float >= thresh %}
              {% set entities.value = entities.value + [item] %}
            {% endfor %}
          {% endif %}
          {{ entities.value }}

    - name: "Bathroom Mold Risk Alert"
      unique_id: bathroom_mold_risk_alert
      icon: mdi:mushroom
      device_class: moisture
      delay_on: 3600
      state: >
        {{ states('sensor.mold_indicator') | int(-1)
              > states('input_number.mold_risk_threshold') | int
            and is_state('input_boolean.climate_alerts', 'on') }}

    - name: "Open Windows Alert"
      unique_id: open_windows_alert
      delay_on: 900
      state: >
        {{ 16 < states('sensor.outdoor_temperature') | float < 24.5
            and states('sensor.indoor_temperature_differential') | float(0) < 5
            and states('sensor.outdoor_humidity') | int < 80
            and is_state('binary_sensor.precipitation_active', 'off')
            and is_state('binary_sensor.air_quality_alert', 'off')
            and is_state('binary_sensor.asthma_risk_alert', 'off')
            and is_state('binary_sensor.allergy_risk_alert', 'off')
            and is_state('binary_sensor.someone_home', 'on')
            and not is_state('input_select.occupancy_mode', 'Night') }}
      availability: >
        {{ is_number(states('sensor.outdoor_temperature'))
            and is_number(states('sensor.outdoor_humidity')) }}

    - name: "Climate Window Door Open Alert"
      unique_id: climate_window_door_open_alert
      device_class: opening
      delay_on: 900
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {% if is_state('input_boolean.climate_alerts', 'on')
                and not is_state('input_select.climate_mode', 'off') %}
            {{ expand('group.door_alert_sensors')
                  | rejectattr('entity_id', 'contains', 'garage')
                  | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | sort
                + expand('group.window_alert_sensors') | selectattr('state', 'eq', 'on')
                  | map(attribute='entity_id') | sort }}
          {% endif %}

- sensor:
    # req for hvac runtime history stats
    - name: "Thermostat HVAC State"
      unique_id: thermostat_hvac_state
      device_class: enum
      state: "{{ state_attr('climate.house', 'hvac_action') }}"
      attributes:
        options: "{{ ['off', 'idle', 'heating', 'cooling'] }}"

    - name: "Indoor Temperature"
      unique_id: indoor_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: Â°C
      state: >
        {% if is_number(states('sensor.thermostat_temperature')) %}
          {% set def = states('sensor.thermostat_temperature') | float %}
        {% elif is_number(states('sensor.living_room_sensor_temperature')) %}
          {% set def = states('sensor.living_room_sensor_temperature') | float %}
        {% elif is_number(states('sensor.bedroom_sensor_temperature')) %}
          {% set def = states('sensor.bedroom_sensor_temperature') | float %}
        {% endif %}
        {{ average([states('sensor.thermostat_temperature') | float('unknown'),
            states('sensor.living_room_sensor_temperature') | float('unknown'),
            states('sensor.bedroom_sensor_temperature') | float('unknown')], def) | round(1) }}
      availability: >
        {{ is_number(states('sensor.thermostat_temperature'))
            or is_number(states('sensor.living_room_sensor_temperature'))
            or is_number(states('sensor.bedroom_sensor_temperature')) }}

    # indoor/outdoor temperature differeance
    - name: "Indoor Temperature Differential"
      unique_id: indoor_temperature_differential
      device_class: temperature
      state_class: measurement
      unit_of_measurement: Â°C
      state: >
        {% set indoor = states('sensor.indoor_temperature') | float %}
        {% set outdoor = states('sensor.outdoor_temperature') | float %}
        {{ (indoor - outdoor) | round(1) }}
      availability: >
        {{ is_number(states('sensor.indoor_temperature'))
            and is_number(states('sensor.outdoor_temperature')) }}

    - name: "Indoor Humidity"
      unique_id: indoor_humidity
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% if is_number(states('sensor.thermostat_humidity')) %}
          {% set def = states('sensor.thermostat_humidity') | int %}
        {% elif is_number(states('sensor.living_room_sensor_humidity')) %}
          {% set def = states('sensor.living_room_sensor_humidity') | int %}
        {% elif is_number(states('sensor.bedroom_sensor_humidity')) %}
          {% set def = states('sensor.bedroom_sensor_humidity') | int %}
        {% endif %}
        {{ average([states('sensor.thermostat_humidity') | int('unknown'),
            states('sensor.living_room_sensor_humidity') | int('unknown'),
            states('sensor.bedroom_sensor_humidity') | int('unknown')], def) | int }}
      availability: >
        {{ is_number(states('sensor.thermostat_humidity'))
            or is_number(states('sensor.living_room_sensor_humidity'))
            or is_number(states('sensor.bedroom_sensor_humidity')) }}

    # indoor/outdoor humidity differeance
    - name: "Indoor Humidity Differential"
      unique_id: indoor_humidity_differential
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set indoor = states('sensor.indoor_humidity') | int %}
        {% set outdoor = states('sensor.outdoor_humidity') | int %}
        {{ (indoor - outdoor) }}
      availability: >
        {{ is_number(states('sensor.indoor_humidity'))
            and is_number(states('sensor.outdoor_humidity')) }}

    - name: "Indoor Comfort Level"
      unique_id: indoor_comfort_level
      icon: mdi:thermometer-water
      device_class: enum
      state: >
        {% from 'weather.jinja' import dew_point_level %}
        {{ dew_point_level(states('sensor.indoor_dew_point')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import dew_point_level_options %}
          {{ dew_point_level_options() }}
      availability: "{{ is_number(states('sensor.indoor_dew_point')) }}"

    - name: "Climate Temperature Boost"
      unique_id: climate_temperature_boost
      icon: "{{ iif(states(this.entity_id) | int(-1) > -1, 'mdi:thermometer-plus', 'mdi:thermometer-minus') }}"
      state_class: measurement
      unit_of_measurement: "Â°C"
      state: >
        {% if is_state('input_boolean.climate_temperature_boost', 'on') %}
          {% set temp = states('sensor.outdoor_temperature') | int %}
          {% set humidity = states('sensor.outdoor_humidity') | int %}
          {% set temp_diff = states('sensor.indoor_temperature_differential') | int(0) %}
          {% set humidity_diff = states('sensor.indoor_humidity_differential') | int(0) %}
          {% set hvac_mode = states('climate.house') %}
          {% set cool = true if hvac_mode == 'cool' or (hvac_mode == 'heat_cool'
              and temp >= state_attr('climate.house', 'target_temp_high') | int) else false %}
          {% if not cool and is_state('binary_sensor.waketime_active', 'on')
              and temp < 5 %} {{ iif(temp < -5, 1.5, 1) }}
          {% elif cool and temp_diff | abs > 10 %} 1
          {% elif not cool and temp_diff | abs > 20 %} 1
          {% elif humidity > 80 %}{{ iif(cool,-1, 1.5) }}
          {% elif humidity_diff > 10 %}{{ iif(cool,-1, 1) }}
          {% else %} 0
          {% endif %}
        {% else %} 0
        {% endif %}
      availability: >
        {{ is_number(states('sensor.outdoor_temperature'))
            and is_number(states('sensor.outdoor_humidity'))
            and has_value('climate.house') }}
