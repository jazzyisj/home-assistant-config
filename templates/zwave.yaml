###################################################################################################
## Template - ZWave
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/5"
  binary_sensor:
    - name: "ZWave Network"
      unique_id: zwave_network
      picture: !secret ZWAVE_JS_ICON
      device_class: connectivity
      state: >
        {{ (is_state('binary_sensor.z_wave_js_running', 'on')
              or is_state('binary_sensor.z_wave_js_ui_running', 'on'))
            and is_state('sensor.zwave_controller_status', 'ready')
            and integration_entities('zwave_js') | select('has_value') | list | count > 0 }}

- binary_sensor:
    - name: "ZWave Network Alert"
      unique_id: zwave_network_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.zwave_network', 'off')
            and is_state('input_boolean.zwave_alerts', 'on') }}

    - name: "Offline ZWave Device Alert"
      unique_id: offline_zwave_device_alert
      icon: mdi:z-wave
      device_class: problem
      delay_on: 300
      state: >
        {{ states('sensor.offline_zwave_devices') | int(-1) > 0
            and is_state('input_boolean.zwave_alerts', 'on') }}

- sensor:
    - name: "Offline ZWave Devices"
      unique_id: offline_zwave_devices
      icon: mdi:z-wave
      state_class: measurement
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count if entities != none else -1 }}
      attributes:
        entity_id: >
          {% from 'hass.jinja' import ignored_device_entities %}
          {{ expand('group.zwave_node_sensors')
              | rejectattr('entity_id', 'in', ignored_device_entities())
              | rejectattr('entity_id', 'in', label_entities('ignored'))
              | selectattr('state', 'in', ['dead', 'unavailable', 'unknown'])
              | map(attribute="entity_id") | sort }}
        ping_buttons: >
          {{ expand(state_attr(this.entity_id, 'entity_id'))
              | map(attribute="object_id")
              | map('regex_replace', find='(.*)_node_status', replace='button.\\1_ping', ignorecase=False)
              | sort }}

    - name: "ZWave Status"
      unique_id: zwave_status
      icon: mdi:z-wave
      device_class: enum
      state: >
        {% if is_state('binary_sensor.zwave_network', 'off') %} critical
        {% elif states('sensor.offline_zwave_devices') | int(-1) > 0 %} warning
        {% else %} ok
        {% endif %}
      attributes:
        options: >
          {% from 'hass.jinja' import status_options %}
          {{ status_options() }}
