- binary_sensor:
    - name: 'Lutron Connected'
      unique_id: lutron_connected
      icon: "{{ 'mdi:lightbulb' if not states('light.living_room_potlights')|lower in ['unknown','unavailable','none'] else 'mdi:alert-circle' }}"
      device_class: connectivity
      state: "{{ states('light.living_room_potlights')|lower not in ['unknown','unavailable','none'] }}"

    - name: 'Lutron Connected Alert'
      unique_id: lutron_connected_alert
      icon: mdi:lightbulb
      state: >
        {{ is_state('binary_sensor.lutron_connected','off')
              and is_state('input_boolean.light_alerts','on')
              and is_state('input_boolean.startup_pending','off') }}

    - name: 'Lutron Bridge Connected'
      unique_id: lutron_bridge_connected
      icon: "{{ 'mdi:lightbulb' if not states('light.living_room_potlights')|lower in ['unknown','unavailable','none'] else 'mdi:alert-circle' }}"
      device_class: connectivity
      state: "{{ is_state('device_tracker.lutron_bridge','home') }}"

    - name: 'Lutron Bridge Connected Alert'
      unique_id: lutron_bridge_connected_alert
      icon: mdi:lightbulb
      delay_on:
        minutes: 15 # allow for temporary disconnections before alerting
      state: >
        {{ is_state('binary_sensor.lutron_bridge_connected','off')
            and is_state('input_boolean.light_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: 'Lights On'
      unique_id: lights_on
      icon: >
        {% if (is_state('binary_sensor.nighttime_auto_light','on')
              or is_state('binary_sensor.daytime_illuminance_light','on'))
            and is_state('binary_sensor.lights_on','on') %} mdi:lightbulb-on
        {% elif is_state('binary_sensor.nighttime_auto_light','on')
              or is_state('binary_sensor.daytime_illuminance_light','on') %} mdi:lightbulb-on-outline
        {% elif is_state('binary_sensor.lights_on','on') %} mdi:lightbulb
        {% else %} mdi:lightbulb-outline
        {% endif %}

      device_class: light
      state: >
        {% if state_attr('binary_sensor.lights_on','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.lights_on','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: >
          {{ states.light|selectattr('state','eq','on')
              |rejectattr('attributes.light_group','eq',true)
              |rejectattr('attributes.rgb_control','eq',true)
              |rejectattr('attributes.rgb_light','eq','slave')
              |rejectattr('attributes.type','eq','volume')
              |map(attribute='entity_id')|list }}

    - name: 'Light In Use'
      unique_id: light_in_use
      icon: mdi:light-switch
      state: >
        {% if state_attr('binary_sensor.light_in_use','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.light_in_use','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: "{{ states.timer|selectattr('attributes.type','eq','light')|selectattr('state','ne','idle')|map(attribute='entity_id')|list }}"

    - name: 'Nighttime Auto Light'
      unique_id: nighttime_auto_light
      icon: mdi:brightness-4 # https://www.home-assistant.io/cookbook/automation_sun/
      state: >
        {% set time = states('sensor.time') %}
        {% set sun = states('sensor.windsor_elevation')|float('unknown') %}
          {% if is_state('input_boolean.auto_light_override','on') %} true
          {% else %}
            {% if is_number(sun) %}
              {{ is_state('input_boolean.auto_light_enabled','on')
                  and ((sun < states('input_number.lighting_on_sun_elevation')|int(0) and time > '12:00')
                    or (sun < states('input_number.lighting_off_sun_elevation')|int(0) and time < '12:00')) }}
            {% endif %}
          {% endif %}

    - name: 'Daytime Illuminance Light'
      unique_id: daytime_illuminance_light
      icon: mdi:brightness-5
      state: >
        {% if is_number(states('sensor.outdoor_illuminance')) %}
          {{ is_state('input_boolean.illuminance_light_enabled','on')
              and is_state('binary_sensor.nighttime_auto_light','off')
              and states('sensor.outdoor_illuminance')|int(0) <= states('input_number.illuminance_threshold')|int(0) }}
        {% endif %}

    - name: 'Bathroom Illuminance Light'
      unique_id: bathroom_illuminance_light
      icon: mdi:brightness-5
      state: >
        {% if is_state('binary_sensor.nighttime_auto_light','on')
            or is_state('binary_sensor.daytime_illuminance_light','on') %} true
        {% else %}
          {% if is_number(states('sensor.bathroom_sensor_illuminance')) %}
            {{ states('sensor.bathroom_sensor_illuminance')|int(0) <= states('input_number.bathroom_illuminance_threshold')|int(0) }}
          {% endif %}
        {% endif %}

    - name: 'Light Scene Active'
      unique_id: light_scene_active
      icon: mdi:movie-filter
      state: >
        {{ is_state('script.morning_lights','on')
            or is_state('script.bedtime_lights','on')
            or is_state('binary_sensor.scene_active','on') }}

- sensor:
    - name: 'Flux Color General'
      unique_id: flux_color_general
      icon: mdi:google-nearby # used for flux setting template entity in UI
      state: >
        {% if is_state('switch.light_flux_dining_room','on') %}
          {{ states('sensor.flux_color_dining_room') }}
        {% elif is_state('switch.light_flux_bathroom','on') %}
          {{ states('sensor.flux_color_bathroom') }}
        {% elif is_state('switch.light_flux_bedroom','on') %}
          {{ states('sensor.flux_color_bedroom') }}
        {% else %} var(--state-icon-color)
        {% endif %}

    - name: 'Flux Color Dining Room'
      unique_id: flux_color_dining_room
      state: >
        {% if is_state('switch.light_flux_dining_room','on') %}
            {% if is_state('light.dining_room_rgb_light','on') %}
              rgb{{ state_attr('light.dining_room_rgb_light','rgb_color') }}
            {% else %} var(--state-icon-color)
            {% endif %}
        {% else %} var(--state-icon-color)
        {% endif %}

    - name: 'Flux Color Bathroom'
      unique_id: flux_color_bathroom
      state: >
        {% if is_state('switch.light_flux_bathroom','on') %}
            {% if is_state('light.bathroom_vanity_rgb_light','on') %}
              rgb{{ state_attr('light.bathroom_vanity_rgb_light','rgb_color') }}
            {% else %} var(--state-icon-color)
            {% endif %}
        {% else %} var(--state-icon-color)
        {% endif %}

    - name: 'Flux Color Bedroom'
      unique_id: flux_color_bedroom
      state: >
        {% if is_state('switch.light_flux_bedroom','on') %}
            {% if is_state('light.bedroom_rgb_light','on') %}
              rgb{{ state_attr('light.bedroom_rgb_light','rgb_color') }}
            {% else %} var(--state-icon-color)
            {% endif %}
        {% else %} var(--state-icon-color)
        {% endif %}

    - name: 'Day Night'
      unique_id: day_night
      icon: "{{ 'mdi:weather-sunny' if is_state('sun.sun','above_horizon') else 'mdi:weather-night' }}"
      state: "{{ 'Day' if is_state('sun.sun','above_horizon') else 'Night' }}"

    - name: 'Sun Rise'
      unique_id: sunrise
      icon: mdi:weather-sunset-up
      state: "{{ states('sensor.windsor_sunrise')|as_timestamp|timestamp_custom('%-I:%M %p','true','unknown') }}"

    - name: 'Sun Set'
      unique_id: sunset
      icon: mdi:weather-sunset-down
      state: "{{ states('sensor.windsor_sunset')|as_timestamp|timestamp_custom('%-I:%M %p','true','unknown') }}"

    # https://community.home-assistant.io/t/outdoor-illuminance-template-sensor/228581
    - name: 'Outdoor Illuminance'
      unique_id: outdoor_illuminance #IDEA add cloud cover factor
      device_class: illuminance
      unit_of_measurement: lx
      state: |
        {%- set sun_factor = state_attr('sensor.outdoor_illuminance','sun_factor') %}
        {%- set condition_factor = state_attr('sensor.outdoor_illuminance','condition_factor') %}
        {# Take an educated guess #}
        {%- set illuminance = (sun_factor|float(0) * condition_factor|float(0))|round %}
        {%- set illuminance = 10 if illuminance < 10 else illuminance %}
        {{ illuminance }}
      attributes:
        current_condition: |
          {%- set factors = namespace(current_condition='') %}
          {# Retrieve the current condition and normalize the value #}
          {%- set weather_sensors = ['sensor.current_condition'] %}
          {%- for sensor in weather_sensors if states(sensor) != 'unknown' and factors.current_condition == '' %}
            {%- set factors.current_condition = states(sensor) %}
          {%- endfor %}
          {%- set current_condition = factors.current_condition|lower|replace('light rain','rainy')|replace('partly cloudy w/ ','')|replace('mostly cloudy w/ ','')|replace('freezing','')|replace('and','')|replace('-',' ')|replace('_',' ')|replace('(','')|replace(')','')|replace(' ','') %}
          {{ current_condition }}
        condition_factor: |
          {% set factors = namespace(condition='') %}
          {% set current_condition = state_attr('sensor.outdoor_illuminance','current_condition') %}
          {%- set condition_factors = {
            '10000': ('clear','clearnight','sunny','windy','exceptional'),
            '7500': ('partlycloudy','partlysunny','mostlysunny','mostlyclear','hazy','hazysunshine','intermittentclouds'),
            '2500': ('cloudy','mostlycloudy'),
            '1000': ('fog','rainy','showers','pouring','snowy','snowyheavy','snowyrainy','flurries','chanceflurries','chancerain','chancesleet','drearyovercast','sleet'),
            '200': ('hail','lightning','tstorms')
          } %}
          {%- for factor in condition_factors if current_condition in condition_factors[factor] %}
            {%- set factors.condition = factor %}
          {%- endfor %}
          {{ factors.condition }}
        sun_factor: |
          {% set factors = namespace(sun='') %}
          {%- set right_now = now()|as_timestamp %}
          {%- set sunrise = states('sensor.windsor_sunrise')|as_timestamp %}
          {%- set sunrise_begin = states('sensor.windsor_dawn')|as_timestamp %}
          {%- set sunrise_end = sunrise + (40 * 60) %}
          {%- set sunset = states('sensor.windsor_sunset')|as_timestamp %}
          {%- set sunset_begin = sunset - (40 * 60) %}
          {%- set sunset_end = states('sensor.windsor_dusk')|as_timestamp %}
          {%- if sunrise_end < right_now and right_now < sunset_begin %}
            {%- set factors.sun = 1 %}
          {%- elif sunset_end < right_now or right_now < sunrise_begin %}
            {%- set factors.sun = 0 %}
          {%- elif right_now <= sunrise_end %}
            {%- set factors.sun = (right_now - sunrise_begin) / (60*60) %}
          {%- else %}
            {%- set factors.sun = (sunset_end - right_now) / (60*60) %}
          {%- endif %}
          {{ 1 if factors.sun > 1 else factors.sun }}
