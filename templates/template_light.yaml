###############################################################################
## Templates - Lights
###############################################################################
- button:
    - name: "Reset Notification LEDs"
      unique_id: reset_notification_leds
      icon: mdi:alarm-light
      press:
        - service: script.led_reset

- binary_sensor:
    - name: "Lights On"
      unique_id: lights_on
      icon: >
        {% if (is_state('binary_sensor.nighttime_illuminance_lights','on')
              or is_state('binary_sensor.daytime_illuminance_lights','on'))
            and is_state('binary_sensor.lights_on','on') %} mdi:lightbulb-on
        {% elif is_state('binary_sensor.nighttime_illuminance_lights','on')
              or is_state('binary_sensor.daytime_illuminance_lights','on') %} mdi:lightbulb-on-outline
        {% elif is_state('binary_sensor.lights_on','on') %} mdi:lightbulb
        {% else %} mdi:lightbulb-outline
        {% endif %}
      device_class: light
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ false if entities == none else entities|count > 0 }}
      attributes:
        entity_id: "{{ expand('group.lights')|selectattr('state','eq','on')|map(attribute='entity_id')|list|sort }}"

    - name: "Unavailable Lights"
      unique_id: unavailable_lights
      icon: mdi:lightbulb
      device_class: problem
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ false if entities == none else entities|count > 0 }}
      attributes:
        entity_id: >
          {{ states.light
              |selectattr('attributes.type','defined')
              |selectattr('attributes.type','in',['switch','dimmer'])
              |map(attribute='entity_id')|reject('has_value')|list|sort }}

    - name: "Light In Use"
      unique_id: light_in_use
      icon: mdi:light-switch
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ false if entities == none else entities|count > 0 }}
      attributes:
        entity_id: >
          {{ expand('group.light_timers')|selectattr('state','ne','idle')
              |map(attribute='entity_id')|list|sort }}

    # delay on/off prevent trigger when ill sensor <> threshold rapidly
    - name: "Daytime Illuminance Lights"
      unique_id: daytime_illuminance_lights
      icon: mdi:brightness-7
      delay_on:
        minutes: 2
      delay_off:
        minutes: 15
      state: >
        {% if is_number(states('sensor.outdoor_illuminance')) %}
          {{ is_state('input_boolean.day_lights_enabled','on')
              and is_state('binary_sensor.nighttime_illuminance_lights','off')
              and states('sensor.outdoor_illuminance')|int(-1)
                <= states('input_number.day_illuminance_threshold')|int }}
        {% endif %}

    # delay on/off prevent trigger when ill sensor <> threshold rapidly
    # elevation - lights on only after noon, lights off only before noon
    - name: "Nighttime Illuminance Lights"
      unique_id: nighttime_illuminance_lights
      icon: mdi:brightness-4
      delay_on: 900
      delay_off: 900
      state: >
        {% if is_state('input_boolean.night_lights_override','on') %} true
        {% elif is_state('input_boolean.night_lights_enabled','on') %}
          {% set time = states('sensor.time') %}
          {% set sun = state_attr('sun.sun','elevation')|float(-1) %}
            {{ ((sun < states('input_number.lights_on_sun_elevation')|int and time > '12:00')
                  or (sun < states('input_number.lights_off_sun_elevation')|int and time < '12:00'))
                and (states('sensor.outdoor_illuminance')|int(-1)
                < states('input_number.night_illuminance_threshold')|int) }}
        {% else %} false
        {% endif %}

    # delay on/off prevent trigger when ill sensor <> threshold rapidly
    - name: "Bathroom Illuminance Lights"
      unique_id: bathroom_illuminance_lights
      icon: mdi:brightness-4
      delay_on:
        minutes: 2
      delay_off:
        minutes: 15
      state: >
        {% if is_state('binary_sensor.nighttime_illuminance_lights','on')
            or is_state('binary_sensor.daytime_illuminance_lights','on') %} true
        {% else %}
          {% if is_number(states('sensor.bathroom_sensor_illuminance')) %}
            {{ states('sensor.bathroom_sensor_illuminance')|int(-1)
                <= states('input_number.bathroom_illuminance_threshold')|int }}
          {% endif %}
        {% endif %}

    - name: "Bathroom Lights Manual Mode"
      unique_id: bathroom_lights_manual_mode
      icon: mdi:brightness-auto
      state: >
        {% set manual = state_attr('switch.adaptive_lighting_bathroom_lights','manual_control') %}
        {% if manual == none %} false
        {% else %}
          {{ 'light.bathroom_vanity_light_rgb_bulb_1' in manual
                or 'light.bathroom_vanity_light_rgb_bulb_2' in manual }}
        {% endif %}

- sensor:
    - name: "Day Night"
      unique_id: day_night
      icon: "{{ 'mdi:weather-sunny' if is_state('sun.sun','above_horizon') else 'mdi:weather-night' }}"
      state: "{{ 'Day' if is_state('sun.sun','above_horizon') else 'Night' }}"

    - name: "Outdoor Illuminance"
      unique_id: outdoor_illuminance
      icon: mdi:brightness-7
      device_class: illuminance
      state_class: measurement
      unit_of_measurement: lx
      state: >
        {% if is_number(states('sensor.weatherflow_brightness')) %}
          {{ states('sensor.weatherflow_brightness')|float }}
        {% elif is_number(states('sensor.tempest_st_00057689_illuminance')) %}
          {{ states('sensor.tempest_st_00057689_illuminance')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if is_number(states('sensor.weatherflow_visibility')) %} Weatherflow Cloud
          {% elif is_number(states('sensor.tempest_st_00057689_illuminance')) %} Weatherflow
          {% endif %}
      availability: >
        {{ is_number(states('sensor.weatherflow_brightness'))
            or is_number(states('sensor.tempest_st_00057689_illuminance')) }}
