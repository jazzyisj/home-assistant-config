###############################################################################
## Templates - Schedule
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: todo.hass_ideas
  action:
    - service: todo.get_items
      target:
        entity_id: todo.hass_ideas
      response_variable: mylist
  sensor:
    - name: "HASS Ideas"
      unique_id: hass_ideas
      icon: mdi:calendar-star
      state: "{{ mylist['todo.hass_ideas']['items'] | count }}"
      attributes:
        items: >
          {%- for item in mylist['todo.hass_ideas']['items'] %}
            {{ item }}
          {%- endfor %}

- binary_sensor:
    - name: "Waketime Active"
      unique_id: waketime_active
      icon: mdi:weather-sunset-up
      state: >
        {% if is_state('binary_sensor.someone_home', 'on') %}
          {% set waketime = states('sensor.waketime_today') | as_datetime
              if has_value('sensor.waketime_today') else none %}
          {% if is_state('script.waketime', 'on') %} true
          {% elif waketime != none %}
            {{ now() > waketime - timedelta(minutes=30)
                and now() < waketime + timedelta(minutes=states('input_number.media_preset_wake_time') | int) }}
          {% endif %}
        {% endif %}

    # bedtime script or delay timer on, or after bedtime but not night mode
    # waketime takes precedence
    - name: "Bedtime Active"
      unique_id: bedtime_active
      icon: "{{ 'mdi:chevron-up-circle' if is_state('input_boolean.bedtime_delayed', 'on') else 'mdi:bed-clock' }}"
      state: >
        {% if is_state('binary_sensor.someone_home', 'on')
            and not is_state('script.waketime', 'on') %}
          {% set bedtime = states('sensor.bedtime_today') | as_datetime
              if has_value('sensor.bedtime_today') else none %}
          {% if is_state('script.bedtime', 'on')
              or not is_state('timer.bedtime_delay', 'idle') %} true
          {% elif bedtime != none %}
              {{ now() >= bedtime - timedelta(minutes=states('input_number.bedtime_warning_time') | int)
                  and now() <= bedtime + timedelta(hours=2) }}
          {% endif %}
        {% endif %}

    - name: "Night Time"
      unique_id: night_time
      icon: mdi:weather-night
      delay_off: 5 # prevent on/off toggle on date changes
      state: >
        {% set bedtime = states('sensor.bedtime_today') | as_datetime
            if has_value('sensor.bedtime_today') else today_at(states('input_datetime.weekend_bedtime')) %}
        {% set waketime = states('sensor.waketime_today') | as_datetime
            if has_value('sensor.waketime_today') else today_at(states('input_datetime.house_waketime')) %}
        {{ now() < waketime
            if now() > today_at(states('input_datetime.day_reset'))
              else bedtime < now()  }}

    - name: "Quiet Time"
      unique_id: quiet_time
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:volume-low', 'mdi:volume-high') }}"
      delay_off: 5 # prevent on/off toggle on date changes
      state: >
        {% if is_state('input_boolean.quiet_time_override', 'on') %} true
        {% elif is_state('input_boolean.quiet_time_enabled', 'on') %}
          {% if is_state('binary_sensor.scene_active', 'on') %} false
          {% else %}
            {% if has_value('sensor.quiet_time_start') and has_value('sensor.quiet_time_end') %}
              {{ states('sensor.quiet_time_start') | as_datetime
                  <= now() < states('sensor.quiet_time_end') | as_datetime }}
            {% endif %}
          {% endif %}
        {% endif %}

    - name: "Reminder Active"
      unique_id: reminder_active
      state: >
        {{ is_state('input_boolean.dexter_medication_active', 'on')
            or is_state('input_boolean.maddie_mealtime_active', 'on')
            or is_state('input_boolean.jason_medication_active', 'on')
            or is_state('input_boolean.hot_tub_maintenance_active', 'on')
            or is_state('input_boolean.water_plants_active', 'on') }}

    - name: "Reminder LED Alert"
      unique_id: reminder_led_alert
      state: >
        {{ is_state('binary_sensor.reminder_active', 'on')
            or is_state('input_boolean.garbage_alert', 'on')
            or is_state('input_boolean.recycle_alert', 'on')
            or is_state('input_boolean.yardwaste_alert', 'on') }}

- sensor:
    # set start back 1 day if start > end (bedtime today when now > day_reset)
    - name: "Quiet Time Start"
      unique_id: quiet_time_start
      device_class: timestamp
      state: >
        {% if is_state('input_boolean.quiet_time_enabled', 'on')
            and has_value('sensor.quiet_time_end') %}
          {% if is_state('input_boolean.quiet_time_bedtime_sync', 'on')
              and has_value('sensor.bedtime_today') %}
            {% set start = states('sensor.bedtime_today') | as_datetime %}
          {% else %} {% set start = today_at(states('input_datetime.quiet_time_start')) %}
          {% endif %}
          {% set end = states('sensor.quiet_time_end') | as_datetime %}
          {% set start = start - timedelta(minutes=states('input_number.quiet_minutes_before_bedtime') | int) %}
          {{ start - timedelta(days=1) if start > end else start }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # set end +1 day if now > end (waketime + minutes after)
    - name: "Quiet Time End"
      unique_id: quiet_time_end
      device_class: timestamp
      state: >
        {% if is_state('input_boolean.quiet_time_enabled', 'on') %}
          {% if is_state('input_boolean.quiet_time_bedtime_sync', 'on') and has_value('sensor.waketime_today') %}
            {% set end = states('sensor.waketime_today') | as_datetime %}
          {% else %}
            {% set end = today_at(states('input_datetime.quiet_time_end')) %}
          {% endif %}
          {% set end = end + timedelta(minutes=states('input_number.quiet_minutes_after_waketime') | int) %}
          {{ end + timedelta(days=1) if end < now() else end }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "TOD Greeting"
      unique_id: tod_greeting
      state: >
        {% set time = states('sensor.time') %}
        {{ 'morning' if '02:00' <= time < '12:00' else 'afternoon'
            if '12:00' <= time < '18:00' else 'evening' }}

    - name: "TOD Goodbye"
      unique_id: tod_goodbye
      state: >
        {% set time = states('sensor.time') %}
        {{ 'day' if '04:00' < time <= '12:00' else 'afternoon'
            if '12:00' < time < '17:00' else 'night' }}

    - name: "Time Trigger Shift"
      unique_id: time_trigger_shift # used in reminders
      state: >
        {% if is_state('sensor.work_shift_today', 'Days') and is_state('binary_sensor.work_today', 'on') %} days
        {% elif is_state('sensor.work_shift_today', 'Afternoons') and is_state('binary_sensor.work_today', 'on') %} afts
        {% else %} wknd
        {% endif %}

    - name: "Next Waketime"
      unique_id: next_waketime
      device_class: timestamp
      icon: mdi:weather-sunset-up
      state: >
        {% set wake_tomorrow = none %}
        {% set use_alarms = false %}
        {% set reset = today_at(states('input_datetime.day_reset')) %}
        {% set house = today_at(states('input_datetime.house_waketime')) %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% set wake_today = states('sensor.waketime_today') | as_datetime
          if has_value('sensor.waketime_today') else house %}
        {% set days = today_at(states('input_datetime.days_waketime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_waketime')) %}
        {% set work_tomorrow = is_state('binary_sensor.work_tomorrow', 'on') %}
        {% set set_alarms = state_attr('sensor.alarm_clock_next_alarm', 'set_alarms') %}
        {% if is_state('input_select.occupancy_mode', 'Guest') and is_state('input_boolean.guest_morning', 'on') %}
          {% set wake_tomorrow = guest %}
        {% elif work_tomorrow and is_state('input_boolean.workday_morning', 'on') %}
          {% set wake_tomorrow = afts if is_state('sensor.work_shift_tomorrow', 'Afternoons') else days %}
          {% set use_alarms = true %}
        {% elif not work_tomorrow and is_state('input_boolean.weekend_morning', 'on') %}
          {% set wake_tomorrow = wknd %}
          {% set use_alarms = true %}
        {% else %}
          {% set wake_tomorrow = house if is_state('input_boolean.house_wakeup', 'on') else none %}
        {% endif %}
        {% if wake_tomorrow != none %}
          {% set wake_tomorrow = wake_tomorrow + timedelta(days=1)
              if wake_tomorrow < now() or wake_tomorrow < reset else wake_tomorrow %}
          {% if use_alarms and set_alarms != none %}
            {% set tomorrow_alarms = namespace(value=[]) %}
            {% for item in set_alarms %}
              {# select set alarms within 6 hours of tomorrow wake time #}
              {% if ((wake_tomorrow | as_timestamp - item) | abs <= 21600) %}
                {% set tomorrow_alarms.value = tomorrow_alarms.value + [item] %}
              {% endif %}
            {% endfor %}
            {# set next wake_tomorrow to next alarm - wake_alarms(min) #}
            {% if tomorrow_alarms.value | count > 0 %}
              {% set wake_tomorrow = tomorrow_alarms.value | min | as_datetime %}
            {% endif %}
          {% endif %}
        {% endif %}
        {{- wake_tomorrow if now() > wake_today else wake_today -}}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Waketime Today"
      unique_id: waketime_today
      device_class: timestamp
      icon: mdi:weather-sunset-up
      state: >
        {% set waketime = none %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% if is_state('input_select.occupancy_mode', 'Guest') %}
          {% set waketime = guest if is_state('input_boolean.guest_morning', 'on') else none %}
        {% else %}
          {% set days = today_at(states('input_datetime.days_waketime')) %}
          {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
          {% set wknd = today_at(states('input_datetime.weekend_waketime')) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% if is_state('binary_sensor.work_today', 'on') and is_state('input_boolean.workday_morning', 'on') %}
            {% set waketime = afts if is_state('sensor.work_shift_today', 'Afternoons') else days %}
          {% elif is_state('binary_sensor.work_today', 'off') and is_state('input_boolean.weekend_morning', 'on') %}
            {% set waketime = wknd %}
          {% elif is_state('input_boolean.house_wakeup', 'on') %}
            {% set waketime = house %}
          {% else %} {% set waketime = none %}
          {% endif %}
          {% if waketime != none %}
            {% set waketime = waketime if waketime > day_reset < now() else waketime - timedelta(days=1) %}
          {% endif %}
        {% endif %}
        {{ waketime }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Next Bedtime"
      unique_id: next_bedtime
      device_class: timestamp
      icon: mdi:bed-clock
      state: >
        {% set waketime = states('sensor.waketime_today') | as_datetime
            if has_value('sensor.waketime_today') else today_at(states('input_datetime.house_waketime')) %}
        {% set days = today_at(states('input_datetime.days_bedtime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_bedtime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_bedtime')) %}
        {% set guest = today_at(states('input_datetime.guest_bedtime')) %}
        {% if is_state('input_select.occupancy_mode', 'Guest') %}
          {% set bedtime = today_at(states('input_datetime.guest_bedtime'))
              if is_state('input_boolean.guest_night', 'on') else days %}
        {% else %}
          {% if is_state('binary_sensor.work_tomorrow', 'on') and is_state('input_boolean.workday_night', 'on') %}
            {% set bedtime = afts if is_state('sensor.work_shift_tomorrow', 'Afternoons') else days %}
          {% else %}
            {% set bedtime = wknd if is_state('binary_sensor.work_tomorrow', 'off')
                and is_state('input_boolean.weekend_night', 'on') else days %}
          {% endif %}
          {% if bedtime < waketime < now() %} {% set bedtime = bedtime + timedelta(days=1) %}
          {% elif bedtime > waketime > now() %} {% set bedtime = bedtime - timedelta(days=1) %}
          {% endif %}
        {% endif %}
        {{ bedtime.isoformat() if bedtime > now() else bedtime + timedelta(days=1) }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # switches at day_reset, should be same as next bedtime until bedtime_today < day_reset
    - name: "Bedtime Today"
      unique_id: bedtime_today
      device_class: timestamp
      icon: mdi:bed-clock
      state: >
        {% set days = today_at(states('input_datetime.days_bedtime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_bedtime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_bedtime')) %}
        {% set guest = today_at(states('input_datetime.guest_bedtime')) %}
        {% set day_reset = today_at(states('input_datetime.day_reset')) %}
        {% if is_state('input_select.occupancy_mode', 'Guest') %}
          {% set bedtime = today_at(states('input_datetime.guest_bedtime'))
              if is_state('input_boolean.guest_night', 'on') else days %}
        {% else %}
          {% if is_state('binary_sensor.work_tomorrow', 'on') and is_state('input_boolean.workday_night', 'on') %}
            {% set bedtime = afts if is_state('sensor.work_shift_tomorrow', 'Afternoons') else days %}
          {% else %}
            {% set bedtime = wknd if is_state('binary_sensor.work_tomorrow', 'off')
                and is_state('input_boolean.weekend_night', 'on') else none %}
          {% endif %}
          {% if bedtime != none %}
            {% set bedtime = bedtime - timedelta(days=1) if bedtime > today_at('12:00') and now() < day_reset else bedtime %}
            {% set bedtime = bedtime + timedelta(days=1) if bedtime < day_reset < now() else bedtime %}
          {% endif %}
        {% endif %}
        {{ bedtime }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Bedtime Warning"
      unique_id: bedtime_warning
      device_class: timestamp
      icon: mdi:bed-clock
      state: >
        {% set bedtime_warning = none %}
        {% set bedtime = states('sensor.bedtime_today') | as_datetime
            if has_value('sensor.bedtime_today') else none %}
        {% if bedtime != none %}
          {% set bedtime_warning = bedtime - timedelta(minutes = states('input_number.bedtime_warning_time') | int) %}
        {% endif %}
        {{ bedtime_warning }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Delayed Bedtime"
      unique_id: delayed_bedtime
      device_class: timestamp
      icon: mdi:bed-clock
      state: >
        {% set bedtime = states('sensor.bedtime_today') | as_datetime
            if has_value('sensor.bedtime_today') else none %}
        {% if bedtime != none %}
          {% if not is_state('input_select.occupancy_mode', 'night') %}
            {% if not is_state('timer.bedtime_delay', 'idle') %}
              {% set bedtime = state_attr('timer.bedtime_delay', 'finishes_at') | as_datetime %}
            {% else %}
              {% if is_state('input_boolean.bedtime_delayed', 'on') %}
                {% set bedtime = bedtime + timedelta(minutes=states('input_number.bedtime_delay') | int) %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endif %}
        {{ bedtime }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
