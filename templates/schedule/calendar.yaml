###############################################################################
## Templates - Calendar
###############################################################################
- button:
    - name: "Update Calendar"
      unique_id: udpate_calendar
      icon: mdi:calendar
      press:
        - service: homeassistant.update_entity
          data:
            entity_id:
              - calendar.days1
              - calendar.days2
              - calendar.afternoons1
              - calendar.afternoons2
              - calendar.work_holiday
              - calendar.garbage
              - calendar.recycle
              - calendar.yardwaste
              - calendar.work_layoff
              - calendar.work_vacation_jason

        - service: browser_mod.notification
          data:
            duration: 30000
            message: "Updating calendars."

- button:
    - name: "Announce Calendar Events Jason"
      unique_id: announce_calendar_events_jason
      icon: mdi:account-voice
      press:
        - service: calendar.get_events
          target:
            entity_id: calendar.jazzyisj
          data:
            duration:
              days: 2
          response_variable: agenda

        - variables:
            events: "{{ agenda['calendar.jazzyisj']['events'] }}"
            message: |
              {%- from 'speech.jinja' import list_events %}
              Good {{ states('sensor.tod_greeting') }}!
              {%- if events | count > 0 %}
              Here are your upcoming calendar events.
              {{ list_events(events) }}
              {%- else %}
              There are no events on your calendar today!
              {%- endif -%}

        - service: script.tts_play
          data:
            message: "{{ message }}"
            always_play: true
            save_message: false

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: calendar.jazzyisj
  action:
    - service: calendar.get_events
      target:
        entity_id: calendar.jazzyisj
      data:
        duration:
          days: 2
      response_variable: agenda

    - variables:
        events: "{{ agenda['calendar.jazzyisj']['events'] }}"
  sensor:
    - name: "Upcoming Events"
      unique_id: upcoming_events
      icon: mdi:calendar-star
      state: "{{ events | count }}"
      attributes:
        events: >
          {%- from 'speech.jinja' import list_events %}
          {%- if events | count > 0 %}
          {{ list_events(events) }}
          {%- endif -%}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: time_pattern
      minutes: "/1"
  binary_sensor:
    - name: "Google Calendar Connected"
      unique_id: google_calendar_connected
      picture: !secret GOOGLE_CALENDAR_ICON
      device_class: connectivity
      state: "{{ integration_entities('google') | select('has_value') | list | count > 0 }}"

- binary_sensor:
    - name: "Google Calendar Connected Alert"
      unique_id: google_calendar_connected_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.google_calendar_connected', 'off')
            and is_state('input_boolean.schedule_alerts', 'on') }}

    - name: "Calendar Empty Alert"
      unique_id: calendar_empty_alert
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none
            and is_state('input_boolean.schedule_alerts', 'on') else false }}
      attributes: # vacation/layoff calendars not included - usually empty
        entity_id: >
          {{ states.calendar
              | selectattr('attributes.start_time', 'defined') | selectattr('attributes.start_time', 'eq', null)
              | rejectattr('entity_id', 'in', ['calendar.work_vacation_jason', 'calendar.work_layoff'])
              | map(attribute='name') | list | sort }}
      availability: "{{ is_state('binary_sensor.google_calendar_connected', 'on') }}"

- sensor:
    - name: "Next Waste Day"
      unique_id: next_waste_day
      device_class: timestamp
      icon: >
        {% set next = states(this.entity_id) %}
        {% if next == states('sensor.next_garbage_day')
            and states.sensor.next_garbage_day.attributes is defined %}
          {{ states.sensor.next_garbage_day.attributes.icon }}
        {% elif next == states('sensor.next_recycle_day')
            and states.sensor.next_recycle_day.attributes is defined %}
          {{ states.sensor.next_recycle_day.attributes.icon }}
        {% elif next == states('sensor.next_yardwaste_day')
            and states.sensor.next_yardwaste_day.attributes is defined %}
          {{ states.sensor.next_yardwaste_day.attributes.icon }}
        {% else %} mdi:trash-can
        {% endif %}
      state: >
        {% set garbage = states('sensor.next_garbage_day') | as_datetime | as_local
            if has_value('sensor.next_garbage_day') else none %}
        {% set recycle = states('sensor.next_recycle_day') | as_datetime | as_local
            if has_value('sensor.next_recycle_day') else none %}
        {% set yardwaste = states('sensor.next_yardwaste_day') | as_datetime | as_local
            if has_value('sensor.next_yardwaste_day') else none %}
        {% set types = [garbage, recycle, yardwaste] %}
        {% set active = namespace(types=[]) %}
        {% for item in types if item != none %}
          {% set active.types = active.types + [item] %}
        {% endfor %}
        {{ none if active.types == [] else active.types | min }}
      attributes:
        display: >
          {% set next = states(this.entity_id) | as_datetime
              if has_value(this.entity_id) else none %}
          {% if next != none %}
            {% if next.day == now().day %} Today
            {% elif next - now() <= timedelta(hours=24) %} Tomorrow
            {% elif next-now() > timedelta(days=365) %} None
            {% else %} {{ next.strftime('%a, %b %d') }}
            {% endif %}
          {% else %} unknown
          {% endif %}
        waste_type: >
          {% set next = states(this.entity_id) %}
          {% if next == states('sensor.next_garbage_day') %} garbage
          {% elif next == states('sensor.next_recycle_day') %} recycle
          {% elif next == states('sensor.next_yardwaste_day') %} yardwaste
          {% endif %}

    #MIDNIGHT add day_reset to prevent alerts night before, as_local to add tz
    - name: "Next Garbage Day"
      unique_id: next_garbage_day
      icon: mdi:trash-can
      device_class: timestamp
      state: >
        {% if state_attr('calendar.garbage', 'start_time') != none %}
          {{ state_attr('calendar.garbage', 'start_time') | as_datetime | as_local
              + as_timedelta(states('input_datetime.day_reset')) }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        display: >
          {% if has_value(this.entity_id) %}
            {% set start = states(this.entity_id) | as_datetime %}
            {% if now() > start %} Today
            {% elif start - now() < timedelta(days=1) %} Tomorrow
            {% else %} {{ start.strftime('%a, %b %d') }}
            {% endif %}
          {% endif %}

    # add day_reset to prevent alerts night before, as_local to add tz
    - name: "Next Recycle Day"
      unique_id: next_recycle_day
      icon: mdi:recycle
      device_class: timestamp
      state: >
        {% if state_attr('calendar.recycle', 'start_time') != none %}
          {{ state_attr('calendar.recycle', 'start_time') | as_datetime | as_local
              + as_timedelta(states('input_datetime.day_reset')) }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        display: >
          {% if has_value(this.entity_id) %}
            {% set start = states(this.entity_id) | as_datetime %}
            {% if now() > start %} Today
            {% elif start - now() < timedelta(days=1) %} Tomorrow
            {% else %} {{ start.strftime('%a, %b %d') }}
            {% endif %}
          {% endif %}

    # add day_reset to prevent alerts night before, as_local to add tz
    - name: "Next Yardwaste Day"
      unique_id: next_yardwaste_day
      icon: mdi:pine-tree
      device_class: timestamp
      state: >
        {% if state_attr('calendar.yardwaste', 'start_time') != none %}
          {{ state_attr('calendar.yardwaste', 'start_time') | as_datetime | as_local
              + as_timedelta(states('input_datetime.day_reset')) }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        display: >
          {% if has_value(this.entity_id) %}
            {% set start = states(this.entity_id) | as_datetime %}
            {% if now() > start %} Today
            {% elif start - now() < timedelta(days=1) %} Tomorrow
            {% else %} {{ start.strftime('%a, %b %d') }}
            {% endif %}
          {% endif %}
        warning: >
          {% if has_value(this.entity_id) %}
            {% set start = states(this.entity_id) | as_datetime %}
            {{ start - now() < timedelta(days=3) and start - now() > timedelta(days=1) }}
          {% endif %}

    # add day_reset to prevent alerts night before, as_local to add tz
    - name: "Next Holiday"
      unique_id: next_holiday
      icon: mdi:calendar-heart
      device_class: timestamp
      state: >
        {% if state_attr('calendar.canada_on', 'start_time') != none %}
          {{ state_attr('calendar.canada_on', 'start_time') | as_datetime | as_local
              + as_timedelta(states('input_datetime.day_reset')) }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        display: >
          {% if has_value(this.entity_id) %}
            {% set start = states(this.entity_id) | as_datetime %}
            {% if now() > start %} Today
            {% elif start - now() < timedelta(days=1) %} Tomorrow
            {% else %} {{ start.strftime('%a, %b %d') }}
            {% endif %}
          {% endif %}
        holiday: "{{ state_attr('calendar.canada_on','message') }}"
