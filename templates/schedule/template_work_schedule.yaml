###############################################################################
## Templates - Work Schedule
###############################################################################
- binary_sensor:
    - name: 'Work Schedule'
      unique_id: work_schedule
      icon: >
        {% if is_state('binary_sensor.commute_active','on') %}
          {{ states.binary_sensor.commute_active.attributes.icon }}
        {% elif is_state('binary_sensor.work_today','on') %}
          {{ states.binary_sensor.work_today.attributes.icon }}
        {% elif is_state('calendar.work_holiday','on') %}
          {{ states.calendar.work_holiday.attributes.icon }}
        {% else %}
        mdi:factory
        {% endif %}
      state: >
        {{ is_state('input_boolean.work_schedule','on')
          and is_state('binary_sensor.work_vacation','off')
          and is_state('binary_sensor.work_layoff','off') }}
      availability: >
        {{ states('binary_sensor.work_vacation') in ['on','off']
            and states('binary_sensor.work_layoff') in ['on','off'] }}

    #MIDNIGHT delay for afts -> days - prevent after work last work day on afts missed automations
    - name: 'Work Today'
      unique_id: work_today
      icon: >
        {% if states.sensor.work_shift_today.attributes is defined %}
          {{ states.sensor.work_shift_today.attributes.icon }}
        {% endif %}
      #BUG last_changed read after delay template evaluated?
      #BUGFIX must toggle boolean twice to update last_changed - automation.schedule_automation_toggle_work_today_off
      #NOTE delay 1 instead of 0 so no triggers when input_boolean.work_today_off toggles
      delay_on: >
        {{ 1 if is_state('binary_sensor.work_today','unknown')
              or now().timestamp() - states.input_boolean.work_today_off.last_changed|as_timestamp < 60
            else today_at(states('input_datetime.day_reset')) - today_at('00:00') }}
      delay_off: >
        {{ 1 if is_state('binary_sensor.work_today','unknown')
              or now().timestamp() - states.input_boolean.work_today_off.last_changed|as_timestamp < 60
            else today_at(states('input_datetime.day_reset')) - today_at('00:00') }}
      state: >
        {% if is_state('binary_sensor.work_schedule','off')
            or is_state('input_boolean.work_today_off','on') %} false
        {% elif is_state('calendar.work_holiday','on') %} {{ is_state('input_boolean.holiday_workday','on') }}
        {% elif now().weekday() == 5 %} {{ is_state('input_boolean.saturday_workday','on') }}
        {% elif now().weekday() == 6 %} {{ is_state('input_boolean.sunday_workday','on') }}
        {% else %} {{ is_state('binary_sensor.workday','on') }}
        {% endif %}
      availability: "{{ states('binary_sensor.work_schedule') in ['on','off'] }}"

    - name: 'Work Tomorrow'
      unique_id: work_tomorrow
      icon: >
        {% if states.sensor.work_shift_tomorrow.attributes is defined %}
          {{ states.sensor.work_shift_tomorrow.attributes.icon }}
        {% endif %}
      state: >
        {% if is_state('binary_sensor.work_schedule','off')
            or is_state('input_boolean.work_tomorrow_off','on') %} false
        {% elif is_state('binary_sensor.work_holiday_tomorrow','on') %} {{ is_state('input_boolean.holiday_workday','on') }}
        {% elif now().weekday() == 4 %} {{ is_state('input_boolean.saturday_workday','on') }}
        {% elif now().weekday() == 5 %} {{ is_state('input_boolean.sunday_workday','on') }}
        {% else %} {{ is_state('binary_sensor.workday_tomorrow','on') }}
        {% endif %}

    # holiday start within 24 hours and holiday end not in past
    - name: 'Work Holiday Tomorrow'
      unique_id: work_holiday_tomorrow
      state: >
        {% if state_attr('calendar.work_holiday','start_time') != none
            and state_attr('calendar.work_holiday','end_time') != none %}
          {# calendar dates not tz aware #}
          {% set start = state_attr('calendar.work_holiday','start_time')|as_datetime|as_local %}
          {% set end = state_attr('calendar.work_holiday','end_time')|as_datetime|as_local %}
            {{ start - now() <= timedelta(days=1) and end > now() }}
        {% endif %}

    # work layoff/vacation start within day_reset hours and end more than day_reset hours away
    # jason vacation, sheri vacation - both must be true

    #MIDNIGHT work today delayed keeps work_today sensor off when this turns off early
    - name: 'Work Vacation'
      unique_id: work_vacation
      icon: mdi:beach
      state: >
        {% if state_attr('calendar.work_vacation_jason','start_time') != none
            and state_attr('calendar.work_vacation_jason','end_time') != none
            and state_attr('calendar.work_vacation_sheri','start_time') != none
            and state_attr('calendar.work_vacation_sheri','end_time') != none %}
          {# calendar dates not tz aware #}
          {% set vac_jason_start =  state_attr('calendar.work_vacation_jason','start_time')|as_local %}
          {% set vac_jason_end =  state_attr('calendar.work_vacation_jason','end_time')|as_local %}
          {% set vac_sheri_start =  state_attr('calendar.work_vacation_sheri','start_time')|as_local %}
          {% set vac_sheri_end =  state_attr('calendar.work_vacation_sheri','end_time')|as_local %}
          {% set reset_hours = today_at((today_at(states('input_datetime.day_reset')) - today_at('00:00'))).hour %}
          {% set reset_minutes = today_at((today_at(states('input_datetime.day_reset')) - today_at('00:00'))).minute %}
          {{ vac_jason_start - now() < timedelta(hours=reset_hours) and vac_jason_end - now() > timedelta(hours=reset_hours,minutes=reset_minutes)
                and vac_sheri_start - now() < timedelta(hours=reset_hours) and vac_sheri_end - now() > timedelta(hours=reset_hours,minutes=reset_minutes) }}
        {% endif %}

    #MIDNIGHT work today delayed keeps work_today sensor off when this turns off early
    - name: 'Work Layoff'
      unique_id: work_layoff
      icon: mdi:factory
      state: >
        {% if state_attr('calendar.work_layoff','start_time') != none
            and state_attr('calendar.work_layoff','end_time') != none %}
          {# calendar dates not tz aware #}
          {% set layoff_start = state_attr('calendar.work_layoff','start_time')|as_datetime|as_local %}
          {% set layoff_end = state_attr('calendar.work_layoff','end_time')|as_datetime|as_local %}
          {% set reset_hours = today_at((today_at(states('input_datetime.day_reset')) - today_at('00:00'))).hour %}
          {% set reset_minutes = today_at((today_at(states('input_datetime.day_reset')) - today_at('00:00'))).minute %}
          {{ layoff_start - now() < timedelta(hours=reset_hours) and layoff_end - now() > timedelta(hours=reset_hours,minutes=reset_minutes) }}
        {% endif %}

    - name: 'Shift Selection Alert'
      unique_id: shift_selection_alert
      # so user can select new shift before notification is sent
      delay_on: "{{ 0 if is_state('binary_sensor.shift_selection_alert','unknown') else 300 }}"
      state: >
        {% if is_state('input_boolean.schedule_alerts','on') and is_state('input_boolean.startup_pending','off') %}
          {% if is_state('binary_sensor.work_schedule','on') %}
            {{ is_state('input_boolean.work_shift_override','on') or is_state('sensor.work_shift_today','Off') }}
          {% endif %}
        {% endif %}
      availability: "{{ states('binary_sensor.work_schedule') in ['on','off'] }}"

- sensor:
    - name: 'Work Shift Today'
      unique_id: work_shift_today
      icon: >
        {% if is_state('input_boolean.work_schedule','off') %} mdi:alpha-x-circle
        {% else %}
          {% if is_state('sensor.work_shift_today','Days') %} mdi:alpha-d-circle
          {% elif is_state('sensor.work_shift_today','Afternoons') %} mdi:alpha-a-circle
          {% else %} mdi:calendar-alert
          {% endif %}
        {% endif %}
      state: "{{ states('input_select.current_work_shift') }}"

    # check for next days/afternoons start to be less than 24 hours away (end not in past)
    # if today shift is off, tomorrow shift is off
    - name: 'Work Shift Tomorrow'
      unique_id: work_shift_tomorrow
      icon: >
        {% if is_state('input_boolean.work_schedule','off') %} mdi:alpha-x-circle
        {% elif is_state('sensor.work_shift_tomorrow','Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.work_shift_tomorrow','Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: >
        {% if is_state('input_boolean.work_shift_override','on') %}{{ states('input_select.current_work_shift') }}
        {% elif state_attr('calendar.days','start_time') != none
            and state_attr('calendar.days','end_time') != none
            and state_attr('calendar.afternoons','start_time') != none
            and state_attr('calendar.afternoons','end_time') != none %}
          {# calendar dates not tz aware #}
          {% set days_start = state_attr('calendar.days','start_time')|as_datetime|as_local %}
          {% set afts_start = state_attr('calendar.afternoons','start_time')|as_datetime|as_local %}
          {% set days_end = state_attr('calendar.days','end_time')|as_datetime|as_local %}
          {% set afts_end = state_attr('calendar.afternoons','end_time')|as_datetime|as_local %}
          {% if days_start - now() < timedelta(days=1) and days_end - now() > timedelta(hours=24)  %} Days
          {% elif afts_start - now() < timedelta(days=1) and afts_end - now() > timedelta(hours=24) %} Afternoons
          {% else %}{{ states('sensor.work_shift_today') }}
          {% endif %}
        {% else %}{{ states('sensor.work_shift_today') }}
        {% endif %}

    - name: 'Next Work Holiday'
      unique_id: next_work_holiday
      icon: mdi:calendar-heart
      state: >
        {% if state_attr('calendar.work_holiday','start_time') != none %}
          {# calendar dates not tz aware #}
          {% set start = state_attr('calendar.work_holiday','start_time')|as_datetime|as_local %}
          {% if is_state('calendar.work_holiday','on') %} Today
          {% elif start - now() < timedelta(days=1) %} Tomorrow
          {% else %} {{ start.strftime('%a, %b %d') }}
          {% endif %}
        {% endif %}
