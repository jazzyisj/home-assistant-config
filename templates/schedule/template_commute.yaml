###############################################################################
## Templates - Commute
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Google Traffic Connected"
      unique_id: google_traffic_connected
      icon: mdi:car-connected
      device_class: connectivity
      state: "{{ integration_entities('google_travel_time')|select('has_value')|list|count > 0 }}"

- binary_sensor:
    - name: "Google Traffic Connected Alert"
      unique_id: google_traffic_connected_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.google_traffic_connected','off')
            and is_state('input_boolean.commute_alerts','on') }}

    # default to days if today shift none, unknown
    # turns off 15 min after leave home time (end_time)
    - name: "Late For Work Jason Alert"
      unique_id: late_for_work_jason_alert
      device_class: problem
      state: >
        {% if is_state('binary_sensor.work_commute_active','on')
            and is_state('calendar.work_vacation_jason','off')
            and is_state('binary_sensor.jason_home','on')
            and is_state('input_boolean.commute_alerts','on')
            and is_state('input_boolean.work_today_off_jason','off')
            and has_value('sensor.leave_home_time_jason') %}
          {% set leave = states('sensor.leave_home_time_jason')|as_datetime %}
          {{ leave <= now() < leave + timedelta(minutes=15) }}
        {% endif %}

    - name: "Work Commute Jason Alert"
      unique_id: work_commute_jason_alert
      device_class: problem
      state: >
        {% if is_state('binary_sensor.work_today','on')
            and not is_state('person.jason','Work')
            and is_state('input_boolean.commute_alerts','on') %}
          {{ states('sensor.jason_time_to_work')|int(-1)
              >= states('input_number.commute_warning_threshold')|int }}
        {% endif %}

    - name: "Home Commute Jason Alert"
      unique_id: home_commute_jason_alert
      device_class: problem
      state: >
        {% if is_state('binary_sensor.home_commute_active','on')
            and is_state('calendar.work_vacation_jason','off')
            and not is_state('person.jason','home')
            and is_state('input_boolean.commute_alerts','on')
            and is_state('input_boolean.work_today_off_jason','off') %}
          {{ states('sensor.jason_time_to_home')|int(-1)
              >= states('input_number.commute_warning_threshold')|int }}
        {% endif %}

    - name: "Commute Active"
      unique_id: commute_active
      icon: mdi:car
      state: >
        {{ is_state('binary_sensor.work_commute_active','on')
            or is_state('binary_sensor.home_commute_active','on') }}

    - name: "Work Commute Active"
      unique_id: work_commute_active
      icon: mdi:car
      delay_on: 5 # prevent active at midnight
      state: >
        {% if is_state('input_boolean.commute_times_enabled','on')
            and has_value('sensor.leave_home_time')
            and has_value('sensor.arrive_work_time_target') %}
          {% set leave = states('sensor.leave_home_time')|as_datetime %}
          {% set arrive = states('sensor.arrive_work_time_target')|as_datetime %}
          {{ leave - timedelta(minutes=states('input_number.commute_predeparture')|int) < now() < arrive }}
        {% endif %}

    - name: "Home Commute Active"
      unique_id: home_commute_active
      icon: mdi:car
      delay_on: 5 # prevent active at midnight
      state: >
        {% if is_state('input_boolean.commute_times_enabled','on')
            and has_value('sensor.leave_work_time')
            and has_value('sensor.arrive_home_time_target') %}
          {% set leave = states('sensor.leave_work_time')|as_datetime %}
          {% set arrive = states('sensor.arrive_home_time_target')|as_datetime %}
          {{ leave - timedelta(minutes=states('input_number.commute_predeparture')|int) < now() < arrive }}
        {% endif %}

    - name: "Commute LED Alert"
      unique_id: commute_led_alert
      state: >
        {{ is_state('binary_sensor.late_for_work_jason_alert','on')
            or is_state('binary_sensor.work_commute_jason_alert','on')
            or is_state('binary_sensor.home_commute_jason_alert','on') }}

- sensor:
    - name: "Leave Home Time Jason"
      unique_id: leave_home_time_jason
      device_class: timestamp
      state: >
        {% set time = states('sensor.jason_time_to_work')|int(states('input_number.commute_time')|int(-1)) %}
        {{ states('sensor.arrive_work_time_target')|as_datetime - timedelta(minutes=time)
            if is_state('binary_sensor.work_today','on')
              and is_state('input_boolean.work_today_off_jason','off')
              and has_value('sensor.arrive_work_time_target') and time > -1 else none }}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Leave Home Time"
      unique_id: leave_home_time
      device_class: timestamp
      state: >
        {{ states('sensor.leave_home_time_jason')|as_datetime
            if has_value('sensor.leave_home_time_jason') else none }}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        leave_min: >
          {{ ((states('sensor.leave_home_time')|as_timestamp - now().timestamp()) / 60)|int
                if has_value('sensor.leave_home_time') else none }}

    - name: "Car Start Time"
      unique_id: car_start_time
      device_class: timestamp
      state: >
        {{ (states('sensor.leave_home_time')|as_datetime).replace(second=0,microsecond=0) - timedelta(minutes=15)
            if is_state('binary_sensor.owner_home','on') and has_value('sensor.leave_home_time') else none }}

    - name: "Arrive Work Time"
      unique_id: arrive_work_time
      device_class: timestamp
      state: >
        {{ now() + timedelta(minutes=states('sensor.jason_time_to_work')|int)
            if has_value('sensor.jason_time_to_work') else none }}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        late_time: >
          {% if is_state('binary_sensor.work_today','on')
              and has_value('sensor.arrive_work_time')
              and has_value('sensor.arrive_work_time_target') %}
            {% set arrive = states('sensor.arrive_work_time')|as_datetime %}
            {% set target = states('sensor.arrive_work_time_target')|as_datetime %}
            {% if not is_state('person.jason','work')
                and now() - arrive < timedelta(hours = 1)
                and arrive > target %}
              {{ arrive - target }}
            {% endif %}
          {% endif %}

    - name: "Arrive Work Time Target"
      unique_id: arrive_work_time_target
      device_class: timestamp
      state: >
        {% if is_state('binary_sensor.work_today','on') %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% set arrive_work = today_at(states('input_datetime.afternoons_arrive_work_time'))
              if is_state('sensor.work_shift_today','Afternoons')
                else today_at(states('input_datetime.days_arrive_work_time')) %}
          {% set arrive_work = arrive_work|as_timestamp|timestamp_utc|as_datetime %} {# keep format consistent #}
          {{ arrive_work + timedelta(days=1) if arrive_work < day_reset < now() else arrive_work }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    #MIDNIGHT if leave time is before day_reset and now is after reset, leave time is +1 day for today's leave time
    - name: "Leave Work Time"
      unique_id: leave_work_time
      device_class: timestamp
      state: >
        {% if is_state('binary_sensor.work_today','on') %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% set leave = today_at(states('input_datetime.afternoons_leave_work_time'))
              if is_state('sensor.work_shift_today','Afternoons')
                else today_at(states('input_datetime.days_leave_work_time')) %}
          {{ leave + timedelta(days=1) if leave < day_reset < now() else leave }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Arrive Home Time"
      unique_id: arrive_home_time
      device_class: timestamp
      state: >
        {{ now() + timedelta(minutes=states('sensor.jason_time_to_home')|int)
            if has_value('sensor.jason_time_to_home') else none }}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Arrive Home Time Target"
      unique_id: arrive_home_time_target
      device_class: timestamp
      state: >
        {{ states('sensor.leave_work_time')|as_datetime + timedelta(minutes=states('input_number.commute_time')|int)
            if is_state('binary_sensor.work_today','on')
              and is_state('input_boolean.work_today_off_jason','off')
              and has_value('sensor.leave_work_time') else none }}
      attributes:
        12hour: >
          {% from 'format.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
