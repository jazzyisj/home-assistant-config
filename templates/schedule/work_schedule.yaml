###############################################################################
## Templates - Work Schedule
###############################################################################
- trigger:
    #MIDNIGHT day change happens at day_reset instead of midnight
    # for afts after work and shift swings for missed automations, bedtime etc
    # do not reload on restart, template reload - incorrect value if after midnight and shift is afternoons
    - platform: time
      at: input_datetime.day_reset

    - platform: state
      entity_id:
        - input_boolean.work_schedule
        - input_boolean.work_today_on
        - input_boolean.work_today_off
        - input_boolean.saturday_workday
        - input_boolean.sunday_workday
        - input_boolean.holiday_workday
        - binary_sensor.work_layoff
        - binary_sensor.work_vacation
      to:
        - "on"
        - "off"
      not_from:
        - unknown
        - unavailable
  binary_sensor:
    - name: "Work Today"
      unique_id: work_today
      icon: >
        {% if states.sensor.work_shift_today.attributes is defined %}
          {{ states.sensor.work_shift_today.attributes.icon }}
        {% endif %}
      state: >
        {% if is_state('input_boolean.work_schedule', 'on') %}
          {% if is_state('input_boolean.work_today_on', 'on') %} true
          {% elif is_state('input_boolean.work_today_off', 'on')
              or is_state('binary_sensor.work_vacation', 'on')
              or is_state('binary_sensor.work_layoff', 'on') %} false
          {% elif is_state('calendar.work_holiday', 'on') %} {{ is_state('input_boolean.holiday_workday', 'on') }}
          {% elif now().weekday() == 5 %} {{ is_state('input_boolean.saturday_workday', 'on') }}
          {% elif now().weekday() == 6 %} {{ is_state('input_boolean.sunday_workday', 'on') }}
          {% else %} {{ is_state('binary_sensor.workday', 'on') }}
          {% endif %}
        {% else %} false
        {% endif %}

- trigger:
    #MIDNIGHT day change happens at day_reset instead of midnight
    # for afts after work and shift swings for missed automations, bedtime etc
    # do not reload on restart, template reload - incorrect value if after midnight and shift is afternoons
    - platform: time
      at: input_datetime.day_reset

    - platform: state
      entity_id:
        - input_boolean.work_schedule
        - input_boolean.work_tomorrow_on
        - input_boolean.work_tomorrow_off
        - input_boolean.saturday_workday
        - input_boolean.sunday_workday
        - input_boolean.holiday_workday
        - binary_sensor.work_layoff
        - binary_sensor.work_vacation
      to:
        - "on"
        - "off"
      not_from:
        - unknown
        - unavailable

  binary_sensor:
    - name: "Work Tomorrow"
      unique_id: work_tomorrow
      icon: >
        {% if states.sensor.work_shift_tomorrow.attributes is defined %}
          {{ states.sensor.work_shift_tomorrow.attributes.icon }}
        {% endif %}
      # holiday start within 1 day and holiday end > 1 day away
      # calendar dates not tz aware - use as_local to add tz
      state: >
        {% set start = state_attr('calendar.work_holiday', 'start_time') %}
        {% set end = state_attr('calendar.work_holiday', 'end_time') %}
        {% if start != none and end != none %}
          {% set holiday_tomorrow = start | as_datetime | as_local - now() < timedelta(days=1, minutes=1)
              and end | as_datetime | as_local - now() > timedelta(days=1, minutes=1) %}
        {% else %} {% set holiday_tomorrow = false %}
        {% endif %}
        {% if is_state('input_boolean.work_schedule', 'on') %}
          {% if is_state('input_boolean.work_tomorrow_on', 'on') %} true
          {% elif is_state('input_boolean.work_tomorrow_off', 'on')
            or (is_state('binary_sensor.work_vacation', 'on')
              and not is_state_attr('binary_sensor.work_vacation', 'ends_today', true))
            or is_state_attr('binary_sensor.work_vacation', 'starts_tomorrow', true)
            or (is_state('binary_sensor.work_layoff', 'on')
              and not is_state_attr('binary_sensor.work_layoff', 'ends_today', true))
            or is_state_attr('binary_sensor.work_layoff', 'starts_tomorrow', true) %} false
          {% elif holiday_tomorrow %} {{ is_state('input_boolean.holiday_workday', 'on') }}
          {% elif now().weekday() == 4 %} {{ is_state('input_boolean.saturday_workday', 'on') }}
          {% elif now().weekday() == 5 %} {{ is_state('input_boolean.sunday_workday', 'on') }}
          {% else %} {{ is_state('binary_sensor.workday_tomorrow', 'on') }}
          {% endif %}
        {% else %} false
        {% endif %}

- binary_sensor:
    # calendar dates not tz aware - use as_local to add tz
    # #MIDNIGHT end_time at day_reset so work tomorrow can turn on
    - name: "Work Vacation"
      unique_id: work_vacation
      icon: mdi:beach
      state: "{{ is_state('calendar.work_vacation_jason', 'on') }}"
      attributes:
        ends_today: >
          {{ (is_state('calendar.work_vacation_jason', 'on')
                and state_attr('calendar.work_vacation_jason', 'end_time') | as_datetime | as_local
                  - timedelta(days=1, minutes=1) < today_at(states('input_datetime.day_reset')))
            if state_attr('calendar.work_vacation_jason', 'end_time') != none else none }}
        starts_tomorrow: >
          {{ (is_state('calendar.work_vacation_jason', 'off')
                and state_attr('calendar.work_vacation_jason', 'start_time') | as_datetime | as_local
                  < today_at('23:59') + timedelta(days=1))
              if state_attr('calendar.work_vacation_jason', 'start_time') != none else none }}
      availability: "{{ has_value('calendar.work_vacation_jason') }}"

    # calendar dates not tz aware - use as_local to add tz
    - name: "Work Layoff"
      unique_id: work_layoff
      icon: mdi:factory
      state: "{{ is_state('calendar.work_layoff', 'on') }}"
      attributes:
        ends_today: >
          {% if state_attr('calendar.work_layoff', 'end_time') != none %}
            {{ is_state('binary_sensor.work_layoff', 'on')
                and state_attr('calendar.work_layoff', 'end_time') | as_datetime | as_local
                  - timedelta(days=1, minutes=1) < today_at(states('input_datetime.day_reset')) }}
          {% endif %}
        starts_tomorrow: >
          {{ is_state('binary_sensor.work_layoff', 'off')
                and state_attr('calendar.work_layoff', 'start_time') | as_datetime | as_local < today_at('23:59') + timedelta(days=1)
              if state_attr('calendar.work_layoff', 'start_time') != none else none }}
      availability: "{{ has_value('calendar.work_layoff') }}"

- sensor:
    - name: "Work Shift Today"
      unique_id: work_shift_today
      icon: >
        {% if is_state('sensor.work_shift_today', 'Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.work_shift_today', 'Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: "{{ states('input_select.current_work_shift') }}"

    # check for next days/afternoons start to be less than 24 hours away (end not in past)
    # if today shift is off, tomorrow shift is off
    # calendar dates not tz aware - use as_local to add tz
    - name: "Work Shift Tomorrow"
      unique_id: work_shift_tomorrow
      icon: >
        {% if is_state('sensor.work_shift_tomorrow', 'Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.work_shift_tomorrow', 'Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: >
        {% if is_state('input_boolean.work_shift_override', 'on') %}{{ states('input_select.current_work_shift') }}
        {% elif state_attr('calendar.days1', 'start_time') != none
            and state_attr('calendar.days2', 'end_time') != none
            and state_attr('calendar.afternoons1', 'start_time') != none
            and state_attr('calendar.afternoons2', 'end_time') != none %}
          {# calendar dates not tz aware #}
          {% set days_start = state_attr('calendar.days1', 'start_time') | as_datetime | as_local %}
          {% set afts_start = state_attr('calendar.afternoons1', 'start_time') | as_datetime | as_local %}
          {% set days_end = state_attr('calendar.days2', 'end_time') | as_datetime | as_local %}
          {% set afts_end = state_attr('calendar.afternoons2', 'end_time') | as_datetime | as_local %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% if days_start - now() < timedelta(days=1, hours=day_reset.hour, minutes=day_reset.minute)
              and days_end - now() > timedelta(days=1, hours=day_reset.hour, minutes=day_reset.minute) %} Days
          {% elif afts_start - now() < timedelta(days=1, hours=day_reset.hour, minutes=day_reset.minute)
              and afts_end - now() > timedelta(days=1, hours=day_reset.hour, minutes=day_reset.minute) %} Afternoons
          {% else %}{{ states('sensor.work_shift_today') }}
          {% endif %}
        {% else %}{{ states('sensor.work_shift_today') }}
        {% endif %}

    # calendar dates not tz aware - use as_local to add tz
    - name: "Next Work Holiday"
      unique_id: next_work_holiday
      icon: mdi:calendar-heart
      device_class: timestamp
      state: >
        {{ state_attr('calendar.work_holiday', 'start_time') | as_datetime | as_local
            if state_attr('calendar.work_holiday', 'start_time') != none else none }}
      attributes:
        display: >
          {% set start = state_attr('calendar.work_holiday', 'start_time') %}
          {% if start != none %}
            {% set start = start | as_datetime | as_local %}
            {% if is_state('calendar.work_holiday', 'on') %} Today
            {% elif start - now() < timedelta(days=1) %} Tomorrow
            {% else %} {{ start.strftime('%a, %b %d') }}
            {% endif %}
          {% endif %}
