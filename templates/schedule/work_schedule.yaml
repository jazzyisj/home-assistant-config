###################################################################################################
## Templates - Work Schedule
###################################################################################################
- trigger:
    - trigger: state
      entity_id: input_boolean.work_schedule
      to:
        - "on"
        - "off"

    - trigger: state
      entity_id:
        - calendar.days1
        - calendar.days2
        - calendar.afternoons1
        - calendar.afternoons2
      to: "on"
      from: "off"
      #MIDNIGHT delayed by day reset time, prevent bedtimes missed sunday night aft -> days
      for: "{{ states('input_datetime.day_reset') }}"

    - trigger: state
      entity_id: input_select.current_work_shift
      to:
      for: 1 # req or input_select won't update in UI

    - trigger: state
      entity_id: input_boolean.work_shift_override
      to: "off"
  conditions:
    - condition: state
      entity_id: input_boolean.work_shift_override
      state: "off"
  actions:
    - action: input_select.select_option
      target:
        entity_id: input_select.current_work_shift
      data:
        option: >
          {% if is_state('calendar.days1', 'on') or is_state('calendar.days2', 'on') %} Days
          {% elif is_state('calendar.afternoons1', 'on') or is_state('calendar.afternoons2', 'on') %} Afternoons
          {% endif %}
  sensor:
    - name: "Scheduled Shift Today"
      unique_id: scheduled_shift_today
      device_class: enum
      icon: >
        {% if is_state(this.entity_id, 'Days') %} mdi:alpha-d-circle
        {% elif is_state(this.entity_id, 'Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: >
          {% if is_state('calendar.afternoons1', 'on') or is_state('calendar.afternoons2', 'on') %} Afternoons
          {% elif is_state('calendar.days1', 'on') or is_state('calendar.days2', 'on') %} Days
          {% else %} {{ none }}
          {% endif %}
      attributes:
        options: "{{ ['Days', 'Afternoons'] }}"

    # #MIDNIGHT shift start time advanced by day_reset time
    # check for next days/afternoons start to be less than 24 hours away (end not in past)
    # defaults to scheduled_shift_today
    - name: "Scheduled Shift Tomorrow"
      unique_id: scheduled_shift_tomorrow
      device_class: enum
      icon: >
        {% if is_state(this.entity_id, 'Days') %} mdi:alpha-d-circle
        {% elif is_state(this.entity_id, 'Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: >
        {% from 'schedule.jinja' import rdate %}
        {% set days = as_datetime(state_attr('calendar.days1', 'start_time'), none) %}
        {% set afts = as_datetime(state_attr('calendar.afternoons1', 'start_time'), none) %}
        {% if is_state('input_boolean.work_shift_override', 'on') %} {{ states('sensor.work_shift_today') }}
        {% elif days != none and afts != none %}
          {% if as_datetime(rdate(days)) - timedelta(days=1) < now() %} Days
          {% elif as_datetime(rdate(afts)) - timedelta(days=1) < now() %} Afternoons
          {% else -%} {{ states('sensor.scheduled_shift_today') }}
          {% endif %}
        {% else %} {{ states('sensor.scheduled_shift_today') }}
        {% endif %}
      attributes:
        options: "{{ ['Days', 'Afternoons'] }}"


- trigger:
    # #MIDNIGHT day change happens at day_reset instead of midnight
    # to accomodate bedtimes after midnight and afternoon shifts
    # do not reload on restart, template reload - incorrect value if after midnight
    # before day_reset and shift is afternoons because no day_reset offset for
    # now().weekday() or binary_sensor.workday_today
    - trigger: time
      at: input_datetime.day_reset

    - trigger: state
      entity_id:
        - input_boolean.work_schedule
        - input_boolean.work_today_on
        - input_boolean.work_today_off
        - input_boolean.saturday_workday
        - input_boolean.sunday_workday
        - input_boolean.holiday_workday
        - binary_sensor.work_holiday
        - binary_sensor.work_layoff
        - binary_sensor.work_vacation
      to:
        - "on"
        - "off"
      from:
        - "on"
        - "off"
      for: 1 # allow other sensors to update before updating

    - trigger: state
      entity_id: sensor.scheduled_shift_today
      to:
      for: 1 # force icon update after sensor state change
  binary_sensor:
    - name: "Work Today"
      unique_id: work_today
      icon: >
        {% set icon = state_attr('sensor.scheduled_shift_today', 'icon') %}
        {{ icon if icon != none else 'mdi:calendar-alert' }}
      state: >
        {% if is_state('input_boolean.work_schedule', 'on') %}
          {% if is_state('input_boolean.work_today_on', 'on') %} true
          {% elif is_state('input_boolean.work_today_off', 'on')
              or is_state('binary_sensor.work_vacation', 'on')
              or is_state('binary_sensor.work_layoff', 'on') %} false
          {% elif is_state('binary_sensor.work_holiday', 'on') %} {{ is_state('input_boolean.holiday_workday', 'on') }}
          {% elif now().weekday() == 5 %} {{ is_state('input_boolean.saturday_workday', 'on') }}
          {% elif now().weekday() == 6 %} {{ is_state('input_boolean.sunday_workday', 'on') }}
          {% else %} {{ is_state('binary_sensor.workday_today', 'on') }}
          {% endif %}
        {% else %} {{ false }}
        {% endif %}

- trigger:
    # #MIDNIGHT day change happens at day_reset instead of midnight
    # to accomodate bedtimes after midnight and afternoon shifts
    # do not reload on restart, template reload - incorrect value if after midnight
    # before day_reset and shift is afternoons because no day_reset offset for
    # now().weekday() or binary_sensor.workday_tomorrow
    - trigger: time
      at: input_datetime.day_reset

    - trigger: state
      entity_id:
        - input_boolean.work_schedule
        - input_boolean.work_tomorrow_on
        - input_boolean.work_tomorrow_off
        - input_boolean.saturday_workday
        - input_boolean.sunday_workday
        - input_boolean.holiday_workday
        - binary_sensor.work_holiday
        - binary_sensor.work_layoff
        - binary_sensor.work_vacation
      to:
        - "on"
        - "off"
      from:
        - "on"
        - "off"
      for: 1 # allow other sensors to update before updating

    - trigger: state
      entity_id: sensor.scheduled_shift_tomorrow
      to:
      for: 1 # force icon update after sensor state change
  binary_sensor:
    - name: "Work Tomorrow"
      unique_id: work_tomorrow
      icon: >
        {% set icon = state_attr('sensor.scheduled_shift_tomorrow', 'icon') %}
        {{ icon if icon != none else 'mdi:calendar-alert' }}
      # holiday/vacation/layoff start within 1 day and end > 1 day away = false
      state: >
        {% set hol_tom = (is_state('binary_sensor.work_holiday', 'on')
              and not is_state_attr('binary_sensor.work_holiday', 'ends_today', true))
            or is_state_attr('binary_sensor.work_holiday', 'starts_tomorrow', true) %}
        {% set vac_tom = (is_state('binary_sensor.work_vacation', 'on')
              and not is_state_attr('binary_sensor.work_vacation', 'ends_today', true))
            or is_state_attr('binary_sensor.work_vacation', 'starts_tomorrow', true) %}
        {% set loff_tom = (is_state('binary_sensor.work_layoff', 'on')
              and not is_state_attr('binary_sensor.work_layoff', 'ends_today', true))
            or is_state_attr('binary_sensor.work_layoff', 'starts_tomorrow', true) %}
        {% if is_state('input_boolean.work_schedule', 'on') %}
          {% if is_state('input_boolean.work_tomorrow_on', 'on') %} true
          {% elif is_state('input_boolean.work_tomorrow_off', 'on') or vac_tom or loff_tom %} false
          {% elif hol_tom %} {{ is_state('input_boolean.holiday_workday', 'on') }}
          {% elif now().weekday() == 4 %} {{ is_state('input_boolean.saturday_workday', 'on') }}
          {% elif now().weekday() == 5 %} {{ is_state('input_boolean.sunday_workday', 'on') }}
          {% else %} {{ is_state('binary_sensor.workday_tomorrow', 'on') }}
          {% endif %}
        {% else %} {{ false }}
        {% endif %}

- trigger:
    # #MIDNIGHT day change happens at day_reset instead of midnight to accomodate bedtimes after midnight
    # do not reload on restart, template reload - possible incorrect value if after midnight and
    # before day_reset if bedtime after midnight
    - trigger: time
      at: input_datetime.day_reset

    - trigger: state
      entity_id: input_boolean.work_schedule
      to:

    - trigger: state
      id: button
      entity_id: button.update_calendar
      to:
  action:
    - if: "{{ trigger.id == 'button' }}"
      then:
        - delay: 60 # let calendars update
  binary_sensor:
    - name: "Work Holiday"
      unique_id: work_holiday
      icon: mdi:calendar-heart
      state: >
        {% from 'schedule.jinja' import rtoday %}
        {{ rtoday('calendar.work_holiday') }}
      attributes:
        starts_tomorrow: >
          {% from 'schedule.jinja' import starts_rtomorrow %}
          {{ starts_rtomorrow('calendar.work_holiday') }}
        ends_today: >
          {% from 'schedule.jinja' import ends_rtoday %}
          {{ ends_rtoday('calendar.work_holiday') }}
      availability: "{{ has_value('calendar.work_holiday') }}"

    - name: "Work Vacation"
      unique_id: work_vacation
      icon: mdi:beach
      state: >
        {% from 'schedule.jinja' import rtoday %}
        {{ rtoday('calendar.work_vacation_jason') }}
      attributes:
        starts_tomorrow: >
          {% from 'schedule.jinja' import starts_rtomorrow %}
          {{ starts_rtomorrow('calendar.work_vacation_jason') }}
        ends_today: >
          {% from 'schedule.jinja' import ends_rtoday %}
          {{ ends_rtoday('calendar.work_vacation_jason') }}
      availability: "{{ has_value('calendar.work_vacation_jason') }}"

    - name: "Work Layoff"
      unique_id: work_layoff
      icon: mdi:factory
      state: >
        {% from 'schedule.jinja' import rtoday %}
        {{ rtoday('calendar.work_layoff') }}
      attributes:
        starts_tomorrow: >
          {% from 'schedule.jinja' import starts_rtomorrow %}
          {{ starts_rtomorrow('calendar.work_layoff') }}
        ends_today: >
          {% from 'schedule.jinja' import ends_rtoday %}
          {{ ends_rtoday('calendar.work_layoff') }}
      availability: "{{ has_value('calendar.work_layoff') }}"

- sensor:
    - name: "Work Shift Today"
      unique_id: work_shift_today
      device_class: enum
      icon: >
        {% if is_state(this.entity_id, 'Days') %} mdi:alpha-d-circle
        {% elif is_state(this.entity_id, 'Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:minus-circle
        {% endif %}
      state: >
        {% if is_state('binary_sensor.work_today', 'on') %}
          {% if is_state('input_boolean.work_shift_override', 'on') %} {{ states('input_select.current_work_shift') }}
          {% else %} {{ states('sensor.scheduled_shift_today') }}
          {% endif %}
        {% else %} Off
        {% endif %}
      attributes:
        options: "{{ ['Off', 'Days', 'Afternoons'] }}"

    - name: "Work Status"
      unique_id: work_status
      icon: >
        {% if is_state('binary_sensor.work_vacation', 'on') %}
          {% set icon = state_attr('binary_sensor.work_vacation', 'icon') %}
        {% elif is_state('binary_sensor.work_layoff', 'on') %}
          {% set icon = state_attr('binary_sensor.work_layoff', 'icon') %}
        {% elif is_state('binary_sensor.work_holiday', 'on') %}
          {% set icon = state_attr('binary_sensor.work_holiday', 'icon') %}
        {% elif is_state('binary_sensor.work_today', 'on') %}
          {% set icon = state_attr('sensor.work_shift_today', 'icon') %}
        {% elif is_state('binary_sensor.work_today', 'off') %} mdi:factory
        {% else %} {% set icon = 'mdi:calendar-alert' %}
        {% endif %}
        {{ icon }}
      device_class: enum
      state: >
        {% if is_state('input_boolean.work_schedule', 'off') %} Disabled
        {% elif is_state('input_boolean.work_schedule_lock', 'on')
            or is_state('input_boolean.work_today_on', 'on')
            or is_state('input_boolean.work_tomorrow_on', 'on')
            or is_state('input_boolean.work_shift_override', 'on') %} Override
        {% elif is_state('binary_sensor.work_layoff', 'on') %} Layoff
        {% elif is_state('binary_sensor.work_vacation', 'on') %} Vacation
        {% elif is_state('binary_sensor.work_holiday', 'on') %} Holiday
        {% else %} {{ states('sensor.work_shift_today') }}
        {% endif %}
      attributes:
        options: "{{ ['Off', 'Days', 'Afternoons', 'Holiday', 'Vacation', 'Layoff', 'Override', 'Disabled'] }}"
        shift: >
          {% if is_state(this.entity_id, 'Days') %}
          {% elif is_state(this.entity_id, 'Afternoons') %}
          {% else %} Off
          {% endif %}

    - name: "Next Work Holiday"
      unique_id: next_work_holiday
      icon: mdi:calendar-heart
      device_class: timestamp
      state: >
        {% from 'schedule.jinja' import rdate %}
        {{ rdate(state_attr('calendar.work_holiday', 'start_time')) }}
      attributes:
        display: >
          {% from 'schedule.jinja' import day_or_date %}
          {{ day_or_date(states(this.entity_id), true, true) }}
