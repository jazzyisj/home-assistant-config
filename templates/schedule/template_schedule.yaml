###############################################################################
## Templates - Schedule
###############################################################################
- binary_sensor:
    - name: 'Quiet Hours'
      unique_id: quiet_hours
      icon: "{{ 'mdi:volume-low' if is_state('binary_sensor.quiet_hours','on') else 'mdi:volume-high' }}"
      state: >
        {% if is_state('input_boolean.quiet_hours_override','on') %} true
        {% elif is_state('input_boolean.quiet_hours_enabled','on') %}
          {% if is_state('input_select.occupancy_mode','Night') %} true
          {% elif is_state('binary_sensor.scene_active','on') %} false
          {% else %}
            {% set qstart = today_at(states('input_datetime.quiet_hours_start')) %}
            {% set qend = today_at(states('input_datetime.quiet_hours_end')) %}

            {# wake must be todays date - next_waketime will have switched to tomorrow after waketime #}
            {% set wake = 'off' if states('sensor.next_waketime')|lower in ['off','','unknown','unavailable','none']
                else today_at(state_attr('sensor.next_waketime','24hour')) %}

            {% set bed = 'off' if states('sensor.next_bedtime')|lower in ['off','','unknown','unavailable','none']
                else as_datetime(states('sensor.next_bedtime')) %}

            {% if wake == 'off' or bed == 'off' %}
              {# wake/bed is off, default to non-sync times #}
              {% set wake = qstart %}
              {% set bed = qend %}
            {% elif bed != 'off' %}
              {# day_reset < waketime < bedtime - next bedtime has switched to tomorrow #}
              {% set bed = bed - timedelta(days=1) if today_at(states('input_datetime.day_reset')) < wake < bed else bed %}
            {% endif %}

            {% if is_state('input_boolean.quiet_hours_bedtime_sync','on') %}
              {# subtract pre bedtime #}
              {% set start = bed - timedelta(minutes=states('input_number.quiet_minutes_before_bedtime')|int) %}
              {# add post waketime #}
              {% set end = wake + timedelta(states('input_number.quiet_minutes_after_waketime')|int) %}
            {% else %}
              {% set start = qstart %}
              {% set end = qend %}
            {% endif %}

            {# time > endtime , waketime to tomorrows waketime #}
            {% if wake != 'off' %}
              {% set wake = wake + timedelta(days=1) if now() > end else wake %}
            {% endif %}
            {{ start <= now() < end  }}
          {% endif %}
        {% endif %}

    # bedtime script on, or after bedtime but not night mode yet, before wakeup
    - name: 'Bedtime Active'
      unique_id: bedtime_active
      icon: mdi:bed-empty
      delay_on:
        seconds: 15 # allow automation.schedule_bedtime to detect first bedtime trigger
      state: >
        {% set wake = 'off' if states('sensor.next_waketime')|lower in ['off','','unknown','unavailable','none']
            else states('sensor.next_waketime')|as_datetime %}
        {% set bed = 'off' if states('sensor.next_bedtime')|lower in ['off','','unknown','unavailable','none']
            else states('sensor.next_bedtime')|as_datetime %}

        {% if wake != 'off' %}
          {# if waketime > 24 hour away - next waketime has switched to tomorrow #}
          {% set wake = wake - timedelta(days=1) if wake - now() > timedelta(days=1) else wake %}
        {% endif %}

        {% if bed != 'off' %}
          {# if now is before waketime and waketime is less than bedtime - next bedtime has switched to tomorrow #}
          {% set bed = bed - timedelta(days=1) if today_at(states('input_datetime.day_reset')) < wake < bed else bed %}
        {% endif %}

        {{ is_state('script.bedtime','on')
            or (states('input_select.occupancy_mode') in ['Home','Guest']
              and (bed != 'off' and wake != 'off')
              and bed <= now() < wake) }}

    - unique_id: reminder_led_alert
      state: >
        {{ is_state('input_boolean.dexter_medication_active','on')
            or is_state('input_boolean.jason_medication_active','on')
            or is_state('input_boolean.maddie_mealtime_active','on') }}

- sensor:
    - name: 'TOD Greeting'
      unique_id: tod_greeting
      state: >
        {% set time = states('sensor.time') %}
        {% if '02:00' <= time < '12:00' %}{% set tod = 'Morning' %}
        {% elif '12:00' <= time < '18:00' %}{% set tod = 'Afternoon' %}
        {% else %}{% set tod = 'Evening' %}
        {% endif %}
        Good {{ tod }}

    - name: 'Time Trigger Shift'
      unique_id: time_trigger_shift # used in reminders
      state: >
        {% if is_state('sensor.today_shift','Days') and is_state('binary_sensor.work_today','on') %} days
        {% elif is_state('sensor.today_shift','Afternoons') and is_state('binary_sensor.work_today','on') %} afts
        {% else %} wknd
        {% endif %}

    - name: 'Next Waketime'
      unique_id: next_waketime
      device_class: timestamp
      icon: mdi:weather-sunset-up
      state: >
        {% set time = now().replace(second=0, microsecond=0) %} {# minute time resolution #}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% set wake = 'off' %}

        {% if is_state('input_select.occupancy_mode','Guest') %}
          {% if is_state('input_boolean.guest_morning','on') %}
            {# if now > guest wake, + 86400 to set next guest wake to tomorrow #}
            {% set wake = as_datetime((guest|as_timestamp + 86400)
                |timestamp_custom('%Y-%m-%dT%H:%M:%S%z',true,'unknown')) if time > guest else guest %}
          {% endif %}
        {% else %}
          {% set days = today_at(states('input_datetime.days_waketime')) %}
          {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
          {% set wknd = today_at(states('input_datetime.weekend_waketime')) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}
          {% set set_alarms = state_attr('sensor.alarm_clock_next_alarm','set_alarms') %}
          {% set wake_alarms = namespace(value=[]) %}

          {# set wake time today #}
          {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
            {% set wake_today = afts if is_state('sensor.today_shift','Afternoons') else days %}
          {% elif is_state('binary_sensor.work_today','off') and is_state('input_boolean.weekend_morning','on') %}
            {% set wake_today = wknd %}
          {% elif is_state('input_boolean.house_wakeup','on') %}
            {% set wake_today = house + timedelta(days=1) if now() > house else house %}
          {% else %} {% set wake_today = 'off' %}
          {% endif %}

          {# set wake time tomorrow #}
          {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_morning','on') %}
            {% set wake_tomorrow = afts + timedelta(days=1) if is_state('sensor.tomorrow_shift','Afternoons') else days + timedelta(days=1) %}
          {% elif is_state('binary_sensor.work_tomorrow','off')and is_state('input_boolean.weekend_morning','on') %}
            {% set wake_tomorrow = wknd + timedelta(days=1) %}
          {% else %}
            {% set wake_tomorrow = house if is_state('input_boolean.house_wakeup','on') else 'off' %}
          {% endif %}

          {% if wake_today == 'off' %}
            {# use house time if wake_today is off #}
            {% set wake = wake_tomorrow if time > house else wake_today %}
          {% else %}
            {# if time is after wake_today - next is wake_tomorrow #}
            {# if time is after 4am and house not in night mode - house already awake, next wake is tomorrow #}
            {% set wake = wake_tomorrow if (time > wake_today) else wake_today %}
          {% endif %}

          {# alarm clocks are set - select wake alarms #}
          {% if set_alarms|count > 0 %}
            {% set wake_ts = wake|as_timestamp %}
            {% for item in set_alarms %}
              {% set item_ts = as_datetime(item)|as_timestamp %}
              {# select set alarms within 4 hours of next wake time #}
              {% if ((wake_ts - item_ts)|abs <= 14400) %}
                {% set wake_alarms.value = wake_alarms.value + [item] %}
              {% endif %}
            {% endfor %}

            {# set next waketime to next wake alarm - wake_alarms(min) #}
            {% if wake_alarms.value|count > 0 %}
              {% set wake = as_datetime(wake_alarms.value|min) %}
            {% endif %}
          {% endif %}
        {% endif %}
        {{ wake if wake == 'off' else wake.isoformat() }}
      attributes:
        24hour: >
          {% if states('sensor.next_waketime')|lower not in ['off','','unknown','unavailable','none'] %}
            {{ as_datetime(states('sensor.next_waketime'))|as_timestamp('unknown')|timestamp_custom('%H:%M',true,'unknown') }}
          {% endif %}
        12hour: > #TEST %a
          {% if states('sensor.next_waketime')|lower not in ['off','','unknown','unavailable','none'] %}
            {{ as_datetime(states('sensor.next_waketime'))|as_timestamp('unknown')|timestamp_custom('%a %-I:%M %p',true,'unknown') }}
          {% endif %}
        pre_waketime: >
          {% set time = now().replace(second=0,microsecond=0) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}
          {% set days = today_at(states('input_datetime.days_waketime')) - timedelta(minutes=30) %}
          {% set afts = today_at(states('input_datetime.afternoons_waketime')) - timedelta(minutes=30) %}
          {% set wknd = today_at(states('input_datetime.weekend_waketime')) - timedelta(minutes=30) %}
          {% set guest = today_at(states('input_datetime.guest_waketime')) - timedelta(minutes=30) %}
          {% if is_state('input_select.occupancy_mode','Night') %}
            {% if time >= house %} true
            {% elif is_state('binary_sensor.owner_home','on') %}
              {{ (time >= afts if is_state('sensor.today_shift','Afternoons') else time >= days)
                  if is_state('binary_sensor.work_today','on') else time >= wknd }}
            {% else %}{{ time >= guest }}
            {% endif %}
          {% else %} false
          {% endif %}

    #MIDNIGHT #VERIFY - today shift sensor delay 4 hours, bedtimes missed sunday night aft -> days
    - name: 'Next Bedtime'
      unique_id: next_bedtime
      device_class: timestamp
      icon: mdi:bed
      state: >
        {% set time = now().replace(second=0, microsecond=0) %} {# minute time resolution #}
        {% set days = today_at(states('input_datetime.days_bedtime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_bedtime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_bedtime')) %}
        {% set guest = today_at(states('input_datetime.guest_bedtime')) %}
        {% set wake = states('sensor.next_waketime')|as_datetime %}
        {% set bed_today = 'off' %}

        {% if is_state('input_select.occupancy_mode','Guest')
            and is_state('input_boolean.guest_night','on') %}
          {% set bed_today = guest %}
        {% elif is_state('binary_sensor.work_schedule','off') %}
          {% if is_state('input_boolean.weekend_night','on') %}
            {% set bed_today = wknd %}
          {% endif %}
        {% else %}
          {% if is_state('sensor.tomorrow_shift','Afternoons') %}
            {% if wake != 'off' and time < afts  %}
              {% if is_state('binary_sensor.work_today','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bed_today = afts %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bed_today = wknd %}
              {% endif %}
            {% else %} {# after bedtime - tomorrow #}
              {% if is_state('binary_sensor.work_tomorrow','on')
                    and is_state('input_boolean.workday_night','on') %}
                {% set bed_today = afts %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bed_today = wknd %}
              {% endif %}
            {% endif %}
          {% else %} {# days/default #}
            {% if wake != 'off' and time < days %}
              {% if is_state('binary_sensor.work_today','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bed_today = days %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bed_today = wknd %}
              {% endif %}
            {% else %} {# after bedtime - tomorrow #}
              {% if is_state('binary_sensor.work_tomorrow','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bed_today = days %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bed_today = wknd %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endif %}

        {% if bed_today != 'off' %}
          {% set bed_today = bed_today if time < bed_today else bed_today + timedelta(days=1) %}
          {{ bed_today.isoformat() }}
        {% else %} {{ bed_today }}
        {% endif %}
      attributes:
        24hour: >
          {% if states('sensor.next_bedtime')|lower not in ['off','','unknown','unavailable','none'] %}
            {{ as_datetime(states('sensor.next_bedtime')).strftime('%H:%M') }}
          {% endif %}
        12hour: > #TEST %a
          {% if states('sensor.next_bedtime')|lower not in ['off','','unknown','unavailable','none'] %}
            {{ as_datetime(states('sensor.next_bedtime')).strftime('%a %-I:%M %p') }}
          {% endif %}
        delayed_bedtime: >
          {% if is_state('input_boolean.bedtime_delayed','on')
              and states('sensor.next_bedtime')|lower not in ['off','','unknown','unavailable','none'] %}
            {% set bedtime = as_datetime(states('sensor.next_bedtime')) %}
            {% if now() <= bedtime %}
              {% set bed = bedtime + timedelta(minutes=states('input_number.stay_awake_delay')|int) %}
            {% elif not is_state('timer.bedtime_delay','idle') %}
              {% set bed = state_attr('timer.bedtime_delay','finishes_at') %}
            {% endif %}
            {% if bed is defined %} {{ bed.strftime('%-I:%M %p') }} {% endif %}
          {% endif %}
