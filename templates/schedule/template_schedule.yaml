###############################################################################
## Templates - Schedule
###############################################################################
- binary_sensor:
    - name: 'Quiet Time'
      unique_id: quiet_time
      icon: "{{ iif(is_state('binary_sensor.quiet_time','on'),'mdi:volume-low','mdi:volume-high') }}"
      state: >
        {% if is_state('input_boolean.quiet_time_override','on') %} true
        {% elif is_state('input_boolean.quiet_time_enabled','on') %}
          {% if is_state('binary_sensor.scene_active','on') %} false
          {% else %}
            {% if states('sensor.quiet_time_start')|lower not in ['unknown','unavailable','none']
                and states('sensor.quiet_time_end')|lower not in ['unknown','unavailable','none'] %}
              {{ states('sensor.quiet_time_start')|as_datetime <= now() < states('sensor.quiet_time_end')|as_datetime }}
            {% endif %}
          {% endif %}
        {% endif %}

    - name: 'Waketime Active'
      unique_id: waketime_active
      icon: mdi:weather-sunset-up
      state: >
        {% if is_state('input_select.occupancy_mode','Night') %}
          {% set waketime = states('sensor.waketime_today')|as_datetime
              if states('sensor.waketime_today')|lower not in ['unknown','unavailable','none'] else none %}
          {% if waketime != none %}
            {{ now() >= waketime - timedelta(minutes=30)
                and now() < waketime + timedelta(minutes=states('input_number.waketime_timeout')|int) }}
          {% else %} false
          {% endif %}
        {% else %} {{ is_state('script.waketime','on') }}
        {% endif %}

    # bedtime script/delay timer on or after bedtime but not night mode, and more than 2 hours before waketime
    - name: 'Bedtime Active'
      unique_id: bedtime_active
      icon: "{{ 'mdi:chevron-up-circle' if is_state('input_boolean.bedtime_delayed','on') else 'mdi:bed-empty' }}"
      state: >
        {% if is_state('script.bedtime','on') or not is_state('timer.bedtime_delay','idle') %} true
        {% elif states('input_select.occupancy_mode') in ['Home','Guest'] %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}
          {% set waketime = states('sensor.next_waketime')|as_datetime
              if states('sensor.next_waketime')|lower not in ['unknown','unavailable','none'] else none %}
          {% set bedtime = states('sensor.bedtime_today')|as_datetime
              if states('sensor.bedtime_today')|lower not in ['unknown','unavailable','none'] else none %}
          {% if waketime != none and bedtime != none %}{{ bedtime <= now() <= waketime - timedelta(hours=2) }}
          {% else %} false
          {% endif %}
        {% else %} false
        {% endif %}

    - name: 'Reminder LED Alert'
      unique_id: reminder_led_alert
      state: >
        {{ is_state('input_boolean.dexter_medication_active','on')
            or is_state('input_boolean.jason_medication_active','on')
            or is_state('input_boolean.maddie_mealtime_active','on')
            or is_state('input_boolean.garbage_alert','on')
            or is_state('input_boolean.recycle_alert','on')
            or is_state('input_boolean.yardwaste_alert','on') }}

- sensor:
    - name: 'Quiet Time Start'
      unique_id: quiet_time_start
      device_class: timestamp
      state: >
        {% if is_state('input_boolean.quiet_time_enabled','on') %}
          {% if is_state('input_boolean.quiet_time_bedtime_sync','on')
              and states('sensor.bedtime_today')|lower not in ['unknown','unavailable','none']
              and states('sensor.waketime_today')|lower not in ['unknown','unavailable','none'] %}
              {% set start = states('sensor.bedtime_today')|as_datetime %}
              {% set end = states('sensor.waketime_today')|as_datetime %}
              {{ start - timedelta(minutes=states('input_number.quiet_minutes_before_bedtime')|int) }}
          {% else %} {{ today_at(states('input_datetime.quiet_time_start')) }}
          {% endif %}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: "{{ states('sensor.quiet_time_start')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"

    - name: 'Quiet Time End'
      unique_id: quiet_time_end
      device_class: timestamp
      state: >
        {% if is_state('input_boolean.quiet_time_enabled','on') %}
          {% if is_state('input_boolean.quiet_time_bedtime_sync','on')
              and states('sensor.waketime_today')|lower not in ['unknown','unavailable','none'] %}
            {% set qstart = states('sensor.quiet_time_start')|as_datetime %}
            {% set qend = states('sensor.waketime_today')|as_datetime %}
            {{ qend + timedelta(minutes=states('input_number.quiet_minutes_after_waketime')|int) }}
          {% else %}
            {{ today_at(states('input_datetime.quiet_time_end')) }}
          {% endif %}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        12hour: "{{ states('sensor.quiet_time_end')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"

    - name: 'TOD Greeting'
      unique_id: tod_greeting
      state: >
        {% set time = states('sensor.time') %}
        {% if '02:00' <= time < '12:00' %}{% set tod = 'Morning' %}
        {% elif '12:00' <= time < '18:00' %}{% set tod = 'Afternoon' %}
        {% else %}{% set tod = 'Evening' %}
        {% endif %}
        Good {{ tod }}

    - name: 'Time Trigger Shift'
      unique_id: time_trigger_shift # used in reminders
      state: >
        {% if is_state('sensor.work_shift_today','Days') and is_state('binary_sensor.work_today','on') %} days
        {% elif is_state('sensor.work_shift_today','Afternoons') and is_state('binary_sensor.work_today','on') %} afts
        {% else %} wknd
        {% endif %}

    #MIDNIGHT #ISSUE with delayed work today next bedtime will be wrong (wknd) going from work off to work on until day_reset (delay)
    - name: 'Next Waketime'
      unique_id: next_waketime
      device_class: timestamp
      icon: mdi:weather-sunset-up
      state: >
        {% set waketime = none %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% if is_state('input_select.occupancy_mode','Guest') %}
          {% if is_state('input_boolean.guest_morning','on') %}
            {% set waketime = guest + timedelta(days=1) if now() > guest else guest %}
          {% endif %}
        {% else %}
          {% set days = today_at(states('input_datetime.days_waketime')) %}
          {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
          {% set wknd = today_at(states('input_datetime.weekend_waketime')) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}
          {% set set_alarms = state_attr('sensor.alarm_clock_next_alarm','set_alarms') %}

          {# set wake time today #}
          {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
            {% set wake_today = afts if is_state('sensor.work_shift_today','Afternoons') else days %}
          {% elif is_state('binary_sensor.work_today','off') and is_state('input_boolean.weekend_morning','on') %}
            {% set wake_today = wknd %}
          {% elif is_state('input_boolean.house_wakeup','on') %}
            {% set wake_today = house %}
          {% else %} {% set wake_today = none %}
          {% endif %}

          {# set wake time tomorrow #}
          {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_morning','on') %}
            {% set wake_tomorrow = afts + timedelta(days=1) if is_state('sensor.work_shift_tomorrow','Afternoons') else days + timedelta(days=1) %}
          {% elif is_state('binary_sensor.work_tomorrow','off')and is_state('input_boolean.weekend_morning','on') %}
            {% set wake_tomorrow = wknd + timedelta(days=1) %}
          {% else %}
            {% set wake_tomorrow = none if is_state('input_boolean.house_wakeup','off')
                else house + timedelta(days=1) if now() > house else house %}
          {% endif %}

          {% if wake_today == none %}
            {# use house time if wake_today is off #}
            {% set waketime = wake_tomorrow if now() > house else wake_today %}
          {% else %}
            {# if now is after wake_today next wake is tomorrow #}
            {% set waketime = wake_tomorrow if now() > wake_today else wake_today %}
          {% endif %}

          {# select wake alarms #}
          {% if waketime != none and set_alarms != none and set_alarms|count > 0 %}
            {% set wake_alarms = namespace(value=[]) %}
            {% set wake_ts = waketime|as_timestamp %}
            {% for item in set_alarms %}
              {# select set alarms within 6 hours of next wake time - auto is always true #}
              {% if ((wake_ts - item)|abs <= 21600) %}
                {% set wake_alarms.value = wake_alarms.value + [item] %}
              {% endif %}
            {% endfor %}
            {# set next waketime to next wake alarm - wake_alarms(min) #}
            {% if wake_alarms.value|count > 0 %}
              {% set waketime = wake_alarms.value|min|as_datetime %}
            {% endif %}
          {% endif %}
        {% endif %}
        {{ waketime }}
      attributes:
        12hour: "{{ states('sensor.next_waketime')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"
        24hour: "{{ states('sensor.next_waketime')|as_timestamp(none)|timestamp_custom('%H:%M',true,none) }}"

    - name: 'Waketime Today'
      unique_id: waketime_today
      device_class: timestamp
      icon: mdi:weather-sunset-up
      state: >
        {% set waketime = none %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% if is_state('input_select.occupancy_mode','Guest') %}
          {{ guest if is_state('input_boolean.guest_morning','on') else none }}
        {% else %}
          {% set days = today_at(states('input_datetime.days_waketime')) %}
          {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
          {% set wknd = today_at(states('input_datetime.weekend_waketime')) %}
          {% set house = today_at(states('input_datetime.house_waketime')) %}
          {% set day_reset = today_at(states('input_datetime.day_reset')) %}

          {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
            {% set waketime = afts if is_state('sensor.work_shift_today','Afternoons') else days %}
          {% elif is_state('binary_sensor.work_today','off') and is_state('input_boolean.weekend_morning','on') %}
            {% set waketime = wknd %}
          {% elif is_state('input_boolean.house_wakeup','on') %}
            {% set waketime = house %}
          {% else %} {% set waketime = none %}
          {% endif %}
          {{ waketime if waketime > day_reset < now() else waketime - timedelta(days=1) }}
        {% endif %}
      attributes:
        12hour: "{{ states('sensor.waketime_today')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"

    - name: 'Next Bedtime'
      unique_id: next_bedtime
      device_class: timestamp
      icon: mdi:bed
      state: >
        {% set days = today_at(states('input_datetime.days_bedtime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_bedtime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_bedtime')) %}
        {% set guest = today_at(states('input_datetime.guest_bedtime')) %}
        {% set waketime = states('sensor.waketime_today')|as_datetime
            if states('sensor.waketime_today')|lower not in ['unknown','unavailable','none'] else none %}
        {% set bedtime = none %}
        {% if is_state('input_select.occupancy_mode','Guest') and is_state('input_boolean.guest_night','on') %}
          {% set bedtime = guest %}
        {% elif is_state('binary_sensor.work_schedule','off') %}
          {% if is_state('input_boolean.weekend_night','on') %}
            {% set bedtime = wknd %}
          {% endif %}
        {% else %}
          {% if is_state('sensor.work_shift_tomorrow','Afternoons') %}
            {% if waketime != none and (now() < afts < waketime)  %}
              {% if is_state('binary_sensor.work_today','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bedtime = afts %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bedtime = wknd %}
              {% endif %}
            {% else %} {# after bedtime - tomorrow #}
              {% if is_state('binary_sensor.work_tomorrow','on')
                    and is_state('input_boolean.workday_night','on') %}
                {% set bedtime = afts %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bedtime = wknd %}
              {% endif %}
            {% endif %}
          {% else %} {# days/default #}
            {% if waketime != none and (now () < days < waketime) %}
              {% if is_state('binary_sensor.work_today','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bedtime = days %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bedtime = wknd %}
              {% endif %}
            {% else %} {# after bedtime - tomorrow #}
              {% if is_state('binary_sensor.work_tomorrow','on')
                  and is_state('input_boolean.workday_night','on') %}
                {% set bedtime = days %}
              {% elif is_state('input_boolean.weekend_night','on') %}
                {% set bedtime = wknd %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endif %}
        {{ bedtime if bedtime == none or now() < bedtime else bedtime + timedelta(days=1) }}
      attributes:
        12hour: "{{ states('sensor.next_bedtime')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"
        delayed_bedtime: >
          {% if not is_state('timer.bedtime_delay','idle') %}
            {% set bedtime = state_attr('timer.bedtime_delay','finishes_at') %}
          {% else %}
            {% set bedtime = states('sensor.next_bedtime')|as_datetime %}
              {% if  is_state('input_boolean.bedtime_delayed','on')
                  and bedtime|lower not in ['unknown','unavailable','none'] %}
              {% set bedtime = bedtime
                  + timedelta(minutes=states('input_number.bedtime_delay')|int) %}
              {% endif %}
          {% endif %}
          {{ bedtime|as_timestamp(none)|timestamp_custom('%-I:%M %p','true',none) }}

    #NOTE waketime should never be none else bedtime today incorrect -1 day when bedtime < ??
    - name: 'Bedtime Today'
      unique_id: bedtime_today
      device_class: timestamp
      icon: mdi:bed
      state: >
        {% set day_reset = today_at(states('input_datetime.day_reset')) %}
        {% set days = today_at(states('input_datetime.days_bedtime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_bedtime')) %}
        {% set wknd = today_at(states('input_datetime.weekend_bedtime')) %}
        {% set guest = today_at(states('input_datetime.guest_bedtime')) %}
        {% set waketime = states('sensor.next_waketime')|as_datetime
            if states('sensor.next_waketime')|lower not in ['unknown','unavailable','none'] else none %}

        {% if is_state('input_select.occupancy_mode','Guest') %}
          {% set bedtime = today_at(states('input_datetime.guest_bedtime'))
              if is_state('input_boolean.guest_night','on') %}
        {% else %}
          {% if now() < day_reset  %}
            {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
              {% set bedtime = afts if is_state('sensor.work_shift_today','Afternoons') else days %}
            {% else %}
              {% set bedtime = wknd if is_state('binary_sensor.work_today','off')
                  and is_state('input_boolean.weekend_morning','on') else none %}
            {% endif %}
          {% else %}
            {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_morning','on') %}
              {% set bedtime = afts if is_state('sensor.work_shift_tomorrow','Afternoons') else days %}
            {% else %}
              {% set bedtime = wknd if is_state('binary_sensor.work_tomorrow','off')
                  and is_state('input_boolean.weekend_morning','on') else none %}
            {% endif %}
          {% endif %}
          {% if bedtime != none %}
            {% set bedtime = bedtime - timedelta(days=1)
                if waketime != none and bedtime > waketime else bedtime %}
            {% set bedtime = bedtime + timedelta(days=1) if bedtime < day_reset < now() else bedtime %}
          {% endif %}
        {% endif %}
        {{ bedtime.isoformat() if bedtime != none else none }}
      attributes:
        12hour: "{{ states('sensor.bedtime_today')|as_timestamp(none)|timestamp_custom('%a %-I:%M %p',true,'OFF') }}"
