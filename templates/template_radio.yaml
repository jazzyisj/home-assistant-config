- binary_sensor:
    - unique_id: radio_failed
      name: Radio Failed # separated from radio_status so to add delay and avoid false triggers
      delay_on:
        seconds: 15
      state: > # script.tts play is req because sensor doesn't turn on until end of tts play script
        {% if is_state('input_boolean.radio_failed','on') %} true
        {% elif is_state('input_boolean.startup_pending','on')
          or is_state('input_boolean.resume_radio','on')
          or is_state('binary_sensor.alarm_clock_active','on')
          or is_state('script.tts_play','on')
          or is_state('input_boolean.tts_playing','on') %} false
        {% elif is_state('input_boolean.radio','on') and is_state('sensor.radio_status','off') %} true
        {% else %} false
        {% endif %}

- sensor:
    - unique_id: radio_status # picture glance, media image
      name: Radio Status
      icon: mdi:radio
      state: >
        {% if is_state('input_boolean.startup_pending','on') %} off
        {% elif is_state('binary_sensor.radio_failed','on') %} failed
        {% elif is_state('input_boolean.radio','on') %}
          {% if states(states('sensor.radio_media_player')) in ['playing','paused'] %}
            {% if is_state('input_select.media_preset_type_sleep','Radio')
                and is_state('timer.media_preset_sleep','active') %} sleep
            {% elif is_state('input_select.media_preset_type_wake','Radio')
                and is_state('script.scene_wake_up','on') %} wake
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        {% else %} off
        {% endif %}

    - unique_id: radio_media_player
      name: Radio Media Player
      icon: mdi:radio
      state: >
        {{ expand(state_attr('sensor.media_players','players'))
            |selectattr('name','eq',states('input_select.radio_media_player'))|map(attribute='entity_id')|join('') }}
      attributes:
        players: >
          {% set player = states('sensor.radio_media_player') %}
          {{ expand(state_attr('sensor.media_players_single','players'))
              |selectattr('attributes.' ~ player.split('.')[1],'eq',true)|map(attribute='entity_id')|list
                if is_state_attr(player,'type','group') else [player] }}
