- binary_sensor:
    - name: "Indoor Low Temperatature Alert"
      unique_id: indoor_low_temperature_alert # can't use availability template because of separate sensors
      delay_on:
        minutes: 30 # let temp stabalize, avoid false alerts
      state: >
        {{ ((states('sensor.thermostat_temperature')|int < states('input_number.low_temperature_threshold')|int)
              and not states('sensor.thermostat_temperature')|lower in ['unknown','unavailable','none'])
            or ((states('sensor.upstairs_bathroom_sensor_temperature')|int < states('input_number.low_temperature_threshold')|int )
              and not states('sensor.upstairs_bathroom_sensor_temperature')|lower in ['unknown','unavailable','none'])
            and is_state('input_boolean.climate_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    # add bathroom temp differential to temp threshold to reduce false alerts
    # can't use availability template because of separate sensors
    - name: "Indoor High Temperature Alert"
      unique_id: indoor_high_temperature_alert
      delay_on:
        minutes: 30 # let temp stabalize, avoid false alerts
      state: >
        {{ (states('sensor.thermostat_temperature')|int > states('input_number.high_temperature_threshold')|int
              and not states('sensor.thermostat_temperature')|lower in ['unknown','unavailable','none'])
            or (( states('sensor.upstairs_bathroom_sensor_temperature')|int > (states('input_number.high_temperature_threshold')|int
                  + states('input_number.bathroom_temperature_differential')|int ))
              and not states('sensor.upstairs_bathroom_sensor_temperature')|lower in ['unknown','unavailable','none'])
            and is_state('input_boolean.climate_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Indoor High Humidity Alert"
      unique_id: indoor_high_humidity_alert # can't use availability template because of separate sensors
      delay_on:
        minutes: 60 # let humidity stabalize, avoid false alerts
      state: >
        {{ (states('sensor.thermostat_humidity')|int > states('input_number.high_humidity_threshold')|int
              and not states('sensor.thermostat_humidity')|lower in ['unknown','unavailable','none'] )
            or (states('sensor.upstairs_bathroom_sensor_humidity')|int > states('input_number.high_humidity_threshold')|int
              and not states('sensor.upstairs_bathroom_sensor_humidity')|lower in ['unknown','unavailable','none'])
            and is_state('input_boolean.climate_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Upstairs Bathroom Mold Risk Alert"
      unique_id: upstairs_bathroom_mold_risk_alert
      delay_on:
        minutes: 60 # let temp/humidity stabalize, avoid false alerts
      state: >
        {{ states('sensor.upstairs_bathroom_mold_risk')|int > states('input_number.mold_risk_threshold')|int
            and is_state('input_boolean.climate_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "HVAC Window Door Open Alert"
      unique_id: hvac_window_door_open_alert
      delay_on:
        minutes: 15 # allow temporary open
      state: >
        {{ is_state('binary_sensor.window_open','on') or is_state('binary_sensor.door_open','on')
            and not is_state('input_select.set_hvac_mode','off')
            and is_state('input_boolean.climate_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

- sensor:
    - name: "Thermostat Mode"
      unique_id: thermostat_mode
      icon: mdi:hvac
      state: >
        {% if is_state('climate.thermostat','heat') %} Heat
        {% elif is_state('climate.thermostat','cool') %} Cool
        {% elif is_state('climate.thermostat','heat_cool') %} Auto
        {% elif is_state('climate.thermostat','fan_only') %} Fan
        {% elif is_state('climate.thermostat','off') %} Off
        {% else %} Unknown
        {% endif %}

    - name: "Thermostat Target Temperature"
      unique_id: thermostat_target_temperature
      icon: mdi:hvac
      state: > #ISSUE when heat_cool and not on using heat target - bounces target around
        {% if states('climate.thermostat') in ['heat','cool'] %}{{ state_attr('climate.thermostat','temperature') }}
        {% elif states('climate.thermostat') == 'heat_cool' %}
          {% if states('sensor.thermostat_hvac_state') == 'heating' %}{{ state_attr('climate.thermostat','target_temp_high') }}
          {% elif states('sensor.thermostat_hvac_state') == 'cooling' %}{{ state_attr('climate.thermostat','target_temp_low') }}
          {% else %} {{ state_attr('climate.thermostat','target_temp_high') }}
          {% endif %}
        {% else %} 0
        {% endif %}

    - name: "Thermostat HVAC State"
      unique_id: thermostat_hvac_state
      icon: mdi:hvac # mdi:air-conditioner
      state: "{{ state_attr('climate.thermostat','hvac_action') }}"

    # overload climate integration sensors
    - name: "Indoor Temperature"
      unique_id: indoor_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: Â°C
      state: >
        {{ '%0.1f'|format(states('sensor.thermostat_temperature')|float(default='ERROR'))
            if is_number(states('sensor.thermostat_temperature')) else 'ERROR' }}
      availability: "{{ is_number(states('sensor.thermostat_temperature')) }}"

    - name: "Indoor Humidity"
      unique_id: indoor_humidity
      device_class: humidity
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {{ states('sensor.thermostat_humidity')|int
            if is_number(states('sensor.thermostat_humidity')) else 'ERROR' }}
      availability: "{{ is_number(states('sensor.thermostat_humidity')) }}"