###############################################################################
## Templates - Climate
###############################################################################
- button:
    - name: "HVAC Filter Reset"
      unique_id: hvac_filter_reset
      icon: mdi:air-filter
      press: []

    - name: "Reset Thermostat"
      unique_id: reset_thermostat
      icon: mdi:thermostat
      press:
        - service: script.set_thermostat

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Nest Connected"
      unique_id: nest_connected
      icon: mdi:home-circle
      device_class: connectivity
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id')|select('has_value')|list %}
        {{ entities|count > 0 if entities != none else false }}
      attributes:
        entity_id: "{{ integration_entities('nest') }}"

- binary_sensor:
    - name: "Nest Connected Alert"
      unique_id: nest_connected_alert
      icon: mdi:home-circle
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.nest_connected','off')
            and is_state('input_boolean.climate_alerts','on') }}

    - name: "HVAC Active"
      unique_id: hvac_active
      state: >
        {{ state_attr('climate.thermostat','hvac_action') in ['heating','cooling']
            or is_state_attr('climate.thermostat','fan_mode','on') }}
      availability: "{{ has_value('climate.thermostat') }}"

    - name: "HVAC Filter Alert"
      unique_id: hvac_filter_alert
      icon: mdi:air-filter
      device_class: problem
      state: >
        {% set time_limit = false %}
        {% set filter_hours = states('sensor.hvac_filter_hours')|int(-1) > 250 %}
        {% if has_value('button.hvac_filter_reset') %}
          {% set reset_time = states('button.hvac_filter_reset') %}
          {% set time_limit = now() - reset_time|as_datetime > timedelta(days=90) %}
        {% endif %}
        {{ filter_hours or time_limit }}

    - name: "Indoor Low Temperature Alert"
      unique_id: indoor_low_temperature_alert
      device_class: cold
      delay_on: 1800
      state: >
        {{ ((states('sensor.thermostat_temperature')|int(0) < states('input_number.low_temperature_threshold')|int(0))
              and has_value('sensor.thermostat_temperature'))
            or ((states('sensor.bathroom_sensor_air_temperature')|int(0) < states('input_number.low_temperature_threshold')|int(0) )
              and has_value('sensor.bathroom_sensor_air_temperature'))
            and is_state('input_boolean.climate_alerts','on') }}

    # add bathroom temp differential to temp threshold to reduce false alerts
    - name: "Indoor High Temperature Alert"
      unique_id: indoor_high_temperature_alert
      device_class: heat
      delay_on: 1800
      state: >
        {{ (states('sensor.thermostat_temperature')|int(0) > states('input_number.high_temperature_threshold')|int(0)
              and has_value('sensor.thermostat_temperature'))
            or (( states('sensor.bathroom_sensor_air_temperature')|int(0) > (states('input_number.high_temperature_threshold')|int(0)
                  + states('input_number.bathroom_temperature_differential')|int(0) ))
              and has_value('sensor.bathroom_sensor_air_temperature'))
            and is_state('input_boolean.climate_alerts','on') }}

    - name: "Indoor High Humidity Alert"
      unique_id: indoor_high_humidity_alert
      device_class: moisture
      delay_on: 3600
      state: >
        {{ (states('sensor.thermostat_humidity')|int(0) > states('input_number.high_humidity_threshold')|int(0)
              and has_value('sensor.thermostat_humidity'))
            or (states('sensor.bathroom_sensor_humidity')|int(0) > states('input_number.high_humidity_threshold')|int(0)
              and has_value('sensor.bathroom_sensor_humidity'))
            and is_state('input_boolean.climate_alerts','on') }}

    - name: "Bathroom Mold Risk Alert"
      unique_id: bathroom_mold_risk_alert
      device_class: moisture
      delay_on: 3600
      state: >
        {{ states('sensor.bathroom_mold_risk')|int(0) > states('input_number.mold_risk_threshold')|int(0)
            and is_state('input_boolean.climate_alerts','on') }}

    - name: "HVAC Window Door Open Alert"
      unique_id: hvac_window_door_open_alert
      device_class: opening
      delay_on: 900
      state: >
        {% set open = state_attr('binary_sensor.hvac_window_door_open_alert','entity_id') %}
        {{ state_attr('binary_sensor.hvac_window_door_open_alert','entity_id')|count > 0
            and not is_state('input_select.hvac_mode','off')
            and is_state('input_boolean.climate_alerts','on') if open != none else false }}
      attributes:
        entity_id: >
          {{ expand('group.door_alert_sensors')|rejectattr('entity_id','eq','binary_sensor.garage_side_door_open_alert')
              |selectattr('state','eq','on')|map(attribute='entity_id')|list|sort
            + expand('group.window_alert_sensors')|selectattr('state','eq','on')
              |map(attribute='entity_id')|list|sort }}

- sensor:
    # req for hvac runtime history stats
    - name: "Thermostat HVAC State"
      unique_id: thermostat_hvac_state
      state: "{{ state_attr('climate.thermostat','hvac_action') }}"

    - name: "Thermostat Target Temperature"
      unique_id: thermostat_target_temperature
      icon: mdi:hvac
      device_class: temperature
      unit_of_measurement: °C
      state: >
        {% set hvac_mode = states('climate.thermostat') %}
        {% if hvac_mode in ['heat','cool'] %}
          {{ state_attr('climate.thermostat','temperature') }}
        {% elif hvac_mode == 'heat_cool' %}
          {% if states('sensor.outdoor_temperature')|int(0)
              > state_attr('climate.thermostat','target_temp_high')|int %}
            {{ state_attr('climate.thermostat','target_temp_high') }}
          {% else %}
            {{ state_attr('climate.thermostat','target_temp_low') }}
          {% endif %}
        {% else %} {{ none }}
        {% endif %}
      availability: "{{ has_value('climate.thermostat') }}"

    # overload climate integration sensors
    - name: "Indoor Temperature"
      unique_id: indoor_temperature #IDEA - remote sensor backup values
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: "{{ '%0.1f'|format(states('sensor.thermostat_temperature')|float(none)) }}"
      availability: "{{ is_number(states('sensor.thermostat_temperature')) }}"

    - name: "Indoor Humidity"
      unique_id: indoor_humidity #IDEA - remote sensor backup values
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ '%0.1f'|format(states('sensor.thermostat_humidity')|int(none)) }}"
      availability: "{{ is_number(states('sensor.thermostat_humidity')) }}"

    - name: "HVAC Boost"
      unique_id: hvac_boost
      icon: "{{ iif(states('sensor.hvac_boost')|int(0) > -1,'mdi:thermometer-plus','mdi:thermometer-minus') }}"
      unit_of_measurement: "°C"
      state: >
        {% if is_state('input_boolean.hvac_boost','on') %}
          {% set humidity = states('sensor.outdoor_humidity')|int(0) %}
          {% set hvac_mode = states('climate.thermostat') %}
          {% set cool = true if hvac_mode == 'cool'
              or (hvac_mode == 'heat_cool' and states('sensor.outdoor_temperature')|int(0)
                >= state_attr('climate.thermostat','target_temp_high')|int) else false %}
          {% if not cool and is_state('binary_sensor.waketime_active','on') %} 2
          {% elif is_state('binary_sensor.outdoor_low_temperature_alert','on') %} {{ iif(humidity > 80,2,1) }}
          {% elif is_state('binary_sensor.outdoor_high_temperature_alert','on') %} {{ iif(humidity > 80,-1,0) }}
          {% elif humidity > 80 %}{{ iif(cool,-1,1) }}
          {% else %} 0
          {% endif %}
        {% else %} 0
        {% endif %}
