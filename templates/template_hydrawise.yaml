- binary_sensor:
    - name: Hyrdawise
      unique_id: hyrdrawise_connected
      device_class: connectivity
      icon: "{{ 'mdi:sprinkler-variant' if is_state('binary_sensor.hyrdrawise_connected','on') else 'mdi:alert-circle' }}"
      state: "{{ not states('binary_sensor.sprinklers_status')|lower in ['unknown','unavailable','none'] }}"

    - name: Hyrdwawise
      unique_id: hyrdrawise_connected_alert
      icon: mdi:sprinkler-variant
      state: "{{ is_state('binary_sensor.hyrdrawise_connected','off') }}"

- sensor:
    - name: Current Watering Zone
      unique_id: current_watering_cycle
      icon: mdi:sprinkler-variant
      state: > # zone name, only one enity in group can ever be on at once
        {% set sensors = expand('group.sprinkler_current_cycle') %}
        {% set count = sensors|selectattr('state','eq','on')|list|count %}
        {{ (sensors|selectattr('state','eq','on')|map(attribute='attributes.zone_name')|list)[0] if count == 1 else 'Not Watering' }}
      attributes:
        start_time: >
          {% set sensors = expand('group.sprinkler_current_cycle') %}
          {{ as_timestamp(sensors|selectattr('state','eq','on')|map(attribute='last_changed')|join(''))|timestamp_custom('%_I:%M %p')
              if sensors|selectattr('state','eq','on')|list|count == 1 else 'not_set' }}
        minutes_left: >
          {% set sensors = expand('group.sprinkler_current_cycle') %}
          {% set current = sensors|selectattr('state','eq','on')|map(attribute='entity_id')|join('') %}
          {% if current == '' %} not_set
          {% else %}{{ states('sensor.' ~ current[14:-9] ~ '_watering_time') }}
          {% endif %}
      availability: "{{ is_state('binary_sensor.hyrdrawise_connected','on') }}"

    ## - reject current watering zone to get next
    ## - if more than 1 entity is min value then all zones are suspended
    ## - state is zone name

    #ERROR (MainThread) [homeassistant.helpers.event] Error while processing template: Template("{% set zone_on = state_attr(expand('group.sprinkler_current_cycle')|selectattr('state','eq','on')|map(attribute='entity_id')|join(''),'identifier') %} {% set sensors = expand('group.sprinkler_next_cycle') %} {% set next = sensors|rejectattr('attributes.identifier','eq',zone_on)|map(attribute='state')|list|min %} {% set suspended = as_timestamp(next) - as_timestamp(now()) > 31536000 %} {% if suspended %} not_set {% else %}{{ as_timestamp(next)|timestamp_custom('%a, %B %d %Y, %_I:%M %p') }} {% endif %}")
    #- homeassistant.exceptions.TemplateError: ValueError: min() arg is an empty sequence
    # internet up then down?
    - name: Next Watering
      unique_id: next_watering_cycle
      device_class: timestamp
      icon: mdi:sprinkler-variant
      state: >
        {% if is_state('binary_sensor.hyrdrawise_connected','on') %}
          {% set zone_on = state_attr(expand('group.sprinkler_current_cycle')|selectattr('state','eq','on')|map(attribute='entity_id')|join(''),'identifier') %}
          {% set sensors = expand('group.sprinkler_next_cycle') %}
          {% set next = sensors|rejectattr('attributes.identifier','eq',zone_on)|map(attribute='state')|list|min %}
          {% set suspended = as_timestamp(next) - as_timestamp(now()) > 31536000 %}
          {% if suspended %} Watering Suspended
          {% else %}{{ sensors|selectattr('state','eq',next)|map(attribute='attributes.zone_name')|join('') }}
          {% endif %}
        {% endif %}
      attributes:
        start_time: >
          {% if is_state('binary_sensor.hyrdrawise_connected','on') %}
            {% set zone_on = state_attr(expand('group.sprinkler_current_cycle')|selectattr('state','eq','on')|map(attribute='entity_id')|join(''),'identifier') %}
            {% set sensors = expand('group.sprinkler_next_cycle') %}
            {% set next = sensors|rejectattr('attributes.identifier','eq',zone_on)|map(attribute='state')|list|min %}
            {% set suspended = as_timestamp(next) - as_timestamp(now()) > 31536000 %}
            {% if suspended %} not_set
            {% else %}{{ as_timestamp(next)|timestamp_custom('%a, %B %d %Y, %_I:%M %p') }}
            {% endif %}
          {% endif %}
      availability: "{{ is_state('binary_sensor.hyrdrawise_connected','on') }}"