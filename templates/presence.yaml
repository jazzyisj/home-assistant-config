###################################################################################################
## Templates - Presence
###################################################################################################
- binary_sensor:
    - name: "Someone Home"
      unique_id: someone_home
      device_class: occupancy
      state: >
        {% set home = state_attr(this.entity_id, 'home') %}
        {{ home | count > 0 if home != none else false }}
      attributes:
        home: >
          {{ expand('group.presence_sensors')
              | selectattr('state', 'eq', 'on')
              | map(attribute='object_id') | list
              | map('regex_replace', find='(.*)_home',
              replace='\\1', ignorecase=False) | sort }}
        #NOTE always true after a restart/template reload - last_changed is restart time
        just_arrived: >
          {{ expand('group.presence_sensors')
              | selectattr('attributes.just_arrived', 'eq', true)
              | list | count > 0 }}
        just_left: >
          {{ expand('group.presence_sensors')
              | selectattr('attributes.just_left', 'eq', true)
              | list | count > 0 }}

    - name: "Owner Home"
      unique_id: owner_home
      device_class: occupancy
      state: "{{ is_state('binary_sensor.jason_home', 'on') }}"

    - name: "Jason Home"
      unique_id: jason_home
      device_class: presence
      delay_off: 1 # allow reset when override not on
      delay_on: 1 # allow reset when override not on
      state: >
        {{ is_state('input_boolean.jason_home', 'on')
            if is_state('input_boolean.home_override_jason', 'on')
              else is_state('person.jason', 'home') }}
      attributes:
        #NOTE one of these will always be true after a restart/template reload - last_changed is restart time
        just_arrived: >
          {{ is_state(this.entity_id, 'on')
              and now() - states.binary_sensor.jason_home.last_changed < timedelta(minutes=10) }}
        just_left: >
          {{ is_state(this.entity_id, 'off')
              and now() - states.binary_sensor.jason_home.last_changed < timedelta(minutes=10) }}

    # used for composite device tracker -> device_tracker.guest -> person.guest
    - name: "Guest Home"
      unique_id: guest_home
      device_class: presence
      state: "{{ is_state('input_boolean.guest_home', 'on') }}"
      attributes:
        #NOTE one of these will always be true after a restart/template reload - last_changed is restart time
        just_arrived: >
          {{ is_state(this.entity_id, 'on')
              and now() - states.binary_sensor.guest_home.last_changed < timedelta(minutes=10) }}
        just_left: >
          {{ is_state(this.entity_id, 'off')
              and now() - states.binary_sensor.guest_home.last_changed < timedelta(minutes=10) }}

    - name: "Charlie Home"
      unique_id: charlie_home
      device_class: presence
      state: "{{ is_state('input_boolean.charlie_home', 'on') }}"
      attributes:
        #NOTE one of these will always be true after a restart/template reload - last_changed is restart time
        just_arrived: >
          {{ is_state(this.entity_id, 'on')
              and now() - states.binary_sensor.charlie_home.last_changed < timedelta(minutes=10) }}
        just_left: >
          {{ is_state(this.entity_id, 'off')
              and now() - states.binary_sensor.charlie_home.last_changed < timedelta(minutes=10) }}

    - name: "Occupancy Mode Alert"
      unique_id: occupancy_mode_alert
      device_class: problem
      delay_on: 900 # let person set alarm/mode before alerting
      state: >
        {% set someone_home = is_state('binary_sensor.someone_home', 'on') %}
        {% set owner_home = is_state('binary_sensor.owner_home', 'on') %}
        {% set alarm = states('alarm_control_panel.house') %}
        {% set mode = states('input_select.occupancy_mode') %}
        {{ ((mode in ['Away', 'Vacation'] and someone_home)
            or (mode in ['Home', 'Guest', 'Night'] and not someone_home)
            or (mode == 'Guest' and owner_home)
            or (alarm == 'armed_away' and mode not in ['Away', 'Vacation'])
            or (alarm == 'armed_night' and not mode == 'Night')
            or (alarm in ['armed_home', 'disarmed'] and mode not in ['Home', 'Guest'])
            and is_state('input_boolean.alarm_enabled', 'on'))
          and is_state('input_boolean.presence_alerts', 'on') }}

    - name: "Presence Override Jason Alert"
      unique_id: presence_override_jason_alert
      delay_on: 900
      state: >
        {{ is_state('input_boolean.home_override_jason', 'on')
            and is_state('input_boolean.presence_alerts', 'on') }}

    - name: "Presence LED Alert"
      unique_id: presence_led_alert
      state: >
        {{ is_state('input_boolean.jason_almost_home', 'on')
            or (states.binary_sensor
                  | selectattr('attributes.just_arrived', 'defined')
                  | selectattr('attributes.just_arrived', 'eq', true)
                  | map(attribute='entity_id') | list | count > 0)
            or (states('sensor.home_jason_distance') | int(0) < 5
              and is_state('sensor.home_jason_direction_of_travel', 'towards'))
            or is_state('alert.jason_phone_offline', 'on') }}

- sensor:
    - name: "Last To Arrive"
      unique_id: last_to_arrive
      icon: mdi:home-plus
      state: "{{ states('input_select.last_person_to_arrive') }}"
      attributes:
        time: >
          {% from 'schedule.jinja' import day_or_date %}
          {{ day_or_date(states.input_select.last_person_to_arrive.last_reported, true, true, true) }}

    - name: "Last To Leave"
      unique_id: last_to_leave
      icon: mdi:home-minus
      state: "{{ states('input_select.last_person_to_leave') }}"
      attributes:
        time: >
          {% from 'schedule.jinja' import day_or_date %}
          {{ day_or_date(states.input_select.last_person_to_leave.last_reported, true, true, true) }}