###############################################################################
## Templates - PiHole
###############################################################################
- button:
    - name: "PiHole Update"
      unique_id: pihole_update
      icon: mdi:pi-hole
      press:
        - action: shell_command.update_pihole #TODO doesn't work

        - action: browser_mod.notification
          data:
            message: "Updating PiHole."
            duration: 10000

    - name: "PiHole Reboot"
      unique_id: pihole_reboot
      icon: mdi:pi-hole
      press:
        - action: shell_command.reboot_pihole #TODO doesn't work

        - action: browser_mod.notification
          data:
            message: "Rebooting PiHole."
            duration: 10000
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/1"
  binary_sensor:
    - name: "PiHole Connected"
      unique_id: pihole_connected
      picture: !secret PIHOLE_ICON
      device_class: connectivity
      state: "{{ integration_entities('pi_hole') | select('has_value') | list | count > 0 }}"

- binary_sensor:
    - name: "PiHole Connected Alert"
      unique_id: pihole_connected_alert
      device_class: problem
      delay_on: 900
      state: >
        {{ (is_state('binary_sensor.pihole_connected', 'off')
            or is_state('device_tracker.pi_hole', 'away'))
            and is_state('input_boolean.network_alerts', 'on') }}

    - name: "PiHole Disabled Alert"
      unique_id: pihole_disabled_alert
      icon: mdi:pi-hole
      device_class: running
      delay_on: 3600
      state: >
        {{ is_state('sensor.pi_hole_status', 'Disabled')
          and is_state('input_boolean.network_alerts', 'on') }}

- sensor:
    # https://github.com/ironsheep/RPi-Reporter-MQTT2HA-Daemon
    - name: "RPi Memory Use Percent"
      unique_id: rpi_memory_use_percent
      icon: mdi:memory
      unit_of_measurement: "%"
      state: >
        {% if state_attr('sensor.rpi_monitor_raspberrypi', 'memory') != none %}
          {% set total = state_attr('sensor.rpi_monitor_raspberrypi', 'memory')['size_mb'] | float(-1) %}
          {% set free = state_attr('sensor.rpi_monitor_raspberrypi', 'memory')['free_mb'] | float(-1) %}
          {{ ((total - free) / total * 100) | int(-1) }}
        {% else %} - 1
        {% endif %}
      availability: "{{ state_attr('sensor.rpi_monitor_raspberrypi', 'memory') != none }}"

    - name: "Pi-Hole Hass Status"
      unique_id: pi_hole_hass_status
      icon: mdi:pi-hole
      state: >
        {% if not has_value('sensor.pi_hole_status') %} critical
        {% elif not is_state('sensor.pi_hole_status', 'Enabled') %} warning
        {% elif is_state('update.pi_hole_core_update_available', 'on')
            or is_state('update.pi_hole_ftl_update_available', 'on')
            or is_state('update.pi_hole_web_update_available', 'on') %} minor
        {% else %} ok
        {% endif %}
      attributes:
        options: >
          {% from 'hass.jinja' import status_options %}
          {{ status_options() }}