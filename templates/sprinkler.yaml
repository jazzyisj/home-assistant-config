###################################################################################################
## Templates - Sprinkler
###################################################################################################
- switch:
    - name: "Sprinkler Automatic Watering"
      unique_id: sprinkler_automatic_watering
      icon: mdi:leak
      state: "{{ is_state('group.sprinkler_automatic_watering', 'on') }}"
      availability: >
        {{ states.switch | selectattr('entity_id', 'in', integration_entities('hydrawise'))
            | selectattr('entity_id', 'contains', '_automatic_watering')
            | map(attribute='entity_id') | list | select('has_value') | list | count > 0 }}
      turn_on:
        - action: switch.turn_on
          target:
            entity_id: group.sprinkler_automatic_watering
      turn_off:
        - action: switch.turn_off
          target:
            entity_id: group.sprinkler_automatic_watering

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/5"
  binary_sensor:
    - name: "Hydrawise Integration Connected"
      unique_id: hydrawise_integration_connected
      picture: !secret HYDRAWISE_ICON
      device_class: connectivity
      state: >
        {{ integration_entities('hydrawise') | select('has_value') | list | count > 0
            and is_state('device_tracker.hydrawise_controller', 'home') }}

- binary_sensor:
    - name: "Hydrawise Connected Alert"
      unique_id: hydrawise_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.hydrawise_integration_connected', 'off')
            and is_state('input_boolean.sprinkler_alerts', 'on') }}

    - name: "Sprinkler"
      unique_id: sprinkler
      icon: mdi:sprinkler-variant
      device_class: running
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {{ expand('group.sprinkler_current_cycle')
              | selectattr('state', 'eq', 'on')
              | map(attribute='entity_id') | sort }}
      availability: "{{ is_state('binary_sensor.hydrawise_integration_connected', 'on') }}"

- sensor:
    - name: "Current Watering Zone"
      unique_id: current_watering_zone
      icon: mdi:sprinkler-variant
      #NOTE only one zone in group be on at once
      state: >
        {% set zone = state_attr(this.entity_id, 'zone') %}
        {{ zone if zone != none else 'Not Watering' }}
      attributes:
        zone: >
          {% set zone = expand('group.sprinkler_current_cycle')
              | selectattr('state', 'eq', 'on') | map(attribute='attributes.zone_name') | list %}
          {{ zone | join if zone | count == 1 else none }}
        start_time: >
          {% set time = expand('group.sprinkler_current_cycle')
              | selectattr('state', 'eq', 'on') | map(attribute='last_changed') | list %}
          {{ time | join if time | count == 1 else none }}
        remaining: >
          {% set remain = expand('group.sprinkler_remaining_time')
            | selectattr('state', 'gt', '0') | map(attribute='state') | list %}
          {{ remain | join ~ ' minutes' if remain | count == 1 else none }}
      availability: "{{ is_state('binary_sensor.hydrawise_integration_connected', 'on') }}"

    - name: "Next Watering Zone"
      unique_id: next_watering_zone
      icon: mdi:sprinkler-variant
      state: >
        {% set next_zone = namespace(name='None Scheduled') %}
        {% set sensors = expand('group.sprinkler_next_cycle') %}
        {% set next_time = as_datetime(states('sensor.next_watering_time'), none) %}
        {% if next_time != none %}
          {% for item in sensors %}
            {% if item.state == next_time.isoformat() %}
              {% set next_zone.name = item.attributes.zone_name %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ next_zone.name }}
      availability: "{{ is_state('binary_sensor.hydrawise_integration_connected', 'on') }}"

    - name: "Next Watering Time"
      unique_id: next_watering_time
      device_class: timestamp
      #NOTE reject current watering zone to get next zone
      state: >
        {% set next_time = none %}
        {% set sensors = expand('group.sprinkler_next_cycle') %}
        {% set zone_on = state_attr('sensor.current_watering_zone', 'zone') %}
        {% set time_list = sensors | rejectattr('attributes.zone', 'eq', zone_on) | map(attribute='state') | list %}
        {% if time_list | count > 0 %}
          {% set min_time = as_datetime(time_list | min, none) %}
          {% if min_time != none %}
            {% set next_time = iif(min_time - now() < timedelta(days=365), next_time , none) %}
          {% endif %}
        {% endif %}
        {{ next_time }}
      attributes:
        display: >
          {% from 'schedule.jinja' import day_or_date %}
          {{ day_or_date(states(this.entity_id), true, true, true) }}