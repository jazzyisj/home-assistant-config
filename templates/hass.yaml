###################################################################################################
## Templates - Variables #TEST
# https://community.home-assistant.io/t/trigger-based-template-sensor-to-store-global-variables/735474
###################################################################################################
- trigger:
    - platform: event
      event_type: set_variable

    - platform: event
      event_type: remove_variable

    - platform: event
      event_type: clear_variables
  condition:
    - condition: template
      value_template: >
        {{
            (
              trigger.event.event_type == 'set_variable'
              and trigger.event.data is defined
              and trigger.event.data.key is defined
              and trigger.event.data.value is defined
            )
            or
            (
              trigger.event.event_type == 'remove_variable'
              and trigger.event.data is defined
              and trigger.event.data.key is defined
            )
            or
            trigger.event.event_type == 'clear_variables'
        }}
  action:
    - if: "{{ trigger.event.data.get('log', state_attr('sensor.variables', 'log_events')) }}"
      then:
        - action: system_log.write
          data:
            logger: sensor.variables
            level: critical
            message: >
              {{ trigger.event.data.key | default('All variables removed') }}
              {%- if trigger.event.event_type == 'set_variable' -%}
                : {{ trigger.event.data.value }}.
              {%- endif -%}

        - action: logbook.log #ISSUE doesn't show unless screen refreshed
          data:
            name: "{{ trigger.event.event_type }}:"
            message: >
              {{ trigger.event.data.key | default('All variables removed') }}
              {%- if trigger.event.event_type == 'set_variable' -%}
                : {{ trigger.event.data.value }}.
              {%- endif -%}
  sensor:
    - name: Variables
      unique_id: variables
      icon: mdi:alpha-v-circle
      state: "{{ this.attributes.variables | count | int(-1) }}"
      attributes:
        default_timestamp: false
        log_events: true
        variables: >
          {% set others = dict(this.attributes.get('variables', {}).items() | rejectattr('0', 'eq', trigger.event.data.key)) %}
          {% if trigger.event.event_type == 'set_variable'
              and trigger.event.data.get('set_timestamp', this.attributes.get('default_timestamp', false)) %}
            {% set value  = trigger.event.data.value %}
            {% set value = value.isoformat() if value is datetime else value %}
            {% set new = {trigger.event.data.key: {'value': value, 'timestamp': now().isoformat()}} %}
            {{ dict(others, **new) }}
          {% elif trigger.event.event_type == 'set_variable' %}
            {% set new = {trigger.event.data.key: trigger.event.data.value} %}
            {{ dict(others, **new) }}
          {% elif trigger.event.event_type == 'remove_variable' %}
            {{ others }}
          {% elif trigger.event.event_type == 'clear_variables' %}
            {}
          {% endif %}

###################################################################################################
## Templates - Hass
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/5"
  binary_sensor:
    - name: "Github integration Connected"
      unique_id: github_integration_connected
      picture: !secret GITHUB_ICON
      device_class: connectivity
      state: "{{ integration_entities('github') | select('has_value') | list | count > 0 }}"

    - name: "Uptime Robot Integration Connected"
      unique_id: uptime_robot_integration_connected
      picture: !secret UPTIME_ICON
      device_class: connectivity
      state: "{{ integration_entities('uptimerobot') | select('has_value') | list | count > 0 }}"

- select:
    - name: "Battery Types"
      unique_id: battery_types
      state: "{{ states('input_text.battery_type') }}"
      select_option:
        - action: input_text.set_value
          target:
            entity_id: input_text.battery_type
          data:
            value: "{{ option }}"
      options: >
        {{ states.sensor
            | selectattr('attributes.battery_type', 'defined')
            | selectattr('attributes.battery_type', 'string')
            | map(attribute='attributes.battery_type') | unique | sort | list }}

- binary_sensor:
    - name: "Github Connected Alert"
      unique_id: github_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.github_integration_connected', 'off')
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "Uptime Robot Connected Alert"
      unique_id: uptime_robot_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.uptime_robot_integration_connected', 'off')
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "Offline Integrations Alert"
      unique_id: offline_integrations_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ states('sensor.offline_integrations') | int(-1) > 0
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "Available Updates Alert"
      unique_id: available_updates_alert
      icon: mdi:alert
      device_class: update
      state: >
        {{ states('sensor.available_updates') | int(-1) > 0
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "Unavailable Entities Alert"
      unique_id: unavailable_entities_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ states('sensor.unavailable_entities_filtered') | int(-1) > 0
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "Unknown Browsers Alert"
      unique_id: unknown_browsers_alert
      device_class: problem
      state: >
        {% set entities = state_attr('group.unknown_browsers', 'entity_id') %}
        {{ entities | count > 0
              and is_state('input_boolean.hass_alerts', 'on')
            if entities != none else false }}

    - name: "Low Battery Alert"
      unique_id: low_battery_alert
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:battery-alert', 'mdi:battery-90') }}"
      device_class: battery
      state: >
        {% set entities = state_attr('group.low_batteries', 'entity_id') %}
        {{ entities | count > 0 and is_state('input_boolean.system_alerts', 'on')
            if entities != none else false }}

    - name: "Remote UI Alert"
      unique_id: remote_ui_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.remote_ui', 'off')
            and is_state('input_boolean.hass_alerts', 'on') }}

    - name: "HASS LED Alert"
      unique_id: hass_led_alert
      state: >
        {% set uptime = states('sensor.uptime') | as_datetime
            if states('sensor.uptime') | has_value else none %}
        {% set startup = now() - uptime < timedelta(minutes=5)
            if uptime != none else false %}
        {{ startup or is_state('sensor.hass_status', ['extreme', 'severe'])
            or is_state('binary_sensor.wan', 'off') }}

- sensor:
    - name: "Unavailable Entities Filtered"
      unique_id: unavailable_entities_filtered
      icon: "{{ iif(states(this.entity_id) | int(-1) > 0, 'mdi:alert-circle', 'mdi:check-circle') }}"
      state_class: measurement
      state: >
        {% set entities = state_attr('group.unavailable_entities_filtered', 'entity_id') %}
        {{ entities | count if entities != none else -1 }}

    - name: "Offline Integrations"
      unique_id: offline_integrations
      icon: "{{ iif(states(this.entity_id) == '0', 'mdi:api', 'mdi:api-off') }}"
      state_class: measurement
      state: >
        {% set entities = state_attr('group.offline_integrations', 'entity_id') %}
        {{ entities | count if entities != none else -1 }}

    - name: "Available Updates"
      unique_id: available_updates
      icon: "{{ iif(states('sensor.available_updates') | int(-1) > 0, 'mdi:cloud-upload', 'mdi:cloud-check') }}"
      state_class: measurement
      state: >
        {% set entities = state_attr('group.available_updates', 'entity_id') %}
        {{ entities | count if entities != none else -1 }}

    - name: "Connected Browsers"
      unique_id: connected_browsers
      icon: mdi:monitor-cellphone
      state: >
        {% set entities = state_attr('group.connected_browsers', 'entity_id') %}
        {{ entities | count if entities != none else -1 }}

    - name: "Hass Status"
      unique_id: hass_status
      icon: mdi:home-assistant
      device_class: enum
      state: >
        {% if is_state('alert.unknown_browsers', 'on') %} critical
        {% elif states('sensor.watchman_missing_entities') | int(-1) > 0
            or states('sensor.watchman_missing_actions') | int(-1) > 0 %} severe
        {% elif is_state('binary_sensor.remote_ui', 'off') %} warning
        {% elif is_state('alert.available_updates', 'on') %} minor
        {% else %} ok
        {% endif %}
      attributes:
        options: >
          {% from 'hass.jinja' import status_options %}
          {{ status_options() }}

    - name: "Device Status"
      unique_id: device_status
      icon: mdi:devices
      device_class: enum
      state: >
        {% if is_state('binary_sensor.offline_integrations_alert', 'on') %} severe
        {% elif is_state('binary_sensor.unavailable_entities_alert', 'on') %} minor
        {% else %} ok
        {% endif %}
      attributes:
        options: >
          {% from 'hass.jinja' import status_options %}
          {{ status_options() }}

    - name: "Battery Status"
      unique_id: battery_status
      icon: mdi:battery
      device_class: enum
      state: >
        {% set levels = namespace(value=[]) %}
        {% set thresh = states('input_number.battery_alert_threshold') | int(none) %}
        {% set batteries = expand(integration_entities('battery_notes'))
            | selectattr('domain', 'eq', 'sensor')
            | selectattr('attributes.device_class', 'eq', 'battery')
            | map(attribute='entity_id') | sort %}
        {% for item in batteries if states(item) | int(none) != none %}
          {% set level = states(item) | int(none) %}
          {% if level != none %}
            {%- set levels.value = levels.value + [level] %}
          {% endif %}
        {% endfor %}
        {% set low = levels.value | min %}
        {% if low <= 20 %} critical
        {% elif low <= 25 %} severe
        {% elif low <= 30 %} warning
        {% elif low < 40 %} minor
        {% else %} ok
        {% endif %}
      attributes:
        options: >
          {% from 'hass.jinja' import status_options %}
          {{ status_options() }}

    - name: "HASS Addon Memory Percent"
      unique_id: hass_addon_memory_percent
      icon: mdi:memory
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_memory_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id) | float %}
        {% endfor %}
        {{ '%0.1f' | format(total.value | float(0)) }}

    - name: "HASS Addon CPU Percent"
      unique_id: hass_addon_cpu_percent
      icon: mdi:chip
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_cpu_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id) | float %}
        {% endfor %}
        {{ '%0.1f' | format(total.value | float(0)) }}
