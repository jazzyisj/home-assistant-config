###############################################################################
## Templates - Hass
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    # limit iteration of states object to once per minute
    - platform: state
      entity_id: sensor.time
  sensor:
    - name: "Unavailable Entities Filtered"
      unique_id: unavailable_entities_filtered
      icon: "{{ iif(states(this.entity_id)|int(-1) > 0,'mdi:alert-circle','mdi:check-circle') }}"
      state_class: measurement
      unit_of_measurement: entities
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count if entities != none else -1 }}
      attributes:
        #TEMP added button, device_tracker, input_text, media_preset,rt_ax58u_wireless,rt_ax58u_guest,rt_ax58u_usb
        entity_id: >
          {% set ignore_seconds = 60 %}
          {% set ignored = state_attr('group.ignored_unavailable_entities','entity_id') %}
          {% set ignore_ts = (now().timestamp() - ignore_seconds)|as_datetime %}
          {% set entities = states
              |rejectattr('domain','in',['group','device_tracker','button','scene','input_text','geo_location'])
              |rejectattr('entity_id','in',integration_entities('browser_mod'))
              |rejectattr('entity_id','in',integration_entities('gdacs'))
              |rejectattr('entity_id','in',integration_entities('github'))
              |rejectattr('entity_id','in',integration_entities('glances'))
              |rejectattr('entity_id','in',integration_entities('hassio'))
              |rejectattr('entity_id','in',integration_entities('openuv'))
              |rejectattr('entity_id','in',integration_entities('utility_meter'))
              |rejectattr('entity_id','in',integration_entities('waqi'))
              |rejectattr('entity_id','search','jlaptop_chrome|jlaptop_edge|jwork_chrome|jphone_app|jtablet_app')
              |rejectattr('entity_id','search','jason_laptop_media_player|jason_phone_media_player')
              |rejectattr('entity_id','search','_timers|_alarms|_do_not_disturb|_alarm_volume')
              |rejectattr('entity_id','search','sensor.daily_energy_consumption')
              |rejectattr('entity_id','search','_next_alarm|media_preset')
              |rejectattr('entity_id','search','rt_ax58u_wireless|rt_ax58u_guest|rt_ax58u_usb|rt_ax58u_2_4|rt_ax58u_5')
              |rejectattr('entity_id','search','_lock_indicator_value')
              |rejectattr('last_changed','ge',ignore_ts) %}
          {% set entities =  entities|rejectattr('entity_id','in',ignored) if ignored != none else entities %}
          {{ entities|map(attribute='entity_id')|reject('has_value')|list|sort }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Github Connected"
      unique_id: github_connected
      icon: mdi:monitor-dashboard
      device_class: connectivity
      state: "{{ integration_entities('github')|select('has_value')|list|count > 0 }}"

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Uptime Robot Connected"
      unique_id: uptime_robot_connected
      icon: mdi:sort-clock-descending
      device_class: connectivity
      state: "{{ integration_entities('uptimerobot')|select('has_value')|list|count > 0 }}"

- binary_sensor:
    - name: "Github Connected Alert"
      unique_id: github_connected_alert
      icon: mdi:monitor-dashboard
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.github_connected','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Uptime Robot Connected Alert"
      unique_id: uptime_robot_connected_alert
      icon: mdi:sort-clock-descending
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.uptime_robot_connected','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Offline Integrations Alert"
      unique_id: offline_integrations_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ states('sensor.offline_integrations')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Backup Alert"
      unique_id: backup_alert
      icon: mdi:cloud-upload-outline
      state: >
        {% if is_state('input_boolean.hass_alerts','on') %}
          {{ states('sensor.backup_size_status') in ['severe','critical','error']
              or is_state('binary_sensor.home_assistant_google_drive_backup_running','off') }}
        {% endif %}

    - name: "Available Updates Alert"
      unique_id: available_updates_alert
      icon: mdi:alert
      state: >
        {{ states('sensor.available_updates')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Unavailable Entities Alert"
      unique_id: unavailable_entities_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ states('sensor.unavailable_entities_filtered')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Unknown Browsers Alert"
      unique_id: unknown_browsers_alert
      device_class: problem
      state: >
        {{ states('sensor.unknown_browsers')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Remote UI Alert"
      unique_id: remote_ui_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.remote_ui','off')
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "Low Battery Alert"
      unique_id: low_battery_alert
      icon: "{{ iif(is_state(this.entity_id,'on'),'mdi:battery-alert','mdi:battery-90') }}"
      device_class: battery
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count > 0 and is_state('input_boolean.system_alerts','on')
            if entities != none else none }}
      attributes:
        entity_id: >
          {% set low_batteries = namespace(value=[]) %}
          {% set low_batts = states.sensor
              |selectattr('attributes.device_class','eq','battery')
              |rejectattr('attributes.mobile','eq',true)
              |map(attribute='entity_id')|list|sort %}
          {% for item in low_batts %}
            {% if states(item) == 'on' or (states(item)|int(-1) != -1 and states(item)|int(0)
                < states('input_number.battery_alert_threshold')|int) %}
              {% set low_batteries.value = low_batteries.value + [item] %}
            {% endif %}
          {% endfor %}
          {{ low_batteries.value }}

    - name: "Alert Disabled"
      unique_id: alert_disabled
      icon: mdi:alert
      device_class: problem
      state: "{{ states.alert|selectattr('state','eq','off')|list|count > 0 }}"

    - name: "HASS LED Alert"
      unique_id: hass_led_alert
      state: >
        {% set uptime = states('sensor.uptime')|as_datetime
            if states('sensor.uptime')|has_value else none %}
        {% set startup = now() - uptime < timedelta(minutes=5)
            if uptime != none else false %}
        {{ startup or states('sensor.hass_status') in ['extreme','severe']
            or is_state('binary_sensor.wan_connected','off') }}

- sensor:
    - name: "Offline Integrations"
      unique_id: offline_integrations
      icon: "{{ iif(states(this.entity_id) == '0','mdi:api','mdi:api-off') }}"
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count if entities != none else entities }}
      attributes:
        entity_id: >
          {{ expand('group.integration_connected_sensors')
              |selectattr('state','eq','off')|map(attribute='entity_id')|list|sort }}

    - name: "Available Updates"
      unique_id: available_updates
      icon: "{{ iif(states('sensor.available_updates')|int(-1) > 0,'mdi:cloud-upload','mdi:cloud-check') }}"
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count if entities != none else entities }}
      attributes:
        entity_id: "{{ states.update|selectattr('state','eq','on')|map(attribute='entity_id')|list|sort }}"

    - name: "Hass Status"
      unique_id: hass_status
      icon: mdi:home-assistant
      state: >
        {% if is_state('sensor.zwave_status','critical')
            or is_state('sensor.hass_files_status','critical') %} critical

        {% elif is_state('sensor.zwave_status','severe')
            or is_state('sensor.hass_files_status','severe')
            or states('sensor.offline_integrations')|int(-1) > 0
            or is_state('binary_sensor.remote_ui','off')
            or is_state('alert.unknown_browsers','on') %} severe

        {% elif is_state('sensor.zwave_status','warning')
            or is_state('sensor.hass_files_status','warning')
            or is_state('alert.low_battery','on')
            or not is_state('sensor.backup_state','backed_up') %} warning

        {% elif is_state('sensor.zwave_status','minor')
            or is_state('sensor.hass_files_status','minor')
            or is_state('alert.unavailable_entities','on')
            or is_state('alert.available_updates','on') %} minor
        {% else %} ok
        {% endif %}

    - name: "Hass DB Size Status"
      unique_id: hass_db_size_status
      icon: mdi:database
      state: >
        {% set size = states('sensor.home_assistant_v2_db_size')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 5000 %} ok
        {% elif size < 6000 %} minor
        {% elif size < 7000 %} warning
        {% elif size < 8000 %} severe
        {% else %} critical
        {% endif %}

    # unit changes - kB, MB, GB
    - name: "Backup Size Status"
      unique_id: backup_size_status
      icon: mdi:backup-restore
      state: >
        {% set state = state_attr('sensor.backup_state','size_in_home_assistant') %}
        {% if state != none %}
          {% set size = state[:-2]|float(-1) %}
          {% set unit = state[-2:] %}
          {% if not is_number(size) or size == -1 %} error
          {% elif size < 15 or unit != 'GB'%} ok
          {% elif size < 20 %} minor
          {% elif size < 30 %} warning
          {% elif size < 40 %} severe
          {% else %} critical
          {% endif %}
        {% else %} {{ none }}
        {% endif %}

    - name: "Hass Log Size Status"
      unique_id: hass_log_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.home_assistant_log_size')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 10 %} ok
        {% elif size < 25 %} minor
        {% elif size < 75 %} warning
        {% elif size < 100 %} severe
        {% else %} critical
        {% endif %}

    - name: "Alarm Snapshots Size Status"
      unique_id: alarm_snapshots_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.alarm_snapshots')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: "TTS Size Status"
      unique_id: tts_size_status
      icon: mdi:account-voice
      state: >
        {% set size = states('sensor.tts')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: "Hass Files Status"
      unique_id: hass_files_status
      icon: mdi:harddisk
      state: >
        {% if is_state('sensor.hass_db_size_status','critical')
          or is_state('sensor.backup_size_status','critical')
          or is_state('sensor.hass_log_size_status','critical')
          or is_state('sensor.alarm_snapshots_size_status','critical')
          or is_state('sensor.tts_size_status','critical') %} critical

        {% elif is_state('sensor.hass_db_size_status','severe')
          or is_state('sensor.backup_size_status','severe')
          or is_state('sensor.hass_log_size_status','severe')
          or is_state('sensor.alarm_snapshots_size_status','severe')
          or is_state('sensor.tts_size_status','severe') %} severe

        {% elif is_state('sensor.hass_db_size_status','warning')
          or is_state('sensor.backup_size_status','warning')
          or is_state('sensor.hass_log_size_status','warning')
          or is_state('sensor.alarm_snapshots_size_status','warning')
          or is_state('sensor.tts_size_status','warning') %} warning

        {% elif is_state('sensor.hass_db_size_status','minor')
          or is_state('sensor.backup_size_status','minor')
          or is_state('sensor.hass_log_size_status','minor')
          or is_state('sensor.alarm_snapshots_size_status','minor')
          or is_state('sensor.tts_size_status','minor')  %} minor
        {% else %} ok
        {% endif %}

    - name: "Connected Browsers"
      unique_id: connected_browsers
      icon: mdi:monitor-cellphone
      state: >
        {% set entities = state_attr('sensor.connected_browsers','entity_id') %}
        {{ entities|count if entities != none else entities }}
      attributes:
        entity_id: >
          {{ states.sensor
              |selectattr('entity_id','search','_browser_user')
              |rejectattr('entity_id','search','_browser_useragent')
              |map(attribute='entity_id')
              |select('has_value')|list|sort }}

    - name: "Unknown Browsers"
      unique_id: unknown_browsers
      state: >
        {% set entities = state_attr('sensor.unknown_browsers','entity_id') %}
        {{ entities|count if entities != none else entities }}
      attributes:
        entity_id: >
          {{ states.sensor
              |selectattr('entity_id','search','_browser_user')
              |selectattr('attributes.authorized','defined')
              |selectattr('attributes.authorized','ne',true)
              |map(attribute='entity_id')
              |select('has_value')|list|sort }}

    - name: "HASS Addon Memory Percent"
      unique_id: hass_addon_memory_percent
      icon: mdi:memory
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_memory_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ '%0.1f'|format(total.value|float(0)) }}

    - name: "HASS Addon CPU Percent"
      unique_id: hass_addon_cpu_percent
      icon: mdi:memory
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_cpu_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ '%0.1f'|format(total.value|float(0)) }}
