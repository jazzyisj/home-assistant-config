###############################################################################
## Templates - Hass
###############################################################################
- binary_sensor:
    - name: 'Automation Disabled'
      unique_id: automation_disabled
      icon: mdi:sync-alert
      state: "{{ is_state('group.automation_controls','off') and is_state('input_boolean.dev_mode','off') }}"

    - name: 'Alert Disabled'
      unique_id: alert_disabled
      icon: mdi:alert
      state: "{{ states.alert|selectattr('state','eq','off')|list|count > 0 }}"

    - name: 'Integrations Connected'
      unique_id: integrations_connected
      icon: "{{ iif(is_state('binary_sensor.integrations_connected','on'),'mdi:api','mdi:api-off') }}"
      device_class: connectivity
      delay_off: 5
      state: "{{ is_state('group.integration_connected_sensors','on') }}"
      attributes:
        disconnected: "{{ expand('group.integration_connected_sensors')|selectattr('state','eq','off')|map(attribute='entity_id')|list }}"

    - name: 'Integration Connected Alert'
      unique_id: integration_connected_alert
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.integrations_connected','off')
              and is_state('input_boolean.hass_alerts','on')
              and is_state('input_boolean.startup_pending','off') }}

    - name: 'Kiosk Connected'
      unique_id: kiosk_connected
      icon: mdi:tablet-dashboard
      device_class: connectivity
      state: >
        {{ is_state('device_tracker.kiosk_tablet','home')
            and states('media_player.kiosk_media_player') not in ['unknown','unavailable']
            and states('light.fire_tablet_screen') in ['on','off']
            and is_number(states('sensor.browser_kiosk_internal')) }}

    - name: 'Update Available Alert'
      unique_id: udpate_available_alert
      icon: mdi:alert
      device_class: update
      state: >
        {% if is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','on') %}
          {% set unavail = state_attr('sensor.updates_available','entity_id') %}
          {% if unavail != none %} {{ unavail|count > 0 }}
          {% elif is_state('group.other_update_entities','on') %} true
          {% else %} false
          {% endif %}
        {% else %} false
        {% endif %}

    - name: 'Uptime Robot Connected'
      unique_id: uptime_robot_connected
      icon: mdi:sort-clock-descending
      device_class: connectivity
      state: "{{ states('sensor.hassio') in ['up','pause'] }}"

    - name: 'Uptime Robot Connected Alert'
      unique_id: uptime_robot_connected_alert
      icon: mdi:sort-clock-descending
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.uptime_robot_connected','off')
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off')
            and is_state('binary_sensor.wan_connected','on') }}

    - name: 'Remote UI Alert'
      unique_id: remote_ui_alert
      delay_on: 300 # prevent trigger on shutdown
      state: >
        {{ states('binary_sensor.remote_ui') in ['off','unknown','unavailable','none']
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off')
            and is_state('binary_sensor.wan_connected','on') }}

    - name: 'Unavailable Sensor Alert'
      unique_id: unavailable_sensor_alert
      delay_on: 60
      state: >
        {{ states('sensor.unavailable_sensors')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: 'Unknown Browser Alert'
      unique_id: unknown_browser_alert
      state: >
        {{ states('sensor.unknown_browsers')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: 'Low Battery Alert'
      unique_id: low_battery_alert
      icon: "{{ iif(is_state('binary_sensor.low_battery_alert','on'),'mdi:battery-alert','mdi:battery-90') }}"
      device_class: battery
      state: >
        {% set entities = state_attr('binary_sensor.low_battery_alert','entity_id') %}
        {% if entities != none %}
          {{ entities|count > 0
              and is_state('input_boolean.system_alerts','on')
              and is_state('input_boolean.startup_pending','off') }}
        {% else %} false
        {% endif %}
      attributes:
        entity_id: >
          {% set low_batteries = namespace(value=[]) %}
          {% set low_batts = states|selectattr('attributes.device_class','eq','battery')
              |rejectattr('attributes.mobile','eq',true)
              |map(attribute='entity_id')|list %}
          {% for item in low_batts %}
            {% if states(item) == 'on' or (states(item)|int(-1) != -1 and states(item)|int(0)
                < states('input_number.battery_alert_threshold')|int) %}
              {% set low_batteries.value = low_batteries.value + [item] %}
            {% endif %}
          {% endfor %}
          {{ low_batteries.value }}

- sensor:
    # placeholder entity for button entities
    - name: 'Dummy'
      unique_id: dummy
      state: ' '

    - name: 'Updates Available'
      unique_id: updates_available
      icon: "{{ iif(states('sensor.updates_available')|int(-1) > 0,'mdi:cloud-upload','mdi:cloud-check') }}"
      state: >
        {% set entities = state_attr('sensor.updates_available','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: "{{ states.update|selectattr('state','eq','on')|map(attribute='entity_id')|list }}"

    - name: 'Hass Status'
      unique_id: hass_status
      icon: mdi:home-assistant
      state: >
        {% if is_state('sensor.zwave_status','critical')
            or is_state('sensor.hass_files_status','critical') %} critical

        {% elif is_state('sensor.zwave_status','severe')
            or is_state('sensor.hass_files_status','severe')
            or is_state('binary_sensor.integrations_connected','off')
            or is_state('binary_sensor.remote_ui','off')
            or is_state('alert.unknown_browser','on') %} severe

        {% elif is_state('sensor.zwave_status','warning')
            or is_state('sensor.hass_files_status','warning')
            or is_state('alert.low_battery','on')
            or not is_state('sensor.backup_state','backed_up') %} warning

        {% elif is_state('sensor.zwave_status','minor')
            or is_state('sensor.hass_files_status','minor')
            or is_state('alert.unavailable_sensor','on')
            or is_state('alert.udpate_available','on') %} minor
        {% else %} ok
        {% endif %}

    - name: 'Hass DB Size Status'
      unique_id: hass_db_size_status
      icon: mdi:database
      state: >
        {% set size = states('sensor.hassio_db')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 2500 %} ok
        {% elif size < 5000 %} minor
        {% elif size < 7500 %} warning
        {% elif size < 10000 %} severe
        {% else %} critical
        {% endif %}

    # unit changes - kB, MB, GB
    - name: 'Backup Size Status'
      unique_id: backup_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = state_attr('sensor.backup_state','size_in_home_assistant') %}
        {% if size != none %}
          {% set size = size[:-2]|float(-1) %}
          {% set unit = state_attr('sensor.backup_state','size_in_home_assistant')[-2:] %}
        {% endif %}
        {% if not is_number(size) or size == -1 %} error
        {% elif size < 10 or unit != 'GB'%} ok
        {% elif size < 15 %} minor
        {% elif size < 20 %} warning
        {% elif size < 25 %} severe
        {% else %} critical
        {% endif %}

    - name: 'Hass Log Size Status'
      unique_id: hass_log_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.home_assistant_log_size')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 10 %} ok
        {% elif size < 25 %} minor
        {% elif size < 75 %} warning
        {% elif size < 100 %} severe
        {% else %} critical
        {% endif %}

    - name: 'Alarm Snapshots Size Status'
      unique_id: alarm_snapshots_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.alarm_snapshots')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: 'TTS Size Status'
      unique_id: tts_size_status
      icon: mdi:account-voice
      state: >
        {% set size = states('sensor.tts')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: 'Hass Files Status'
      unique_id: hass_files_status
      icon: mdi:harddisk
      state: >
        {% if is_state('sensor.hass_db_size_status','critical')
          or is_state('sensor.backup_size_status','critical')
          or is_state('sensor.hass_log_size_status','critical')
          or is_state('sensor.alarm_snapshots_size_status','critical')
          or is_state('sensor.tts_size_status','critical') %} critical

        {% elif is_state('sensor.hass_db_size_status','severe')
          or is_state('sensor.backup_size_status','severe')
          or is_state('sensor.hass_log_size_status','severe')
          or is_state('sensor.alarm_snapshots_size_status','severe')
          or is_state('sensor.tts_size_status','severe') %} severe

        {% elif is_state('sensor.hass_db_size_status','warning')
          or is_state('sensor.backup_size_status','warning')
          or is_state('sensor.hass_log_size_status','warning')
          or is_state('sensor.alarm_snapshots_size_status','crwarningitical')
          or is_state('sensor.tts_size_status','warning') %} warning

        {% elif is_state('sensor.hass_db_size_status','minor')
          or is_state('sensor.backup_size_status','minor')
          or is_state('sensor.hass_log_size_status','minor')
          or is_state('sensor.alarm_snapshots_size_status','minor')
          or is_state('sensor.tts_size_status','minor')  %} minor
        {% else %} ok
        {% endif %}

    - name: 'Connected Browsers'
      unique_id: connected_browsers
      unit_of_measurement: browsers
      icon: mdi:monitor-cellphone
      state: >
        {% set entities = state_attr('sensor.connected_browsers','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {{ states.sensor|selectattr('entity_id','search','browser_')
              |rejectattr('state','in',['unknown','unavailable'])
              |map(attribute='entity_id')|list }}

    - name: 'Unknown Browsers'
      unique_id: unknown_browsers
      unit_of_measurement: browsers
      state: >
        {% set entities = state_attr('sensor.unknown_browsers','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {{ states.sensor|selectattr('entity_id','search','browser_')
            |selectattr('attributes.authorized','ne',true)
            |rejectattr('state','in',['unknown','unavailable'])
            |map(attribute='entity_id')|list }}

    # display hass uptime in friendly format
    - name: 'Home Assistant Uptime'
      unique_id: home_assistant_uptime
      icon: mdi:clock-start
      state: >
        {% set up_time = now().timestamp() - states('sensor.uptime')|as_timestamp %}
        {% set minutes = (up_time // 60)|int(0) %}
        {% set hours = (minutes // 60) %}
        {% set days = (hours // 24) %}
        {% set weeks = (days // 7) %}
        {% set minutes = (minutes % 60) %}
        {% set hours =  (hours % 24) %}
        {% set days = (days % 7) %}
        {% macro phrase(value, name) %}
          {%- set value = value %}
          {%- set end = 's' if value > 1 else '' %}
          {{- '{} {}{}'.format(value, name, end) if value|int(0) > 0 else '' }}
        {%- endmacro %}
        {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ]|select('!=','')|list|join(', ') %}
        {% set last_comma = text.rfind(',') %}
        {% if last_comma != -1 %}
          {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
        {% endif %}
        {{ text }}

    # display hass restart date/time in friendly format
    - name: 'Last Restart Date Time'
      unique_id: last_restart_date_time
      icon: mdi:clock-start
      state: >
        {% set uptime = states('sensor.uptime')|as_datetime|as_local %}
        {% set date = uptime.strftime('%d') %}
        {% set date = '{:01}'.format(date|int(0)) %}
        {% if date in ('1','21','31') %}{% set date = date ~ 'st' %}
        {% elif now().day in ('2','22') %}{% set date = date ~ 'nd' %}
        {% elif now().day in ('3','23') %}{% set date = date ~ 'rd' %}
        {% else %}{% set date = date ~ 'th' %}
        {% endif %}
        {{ uptime.strftime('%a') }} {{ date }} {{ uptime.strftime('%b %Y') }} {{ uptime.strftime('at %-I:%M %p') }}

    - name: 'Unavailable Sensors'
      unique_id: unavailable_sensors
      icon: "{{ 'mdi:alert-circle' if states('sensor.unavailable_sensors')|int(0) > 0 else 'mdi:check-circle' }}"
      unit_of_measurement: sensors
      state: >
        {% set entities = state_attr('sensor.unavailable_sensors','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {% if state_attr('group.ignored_unavailable_entities','entity_id') != none %}
            {% set ignore_ts = (now().timestamp() - 60)|as_datetime %}
            {{ states
              |rejectattr('domain','in',['group','geo_location'])
              |rejectattr('entity_id','in',state_attr('group.ignored_unavailable_entities','entity_id'))
              |rejectattr('last_changed','ge',ignore_ts)
              |rejectattr('entity_id','search','browser_')
              |rejectattr('entity_id','search','_do_not_disturb')
              |rejectattr('entity_id','search','_alarm_volume')
              |rejectattr('entity_id','search','_next_alarm')
              |rejectattr('entity_id','search','_memory_percent')
              |rejectattr('entity_id','search','_cpu_percent')
              |rejectattr('entity_id','search','_timers')
              |rejectattr('entity_id','search','_alarms')
              |rejectattr('entity_id','search','_stars')
              |rejectattr('entity_id','search','_watchers')
              |rejectattr('entity_id','search','_forks')
              |rejectattr('entity_id','search','_issues')
              |rejectattr('entity_id','search','pull_requests')
              |rejectattr('entity_id','search','_latest_issue')
              |rejectattr('entity_id','search','_latest_pull_request')
              |rejectattr('entity_id','search','_latest_release')
              |rejectattr('entity_id','search','_latest_commit')
              |rejectattr('entity_id','search','_latest_tag')
              |rejectattr('entity_id','search','_discussions')
              |rejectattr('entity_id','search','_latest_discussion')
              |rejectattr('last_changed','ge',ignore_ts)
              |selectattr('state','in',['unavailable','unknown'])
              |map(attribute='entity_id')|list }}
          {% endif %}

    - name: 'HASS Addon Memory Percent'
      unique_id: hass_addon_memory_percent
      icon: mdi:memory
      unit_of_measurement: '%'
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_memory_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ total.value|float(0) }}

    - name: 'HASS Addon CPU Percent'
      unique_id: hass_addon_cpu_percent
      icon: mdi:memory
      unit_of_measurement: '%'
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_cpu_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ total.value|float(0) }}
