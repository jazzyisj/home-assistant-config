###############################################################################
## Templates - Hass
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: binary_sensor.fire_tablet_kiosk_mode
      from:
        - unknown
        - unavailable

    - platform: state
      entity_id: binary_sensor.fire_tablet_kiosk_mode
      to:
        - unknown
        - unavailable
  binary_sensor:
    # no alert (covered by kiosk offline)
    - name: "Fully Kiosk Connected"
      unique_id: fully_kiosk_connected
      icon: mdi:monitor-dashboard
      device_class: connectivity
      state: >
        {{ expand(integration_entities('fully_kiosk'))
            |rejectattr('state','in',['unknown','unavailable'])|list|count > 0 }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.jazzyisj_home_assistant_config_latest_commit
      from:
        - unknown
        - unavailable

    - platform: state
      entity_id: sensor.jazzyisj_home_assistant_config_latest_commit
      to:
        - unknown
        - unavailable
  binary_sensor:
    - name: "Github Connected"
      unique_id: github_connected
      icon: mdi:monitor-dashboard
      device_class: connectivity
      state: >
        {{ expand(integration_entities('github'))
            |rejectattr('state','in',['unknown','unavailable'])|list|count > 0 }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: binary_sensor.hassio
      from:
        - unknown
        - unavailable

    - platform: state
      entity_id: binary_sensor.hassio
      to:
        - unknown
        - unavailable
  binary_sensor:
    - name: "Uptime Robot Connected"
      unique_id: uptime_robot_connected
      icon: mdi:sort-clock-descending
      device_class: connectivity
      state: >
        {{ expand(integration_entities('uptimerobot'))
            |rejectattr('state','in',['unknown','unavailable'])|list|count > 0 }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  sensor:
    - name: "Unavailable Sensors"
      unique_id: unavailable_sensors
      icon: "{{ iif(states(this.entity_id)|int(0) > 0,'mdi:alert-circle','mdi:check-circle') }}"
      unit_of_measurement: entities
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {% if entities != none %} {{ entities|count }} {% endif %}
      attributes:
        entity_id: >
          {% set ignore_seconds = 60 %}
          {% set ignored = state_attr('group.ignored_unavailable_entities','entity_id') %}
          {% set ignore_ts = (now().timestamp() - ignore_seconds)|as_datetime %}
          {% set browser_mod = expand(integration_entities('browser_mod'))|map(attribute='entity_id')|list %}
          {% set gdacs = expand(integration_entities('gdacs'))|map(attribute='entity_id')|list %}
          {% set github = expand(integration_entities('github'))|map(attribute='entity_id')|list %}
          {% set glances = expand(integration_entities('glances'))|map(attribute='entity_id')|list %}
          {% set hassio = expand(integration_entities('hassio'))|map(attribute='entity_id')|list %}
          {% set openuv = expand(integration_entities('openuv'))|map(attribute='entity_id')|list %}
          {% set utility_meter = expand(integration_entities('utility_meter'))|map(attribute='entity_id')|list %}
          {% set waqi = expand(integration_entities('waqi'))|map(attribute='entity_id')|list %}
          {% set entities = states|rejectattr('domain','in',['group','geo_location'])
              |rejectattr('entity_id','in',browser_mod)
              |rejectattr('entity_id','in',gdacs)
              |rejectattr('entity_id','in',github)
              |rejectattr('entity_id','in',glances)
              |rejectattr('entity_id','in',hassio)
              |rejectattr('entity_id','in',openuv)
              |rejectattr('entity_id','in',utility_meter)
              |rejectattr('entity_id','in',waqi)
              |rejectattr('entity_id','search','jlaptop_chrome')
              |rejectattr('entity_id','search','jlaptop_edge')
              |rejectattr('entity_id','search','jwork_chrome')
              |rejectattr('entity_id','search','jphone_app')
              |rejectattr('entity_id','search','sphone_app')
              |rejectattr('entity_id','search','jason_laptop_media_player')
              |rejectattr('entity_id','search','jason_phone_media_player')
              |rejectattr('entity_id','search','sheri_phone_media_player')
              |rejectattr('entity_id','search','_timers')
              |rejectattr('entity_id','search','_alarms')
              |rejectattr('entity_id','search','sensor.daily_energy_consumption')
              |rejectattr('entity_id','search','_do_not_disturb')
              |rejectattr('entity_id','search','_alarm_volume')
              |rejectattr('entity_id','search','_next_alarm')
              |rejectattr('last_changed','ge',ignore_ts)
              |selectattr('state','in',['unavailable','unknown']) %}
          {% if ignored != none %}
            {% set entities =  entities|rejectattr('entity_id','in',ignored) %}
          {% endif %}
          {{ entities|map(attribute='entity_id')|list }}

- binary_sensor:
    - name: "Github Connected Alert"
      unique_id: github_connected_alert
      icon: mdi:monitor-dashboard
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.github_connected','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Uptime Robot Connected Alert"
      unique_id: uptime_robot_connected_alert
      icon: mdi:sort-clock-descending
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.uptime_robot_connected','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Integration Offline"
      unique_id: integration_offline
      icon: "{{ iif(is_state(this.entity_id,'on'),'mdi:api','mdi:api-off') }}"
      device_class: connectivity
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ false if entities == none else entities|count > 0 }}
      attributes:
        entity_id: >
          {{ expand('group.integration_connected_sensors')
              |selectattr('state','eq','off')|map(attribute='entity_id')|list }}

    - name: "Integration Offline Alert"
      unique_id: integration_offline_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.integration_offline','on')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Kiosk Online"
      unique_id: kiosk_online
      icon: mdi:tablet-dashboard
      device_class: connectivity
      state: >
        {{ is_state('device_tracker.kiosk_tablet','home')
            and is_state('binary_sensor.fully_kiosk_connected','on')
            and not states('sensor.kiosk_internal_browser_user') in ['unknown','unavailable'] }}

    - name: "Kiosk Offline Alert"
      unique_id: kiosk_offline_alert
      icon: mdi:tablet-dashboard
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.kiosk_online','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Update Available Alert"
      unique_id: update_available_alert
      icon: mdi:alert
      state: >
        {% if is_state('input_boolean.hass_alerts','on') %}
          {{ states('sensor.updates_available')|int(-1) > 0
              or is_state('group.other_update_entities','on') }} {#UPDATE until update entites #}
        {% else %} false
        {% endif %}

    - name: "Remote UI Alert"
      unique_id: remote_ui_alert
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.remote_ui','off')
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Unavailable Sensor Alert"
      unique_id: unavailable_sensor_alert
      device_class: problem
      delay_on: 900
      state: >
        {{ states('sensor.unavailable_sensors')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Unknown Browser Alert"
      unique_id: unknown_browser_alert
      device_class: problem
      state: >
        {{ states('sensor.unknown_browsers')|int(-1) > 0
            and is_state('input_boolean.hass_alerts','on') }}

    - name: "Low Battery Alert"
      unique_id: low_battery_alert
      icon: "{{ iif(is_state(this.entity_id,'on'),'mdi:battery-alert','mdi:battery-90') }}"
      device_class: battery
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {% if entities != none %}
          {{ entities|count > 0 and is_state('input_boolean.system_alerts','on') }}
        {% else %} false
        {% endif %}
      attributes:
        entity_id: >
          {% set low_batteries = namespace(value=[]) %}
          {% set low_batts = states.sensor|selectattr('attributes.device_class','eq','battery')
              |rejectattr('attributes.mobile','eq',true)
              |map(attribute='entity_id')|list %}
          {% for item in low_batts %}
            {% if states(item) == 'on' or (states(item)|int(-1) != -1 and states(item)|int(0)
                < states('input_number.battery_alert_threshold')|int) %}
              {% set low_batteries.value = low_batteries.value + [item] %}
            {% endif %}
          {% endfor %}
          {{ low_batteries.value }}

    - name: "Alert Disabled"
      unique_id: alert_disabled
      icon: mdi:alert
      device_class: problem
      state: >
        {{ states.alert|selectattr('attributes.category','defined')
            |selectattr('attributes.category','in',['system','hass','network'])
            |selectattr('state','eq','off')|list|count > 0 }}

    - name: "HASS LED Alert"
      unique_id: hass_led_alert
      state: >
        {% set startup = false %}
        {% set uptime = states('sensor.uptime')|as_datetime
          if states('sensor.uptime') not in ['unknown','unavailable'] else none %}
        {% if uptime != none %}
          {% set startup = now() - uptime < timedelta(minutes=5) %}
        {% endif %}
        {{ startup or states('sensor.hass_status') in ['extreme','severe'] }}

- sensor:
    # placeholder entity for button entities
    - name: "Dummy"
      unique_id: dummy
      state: " "

    - name: "Updates Available"
      unique_id: updates_available
      icon: "{{ iif(states('sensor.updates_available')|int(-1) > 0,'mdi:cloud-upload','mdi:cloud-check') }}"
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {{ states.update|selectattr('state','eq','on')|map(attribute='entity_id')|list
              + expand('group.other_update_entities')|selectattr('state','eq','on')|map(attribute='entity_id')|list }}

    - name: "Hass Status"
      unique_id: hass_status
      icon: mdi:home-assistant
      state: >
        {% if is_state('sensor.zwave_status','critical')
            or is_state('sensor.hass_files_status','critical') %} critical

        {% elif is_state('sensor.zwave_status','severe')
            or is_state('sensor.hass_files_status','severe')
            or is_state('binary_sensor.integration_offline','on')
            or is_state('binary_sensor.remote_ui','off')
            or is_state('alert.unknown_browser','on') %} severe

        {% elif is_state('sensor.zwave_status','warning')
            or is_state('sensor.hass_files_status','warning')
            or is_state('alert.low_battery','on')
            or not is_state('sensor.backup_state','backed_up') %} warning

        {% elif is_state('sensor.zwave_status','minor')
            or is_state('sensor.hass_files_status','minor')
            or is_state('alert.unavailable_sensor','on')
            or is_state('alert.update_available','on') %} minor
        {% else %} ok
        {% endif %}

    - name: "Hass DB Size Status"
      unique_id: hass_db_size_status
      icon: mdi:database
      state: >
        {% set size = states('sensor.hassio_db')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 2500 %} ok
        {% elif size < 5000 %} minor
        {% elif size < 7500 %} warning
        {% elif size < 10000 %} severe
        {% else %} critical
        {% endif %}

    # unit changes - kB, MB, GB
    - name: "Backup Size Status"
      unique_id: backup_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = state_attr('sensor.backup_state','size_in_home_assistant') %}
        {% if size != none %}
          {% set size = size[:-2]|float(-1) %}
          {% set unit = state_attr('sensor.backup_state','size_in_home_assistant')[-2:] %}
        {% endif %}
        {% if not is_number(size) or size == -1 %} error
        {% elif size < 10 or unit != 'GB'%} ok
        {% elif size < 15 %} minor
        {% elif size < 20 %} warning
        {% elif size < 25 %} severe
        {% else %} critical
        {% endif %}

    - name: "Hass Log Size Status"
      unique_id: hass_log_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.home_assistant_log_size')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 10 %} ok
        {% elif size < 25 %} minor
        {% elif size < 75 %} warning
        {% elif size < 100 %} severe
        {% else %} critical
        {% endif %}

    - name: "Alarm Snapshots Size Status"
      unique_id: alarm_snapshots_size_status
      icon: mdi:backup-restore
      state: >
        {% set size = states('sensor.alarm_snapshots')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: "TTS Size Status"
      unique_id: tts_size_status
      icon: mdi:account-voice
      state: >
        {% set size = states('sensor.tts')|int(-1) %}
        {% if size == -1 %} error
        {% elif size < 50 %} ok
        {% elif size < 75 %} minor
        {% elif size < 100 %} warning
        {% elif size < 150 %} severe
        {% else %} critical
        {% endif %}

    - name: "Hass Files Status"
      unique_id: hass_files_status
      icon: mdi:harddisk
      state: >
        {% if is_state('sensor.hass_db_size_status','critical')
          or is_state('sensor.backup_size_status','critical')
          or is_state('sensor.hass_log_size_status','critical')
          or is_state('sensor.alarm_snapshots_size_status','critical')
          or is_state('sensor.tts_size_status','critical') %} critical

        {% elif is_state('sensor.hass_db_size_status','severe')
          or is_state('sensor.backup_size_status','severe')
          or is_state('sensor.hass_log_size_status','severe')
          or is_state('sensor.alarm_snapshots_size_status','severe')
          or is_state('sensor.tts_size_status','severe') %} severe

        {% elif is_state('sensor.hass_db_size_status','warning')
          or is_state('sensor.backup_size_status','warning')
          or is_state('sensor.hass_log_size_status','warning')
          or is_state('sensor.alarm_snapshots_size_status','crwarningitical')
          or is_state('sensor.tts_size_status','warning') %} warning

        {% elif is_state('sensor.hass_db_size_status','minor')
          or is_state('sensor.backup_size_status','minor')
          or is_state('sensor.hass_log_size_status','minor')
          or is_state('sensor.alarm_snapshots_size_status','minor')
          or is_state('sensor.tts_size_status','minor')  %} minor
        {% else %} ok
        {% endif %}

    - name: "Connected Browsers"
      unique_id: connected_browsers
      unit_of_measurement: users
      icon: mdi:monitor-cellphone
      state: >
        {% set entities = state_attr('sensor.connected_browsers','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {{ states.sensor
              |selectattr('entity_id','search','_browser_user')
              |rejectattr('entity_id','search','_browser_useragent')
              |rejectattr('state','in',['unknown','unavailable'])
              |map(attribute='entity_id')|list }}

    - name: "Unknown Browsers"
      unique_id: unknown_browsers
      unit_of_measurement: browsers
      state: >
        {% set entities = state_attr('sensor.unknown_browsers','entity_id') %}
        {% if entities != none %} {{ entities|count }}
        {% else %} {{ entities }}
        {% endif %}
      attributes:
        entity_id: >
          {{ states.sensor|selectattr('entity_id','search','_browser_user')
              |selectattr('attributes.authorized','defined')
              |selectattr('attributes.authorized','ne',true)
              |rejectattr('state','in',['unknown','unavailable'])
              |map(attribute='entity_id')|list }}

    - name: "HASS Addon Memory Percent"
      unique_id: hass_addon_memory_percent
      icon: mdi:memory
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_memory_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ '%0.1f'|format(total.value|float(0)) }}

    - name: "HASS Addon CPU Percent"
      unique_id: hass_addon_cpu_percent
      icon: mdi:memory
      unit_of_measurement: "%"
      state: >
        {% set total = namespace(value=0) %}
        {% set addons = expand('group.add_on_cpu_sensors') %}
        {% for sensor in addons if is_number(states(sensor.entity_id))%}
          {% set total.value = total.value + states(sensor.entity_id)|float %}
        {% endfor %}
        {{ '%0.1f'|format(total.value|float(0)) }}
