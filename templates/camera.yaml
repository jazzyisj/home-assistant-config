###############################################################################
## Templates - Camera
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Frigate Connected"
      unique_id: frigate_connected
      picture: !secret FRIGATE_ICON
      device_class: connectivity
      state: >
        {{ integration_entities('frigate') | select('has_value') | list | count > 0
            and is_state('binary_sensor.frigate_full_access_running', 'on') }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Wyze Connected"
      unique_id: wyze_connected
      picture: !secret WYZE_ICON
      device_class: connectivity
      state: >
        {{ expand(device_entities('3e74fe75b2372bbafe49b9642b97d322')
              + device_entities('95775b8130a626f30b27207298764c44'))
            | rejectattr('domain', 'eq', 'device_tracker')
            | map(attribute='entity_id') | select('has_value') | list | count > 0
            and is_state('binary_sensor.docker_wyze_bridge_running', 'on') }}

    - name: "Frigate Connected Alert"
      unique_id: frigate_connected_alert
      icon: mdi:cctv
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.frigate_connected', 'off')
            and is_state('input_boolean.camera_alerts', 'on') }}

    - name: "Wyze Connected Alert"
      unique_id: wyze_connected_alert
      icon: mdi:camera-wireless
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.wyze_connected', 'off')
            and is_state('binary_sensor.someone_home', 'off')
            and is_state('input_boolean.camera_alerts', 'on') }}

    - name: "Camera Offline Alert"
      unique_id: camera_offline_alert
      icon: mdi:cctv-off
      device_class: problem
      delay_on: 60 # prevent false triggers
      state: > # allow 5 minutes at startup for cameras to come online
        {% if now() - states('sensor.uptime') | as_datetime > timedelta(minutes=5) %}
          {% set entities = state_attr(this.entity_id, 'entity_id') %}
          {{ entities | count > 0 if entities != none
              and is_state('input_boolean.camera_alerts', 'on') else false }}
        {% endif %}
      attributes:
        #TEMP exclude garage cam - not working, high cpu on wyze cams (indoor)
        entity_id: > # indoor cams are off when somebody home
          {% set indoor = state_attr('group.indoor_cameras', 'entity_id')
              if is_state('binary_sensor.someone_home', 'on')
                and state_attr('group.indoor_cameras', 'entity_id') != none else [] %}
          {{ expand(integration_entities('frigate'))
              | selectattr('domain', 'eq', 'camera')
              | rejectattr('entity_id', 'in', indoor)
              | rejectattr('entity_id', 'in', ['camera.garage_inside_frigate', 'camera.charlie_crate_frigate', 'camera.living_room_frigate'])
              | map(attribute='entity_id') | reject('has_value') | list | sort }}

    - name: "Camera Object Detected"
      unique_id: camera_object_detected
      icon: mdi:motion-sensor
      device_class: motion
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none
            and is_state('input_boolean.camera_alerts', 'on') else none }}
      attributes:
        entity_id: > #STRING
          {{ expand(integration_entities('frigate'))
              | selectattr('entity_id', 'contains', '_all_count')
              | selectattr('state', 'gt', '0')
              | map(attribute='entity_id') | list | sort }}

- sensor:
    - name: "Frigate Clips Size Status"
      unique_id: frigate_clips_size_status
      icon: mdi:account-voice
      state: >
        {% set size = states('sensor.clips') | int(-1) %}
        {% if size > 1000 %} critical
        {% elif size > 750 %} severe
        {% elif size > 500 %} warning
        {% elif size > 250 %} minor
        {% else %} ok
        {% endif %}
