###################################################################################################
## Templates - Camera
###################################################################################################
- image:
    - name: "Last Detected Object"
      unique_id: last_detected_object
      icon: mdi:cctv
      url: "{{ states('sensor.hass_base_url') ~ state_attr(states('sensor.last_detected_object'), 'entity_picture') }}"

- switch:
    - name: "Camera Object Detection"
      unique_id: camera_object_detection
      icon: mdi:cctv
      state: "{{ is_state('group.camera_detection_switches', 'on') }}"
      turn_on:
        - action: switch.turn_on
          target:
            entity_id: group.camera_detection_switches
      turn_off:
        - action: switch.turn_off
          target:
            entity_id: group.camera_detection_switches

    - name: "Camera Motion"
      unique_id: camera_motion
      icon: mdi:cctv
      state: "{{ is_state('group.camera_motion_switches', 'on') }}"
      turn_on:
        - action: switch.turn_on
          target:
            entity_id: group.camera_motion_switches
      turn_off:
        #NOTE object detection must be off to turn motion off
        - action: switch.turn_off
          target:
            entity_id: group.camera_detection_switches

        - action: switch.turn_off
          target:
            entity_id: group.camera_motion_switches

    - name: "Camera Recording"
      unique_id: camera_recording
      icon: mdi:cctv
      state: "{{ is_state('group.camera_recording_switches', 'on') }}"
      turn_on:
        - action: switch.turn_on
          target:
            entity_id: group.camera_recording_switches
      turn_off:
        - action: switch.turn_off
          target:
            entity_id: group.camera_recording_switches

    - name: "Camera Snapshots"
      unique_id: camera_snapshots
      icon: mdi:cctv
      state: "{{ is_state('group.camera_snapshot_switches', 'on') }}"
      turn_on:
        - action: switch.turn_on
          target:
            entity_id: group.camera_snapshot_switches
      turn_off:
        - action: switch.turn_off
          target:
            entity_id: group.camera_snapshot_switches
- sensor:
    - name: "Last Detected Object"
      unique_id: "last_detected_object"
      icon: >
        {% set obj = state_attr(this.entity_id, 'object') %}
        {% if is_state('switch.camera_object_detection', 'off') %} mdi:cctv-off
        {% elif obj == 'Person' %} mdi:walk
        {% elif obj == 'Car' %} mdi:car-hatchback
        {% elif obj == 'Dog' %} mdi:dog-side
        {% elif obj == 'Cat' %} mdi:cat
        {% elif obj == 'Mouse' %} mdi:rodent
        {% elif obj == 'Package' %} mdi:package-variant
        {% else %} mdi:cctv
        {% endif %}
      picture: "{{ state_attr('image.last_detected_object', 'entity_picture') }}"
      state: >
        {% set images = expand('group.last_detected_object_sensors')
          | rejectattr('state', 'in', ['unknown', 'unavailable'])
          | sort(attribute='state', reverse=true)
          | map(attribute='entity_id') | list %}
        {{ images | first if images | count > 0 else [] }}
      attributes:
        camera: >
          {% from 'camera.jinja' import camera_name %}
          {{ camera_name(states(this.entity_id)) }}
        object: >
          {% set state = states(this.entity_id) %}
          {% if state | contains('person') %} Person
          {% elif state | contains('car') %} Car
          {% elif state | contains('dog') %} Dog
          {% elif state | contains('cat') %} Cat
          {% elif state | contains('mouse') %} Mouse
          {% elif state | contains('package') %} Package
          {% else %} Unknown
          {% endif %}
        image_url: "{{ state_attr(states(this.entity_id), 'entity_picture') }}"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/1"
  binary_sensor:
    - name: "Frigate Integration Connected"
      unique_id: frigate_integration_connected
      picture: !secret FRIGATE_ICON
      device_class: connectivity
      state: >
        {{ integration_entities('frigate') | select('has_value') | list | count > 0
            and is_state('binary_sensor.frigate_full_access_running', 'on') }}

    - name: "Wyze Integration Connected"
      unique_id: wyze_integration_connected
      picture: !secret WYZE_ICON
      device_class: connectivity
      # device_trackers retain values when cameras offline
      state: >
        {{ expand(device_entities('3e74fe75b2372bbafe49b9642b97d322')
              + device_entities('95775b8130a626f30b27207298764c44'))
            | rejectattr('domain', 'eq', 'device_tracker')
            | map(attribute='entity_id') | select('has_value') | list | count > 0
            and is_state('binary_sensor.docker_wyze_bridge_running', 'on') }}

- binary_sensor:
    - name: "Frigate Connected Alert"
      unique_id: frigate_connected_alert
      icon: mdi:cctv
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.frigate_integration_connected', 'off')
            and is_state('input_boolean.camera_alerts', 'on') }}

    - name: "Wyze Connected Alert"
      unique_id: wyze_connected_alert
      icon: mdi:camera-wireless
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.wyze_integration_connected', 'off')
            and is_state('binary_sensor.someone_home', 'off')
            and is_state('input_boolean.camera_alerts', 'on') }}

    - name: "Offline Cameras Alert"
      unique_id: offline_cameras_alert
      icon: mdi:cctv-off
      device_class: problem
      delay_on: 300 # prevent false triggers
      state: > # allow 5 minutes at startup for cameras to come online
        {% if now() - states('sensor.uptime') | as_datetime > timedelta(minutes=5) %}
          {% set entities = state_attr('group.offline_cameras', 'entity_id') %}
          {{ entities | count > 0 if entities != none
              and is_state('input_boolean.camera_alerts', 'on') else false }}
        {% endif %}

    - name: "Camera Object Detected"
      unique_id: camera_object_detected
      icon: mdi:cctv
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none
            and is_state('input_boolean.camera_alerts', 'on') else false }}
      attributes:
        entity_id: >
          {% set entities = namespace(value=[]) %}
          {% set sensors = state_attr('group.frigate_all_count_sensors', 'entity_id') %}
          {% if sensors != none %}
            {% for item in sensors if states(item) | int(-1) > 0 %}
            {% set entities.value = entities.value + [item] %}
            {% endfor %}
          {% endif %}
          {{ entities.value }}

    - name: "Indoor Camera Alert"
      unique_id: indoor_camera_alert
      icon: mdi:cctv
      device_class: problem
      state: >
        {{ is_state('group.indoor_camera_switches', 'on')
            and is_state('binary_sensor.someone_home', 'on') }}
