###################################################################################################
## Templates - Weather
###################################################################################################
- button:
    - name: "Weather Report"
      unique_id: weather_report
      icon: mdi:account-voice
      press:
        - if: >
            {{ is_state('binary_sensor.pirateweather_integration_connected', 'off')
                or is_state('binary_sensor.tempest_integration_connected', 'off')
                or is_state('binary_sensor.envcan_integration_connected', 'off') }}
          then:
            - action: script.tts_play
              data:
                provider: "HASS"
                language: "English (USA)"
                voice: "Brandon"
                always_play: true
                save_message: false
                message: "The weather forecast cannot play because the required weather providers are not connected."

            - stop: "Weather providers not connected."

        - action: script.tts_play
          data:
            # media_player: media_player.inside_speakers #DISABLED for #MASS resume
            min_volume: 40
            always_play: true
            save_message: false
            message: !include /config/include/weather_report.yaml

###################################################################################################
## Weather Forecast Entities
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/15"

    - trigger: state
      entity_id: &forecasts
        - weather.windsor_forecast
        - weather.pirateweather
        - weather.forecast_home
      from:
        - unknown
        - unavailable
  action:
    - wait_template: >
        {{ is_state('binary_sensor.weatherflow_integration_connected', 'on')
            and is_state('binary_sensor.pirateweather_integration_connected', 'on')
            and is_state('binary_sensor.envcan_integration_connected', 'on') }}
      timeout: 120
      continue_on_timeout: true

    - action: weather.get_forecasts
      data:
        type: daily
      target:
        entity_id: *forecasts
      response_variable: daily

    - action: weather.get_forecasts
      data:
        type: hourly
      target:
        entity_id: *forecasts
      response_variable: hourly
  sensor:
    - name: "Daily Weather"
      unique_id: daily_weather
      state: "{{ states('sensor.current_condition') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.outdoor_temperature') }}"
        dew_point: "{{ states('sensor.dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.outdoor_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.outdoor_humidity') }}"
        cloud_coverage: "{{ states('sensor.cloud_coverage') }}"
        pressure: "{{ states('sensor.barometric_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.barometric_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.wind_gust') }}"
        wind_speed: "{{ states('sensor.wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.visibility') }}"
        visibility_unit: "{{ state_attr('sensor.visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.precipitation_accumulation_today') }}"
        precipitation_unit: "{{ state_attr('sensor.precipitation_accumulation_today', 'unit_of_measurement') }}"
        updated: "{{ utcnow() }}"
        # use pirateweather, weatherflow first, no precipitation in envcan
        forecast: >
          {% set tempest = state_attr('sensor.tempest_hub_weather', 'daily_forecast') %}
          {% set pirate = daily['weather.pirateweather']['forecast']
              if daily is defined and daily['weather.pirateweather'] is defined else none %}
          {% set weatherflow = daily['weather.forecast_home']['forecast']
              if daily is defined and daily['weather.forecast_home'] is defined else none %}
          {% set envcan = daily['weather.windsor_forecast']['forecast']
              if daily is defined and daily['weather.windsor_forecast'] is defined else none %}
          {{ pirate if pirate != none else tempest if tempest != none
              else weatherflow if weatherflow != none else envcan if envcan != none else none }}

    - name: "Hourly Weather"
      unique_id: hourly_weather
      state: "{{ states('sensor.current_condition') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.outdoor_temperature') }}"
        dew_point: "{{ states('sensor.dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.outdoor_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.outdoor_humidity') }}"
        cloud_coverage: "{{ states('sensor.cloud_coverage') }}"
        pressure: "{{ states('sensor.barometric_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.barometric_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.wind_gust') }}"
        wind_speed: "{{ states('sensor.wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.visibility') }}"
        visibility_unit: "{{ state_attr('sensor.visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.precipitation_accumulation_today') }}"
        precipitation_unit: "{{ state_attr('sensor.precipitation_accumulation_today', 'unit_of_measurement') }}"
        # use pirateweather, first, no cloud, humidity, precipitation in others
        forecast: >
          {% set tempest = state_attr('sensor.tempest_hub_weather', 'hourly_forecast') %}
          {% set pirate = hourly['weather.pirateweather']['forecast']
              if hourly is defined and hourly['weather.pirateweather'] is defined else none %}
          {% set weatherflow = hourly['weather.forecast_home']['forecast']
              if hourly is defined and hourly['weather.forecast_home'] is defined else none %}
          {% set envcan = hourly['weather.windsor_forecast']['forecast']
              if hourly is defined and hourly['weather.windsor_forecast'] is defined else none %}
          {{ pirate if pirate != none else tempest if tempest != none
              else weatherflow if weatherflow != none else envcan if envcan != none else none }}

    - name: "Daily Envcan"
      unique_id: daily_envcan
      state: "{{ states('weather.windsor_forecast') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.windsor_temperature') }}"
        dew_point: "{{ states('sensor.windsor_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.windsor_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.windsor_humidity') }}"
        pressure: "{{ states('sensor.windsor_barometric_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.windsor_barometric_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.windsor_wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.windsor_wind_gust') }}"
        wind_speed: "{{ states('sensor.windsor_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.windsor_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.windsor_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.windsor_visibility', 'unit_of_measurement') }}"
        updated: "{{ states('sensor.windsor_observation_time') | as_datetime }}"
        forecast: >
          {% if daily is defined
              and daily['weather.windsor_forecast'] is defined
              and daily['weather.windsor_forecast']['forecast'] is defined %}
            {{ daily['weather.windsor_forecast']['forecast'] }}
          {% endif %}

    - name: "Hourly Envcan"
      unique_id: hourly_envcan
      state: "{{ states('weather.windsor_forecast') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.windsor_temperature') }}"
        dew_point: "{{ states('sensor.windsor_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.windsor_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.windsor_humidity') }}"
        pressure: "{{ states('sensor.windsor_barometric_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.windsor_barometric_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.windsor_wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.windsor_wind_gust') }}"
        wind_speed: "{{ states('sensor.windsor_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.windsor_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.windsor_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.windsor_visibility', 'unit_of_measurement') }}"
        updated: "{{ states('sensor.windsor_observation_time') | as_datetime }}"
        forecast: >
          {% if hourly is defined
              and hourly['weather.windsor_forecast'] is defined
              and hourly['weather.windsor_forecast']['forecast'] is defined %}
            {{ hourly['weather.windsor_forecast']['forecast'] }}
          {% endif %}

    - name: "Daily Weatherflow"
      unique_id: daily_weatherflow
      state: "{{ states('weather.forecast_home') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.home_sensors_temperature') }}"
        dew_point: "{{ states('sensor.home_sensors_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.home_sensors_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.home_sensors_humidity') }}"
        pressure: "{{ states('sensor.home_sensors_sea_level_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.home_sensors_sea_level_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.home_sensors_wind_direction') }}"
        wind_gust_speed: "{{ states('sensor.home_sensors_wind_gust') }}"
        wind_speed: "{{ states('sensor.home_sensors_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.home_sensors_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.home_sensors_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.home_sensors_visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.home_sensors_precipitation_today_checked') }}"
        precipitation_unit: "{{ state_attr('sensor.home_sensors_precipitation_today_checked', 'unit_of_measurement') }}"
        updated: "{{ states('home_sensors_data_updated') | as_datetime }}"
        forecast: >
          {% if daily is defined
              and daily['weather.forecast_home'] is defined
              and daily['weather.forecast_home']['forecast'] is defined %}
            {{ daily['weather.forecast_home']['forecast'] }}
          {% endif %}

    - name: "Hourly Weatherflow"
      unique_id: hourly_weatherflow
      state: "{{ states('weather.forecast_home') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.home_sensors_temperature') }}"
        dew_point: "{{ states('sensor.home_sensors_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.home_sensors_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.home_sensors_humidity') }}"
        pressure: "{{ states('sensor.home_sensors_sea_level_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.home_sensors_sea_level_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.home_sensors_wind_direction') }}"
        wind_gust_speed: "{{ states('sensor.home_sensors_wind_gust') }}"
        wind_speed: "{{ states('sensor.home_sensors_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.home_sensors_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.home_sensors_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.home_sensors_visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.home_sensors_precipitation_today_checked') }}"
        precipitation_unit: "{{ state_attr('sensor.home_sensors_precipitation_today_checked', 'unit_of_measurement') }}"
        updated: "{{ states('home_sensors_data_updated') | as_datetime }}"
        forecast: >
          {% if hourly is defined
              and hourly['weather.forecast_home'] is defined
              and hourly['weather.forecast_home']['forecast'] is defined %}
            {{ hourly['weather.forecast_home']['forecast'] }}
          {% endif %}

    - name: "Daily Pirateweather"
      unique_id: daily_pirateweather
      state: "{{ states('weather.pirateweather') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.pirateweather_temperature') }}"
        dew_point: "{{ states('sensor.pirateweather_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.pirateweather_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.pirateweather_humidity') }}"
        cloud_coverage: "{{ states('sensor.pirateweather_cloud_coverage') }}"
        pressure: "{{ states('sensor.pirateweather_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.pirateweather_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.pirateweather_wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.pirateweather_wind_gust') }}"
        wind_speed: "{{ states('sensor.pirateweather_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.pirateweather_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.pirateweather_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.pirateweather_visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.pirateweather_current_day_liquid_accumulation') }}"
        precipitation_unit: "{{ state_attr('sensor.pirateweather_current_day_liquid_accumulation', 'unit_of_measurement') }}"
        updated: "{{ states('sensor.pirateweather_time') | as_datetime }}"
        forecast: >
          {% if daily is defined
              and daily['weather.pirateweather'] is defined
              and daily['weather.pirateweather']['forecast'] is defined %}
            {{ daily['weather.pirateweather']['forecast'] }}
          {% endif %}

    - name: "Hourly Pirateweather"
      unique_id: hourly_pirateweather
      state: "{{ states('weather.pirateweather') }}"
      device_class: enum
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        temperature: "{{ states('sensor.pirateweather_temperature') }}"
        dew_point: "{{ states('sensor.pirateweather_dew_point') }}"
        temperature_unit: "{{ state_attr('sensor.pirateweather_temperature', 'unit_of_measurement') }}"
        humidity: "{{ states('sensor.pirateweather_humidity') }}"
        cloud_coverage: "{{ states('sensor.pirateweather_cloud_coverage') }}"
        pressure: "{{ states('sensor.pirateweather_pressure') }}"
        pressure_unit: "{{ state_attr('sensor.pirateweather_pressure', 'unit_of_measurement') }}"
        wind_bearing: "{{ states('sensor.pirateweather_wind_bearing') }}"
        wind_gust_speed: "{{ states('sensor.pirateweather_wind_gust') }}"
        wind_speed: "{{ states('sensor.pirateweather_wind_speed') }}"
        wind_speed_unit: "{{ state_attr('sensor.pirateweather_wind_speed', 'unit_of_measurement') }}"
        visibility: "{{ states('sensor.pirateweather_visibility') }}"
        visibility_unit: "{{ state_attr('sensor.pirateweather_visibility', 'unit_of_measurement') }}"
        precipitation: "{{ states('sensor.pirateweather_current_day_liquid_accumulation') }}"
        precipitation_unit: "{{ state_attr('sensor.pirateweather_current_day_liquid_accumulation', 'unit_of_measurement') }}"
        updated: "{{ states('sensor.pirateweather_time') | as_datetime }}"
        forecast: >
          {% if hourly is defined
              and hourly['weather.pirateweather'] is defined
              and hourly['weather.pirateweather']['forecast'] is defined %}
            {{ hourly['weather.pirateweather']['forecast'] }}
          {% endif %}

###################################################################################################
## Integrations
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern
      minutes: "/5"
  binary_sensor:
    - name: "OpenUV Integration Connected"
      unique_id: openuv_integration_connected
      picture: !secret OPENUV_ICON
      device_class: connectivity
      state: "{{ integration_entities('openuv') | select('has_value') | list | count > 0 }}"

    - name: "WAQI Integration Connected"
      unique_id: waqi_integration_connected
      picture: !secret WAQI_ICON
      device_class: connectivity
      state: "{{ integration_entities('waqi') | select('has_value') | list | count > 0 }}"

###################################################################################################
## Temperature Trigger Sensors
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: time_pattern # throttle updates (tempest)
      minutes: "/15"
  sensor:
    - name: "Outdoor Apparent Temperature"
      unique_id: outdoor_apparent_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% set tempest = states('sensor.tempest_feels_like_temperature') | float(none) %}
        {% set weatherflow = states('sensor.home_sensors_apparent_temperature') | float(none) %}
        {% if  tempest != none %} {% set temp = tempest %}
        {% elif weatherflow != none %} {% set temp = weatherflow %}
        {% endif %}
        {{ '%0.1f' | format(temp) }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_feels_like_temperature') | float(none) %}
          {% set weatherflow = states('sensor.home_sensors_apparent_temperature') | float(none) %}
          {% if tempest != none %} Tempest
          {% elif weatherflow != none %} Weatherflow
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_feels_like_temperature') | float(none) %}
        {% set weatherflow = states('sensor.home_sensors_apparent_temperature') | float(none) %}
        {{ tempest != none or weatherflow != none }}

###################################################################################################
## Lightning Trigger Sensors
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.home_lightning_distance
      to:
  action:
    - condition: numeric_state
      entity_id: sensor.home_lightning_distance
      above: -1

    - action: input_number.set_value
      target:
        entity_id: input_number.lightning_distance
      data:
        value: "{{ states('sensor.home_lightning_distance') | int }}"
  sensor:
    - name: "Lightning Distance"
      unique_id: lightning_distance
      icon: mdi:clock-star-four-points
      device_class: distance
      state_class: measurement
      unit_of_measurement: km
      state: "{{ states('input_number.lightning_distance') | int }}"
      attributes:
        provider: "Blitzortung"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.lightning_count
      to:
  action:
    - condition: numeric_state
      entity_id: sensor.lightning_count
      above: 0

    - action: input_text.set_value
      target:
        entity_id: input_text.lightning_last_strike
      data:
        value: "{{ utcnow() }}"
  sensor:
    - name: "Lightning Last Strike"
      unique_id: lightning_last_strike
      icon: mdi:clock-star-four-points
      device_class: timestamp
      state: >
        {% set time = states('input_text.lightning_last_strike') %}
        {{ time | as_datetime if time not in ['','unknown','unavailable'] else none }}
      attributes:
        provider: "Blitzortung"
      availability: "{{ has_value('input_text.lightning_last_strike') }}"

###################################################################################################
## Precipitation Trigger Sensors
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.pirateweather_current_day_liquid_accumulation
      to:
  action:
    - variables:
        previous: "{{ states('input_number.rain_accumulation_today_checked') | float }}"
        current: "{{ states('sensor.pirateweather_current_day_liquid_accumulation') | float }}"

    - action: input_number.set_value
      target:
        entity_id: input_number.rain_accumulation_today_checked
      data:
        value: "{{ 0 if current == 0 else iif(current > previous, current, previous) }}"
  sensor:
    - name: Rain Accumulation Today
      unique_id: rain_accumulation_today
      icon: mdi:weather-pouring
      device_class: precipitation
      state_class: total_increasing
      unit_of_measurement: mm
      state: "{{ states('input_number.rain_accumulation_today_checked') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_current_day_liquid_accumulation') | float(-1) >= 0 }}"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.pirateweather_current_day_snow_accumulation
      to:
  action:
    - variables:
        previous: "{{ states('input_number.snow_accumulation_today_checked') | float }}"
        current: "{{ states('sensor.pirateweather_current_day_snow_accumulation') | float }}"

    - action: input_number.set_value
      target:
        entity_id: input_number.snow_accumulation_today_checked
      data:
        value: "{{ 0 if current == 0 else iif(current > previous, current, previous) }}"
  sensor:
    - name: Snow Accumulation Today
      unique_id: snow_accumulation_today
      icon: mdi:weather-snowy
      device_class: precipitation
      state_class: total_increasing
      unit_of_measurement: mm
      state: "{{ states('input_number.snow_accumulation_today_checked') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_current_day_snow_accumulation') | float(-1) >= 0 }}"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.pirateweather_current_day_ice_accumulation
      to:
  action:
    - variables:
        previous: "{{ states('input_number.ice_accumulation_today_checked') | float(-1) }}"
        current: "{{ states('sensor.pirateweather_current_day_ice_accumulation') | float(-1) }}"

    - action: input_number.set_value
      target:
        entity_id: input_number.ice_accumulation_today_checked
      data:
        value: "{{ 0 if current == 0 else iif(current > previous, current, previous) }}"
  sensor:
    - name: Ice Accumulation Today
      unique_id: ice_accumulation_today
      icon: mdi:weather-icey-heavy
      device_class: precipitation
      state_class: total_increasing
      unit_of_measurement: mm
      state: "{{ states('input_number.ice_accumulation_today_checked') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_current_day_ice_accumulation') | float(-1) >= 0 }}"

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.precipitation_accumulation_today_calculated
      to:
  action:
    - variables:
        previous: "{{ states('input_number.precipitation_accumulation_today_checked') | float(-1) }}"
        current: "{{ states('sensor.precipitation_accumulation_today_calculated') | float(-1) }}"

    - action: input_number.set_value
      target:
        entity_id: input_number.precipitation_accumulation_today_checked
      data:
        value: "{{ 0 if current == 0 else iif(current > previous, current, previous) }}"
  sensor:
    - name: "Precipitation Accumulation Today"
      unique_id: precipitation_accumulation_today
      icon: mdi:weather-pouring
      device_class: precipitation
      state_class: total_increasing
      unit_of_measurement: mm
      state: "{{ states('input_number.precipitation_accumulation_today_checked') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.precipitation_accumulation_today_calculated') | float(-1) >= 0 }}"

- trigger:
    - trigger: homeassistant
      id: startup
      event: start

    - trigger: event
      id: reload
      event_type: event_template_reloaded

    - trigger: state
      id: sensor
      entity_id: sensor.precipitation_type
      to:
        - Rain
        - Snow
        - none
      from:
        - unknown
        - unavailable

    - trigger: state
      id: change
      entity_id: sensor.precipitation_type
      to:
        - Rain
        - Snow
      from:
        - Rain
        - Snow

    - trigger: state
      id: start
      entity_id: sensor.precipitation_type
      to:
        - Rain
        - Snow
      from: none

    - trigger: state
      id: stop
      entity_id: sensor.precipitation_type
      to: none
      from:
        - Rain
        - Snow

    - trigger: numeric_state
      id: temp
      entity_id: sensor.outdoor_temperature
      above: -1
      below: 1

    - trigger: state
      id: trend
      entity_id: sensor.outdoor_temperature_trend
      to:
  binary_sensor:
    - name: "Precipitation Type Change Alert"
      unique_id: precipitation_type_change_alert
      icon: mdi:weather-snowy-rainy
      state: >
        {% set temp = states('sensor.outdoor_temperature') | int(none) %}
        {% set trend = states('sensor.outdoor_temperature_trend') %}
        {% set type = states('sensor.precipitation_type') %}
        {% set expected = states('sensor.precipitation_type_expected') %}
        {{ (trigger.id == 'change'
              and now() - states.sensor.precipitation_type.last_changed < timedelta(minutes=60))
            or temp != none and (type == 'Snow' and temp >= -1 and trend != 'falling')
            or temp != none and (type == 'Rain' and temp <= 1 and trend != 'rising')
            or type in ['Rain', 'Snow'] and type != expected }}
      availability: >
        {{ (has_value('sensor.precipitation_type')
              and is_number(states('sensor.outdoor_temperature'))
              and has_value('sensor.outdoor_temperature_trend'))
            or (has_value('sensor.precipitation_type')
              and has_value('sensor.precipitation_type_expected')) }}

- binary_sensor:
    ###################################################################################################
    ## Integrations
    ###################################################################################################
    - name: "OpenUV Connected Alert"
      unique_id: openuv_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.openuv_integration_connected', 'off')
            and is_state('input_boolean.weather_alerts', 'on') }}

    - name: "WAQI Connected Alert"
      unique_id: waqi_connected_alert
      device_class: problem
      delay_on: 300
      state: >
        {{ is_state('binary_sensor.waqi_integration_connected', 'off')
            and is_state('input_boolean.weather_alerts', 'on') }}

    ###################################################################################################
    ## Temperature
    ###################################################################################################
    - name: "Outdoor Temperature Above Normal"
      unique_id: outdoor_temperature_above_normal
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | float
            > (states('sensor.outdoor_normal_high_temperature') | float
                + states('input_number.outdoor_temperature_above_normal_threshold') | float) }}
      availability: >
        {{ is_number(states('sensor.outdoor_apparent_temperature'))
            and is_number(states('sensor.outdoor_normal_high_temperature')) }}

    - name: "Outdoor Temperature Below Normal"
      unique_id: outdoor_temperature_below_normal
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | float
            < (states('sensor.outdoor_normal_low_temperature') | float
                - states('input_number.outdoor_temperature_below_normal_threshold') | float) }}
      availability: >
        {{ is_number(states('sensor.outdoor_apparent_temperature'))
            and is_number(states('sensor.outdoor_normal_low_temperature')) }}

    - name: "Outdoor High Temperature Alert"
      unique_id: outdoor_high_temperature_alert
      # prevent multiple alerts when temp hovering around threshold
      delay_on: 900
      delay_off: 900
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | float
              > states('input_number.outdoor_high_temperature_threshold') | float
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: "{{ is_number(states('sensor.outdoor_apparent_temperature')) }}"

    - name: "Outdoor Low Temperature Alert"
      unique_id: outdoor_low_temperature_alert
      # prevent multiple alerts when temp hovering around threshold
      delay_on: 900
      delay_off: 900
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | float
              < states('input_number.outdoor_low_temperature_threshold') | float
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: "{{ is_number(states('sensor.outdoor_apparent_temperature')) }}"

    - name: "Freezing"
      unique_id: freezing
      device_class: cold
      state: "{{ states('sensor.outdoor_temperature') | float <= 0 }}"
      availability: "{{ is_number(states('sensor.outdoor_temperature')) }}"

    ###################################################################################################
    ## Precipitaiton
    ###################################################################################################
    - name: "Precipitation Active"
      unique_id: precipitation_active
      icon: mdi:weather-pouring
      state: "{{ states('sensor.precipitation_type') in ['Rain', 'Snow'] }}"

    - name: "Precipitation Likely Soon" # next 2 hours
      unique_id: precipitation_likely_soon
      icon: mdi:weather-pouring
      state: >
        {% set time = states('sensor.precipitation_start') | as_datetime
            if has_value('sensor.precipitation_start') else none %}
        {{ is_state('binary_sensor.precipitation_active', 'off')
            and time != none and time - utcnow() < timedelta(hours=2) }}

    - name: "Precipitation Likely Next 24 Hours" # next 24 hours
      unique_id: precipitation_likely_next_24_hours
      icon: mdi:weather-pouring
      state: >
        {% set time = states('sensor.precipitation_start') | as_datetime
            if has_value('sensor.precipitation_start') else none %}
        {{ is_state('binary_sensor.precipitation_active', 'off')
            and is_state('binary_sensor.precipitation_likely_soon', 'off')
            and time != none and time > utcnow() and time - utcnow() < timedelta(hours=24) }}

    - name: "Precipitation Alert"
      unique_id: precipitation_alert
      icon: mdi:weather-snowy-rainy
      # prevent multiple triggers scattered showers, no delay after restart
      delay_off: >
        {% set update = true if utcnow() - states('sensor.uptime') | as_datetime
            < timedelta(minutes=5) else false %}
        {{ iif(update, 0, 3600) }}
      state: >
        {{ (is_state('binary_sensor.precipitation_active', 'on')
              or is_state('binary_sensor.precipitation_likely_soon', 'on'))
            and is_state('input_boolean.weather_alerts', 'on') }}

    ###################################################################################################
    ## Storm & Lightning
    ###################################################################################################
    - name: "Lightning"
      unique_id: lightning
      icon: mdi:weather-lightning
      state: "{{ states('sensor.lightning_count') | int > 0 }}"
      availability: "{{ states('sensor.lightning_count') | int(-1) >= 0 }}"

    - name: "Lightning Alert"
      unique_id: lightning_alert
      icon: mdi:flash-alert
      device_class: safety
      state: >
        {% set distance = states('sensor.lightning_distance') | int(-1) %}
        {% set count = states('sensor.lightning_count') | int(-1) %}
        {{ 0 >= distance < 10 and count > 0 }}

    ###################################################################################################
    ## Wind
    ###################################################################################################
    - name: "Wind Alert"
      unique_id: wind_alert
      icon: mdi:weather-windy
      device_class: safety
      delay_on: 300
      delay_off: >
        {% set update = true if utcnow() - states('sensor.uptime') | as_datetime < timedelta(minutes=5)
            or utcnow() - states.input_number.wind_alert_threshold.last_changed
              < timedelta(seconds=60) else false %}
        {{ iif(update, 0, 3600) }}
      state: >
        {% set thresh = states('input_number.wind_alert_threshold') | int %}
        {{ (states('sensor.wind_speed') | int(-1) >= thresh
              or states('sensor.wind_gust') | int(-1) >= thresh)
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: >
        {{ states('sensor.wind_speed') | int(-1) >= 0
            or states('sensor.wind_gust') | int(-1) >= 0 }}

    - name: "Weather LED Alert"
      unique_id: weather_led_alert
      state: >
        {{ is_state('binary_sensor.envcan_weather_alert', 'on')
            or is_state('binary_sensor.outdoor_low_temperature_alert', 'on')
            or is_state('binary_sensor.outdoor_high_temperature_alert', 'on')
            or is_state('alert.precipitation', 'on') }}

    ###################################################################################################
    ## Air Quality
    ###################################################################################################
    - name: "Air Quality Alert"
      unique_id: air_quality_alert
      icon: mdi:smog
      state: >
        {{ (is_state('sensor.aqi_risk_level', ['Very Unhealthy', 'Unhealthy', 'Unhealthy Sensitive Groups'])
              or is_state('sensor.smoke_risk', ['Extreme', 'Very High', 'High', ' Moderate'])
              or is_state('sensor.smoke_risk_today', ['critical', 'severe', 'warning']))
            and is_state('input_boolean.weather_alerts', 'on') }}

    ###################################################################################################
    ## UV Risk
    ###################################################################################################
    - name: "UV Risk Alert"
      unique_id: uv_risk_alert
      icon: mdi:weather-sunny-alert
      state: >
        {{ states('sensor.uv_risk_today') == 'Extreme'
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: "{{ has_value('sensor.uv_risk_today') }}"

- sensor:
    ###################################################################################################
    ## Condition
    ###################################################################################################
    - name: "Current Condition"
      unique_id: current_condition
      icon: >
        {% from 'weather.jinja' import condition_icon %}
        {{ condition_icon(states(this.entity_id)) }}
      device_class: enum
      state: > #NOTE need accurate for precipitation_type - envcan
        {% set condition = states('weather.windsor_forecast') %}
        {% if condition | lower == 'clear' and is_state('sun.sun', 'above_horizon') %} sunny
        {% elif condition | lower == 'clear' and is_state('sun.sun', 'below_horizon') %} clear-night
        {% elif condition | lower in ['mainly clear', 'mainly sunny', 'clear-day'] %} sunny
        {% elif condition | lower == 'mist' %} fog
        {% elif condition | lower in ['haze', 'partly cloudy', 'partly-cloudy-day', 'partly-cloudy-night'] %} partlycloudy
        {% elif condition | lower == 'mostly cloudy' %} cloudy
        {% elif condition | lower in ['light rain', 'rain'] %} rainy
        {% elif condition | lower in ['light snow', 'snow'] %} snowy
        {% elif condition | lower == 'thunderstorm' %} lightning-rainy
        {% elif condition | lower == 'heavy rain' %} pouring
        {% elif condition | lower == 'precipitation' %} rainy
        {% elif condition | lower == 'wind' %} windy
        {% else %} {{ condition | lower }}
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        provider: "Environment Canada"
      availability: "{{ has_value('weather.windsor_forecast') }}"

    - name: "Condition Today"
      unique_id: condition_today
      icon: >
        {% from 'weather.jinja' import condition_icon %}
        {{ condition_icon(states(this.entity_id)) }}
      device_class: enum
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[0]['condition'] }}"
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['condition'] is defined }}

    - name: "Condition Tomorrow"
      unique_id: condition_tomorrow
      icon: >
        {% from 'weather.jinja' import condition_icon %}
        {{ condition_icon(states(this.entity_id)) }}
      device_class: enum
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[1]['condition'] }}"
      attributes:
        options: >
          {% from 'weather.jinja' import condition_options %}
          {{ condition_options() }}
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[1] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[1]['condition'] is defined }}

    ###################################################################################################
    ## Temperature
    ###################################################################################################
    - name: "Outdoor Temperature"
      unique_id: outdoor_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% set tempest = states('sensor.tempest_temperature') | float(none) %}
        {% set envcan = states('sensor.windsor_temperature') | float(none) %}
        {% if tempest != none %} {% set temp = tempest %}
        {% elif envcan != none %} {% set temp = envcan %}
        {% endif %}
        {{ '%0.1f' | format(temp) }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_temperature') | float(none) %}
          {% set envcan = states('sensor.windsor_temperature') | float(none) %}
          {% if tempest != none %} Tempest
          {% elif envcan != none %} Environment Canada
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_temperature') | float(none) %}
        {% set envcan = states('sensor.windsor_temperature') | float(none) %}
        {{ tempest != none or envcan != none }}

    - name: "Outdoor Temperature Level"
      unique_id: outdoor_temperature_level
      icon: mdi:thermometer
      device_class: enum
      state: >
        {% set temp = states('sensor.outdoor_temperature') | float %}
        {% if temp >= 40 %} Extreme Heat
        {% elif temp >= 35 %} Very Hot
        {% elif temp >= 30 %} Hot
        {% elif temp >= 25 %} Warm
        {% elif temp >= 20 %} Nice
        {% elif temp >= 15 %} Cool
        {% elif temp >= 5 %} Chilly
        {% elif temp >= 0 %} Cold
        {% elif temp >= -5 %} Freezing
        {% elif temp >= -15 %} Frigid
        {% else %} Extreme Cold
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import temperature_options %}
          {{ temperature_options() }}
        provider: "{{ state_attr('sensor.outdoor_temperature', 'provider') }}"
      availability: "{{ is_number(states('sensor.outdoor_temperature')) }}"

    - name: "Outdoor Temperature Trend"
      unique_id: outdoor_temperature_trend
      device_class: enum
      icon: >
        {% if is_state(this.entity_id, 'Rising') %} mdi:thermometer-chevron-up
        {% elif is_state(this.entity_id, 'Falling') %} mdi:thermometer-chevron-down
        {% else %} mdi:thermometer
        {% endif %}
      state: >
        {% set change = states('sensor.outdoor_temperature_change') | float %}
        {% if change >= 0.25 %} Rising
        {% elif change < -0.25 %} Falling
        {% else %} Steady
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import trend_options %}
          {{ trend_options() }}
        provider: "{{ state_attr('sensor.outdoor_temperature', 'provider') }}"
      availability: "{{ is_number(states('sensor.outdoor_temperature_change')) }}"

    - name: "Outdoor High Temperature"
      unique_id: outdoor_high_temperature
      icon: mdi:sun-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['temperature'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['temperature']) %}
          {% set temp = state_attr('sensor.daily_envcan', 'forecast')[0]['temperature'] | float(none) %}
        {% else %}
          {% set temp = state_attr('sensor.daily_weather', 'forecast')[0]['temperature'] | float(none) %}
        {% endif %}
        {{ '%0.1f' | format(temp) }}
      attributes:
        provider: >
          {% if state_attr('sensor.daily_envcan', 'forecast') != none
              and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
              and state_attr('sensor.daily_envcan', 'forecast')[0]['temperature'] is defined
              and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['temperature']) %}
            Environment Canada
          {% else %}
            Daily Forecast
          {% endif %}
      availability: >
        {{ (state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['temperature'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['temperature']))
          or (state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['temperature'] is defined
            and is_number(state_attr('sensor.daily_weather', 'forecast')[0]['temperature'])) }}

    - name: "Outdoor High Temperature Time"
      unique_id: outdoor_high_temperature_time
      device_class: timestamp
      state: "{{ states('sensor.pirateweather_daytime_high_temperature_time_0d') | as_datetime }}"
      attributes:
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_daytime_high_temperature_time_0d') }}"

    - name: "Outdoor High Temperature Tomorrow"
      unique_id: outdoor_high_temperature_tomorrow
      icon: mdi:sun-thermometer
      device_class: temperature
      unit_of_measurement: °C
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[1]['temperature'] | float(none) }}"
      attributes:
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[1] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[1]['temperature'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[1]['temperature']) }}

    - name: "Outdoor High Temperature Time Tomorrow"
      unique_id: outdoor_high_temperature_time_tomorrow
      device_class: timestamp
      state: "{{ states('sensor.pirateweather_daytime_high_temperature_time_0d') | as_datetime }}"
      attributes:
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_daytime_high_temperature_time_0d') }}"

    - name: "Outdoor Normal High Temperature"
      unique_id: outdoor_normal_high_temperature # req envcan no state class for statistics for apex graphs
      icon: mdi:sun-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: "{{ states('sensor.windsor_normal_high_temperature') }}"
      attributes:
        provider: "Environment Canada"
      availability: "{{ is_number(states('sensor.windsor_normal_high_temperature')) }}"

    - name: "Outdoor High Temperature Differential"
      unique_id: outdoor_high_temperature_differential
      icon: mdi:sun-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {{ states('sensor.outdoor_high_temperature') | int
            - states('sensor.outdoor_normal_high_temperature') | int }}
      availability: >
        {{ is_number(states('sensor.outdoor_normal_high_temperature'))
            and is_number(states('sensor.outdoor_high_temperature')) }}

    - name: "Outdoor Low Temperature"
      unique_id: outdoor_low__temperature # envcan more accurate than pirate, not synced with forecast sensor
      icon: mdi:snowflake-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['templow'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['templow']) %}
          {% set temp = state_attr('sensor.daily_envcan', 'forecast')[0]['templow'] | float(none) %}
        {% else %}
          {% set temp = state_attr('sensor.daily_weather', 'forecast')[1]['templow'] | float(none) %}
        {% endif %}
        {{ '%0.1f' | format(temp) }}
      attributes:
        provider: >
          {% if state_attr('sensor.daily_envcan', 'forecast') != none
              and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
              and state_attr('sensor.daily_envcan', 'forecast')[0]['templow'] is defined
              and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['templow']) %}
            Environment Canada
          {% else %}
            Daily Forecast
          {% endif %}
      availability: >
        {{ (state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['templow'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[0]['templow']))
          or (state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['templow'] is defined
            and is_number(state_attr('sensor.daily_weather', 'forecast')[0]['templow'])) }}

    - name: "Outdoor Low Temperature Time"
      unique_id: outdoor_low_temperature_time
      device_class: timestamp
      state: "{{ states('sensor.pirateweather_daily_low_temperature_time_0d') | as_datetime }}"
      attributes:
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_daily_low_temperature_time_0d') }}"

    - name: "Outdoor Low Temperature Tomorrow"
      unique_id: outdoor_low_temperature_tomorrow # envcan more accurate than pirate, not synced with forecast sensor
      icon: mdi:snowflake-thermometer
      device_class: temperature
      unit_of_measurement: °C
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[1]['templow'] }}"
      attributes:
        provider: "Environment Canada"
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[1] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[1]['templow'] is defined
            and is_number(state_attr('sensor.daily_envcan', 'forecast')[1]['templow']) }}

    - name: "Outdoor Low Temperature Time Tomorrow"
      unique_id: outdoor_low_temperature_time_tomorrow
      device_class: timestamp
      state: "{{ states('sensor.pirateweather_daily_low_temperature_time_1d') | as_datetime }}"
      attributes:
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_daily_low_temperature_time_1d') }}"

    - name: "Outdoor Normal Low Temperature"
      unique_id: outdoor_normal_low_temperature
      icon: mdi:snowflake-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: "{{ states('sensor.windsor_normal_low_temperature') }}"
      attributes:
        provider: "Environment Canada"
      availability: "{{ is_number(states('sensor.windsor_normal_low_temperature')) }}"

    - name: "Outdoor Low Temperature Differential"
      unique_id: outdoor_low_temperature_differential
      icon: mdi:snowflake-thermometer
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {{ states('sensor.outdoor_low_temperature') | float
            - states('sensor.outdoor_normal_low_temperature') | float }}
      availability: >
        {{ is_number(states('sensor.outdoor_normal_low_temperature'))
            and is_number(states('sensor.outdoor_low_temperature')) }}

    ###################################################################################################
    ## Humidity
    ###################################################################################################
    - name: "Outdoor Humidity"
      unique_id: outdoor_humidity
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% set tempest = states('sensor.tempest_humidity') | int(-1) %}
        {% set envcan = states('sensor.windsor_humidity') | int(-1) %}
        {% if tempest >= 0 %} {% set humidity = tempest %}
        {% elif envcan >= 0 %} {% set humidity = envcan %}
        {% endif %}
        {{ humidity }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_humidity') | int(-1) %}
          {% set envcan = states('sensor.windsor_humidity') | int(-1) %}
          {% if tempest >= 0 %} Tempest
          {% elif envcan >= 0 %} Environment Canada
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_humidity') | int(-1) %}
        {% set envcan = states('sensor.windsor_humidity') | int(-1) %}
        {{ tempest >= 0 or envcan >= 0 }}

    - name: "Outdoor Humidity Today"
      unique_id: outdoor_humidity_today
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[0]['humidity'] }}"
      attributes:
        provider: "Daily Forecast"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['humidity'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['humidity'] | int(-1) >= 0 }}

    - name: "Outdoor Humidity Tomorrow"
      unique_id: outdoor_humidity_tomorrow
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[1]['humidity'] }}"
      attributes:
        provider: "Daily Forecast"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[1] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['humidity'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['humidity'] | int(-1) >= 0 }}

    ###################################################################################################
    ## Dew Point
    ###################################################################################################
    - name: "Dew Point"
      unique_id: dew_point
      icon: mdi:thermometer-water
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% set tempest = states('sensor.tempest_dew_point') | float(none) %}
        {% set envcan = states('sensor.windsor_dew_point') | float(none) %}
        {% if tempest != none %} {% set dew = tempest %}
        {% elif envcan != none %} {% set dew = envcan %}
        {% endif %}
        {{ '%0.1f' | format(dew) }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_dew_point') | float(none) %}
          {% set envcan = states('sensor.windsor_dew_point') | float(none) %}
          {% if tempest != none %} Tempest
          {% elif envcan != none %} Environment Canada
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_dew_point') | float(none) %}
        {% set envcan = states('sensor.windsor_dew_point') | float(none) %}
        {{ tempest != none or envcan != none }}

    - name: "Dew Point Today"
      unique_id: dew_point_today
      icon: mdi:thermometer-water
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% set dew_point = namespace(value=[]) %}
        {% set forecast = state_attr('sensor.hourly_weather', 'forecast') %}
        {% for item in forecast if utcnow().day == as_datetime(item.datetime).day %}
          {% set dew_point.value = dew_point.value + [item.dew_point] %}
        {% endfor %}
        {{ dew_point.value | max }}
      attributes:
        provider: "Hourly Weather"
      availability: >
        {{ state_attr('sensor.hourly_weather', 'forecast') != none
            and state_attr('sensor.hourly_weather', 'forecast')[0] is defined
            and state_attr('sensor.hourly_weather', 'forecast')[0]['dew_point'] is defined
            and is_number(state_attr('sensor.hourly_weather', 'forecast')[0]['dew_point']) }}

    - name: "Dew Point Tomorrow"
      unique_id: dew_point_tomorrow
      icon: mdi:thermometer-water
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% set dew_point = namespace(value=[]) %}
        {% set forecast = state_attr('sensor.hourly_weather', 'forecast') %}
        {% for item in forecast  %}
          {%- set day = as_datetime(item.datetime).day %}
          {# check if tomorrow first of month #}
          {%- set tomorrow = utcnow().day + 1 if utcnow().day <= day else 1 %}
          {% if day == tomorrow %}
            {% set dew_point.value = dew_point.value + [item.dew_point] %}
          {% endif %}
        {% endfor %}
        {{ dew_point.value | max }}
      attributes:
        provider: "Hourly Weather"
      availability: >
        {{ state_attr('sensor.hourly_weather', 'forecast') != none
            and state_attr('sensor.hourly_weather', 'forecast')[1] is defined
            and state_attr('sensor.hourly_weather', 'forecast')[1]['dew_point'] is defined
            and is_number(state_attr('sensor.hourly_weather', 'forecast')[1]['dew_point']) }}

    - name: "Dew Point Comfort Level"
      unique_id: dew_point_comfort_level
      icon: mdi:thermometer-water
      device_class: enum
      state: >
        {% from 'weather.jinja' import dew_point_level %}
        {{ dew_point_level(states('sensor.dew_point')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import dew_point_level_options %}
          {{ dew_point_level_options() }}
        provider: "{{ state_attr('sensor.dew_point', 'provider') }}"
      availability: "{{ is_number(states('sensor.dew_point')) }}"

    - name: "Outdoor Humidity Level"
      unique_id: outdoor_humidity_level
      icon: mdi:water-percent
      device_class: enum
      state: >
        {% from 'weather.jinja' import humidity_level %}
        {{ humidity_level(states('sensor.outdoor_humidity')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import humidity_level_options %}
          {{ humidity_level_options() }}
        provider: "{{ state_attr('sensor.outdoor_humidity', 'provider') }}"
      availability: "{{ states('sensor.outdoor_humidity') | int(-1) >= 0 }}"

    - name: "Humidity Comfort Today"
      unique_id: humidity_comfort_today
      device_class: enum
      state: >
        {% from 'weather.jinja' import humidity_comfort_level %}
        {{ humidity_comfort_level(states('sensor.outdoor_high_temperature'), states('sensor.dew_point_today')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import humidity_comfort_options %}
          {{ humidity_comfort_options() }}
      availability: >
        {{ states('sensor.outdoor_high_temperature')
            and is_number(states('sensor.dew_point_today')) }}

    ###################################################################################################
    ## Precipitation
    ###################################################################################################
    - name: "Precipitation Probability"
      unique_id: precipitation_probability
      icon: mdi:weather-rainy
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.hourly_envcan', 'forecast')[0]['precipitation_probability'] }}"
      attributes:
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.hourly_envcan', 'forecast') != none
            and state_attr('sensor.hourly_envcan', 'forecast')[0] is defined
            and state_attr('sensor.hourly_envcan', 'forecast')[0]['precipitation_probability'] is defined
            and state_attr('sensor.hourly_envcan', 'forecast')[0]['precipitation_probability'] | int(-1) >= 0 }}

    - name: "Precipitation Probability Today"
      unique_id: precipitation_probability_today
      icon: mdi:weather-rainy
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[0]['precipitation_probability'] }}"
      attributes:
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[0] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['precipitation_probability'] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[0]['precipitation_probability'] | int(-1) >= 0 }}

    - name: "Precipitation Probability Next 24 Hours"
      unique_id: precipitation_probability_next_24_hours
      icon: mdi:weather-rainy
      unit_of_measurement: "%"
      state: >
        {% set pop = namespace(list=[0]) %}
        {% for item in states.sensor.hourly_envcan.attributes.forecast %}
          {% if loop.index0 < 24 %}
            {% set pop.list =  pop.list + [states.sensor.hourly_envcan.attributes.forecast[loop.index0].precipitation_probability | float(-1)] %}
          {% else %}
            {% break %}
          {% endif %}
        {% endfor %}
        {{ '%0.0f' | format(pop.list | max) }}
      attributes:
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ states.sensor.hourly_envcan.attributes is defined
            and states.sensor.hourly_envcan.attributes.forecast is defined }}

    - name: "Precipitation Probability Tomorrow"
      unique_id: precipitation_probability_tomorrow
      icon: mdi:weather-rainy
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_envcan', 'forecast')[1]['precipitation_probability'] }}"
      attributes:
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: >
        {{ state_attr('sensor.daily_envcan', 'forecast') != none
            and state_attr('sensor.daily_envcan', 'forecast')[1] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[1]['precipitation_probability'] is defined
            and state_attr('sensor.daily_envcan', 'forecast')[1]['precipitation_probability'] | int(-1) >= 0 }}

    - name: "Fog Probability"
      unique_id: fog_probability
      icon: mdi:weather-fog
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ states('sensor.tempest_fog_probability') }}"
      attributes:
        provider: "Tempest"
      availability: "{{ states('sensor.tempest_fog_probability') | int(-1) >= 0 }}"

    - name: "Precipitation Intensity"
      unique_id: precipitation_intensity
      icon: mdi:weather-pouring
      device_class: precipitation_intensity
      state_class: measurement
      unit_of_measurement: mm/h
      state: >
        {% set tempest = states('sensor.tempest_rain_rate') | float(-1) %}
        {% set weatherflow = states('sensor.home_sensors_precipitation_rate') | float(-1) %}
        {% set pirate = states('sensor.pirateweather_precip_intensity') | float(-1) %}
        {% if tempest >= 0 %} {% set rate = tempest %}
        {% elif weatherflow >= 0 %} {% set rate = weatherflow %}
        {% elif pirate >= 0 %} {% set rate = pirate %}
        {% else %} {% set rate = 0 %}
        {% endif %}
        {{ '%0.5f' | format(rate) }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_rain_rate') | float(-1) %}
          {% set weatherflow = states('sensor.home_sensors_precipitation_rate') | float(-1) %}
          {% set pirate = states('sensor.pirateweather_precip_intensity') | float(-1) %}
          {% if tempest >= 0 %} Tempest
          {% elif weatherflow >= 0 %} Weatherflow
          {% elif pirate >= 0 %} Pirate Weather
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_rain_rate') | float(-1) %}
        {% set weatherflow = states('sensor.home_sensors_precipitation_rate') | float(-1) %}
        {% set pirate = states('sensor.pirateweather_precip_intensity') | float(-1) %}
        {{ tempest >= 0 or weatherflow >= 0 or pirate >= 0 }}

    - name: "Precipitation Intensity Text"
      unique_id: precipitation_intensity_text
      icon: mdi:weather-pouring
      device_class: enum
      state: > #HACK none instead of None to prevent unknown state
        {% set type = states('sensor.precipitation_type') %}
        {% set rate = states('sensor.precipitation_intensity') | float %}
        {% if type in ['Rain', 'unknown', 'unavailable'] %}
          {% if rate == 0 %} none
          {% elif rate <= 0.6 %} Drizzle
          {% elif rate <= 1.0 %} Very Light
          {% elif rate <= 4 %} Light
          {% elif rate <= 15 %} Moderate
          {% elif rate <= 30 %} Heavy
          {% elif rate <= 50 %} Very heavy
          {% else %} Violent
          {% endif %}
        {% else %} {# snow and ice #}
          {% if rate == 0 %} none
          {% elif rate < 1 %} Light
          {% elif rate < 5 %} Moderate
          {% else %} Heavy
          {% endif %}
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import precip_intensity_options %}
          {{ precip_intensity_options() }}
        provider: "{{ state_attr('sensor.precipitation_intensity', 'provider') }}"
      availability: "{{ states('sensor.precipitation_intensity') | float(-1) >= 0  }}"

    - name: "Max Precipitation Intensity Today"
      unique_id: max_precipitation_intensity_today
      icon: mdi:weather-pouring
      device_class: precipitation_intensity
      unit_of_measurement: mm/h
      state: "{{ states('sensor.pirateweather_daily_max_precip_intensity_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_daily_max_precip_intensity_0d') | float(-1) >= 0 }}"

    - name: "Precipitation Accumulation Today Calculated"
      unique_id: precipitation_accumulation_today_calculated
      icon: mdi:weather-pouring
      device_class: precipitation
      state_class: total_increasing
      unit_of_measurement: mm
      state: > #NOTE snow converted to liquid equiv (cm/10) then to mm (cm*10) - no change
        {% set rain = states('sensor.rain_accumulation_today') | float(-1) %}
        {% set snow = states('sensor.snow_accumulation_today') | float(-1) %}
        {% set ice = states('sensor.ice_accumulation_today') | float(-1) %}
        {% set total = -1 %}
        {% if rain >= 0 %}{% set total = total + rain if total >= 0 else rain %}{% endif %}
        {% if snow >= 0 %}{% set total = total + snow if total >= 0 else snow %}{% endif %}
        {% if ice >= 0 %}{% set total = total + ice if total >= 0 else ice %}{% endif %}
        {{ none if total < 0 else total }}
      attributes:
        provider: "{{ state_attr('sensor.rain_accumulation_today', 'provider') }}"
      availability: >
        {{ states('sensor.rain_accumulation_today') | float(-1) >= 0
            or states('sensor.snow_accumulation_today') | float(-1) >= 0
            or states('sensor.ice_accumulation_today') | float(-1) >= 0 }}

    - name: "Precipitation Expected Today"
      unique_id: precipitation_expected_today
      icon: mdi:weather-pouring
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ '%0.1f' | format(state_attr('sensor.daily_weather', 'forecast')[0]['precipitation'] | float(-1)) }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['precipitation'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['precipitation'] | float(-1) >= 0 }}

    - name: "Precipitation Expected Tomorrow"
      unique_id: precipitation_expected_tomorrow
      icon: mdi:weather-pouring
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ '%0.1f' | format(state_attr('sensor.daily_weather', 'forecast')[1]['precipitation'] | float(-1)) }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[1] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['precipitation'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['precipitation'] | float(-1) >= 0 }}

    - name: "Max Precipitation Intensity Tomorrow"
      unique_id: max_precipitation_intensity_tomorrow
      icon: mdi:weather-pouring
      device_class: precipitation_intensity
      unit_of_measurement: mm/h
      state: "{{ states('sensor.pirateweather_daily_max_precip_intensity_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_daily_max_precip_intensity_1d') | float(-1) >= 0 }}"

    - name: "Rain Expected Today"
      unique_id: rain_expected_today
      icon: mdi:weather-pouring
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_liquid_accumulation_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_liquid_accumulation_0d') | float(-1) >= 0 }}"

    - name: "Rain Expected Tomorrow"
      unique_id: rain_expected_tomorrow
      icon: mdi:weather-pouring
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_liquid_accumulation_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_liquid_accumulation_1d') | float(-1) >= 0 }}"

    - name: "Snow Expected Today"
      unique_id: snow_expected_today
      icon: mdi:weather-snowy
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_snow_accumulation_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_snow_accumulation_0d') | float(-1) >= 0 }}"

    - name: "Snow Expected Tomorrow"
      unique_id: snow_expected_tomorrow
      icon: mdi:weather-snowy
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_snow_accumulation_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_snow_accumulation_1d') | float(-1) >= 0 }}"

    - name: "Ice Expected Today"
      unique_id: ice_expected_today
      icon: mdi:weather-snowy-rainy
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_ice_accumulation_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_ice_accumulation_0d') | float(-1) >= 0 }}"

    - name: "Ice Expected Tomorrow"
      unique_id: ice_expected_tomorrow
      icon: mdi:weather-snowy-rainy
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ states('sensor.pirateweather_ice_accumulation_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_ice_accumulation_1d') | float(-1) >= 0 }}"

    - name: "Precipitation Type"
      unique_id: precipitation_type
      icon: >
        {% set type = states(this.entity_id) %}
        {% if type == 'rain' %} mdi:weather-pouring
        {% elif type == 'snow' %} mdi:weather-snowy
        {% else %} mdi:weather-rainy
        {% endif %}
      device_class: enum
      # snow - assume snowing if condition is snow (intensity can be 0)
      # rain - check tempest rain rate > 0 for local accuaracy
      #HACK none instead of None to prevent unknown state
      state: >
        {% set condition = states('sensor.current_condition') %}
        {% if condition | contains('snow') %} Snow
        {% elif states('sensor.tempest_rain_rate') | float(-1) > 0
              or states('sensor.precipitation_intensity') | float(-1) > 0 %}
          {% if condition | contains('rain')
            or condition | contains('pouring')
            or condition | contains('storm')
            or condition | contains('lightning')
            or condition | contains('hail') %} rain
          {% elif is_state('binary_sensor.freezing', 'off') %} Rain
          {% else %} Snow
          {% endif %}
        {% else %} none
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import precip_type_options %}
          {{ precip_type_options() }}

    - name: "Precipitation Type Expected"
      unique_id: precipitation_type_expected
      icon: >
        {% set type = states(this.entity_id) %}
        {% if type == 'Rain' %} mdi:weather-pouring
        {% elif type == 'Snow' %} mdi:weather-snowy
        {% else %} mdi:weather-rainy
        {% endif %}
      device_class: enum
      state: >
        {% set type = namespace(value=none) %}
        {% set forecast = state_attr('sensor.hourly_weather', 'forecast') %}
        {% if forecast != none %}
          {% for item in forecast  %}
            {% if loop.index0 < 24 %}
              {% if item.condition | contains('rain')
                    or item.condition | contains('pouring')
                    or item.condition | contains('storm')
                    or item.condition | contains('lightning')
                    or item.condition | contains('hail') %}
                {% set type.value = 'Rain' %}
                {% break %}
              {% elif item.condition | contains('snow') %}
                {% set type.value = 'Snow' %}
                {% break %}
              {% endif %}
            {% else %} {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {% if type.value == none %}
          {% set type.value = 'Snow' if is_state('binary_sensor.freezing', 'on') else 'Rain' %}
        {% endif %}
        {{ type.value }}
      attributes:
        options: >
          {% from 'weather.jinja' import precip_type_options %}
          {{ precip_type_options() }}

    - name: "Precipitation Start" # next 24 hours
      unique_id: precipitation_start
      icon: mdi:weather-pouring
      device_class: timestamp
      state: >
        {% set time = namespace(value=none) %}
        {% set forecast = state_attr('sensor.hourly_envcan', 'forecast') %}
        {% if is_state('binary_sensor.precipitation_active', 'on') %}
          {% set time.value = states.binary_sensor.precipitation_active.last_changed %}
        {% else %}
          {% for item in forecast %}
            {% if loop.index0 < 24
                and item.precipitation_probability | int(-1) >= 40
                and (item.condition | contains('rain')
                  or item.condition | contains('snow')
                  or item.condition | contains('pouring')
                  or item.condition | contains('storm')) %}
              {% set time.value = item.datetime %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ as_timestamp(time.value) | timestamp_utc if time.value != none else none }}
      attributes:
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
        provider: "Environment Canada" # more accurate that pirate, not synced with forecast sensor
      availability: "{{ state_attr('sensor.hourly_envcan', 'forecast') not in ['', none] }}"

    ###################################################################################################
    ## Storm & Lightning
    ###################################################################################################
    - name: "Nearest Storm Bearing"
      unique_id: nearest_storm_bearing
      state_class: measurement_angle
      unit_of_measurement: "°"
      state: "{{ states('sensor.pirateweather_nearest_storm_bearing') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_nearest_storm_bearing') | int(-1) >= 0 }}"

    - name: "Nearest Storm Full Direction"
      unique_id: nearest_storm_full_direction
      icon: mdi:compass
      device_class: enum
      state: >
        {% from 'speech_helpers.jinja' import full_cardinal_direction %}
        {{ full_cardinal_direction(states('sensor.nearest_storm_bearing')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import full_cardinal_direction_options %}
          {{ full_cardinal_direction_options() }}
        provider: "{{ state_attr('sensor.nearest_storm_bearing', 'provider') }}"
      availability: "{{ states('sensor.nearest_storm_bearing') | int(-1) >= 0 }}"

    - name: "Nearest Storm Distance"
      unique_id: nearest_storm_distance
      device_class: distance
      state_class: measurement
      unit_of_measurement: km
      state: "{{ states('sensor.pirateweather_nearest_storm_distance') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_nearest_storm_distance') | int(-1) >= 0 }}"

    - name: "Lightning Count"
      unique_id: lightning_count
      icon: mdi:lightning-bolt
      state_class: measurement
      unit_of_measurement: "ϟ"
      state: "{{ states('sensor.home_lightning_counter') }}"
      attributes:
        provider: "Blitzortung"
      availability: "{{ states('sensor.home_lightning_counter') | int(-1) >= 0 }}"

    ###################################################################################################
    ## Barometric Pressure
    ###################################################################################################
    - name: "Pressure Trend"
      unique_id: pressure_trend
      device_class: enum
      icon: >
        {% if is_state(this.entity_id, 'Rising') %} mdi:trending-up
        {% elif is_state(this.entity_id, 'Falling') %} mdi:trending-down
        {% else %} mdi:thermometer-lines
        {% endif %}
      state: >
        {% set change = states('sensor.pressure_change') | float %}
        {% if change >= 1 %} Rising
        {% elif change < -1 %} Falling
        {% else %} Steady
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import trend_options %}
          {{ trend_options() }}
        provider: "{{ state_attr('sensor.barometric_pressure', 'provider') }}"
      availability: "{{ is_number(states('sensor.pressure_change')) }}"

    - name: "Barometric Pressure"
      unique_id: barometric_pressure
      icon: "{{ state_attr('sensor.pressure_trend', 'icon') }}"
      device_class: atmospheric_pressure
      state_class: measurement
      unit_of_measurement: hPa
      state: >
        {% set tempest = states('sensor.tempest_sea_level_pressure') | int(-1) %}
        {% set envcan = states('sensor.windsor_barometric_pressure') | int(-1) %}
        {% if tempest >= 0 %} {% set pressure = tempest %}
        {% elif envcan >= 0 %} {% set pressure = envcan %}
        {% endif %}
        {{ pressure }}
      attributes:
        provider: >
          {% set tempest = states('sensor.tempest_sea_level_pressure') | int(-1) %}
          {% set envcan = states('sensor.windsor_barometric_pressure') | int(-1) %}
          {% if tempest >= 0 %} {% set pressure = tempest %} Tempest
          {% elif envcan >= 0 %} {% set pressure = envcan %} Environment Canada
          {% endif %}
      availability: >
        {% set tempest = states('sensor.tempest_sea_level_pressure') | int(-1) %}
        {% set envcan = states('sensor.windsor_barometric_pressure') | int(-1) %}
        {{ tempest >= 0 or envcan >= 0 }}

    - name: "Barometric Pressure Description"
      unique_id: barometric_pressure_description
      icon: "{{ state_attr('sensor.pressure_trend', 'icon') }}"
      device_class: enum
      state: >
        {% set pressure = states('sensor.barometric_pressure') | int %}
        {% if pressure > 1030 %} Dry
        {% elif pressure > 1015 %} Fair
        {% elif pressure > 1000 %} Change
        {% elif pressure > 985 %} Rain
        {% else %} Stormy
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import pressure_description_options %}
          {{ pressure_description_options() }}
        provider: "{{ state_attr('sensor.barometric_pressure', 'provider') }}"
      availability: "{{ states('sensor.barometric_pressure') | int(-1) >= 0 }}"

    ###################################################################################################
    ## Wind Conditions
    ###################################################################################################
    - name: "Wind Speed"
      unique_id: wind_speed
      icon: mdi:weather-windy
      device_class: wind_speed # filter erroneous pirate values
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% set envcan = states('sensor.windsor_wind_speed') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_speed') | int(-1) %}
        {% if envcan >= 0 %} {% set wind = envcan %}
        {% elif pirate >= 0 %} {% set wind = pirate %}
        {% endif %}
        {{ wind }}
      attributes:
        provider: >
          {% set envcan = states('sensor.windsor_wind_speed') | int(-1) %}
          {% set pirate = states('sensor.pirateweather_wind_speed') | int(-1) %}
          {% if envcan >= 0 %} Environment Canada
          {% elif pirate >= 0 %} Pirate Weather
          {% endif %}
      availability: >
        {% set envcan = states('sensor.windsor_wind_speed') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_speed') | int(-1) %}
        {{ envcan >= 0 or pirate >= 0 }}

    - name: "Wind Speed Today"
      unique_id: wind_speed_today
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[0]['wind_speed'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['wind_speed'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['wind_speed'] | int(-1) >= 0 }}

    - name: "Wind Speed Tomorrow"
      unique_id: wind_speed_tomorrow
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[1]['wind_speed'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[1] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['wind_speed'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['wind_speed'] | int(-1) >= 0 }}

    - name: "Wind Gust"
      unique_id: wind_gust # filter erroneous pirate values
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% set envcan = states('sensor.windsor_wind_gust') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_gust') | int(-1) %}
        {% if envcan >= 0 %} {% set wind = envcan %}
        {% elif pirate >= 0 %} {% set wind = pirate %}
        {% endif %}
        {{ wind }}
      attributes:
        provider: >
          {% set envcan = states('sensor.windsor_wind_gust') | int(-1) %}
          {% set pirate = states('sensor.pirateweather_wind_speed') | int(-1) %}
          {% if envcan >= 0 %} Environment Canada
          {% elif pirate >= 0 %} Pirate Weather
          {% endif %}
      availability: >
        {% set envcan = states('sensor.windsor_wind_gust') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_gust') | int(-1) %}
        {{ envcan >= 0 or pirate >= 0 }}

    - name: "Wind Gust Today"
      unique_id: wind_gust_today
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[0]['wind_gust_speed'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['wind_gust_speed'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['wind_gust_speed'] | int(-1) >= 0 }}

    - name: "Wind Gust Tomorrow"
      unique_id: wind_gust_tomorrow
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[1]['wind_gust_speed'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[1] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['wind_gust_speed'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['wind_gust_speed'] | int(-1) >= 0 }}

    - name: "Wind Lull"
      unique_id: wind_lull
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ states('sensor.tempest_wind_lull') }}"
      attributes:
        provider: "Tempest"
      availability: "{{ states('sensor.tempest_wind_lull') | int(-1) >= 0 }}"

    - name: "Wind Bearing"
      unique_id: wind_bearing
      picture: >
        {% set directions = [0, 11, 22, 33, 45, 56, 67, 78, 90, 101, 112, 123, 135, 146, 157, 168, 180, 191,
          202, 213, 225, 236, 247, 258, 270, 281, 292, 303, 315, 326, 337, 348, 0] %}
        /local/images/entity_icons/compass/{{ directions[((states('sensor.wind_bearing') | float(-1)/360) | float*32) | round] }}.png
      state_class: measurement_angle
      unit_of_measurement: °
      state: >
        {% set envcan = states('sensor.windsor_wind_bearing') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_bearing') | int(-1) %}
        {% if envcan >= 0 %} {% set wind = envcan %}
        {% elif pirate >= 0 %} {% set wind = pirate %}
        {% endif %}
        {{ wind }}
      attributes:
        provider: >
          {% set envcan = states('sensor.windsor_wind_bearing') | int(-1) %}
          {% set pirate = states('sensor.pirateweather_wind_bearing') | int(-1) %}
          {% if envcan >= 0 %} Environment Canada
          {% elif pirate >= 0 %} Pirate Weather
          {% endif %}
      availability: >
        {% set envcan = states('sensor.windsor_wind_bearing') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_wind_bearing') | int(-1) %}
        {{ envcan >= 0 or pirate >= 0 }}

    - name: "Wind Direction"
      unique_id: wind_direction
      icon: mdi:weather-windy
      device_class: enum
      state: >
        {% from 'speech_helpers.jinja' import cardinal_direction %}
        {{- cardinal_direction(states('sensor.wind_bearing')) -}}
      attributes:
        options: >
          {% from 'weather.jinja' import cardinal_direction_options %}
          {{- cardinal_direction_options() -}}
        provider: "{{ state_attr('sensor.wind_bearing', 'provider') }}"
      availability: "{{ states('sensor.wind_bearing') | int(-1) >= 0 }}"

    - name: "Wind Full Direction"
      unique_id: wind_full_direction
      icon: mdi:weather-windy
      device_class: enum
      state: >
        {% from 'speech_helpers.jinja' import full_cardinal_direction %}
        {{- full_cardinal_direction(states('sensor.wind_bearing')) -}}
      attributes:
        options: >
          {% from 'weather.jinja' import full_cardinal_direction_options %}
          {{- full_cardinal_direction_options() -}}
        provider: "{{ state_attr('sensor.wind_bearing', 'provider') }}"
      availability: "{{ states('sensor.wind_bearing') | int(-1) >= 0 }}"

    - name: "Wind Direction Average"
      unique_id: wind_direction_average
      icon: mdi:weather-windy
      device_class: enum
      state: >
        {% from 'speech_helpers.jinja' import cardinal_direction %}
        {{- cardinal_direction(states('sensor.wind_bearing_24_hour_average')) -}}
      attributes:
        options: >
          {% from 'weather.jinja' import cardinal_direction_options %}
          {{- cardinal_direction_options() -}}
        provider: "{{ state_attr('sensor.wind_bearing', 'provider') }}"
      availability: "{{ states('sensor.wind_bearing_24_hour_average') | int(-1) >= 0 }}"

    - name: "Wind Beaufort Display"
      unique_id: wind_beaufort_display
      icon: mdi:windsock
      device_class: enum
      state: >
        {% set speed = states('sensor.wind_speed') | int %}
        {% if speed < 1 %} Calm
        {% elif speed < 6 %} Light Air
        {% elif speed < 12 %} Light Breeze
        {% elif speed < 20 %} Gentle Breeze
        {% elif speed < 29 %} Moderate Breeze
        {% elif speed < 38 %} Fresh Breeze
        {% elif speed < 50 %} Strong Breeze
        {% elif speed < 62 %} Near Gale
        {% elif speed < 75 %} Gale
        {% elif speed < 89 %} Strong Gale
        {% elif speed < 103 %} Storm
        {% elif speed < 118 %} Violent Storm
        {% else %} Hurricane
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import wind_beaufort_options %}
          {{- wind_beaufort_options() -}}
        provider: "{{ state_attr('sensor.wind_speed', 'provider') }}"
      availability: "{{ states('sensor.wind_speed') | int(-1) >= 0 }}"

    ###################################################################################################
    ## Cloud Coverage
    ###################################################################################################
    - name: "Cloud Coverage"
      unique_id: cloud_coverage
      icon: >
        {% from 'weather.jinja' import cloud_icon %}
        {{ cloud_icon(states(this.entity_id)) }}
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ states('sensor.pirateweather_cloud_coverage') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_cloud_coverage') | int(-1) >= 0 }}"

    - name: "Cloud Coverage Description"
      unique_id: cloud_coverage_description
      icon: >
        {% from 'weather.jinja' import cloud_icon %}
        {{ cloud_icon(states('sensor.cloud_coverage')) }}
      device_class: enum
      state: >
        {% set cloud = states('sensor.cloud_coverage') | int %}
        {% if cloud > 80 %} Cloudy
        {% elif cloud > 50 %} Mostly Cloudy
        {% elif cloud > 20 %} Partly Cloudy
        {% else %} Clear
        {% endif %}
      attributes:
        options: >
          {% from 'weather.jinja' import cloud_options %}
          {{ cloud_options() }}
        provider: "{{ state_attr('sensor.cloud_coverage', 'provider') }}"
      availability: "{{ states('sensor.cloud_coverage') | int(-1) >= 0 }}"

    - name: "Cloud Coverage Today"
      unique_id: cloud_coverage_today
      icon: >
        {% from 'weather.jinja' import cloud_icon %}
        {{ cloud_icon(states(this.entity_id)) }}
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[0]['cloud_coverage'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[0] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['cloud_coverage'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[0]['cloud_coverage'] | int(-1) >= 0 }}

    - name: "Cloud Coverage Tomorrow"
      unique_id: cloud_coverage_tomorrow
      icon: >
        {% from 'weather.jinja' import cloud_icon %}
        {{ cloud_icon(states(this.entity_id)) }}
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.daily_weather', 'forecast')[1]['cloud_coverage'] }}"
      attributes:
        provider: "Daily Weather"
      availability: >
        {{ state_attr('sensor.daily_weather', 'forecast') != none
            and state_attr('sensor.daily_weather', 'forecast')[1] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['cloud_coverage'] is defined
            and state_attr('sensor.daily_weather', 'forecast')[1]['cloud_coverage'] | int(-1) >= 0 }}

    ###################################################################################################
    ## Visibility
    ###################################################################################################
    - name: "Visibility"
      unique_id: visibility
      icon: mdi:binoculars
      device_class: distance
      state_class: measurement
      unit_of_measurement: km
      state: >
        {% set envcan = states('sensor.windsor_visibility') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_visibility') | int(-1) %}
        {% if envcan >= 0 %} {% set visibility = envcan %}
        {% elif pirate >= 0 %} {% set visibility = pirate %}
        {% endif %}
        {{ visibility }}
      attributes:
        provider: >
          {% set envcan = states('sensor.windsor_visibility') | int(-1) %}
          {% set pirate = states('sensor.pirateweather_humidity') | int(-1) %}
          {% if envcan >= 0 %} Environment Canada
          {% elif pirate >= 0 %} Pirate Weather
          {% endif %}
      availability: >
        {% set envcan = states('sensor.windsor_visibility') | int(-1) %}
        {% set pirate = states('sensor.pirateweather_humidity') | int(-1) %}
        {{ envcan  >= 0 or pirate >= 0 }}

    ###################################################################################################
    ## UV Risk - OpenUV # https://www.openuv.io/uvindex
    ###################################################################################################
    - name: "UV Index"
      unique_id: uv_index
      icon: mdi:weather-sunny
      state_class: measurement
      unit_of_measurement: UVI
      state: "{{ states('sensor.current_uv_index') | int }}"
      attributes:
        provider: "OpenUV"
      availability: "{{ states('sensor.current_uv_index') | int(-1) >= 0 }}"

    - name: "UV Risk"
      unique_id: uv_risk
      icon: mdi:weather-sunny
      device_class: enum
      state: >
        {% from 'weather.jinja' import uv_risk %}
        {{ uv_risk(states('sensor.uv_index')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import uv_risk_options %}
          {{ uv_risk_options() }}
        provider: "OpenUV"
      availability: "{{ states('sensor.uv_index') | int(-1) >= 0 }}"

    - name: "UV Index Today"
      unique_id: uv_index_today
      icon: mdi:weather-sunny
      state_class: measurement
      unit_of_measurement: UVI
      state: "{{ states('sensor.max_uv_index') | int }}"
      attributes:
        provider: "OpenUV"
      availability: "{{ states('sensor.max_uv_index') | int(-1) >= 0 }}"

    - name: "UV Risk Today"
      unique_id: uv_risk_today
      icon: mdi:weather-sunny
      device_class: enum
      state: >
        {% from 'weather.jinja' import uv_risk %}
        {{ uv_risk(states('sensor.max_uv_index')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import uv_risk_options %}
          {{ uv_risk_options() }}
        provider: "OpenUV"
      availability: "{{ states('sensor.max_uv_index') | int(-1) >= 0 }}"

    ###################################################################################################
    ## Air Quality
    ###################################################################################################
    - name: "Air Quality Index"
      unique_id: air_quality_index
      icon: mdi:smog
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_air_quality_index') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_air_quality_index') | int(-1) >= 0 }}"

    - name: "AQI Risk Level"
      unique_id: aqi_risk_level
      icon: mdi:smog
      device_class: enum
      state: >
        {% from 'weather.jinja' import aqi_risk %}
        {{ aqi_risk(states('sensor.air_quality_index')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import aqi_risk_options %}
          {{ aqi_risk_options() }}
        provider: "{{ state_attr('sensor.air_quality_index', 'provider') }}"
      availability: "{{ states('sensor.air_quality_index') | int(-1) >= 0 }}"

    - name: "Ozone Index"
      unique_id: ozone_index
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_ozone') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_ozone') | int(-1) >= 0 }}"

    - name: "Carbon Monoxide"
      unique_id: carbon_monoxide
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_carbon_monoxide') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_carbon_monoxide') | int(-1) >= 0 }}"

    - name: "Nitrogen Dioxide"
      unique_id: nitrogen_dioxide
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_nitrogen_dioxide') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_nitrogen_dioxide') | int(-1) >= 0 }}"

    - name: "Sulphur Dioxide"
      unique_id: sulphur_dioxide
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_sulphur_dioxide') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_sulphur_dioxide') | int(-1) >= 0 }}"

    - name: "Particulate Matter 2.5"
      unique_id: particulate_matter_2_5
      device_class: aqi
      state_class: measurement
      state: "{{ states('sensor.windsor_pm2_5') }}"
      attributes:
        provider: "WAQI"
      availability: "{{ states('sensor.windsor_pm2_5') | int(-1) >= 0 }}"

    ###################################################################################################
    ## Smoke Risk
    ###################################################################################################
    - name: "Smoke Level"
      unique_id: smoke_level
      icon: mdi:smoke
      device_class: pm25
      state_class: measurement
      unit_of_measurement: "µg/m³"
      state: "{{ states('sensor.pirateweather_smoke') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_smoke') | float(-1) >= 0 }}"

    - name: "Smoke Risk"
      unique_id: smoke_risk
      icon: mdi:smoke
      device_class: enum
      state: >
        {% from 'weather.jinja' import smoke_risk %}
        {{ smoke_risk(states('sensor.smoke_level')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import smoke_risk_options %}
          {{ smoke_risk_options() }}
        provider: "{{ state_attr('sensor.smoke_level', 'provider') }}"
      availability: "{{ states('sensor.smoke_level') | float(-1) >= 0 }}"

    - name: "Smoke Level Today"
      unique_id: smoke_level_today
      icon: mdi:smoke
      device_class: pm25
      unit_of_measurement: "µg/m³"
      state: "{{ states('sensor.pirateweather_smoke_max_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_smoke_max_0d') | float(-1) >= 0 }}"

    - name: "Smoke Risk Today"
      unique_id: smoke_risk_today
      icon: mdi:smoke
      device_class: enum
      state: >
        {% from 'weather.jinja' import smoke_risk %}
        {{ smoke_risk(states('sensor.smoke_level_today')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import smoke_risk_options %}
          {{ smoke_risk_options() }}
        provider: "{{ state_attr('sensor.smoke_level_today', 'provider') }}"
      availability: "{{ states('sensor.smoke_level_today') | float(-1) >= 0 }}"

    - name: "Smoke Level Tomorrow"
      unique_id: smoke_level_tomorrow
      icon: mdi:smoke
      device_class: pm25
      unit_of_measurement: "µg/m³"
      state: "{{ states('sensor.pirateweather_smoke_max_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_smoke_max_1d') | float(-1) >= 0 }}"

    - name: "Smoke Risk Tomorrow"
      unique_id: smoke_risk_tomorrow
      icon: mdi:smoke
      device_class: enum
      state: >
        {% from 'weather.jinja' import smoke_risk %}
        {{ smoke_risk(states('sensor.smoke_level_tomorrow')) }}
      attributes:
        options: >
          {% from 'weather.jinja' import smoke_risk_options %}
          {{ smoke_risk_options() }}
        provider: "{{ state_attr('sensor.smoke_level_tomorrow', 'provider') }}"
      availability: "{{ states('sensor.smoke_level_tomorrow') | float(-1) >= 0 }}"

    ###################################################################################################
    ## Fire Index
    ###################################################################################################
    - name: "Fire Index"
      unique_id: fire_index
      icon: mdi:pine-tree-fire
      state_class: measurement
      unit_of_measurement: FWI
      state: "{{ states('sensor.pirateweather_fire_index') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_fire_index') | int(-1) >= 0 }}"

    - name: "Fire Risk"
      unique_id: fire_risk
      icon: mdi:pine-tree-fire
      device_class: enum
      state: "{{ states('sensor.pirateweather_fire_risk_level') }}"
      attributes:
        options: >
          {% from 'weather.jinja' import fire_risk_options %}
          {{ fire_risk_options() }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_fire_risk_level') }}"

    - name: "Fire Index Today"
      unique_id: fire_index_today
      icon: mdi:pine-tree-fire
      unit_of_measurement: FWI
      state: "{{ states('sensor.pirateweather_fire_index_max_0d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_fire_index_max_0d') | int(-1) >= 0 }}"

    - name: "Fire Risk Today"
      unique_id: fire_risk_today
      icon: mdi:pine-tree-fire
      device_class: enum
      state: "{{ states('sensor.pirateweather_fire_risk_level_0d') }}"
      attributes:
        options: >
          {% from 'weather.jinja' import fire_risk_options %}
          {{ fire_risk_options() }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_fire_risk_level_0d') }}"

    - name: "Fire Index Tomorrow"
      unique_id: fire_index_tomorrow
      icon: mdi:pine-tree-fire
      unit_of_measurement: FWI
      state: "{{ states('sensor.pirateweather_fire_index_max_1d') }}"
      attributes:
        provider: "Pirate Weather"
      availability: "{{ states('sensor.pirateweather_fire_index_max_1d') | int(-1) >= 0 }}"

    - name: "Fire Risk Tomorrow"
      unique_id: fire_risk_tomorrow
      icon: mdi:pine-tree-fire
      device_class: enum
      state: "{{ states('sensor.pirateweather_fire_risk_level_1d') }}"
      attributes:
        options: >
          {% from 'weather.jinja' import fire_risk_options %}
          {{ fire_risk_options() }}
        provider: "Pirate Weather"
      availability: "{{ has_value('sensor.pirateweather_fire_risk_level_1d') }}"
