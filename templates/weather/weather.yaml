###############################################################################
## Templates - Weather
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: time_pattern
      minutes: /15
  action:
    - service: weather.get_forecasts
      data:
        type: hourly
      target:
        entity_id: &forecasts
          - weather.windsor
          - weather.pirateweather
          - weather.forecast_home
      response_variable: hourly

    - service: weather.get_forecasts
      data:
        type: daily
      target:
        entity_id: *forecasts
      response_variable: daily
  sensor:
    - name: Weather Forecasts
      unique_id: weather_forecasts
      device_class: timestamp
      state: "{{ now().isoformat() }}"
      attributes:
        envcan_hourly: "{{ hourly['weather.windsor']['forecast'] }}"
        envcan_daily: "{{ daily['weather.windsor']['forecast'] }}"
        pirate_hourly: "{{ hourly['weather.pirateweather']['forecast'] }}"
        pirate_daily: "{{ daily['weather.pirateweather']['forecast'] }}"
        weatherflow_hourly: "{{ hourly['weather.forecast_home']['forecast'] }}"
        weatherflow_daily: "{{ daily['weather.forecast_home']['forecast'] }}"

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.time
  binary_sensor:
    - name: "Tomorrow IO Connected"
      unique_id: tomorrow_io_connected
      icon: mdi:weather-sunny-alert
      device_class: connectivity
      state: "{{ integration_entities('tomorrowio') | select('has_value') | list | count > 0 }}"

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: time_pattern
      minutes: 15

    - platform: state
      entity_id:
        - binary_sensor.rain
        - binary_sensor.snow
  sensor:
    # uses envcan forecast, most accurate
    - name: "Precipitation Start" # next 12 hours
      unique_id: precipitation_start
      icon: mdi:weather-pouring
      device_class: timestamp
      state: >
        {% set time = namespace(value=none) %}
        {% set forecast = state_attr('sensor.weather_forecasts', 'envcan_hourly') %}
        {% if is_state('binary_sensor.snow', 'on') %}
          {% set time.value = states.binary_sensor.snow.last_changed %}
        {% elif is_state('binary_sensor.rain', 'on') %}
          {% set time.value = states.binary_sensor.snow.last_changed %}
        {% elif forecast != none %}
          {% for item in forecast %}
            {% if loop.index0 < 12
                and item.precipitation_probability | int(-1) >= 50
                and (item.condition | contains('rain')
                  or item.condition | contains('snow')
                  or item.condition | contains('storm')) %}
              {% set time.value = item.datetime %}
            {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ time.value }}
      attributes:
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour('sensor.precipitation_start') }}

- binary_sensor:
    - name: "Tomorrow.io Connected Alert"
      unique_id: tomorrow_io_connected_alert
      icon: mdi:weather-partly-snowy-rainy
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.tomorrow_io_connected', 'off')
            and is_state('input_boolean.weather_alerts', 'on') }}

    - name: "Outdoor High Temperature Alert"
      unique_id: outdoor_high_temperature_alert
      # prevent multiple alerts when temp hovering around threshold
      delay_on: 900
      delay_off: 900
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | int
              > states('input_number.outdoor_high_temperature_threshold') | int
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: "{{ is_number(states('sensor.outdoor_apparent_temperature')) }}"

    - name: "Outdoor Low Temperature Alert"
      unique_id: outdoor_low_temperature_alert
      # prevent multiple alerts when temp hovering around threshold
      delay_on: 900
      delay_off: 900
      state: >
        {{ states('sensor.outdoor_apparent_temperature') | int
              < states('input_number.outdoor_low_temperature_threshold') | int
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: "{{ is_number(states('sensor.outdoor_apparent_temperature')) }}"

    - name: "Outdoor Temperature Alert"
      unique_id: outdoor_temperature_alert # for weather card
      icon: >
        {{ 'mdi:thermometer-alert' if is_state('binary_sensor.outdoor_high_temperature_alert', 'on')
            or is_state('binary_sensor.outdoor_low_temperature_alert', 'on') else 'mdi:thermometer' }}
      state: >
        {{ is_state('binary_sensor.outdoor_high_temperature_alert', 'on')
            or is_state('binary_sensor.outdoor_low_temperature_alert', 'on') }}
      attributes:
        type: >
          {% if is_state('binary_sensor.outdoor_high_temperature_alert', 'on') %} Heat
          {% elif is_state('binary_sensor.outdoor_low_temperature_alert', 'on') %} Cold
          {% else %} Off
          {% endif %}

    - name: "Freezing"
      unique_id: freezing
      device_class: cold
      state: >
        {{ is_state('binary_sensor.home_binary_sensors_is_freezing', 'on')
            or is_state('sensor.tempest_st_00057689_temperature_level', 'freezing')
            or states('sensor.outdoor_temperature') | int('1') < 0 }}

    - name: "Snow"
      unique_id: snow
      icon: mdi:weather-snowy-heavy
      state: "{{ is_state('sensor.precipitation_type', 'snow') }}"

    - name: "Rain"
      unique_id: rain
      icon: mdi:weather-pouring
      state: "{{ is_state('sensor.precipitation_type', 'rain') }}"

    - name: "Precipitation Soon" # next 2 hours
      unique_id: precipitation_soon
      icon: mdi:weather-pouring
      state: >
        {% set time = states('sensor.precipitation_start') | as_datetime
            if has_value('sensor.precipitation_start') else none %}
        {{ states('sensor.precipitation_type') == 'none'
            and time != none and now() - time < timedelta(hours=2) }}

    - name: "Precipitation Today" # next 12 hours
      unique_id: precipitation_today
      icon: mdi:weather-pouring
      state: >
        {% set time = states('sensor.precipitation_start') | as_datetime
            if has_value('sensor.precipitation_start') else none %}
        {{ time != none and now() - time < timedelta(hours=12)
            or states('sensor.precipitation_probability_today') | int(0) > 50 }}

    - name: "Precipitation Alert"
      unique_id: precipitation_alert
      icon: >
        {% if is_state('binary_sensor.snow','on') %} {{ states.binary_sensor.snow.attributes.icon }}
        {% elif is_state('binary_sensor.rain','on') %} {{ states.binary_sensor.rain.attributes.icon }}
        {% else %} {{ states.alert.precipitation.attributes.icon }}
        {% endif %}
      delay_off: # prevent multiple triggers scattered showers
        minutes: 60
      state: >
        {{ (is_state('binary_sensor.snow', 'on')
            or is_state('binary_sensor.rain', 'on')
            or is_state('binary_sensor.precipitation_soon', 'on'))
            and is_state('input_boolean.weather_alerts','on') }}

    - name: "Wind Alert"
      unique_id: wind_alert
      icon: mdi:weather-windy
      delay_on: 300
      delay_off: >
        {% set update = true if now() - states('sensor.uptime') | as_datetime < timedelta(minutes=5)
            or now() - states.input_number.wind_alert_threshold.last_changed
              < timedelta(seconds=60) else false %}
        {{ iif(update, 0, 3600) }}
      state: >
        {% set thresh = states('input_number.wind_alert_threshold') | int %}
        {{ (states('sensor.wind_speed') | int(-1) >= thresh
              or states('sensor.wind_gust') | int(-1) >= thresh)
            and is_state('input_boolean.weather_alerts', 'on') }}
      availability: >
        {{ is_number(states('sensor.wind_speed'))
            or is_number(states('sensor.wind_gust')) }}

    - name: "Weather LED Active"
      unique_id: weather_led_alert
      state: >
        {{ is_state('binary_sensor.envcan_weather_alert', 'on')
            or is_state('binary_sensor.outdoor_low_temperature_alert', 'on')
            or is_state('binary_sensor.outdoor_high_temperature_alert', 'on')
            or is_state('alert.precipitation', 'on') }}
- sensor:
    - name: "Weatherflow High Temperature" #TEMP while testing
      unique_id: weatherflow_high_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: "{{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].temperature }}"
      availability: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].temperature is defined
            and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].temperature) }}

    - name: "Weatherflow Low Temperature" #TEMP while testing
      unique_id: weatherflow_low_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: "{{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].templow }}"
      availability: >
        {{ state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0] is defined
            and state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].templow is defined
            and is_number(state_attr('sensor.weather_forecasts', 'weatherflow_daily')[0].templow) }}

    - name: "Outdoor Temperature Trend"
      unique_id: outdoor_temperature_trend
      icon: >
        {% if is_state(this.entity_id, 'rising') %} mdi:thermometer-chevron-up
        {% elif is_state(this.entity_id, 'falling') %} mdi:thermometer-chevron-down
        {% else %} mdi:thermometer
        {% endif %}
      state: >
        {% set change = states('sensor.outdoor_temperature_change') | float %}
        {% if change >= 0.25 %} rising
        {% elif change < -0.25 %} falling
        {% else %} steady
        {% endif %}
      availability: "{{ is_number(states('sensor.outdoor_temperature_change')) }}"

    #IDEA add icons for envcan extra values - req custom weather card
    - name: "Current Condition"
      unique_id: current_condition
      icon: mdi:weather-partly-snowy-rainy
      state: >
        {% if has_value('weather.windsor') %}
          {% set condition = states('weather.windsor') %}
        {% elif has_value('weather.forecast_home') %}
          {% set condition = states('weather.forecast_home') %}
        {% elif has_value('weather.pirateweather') %}
          {% set condition = states('weather.pirateweather') %}
        {% endif %}
        {% if condition | lower == 'clear' and is_state('sun.sun', 'above_horizon') %} sunny
        {% elif condition | lower == 'clear' and is_state('sun.sun', 'below_horizon') %} clear-night
        {% elif condition | lower in ['mainly clear', 'mainly sunny', 'clear-day'] %} sunny
        {% elif condition | lower == 'mist' %} fog
        {% elif condition | lower in ['haze', 'partly cloudy', 'partly-cloudy-day', 'partly-cloudy-night'] %} partlycloudy
        {% elif condition | lower == 'mostly cloudy' %} cloudy
        {% elif condition | lower in ['light rain', 'rain'] %} rainy
        {% elif condition | lower in ['light snow', 'snow'] %} snowy
        {% elif condition | lower == 'thunderstorm' %} lightning-rainy
        {% elif condition | lower == 'heavy rain' %} pouring
        {% elif condition | lower == 'precipitation' %} rainy
        {% elif condition | lower == 'wind' %} windy
        {% else %} {{ condition | lower }}
        {% endif %}
      attributes:
        provider: >
          {% if has_value('weather.windsor') %}
            Environment Canada
          {% elif has_value('weather.forecast_home') %}
            WeatherFlow Cloud
          {% elif has_value('weather.pirateweather') %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ has_value('weather.windsor')
            or has_value('weather.forecast_home')
            or has_value('weather.pirateweather') }}

    - name: "Condition Tomorrow"
      unique_id: condition_tomorrow
      icon: mdi:weather-partly-snowy-rainy
      state: "{{ state_attr('weather.home_daily', 'forecast')[1].condition }}"
      availability: >
        {{ state_attr('weather.home_daily', 'forecast')[1] is defined
            and state_attr('weather.home_daily', 'forecast')[1].condition is defined }}

    - name: "Outdoor Temperature"
      unique_id: outdoor_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_temperature')) %}
            {{ states('sensor.home_sensors_temperature') | float }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_temperature')) %}
            {{ states('sensor.tempest_st_00057689_temperature') | float }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_temperature')) %}
            {{ states('sensor.windsor_temperature') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_temperature')) %}
            {{ states('sensor.pirateweather_temperature') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_temperature')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_temperature')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_temperature')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_temperature')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_temperature')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_temperature')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_temperature')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_temperature'))) }}

    - name: "Outdoor Apparent Temperature"
      unique_id: outdoor_apparent_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_apparent_temperature')) %}
            {{ states('sensor.home_sensors_apparent_temperature') | float }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_feels_like_temperature')) %}
            {{ states('sensor.tempest_st_00057689_feels_like_temperature') | float }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_apparent_temperature')) %}
            {{ states('sensor.windsor_apparent_temperature') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_apparent_temperature')) %}
            {{ states('sensor.pirateweather_apparent_temperature') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_apparent_temperature')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_feels_like_temperature')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_apparent_temperature')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_apparent_temperature')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_apparent_temperature')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_feels_like_temperature')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_apparent_temperature')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_apparent_temperature'))) }}

    - name: "Outdoor High Temperature"
      unique_id: outdoor_high_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].temperature is defined
            and is_number(state_attr('weather.home_daily', 'forecast')[0].temperature) %}
          {{ state_attr('weather.home_daily', 'forecast')[0].temperature | float }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_high_temperature')) %}
          {{ states('sensor.windsor_high_temperature') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_daytime_high_temperature_0d')) %}
          {{ states('sensor.pirateweather_daytime_high_temperature_0d') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].temperature is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].temperature) %}
            Daily Forecast
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_high_temperature')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_daytime_high_temperature_0d')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].temperature is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].temperature))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_high_temperature')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_daytime_high_temperature_0d'))) }}

    - name: "Outdoor High Temperature Tomorrow"
      unique_id: outdoor_high_temperature_tomorrow
      device_class: temperature
      unit_of_measurement: °C
      state: "{{ state_attr('weather.home_daily', 'forecast')[1].temperature | int }}"
      availability: >
        {{ state_attr('weather.home_daily', 'forecast')[1] is defined
            and state_attr('weather.home_daily', 'forecast')[1].temperature is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[1].temperature) }}

    - name: "Outdoor Low Temperature"
      unique_id: outdoor_low_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].templow is defined
            and is_number(state_attr('weather.home_daily', 'forecast')[0].templow) %}
          {{ state_attr('weather.home_daily', 'forecast')[0].templow | float }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_low_temperature')) %}
          {{ states('sensor.windsor_low_temperature') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_overnight_low_temperature_0d')) %}
          {{ states('sensor.windsor_low_temperature') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].templow is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].templow) %}
            Daily Forecast
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_low_temperature')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_overnight_low_temperature_0d')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].templow is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].templow))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_high_temperature')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_overnight_low_temperature_0d'))) }}

    - name: "Outdoor High Temperature Differential"
      unique_id: outdoor_high_temperature_differential
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {{ states('sensor.outdoor_high_temperature') | int
            - states('sensor.windsor_normal_high_temperature') | int }}
      availability: >
        {{ is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_normal_high_temperature'))
            and is_number(states('sensor.outdoor_high_temperature')) }}

    - name: "Outdoor Low Temperature Differential"
      unique_id: outdoor_low_temperature_differential
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {{ states('sensor.outdoor_low_temperature') | int
            - states('sensor.windsor_normal_low_temperature') | int }}
      availability: >
        {{ is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_normal_low_temperature'))
            and is_number(states('sensor.outdoor_low_temperature')) }}

    - name: "Dew Point"
      unique_id: dew_point
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_dew_point')) %}
          {{ states('sensor.home_sensors_dew_point') | float }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_dew_point')) %}
          {{ states('sensor.tempest_st_00057689_dew_point') | float }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_dew_point')) %}
          {{ states('sensor.windsor_dew_point') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_dew_point')) %}
          {{ states('sensor.pirateweather_dew_point') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_dew_point')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_dew_point')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_dew_point')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_dew_point')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_dew_point')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_dew_point')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_dew_point')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_dew_point'))) }}

    - name: "Outdoor Humidity"
      unique_id: outdoor_humidity
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_humidity')) %}
          {{ states('sensor.home_sensors_humidity') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_humidity')) %}
          {{ states('sensor.tempest_st_00057689_humidity') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_humidity')) %}
          {{ states('sensor.windsor_humidity') | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_humidity')) %}
          {{ states('sensor.pirateweather_humidity') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_humidity')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_humidity')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_humidity')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_humidity')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_humidity')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_humidity')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_humidity')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_humidity'))) }}

    - name: "Outdoor Humidity Today"
      unique_id: outdoor_humidity_today
      device_class: humidity
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ states('sensor.pirateweather_humidity_0d') | int }}"
      attributes:
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_humidity_0d')) }}

    - name: "Precipitation Probability"
      unique_id: precipitation_probability
      icon: mdi:weather-rainy
      state_class: measurement
      unit_of_measurement: "%"
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.weatherflow_precipitation_probability')) %}
          {{ states('sensor.weatherflow_precipitation_probability') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_chance_of_precip')) %}
          {{ states('sensor.windsor_chance_of_precip') | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_precip_probability')) %}
          {{ states('sensor.pirateweather_precip_probability') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.weatherflow_precipitation_probability')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_chance_of_precip')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_probability')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.weatherflow_precipitation_probability')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_chance_of_precip')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_probability'))) }}

    - name: "Precipitation Probability Tomorrow"
      unique_id: precipitation_probability_tomorrow
      icon: mdi:weather-rainy
      unit_of_measurement: "%"
      state: "{{ state_attr('weather.home_daily', 'forecast')[1].precipitation_probability | int }}"
      attributes:
        provider: Daily Forecast
      availability: >
        {{ state_attr('weather.home_daily', 'forecast')[1] is defined
            and state_attr('weather.home_daily', 'forecast')[1].precipitation_probability is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[1].precipitation_probability) }}

    - name: "Fog Probability"
      unique_id: fog_probability
      icon: mdi:weather-fog
      unit_of_measurement: "%"
      state: "{{ states('sensor.tempest_st_00057689_fog_probability') }}"
      attributes:
        provider: Weatherflow Local
      availability: "{{ is_number(states('sensor.tempest_st_00057689_fog_probability')) }}"

    - name: "Snow Probability"
      unique_id: snow_probability
      icon: mdi:weather-snowy-heavy
      unit_of_measurement: "%"
      state: "{{ states('sensor.tempest_st_00057689_snow_probability') }}"
      attributes:
        provider: Weatherflow Local
      availability: "{{ is_number(states('sensor.tempest_st_00057689_snow_probability')) }}"

    - name: "Precipitation Probability Today"
      unique_id: precipitation_probability_today
      icon: mdi:weather-rainy
      unit_of_measurement: "%"
      state: >
        {% if state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].precipitation_probability is defined
            and is_number(state_attr('weather.home_daily', 'forecast')[0].precipitation_probability) %}
          {{ state_attr('weather.home_daily', 'forecast')[0].precipitation_probability | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_precip_probability_0d')) %}
          {{ states('sensor.pirateweather_precip_probability_0d') }}
        {% endif %}
      attributes:
        provider: Daily Forecast
      availability: >
        {{ (state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].precipitation_probability is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].precipitation_probability))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_probability_0d'))) }}

    - name: "Precipitation Intensity"
      unique_id: precipitation_intensity
      icon: mdi:weather-pouring
      state: >
        {% set rate = states('sensor.precipitation_rate') | float %}
        {% if rate == 0 %} none
        {% elif rate <= 1.0 %} very light
        {% elif rate <= 4 %} light
        {% elif rate <= 15 %} moderate
        {% elif rate <= 30 %} very heavy
        {% elif rate <= 50 %} heavy
        {% else %} violent
        {% endif %}
      availability: "{{ is_number(states('sensor.precipitation_rate')) }}"

    # Weatherflow names the text precipitation intestity description as precipitation_intensity
    # and the numerical precipitation intestity as precipitation_rate
    - name: "Precipitation Rate"
      unique_id: precipitation_rate
      icon: mdi:weather-pouring
      device_class: precipitation_intensity
      state_class: measurement
      unit_of_measurement: mm/h
      state: >
        {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_rate')) %}
            {{ states('sensor.tempest_st_00057689_rain_rate') | float }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_rate')) %}
            {{ states('sensor.home_sensors_precipitation_rate') | float }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_intensity')) %}
            {{ states('sensor.pirateweather_precip_intensity') | float }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_rate')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_rate')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_intensity')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_rate')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_rate')))
            or is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_intensity')) }}

    - name: "Precipitation Duration Today"
      unique_id: precipitation_duration_today
      icon: mdi:timer
      device_class: duration
      state_class: measurement
      unit_of_measurement: min
      state: >
        {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_today')) %}
            {{ states('sensor.tempest_st_00057689_rain_duration_today') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_today')) %}
            {{ states('sensor.home_sensors_precipitation_duration_today') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_today')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_today')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_today')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_today'))) }}

    - name: "Precipitation Duration Yesterday"
      unique_id: precipitation_duration_yesterday
      icon: mdi:timer
      device_class: duration
      state_class: measurement
      unit_of_measurement: min
      state: >
        {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_yesterday')) %}
            {{ states('sensor.tempest_st_00057689_rain_duration_yesterday') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday_checked')) %}
          {{ states('sensor.home_sensors_precipitation_duration_yesterday_checked') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday')) %}
            {{ states('sensor.home_sensors_precipitation_duration_yesterday') | int }}
        {% else %} 0
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_yesterday')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday_checked')) %}
            WeatherFlow Cloud (C)
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_duration_yesterday')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday_checked')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_duration_yesterday'))) }}

    - name: "Precipitation Expected Today"
      unique_id: precipitation_expected_today
      icon: mdi:weather-pouring
      device_class: precipitation
      unit_of_measurement: mm
      state: "{{ state_attr('weather.home_daily', 'forecast')[0].precipitation | int }}"
      attributes:
        provider: Daily Forecast
      availability: >
        {{ state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].precipitation is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].precipitation) }}

    - name: "Precipitation Today"
      unique_id: precipitation_today
      icon: mdi:weather-pouring
      device_class: precipitation
      state_class: measurement
      unit_of_measurement: mm
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_precipitation_today_checked')) %}
          {{ states('sensor.home_sensors_precipitation_today_checked') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_precipitation_today')) %}
          {{ states('sensor.home_sensors_precipitation_today') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_rain_today')) %}
          {{ states('sensor.tempest_st_00057689_rain_today') | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_precip_accumulation_0d')) %}
          {{ states('sensor.pirateweather_precip_accumulation_0d') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_today_checked')) %}
            WeatherFlow Cloud (C)
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_today')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_today')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_accumulation_0d')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_today_checked')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_today')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_today')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_precip_accumulation_0d'))) }}

    - name: "Precipitation Yesterday"
      unique_id: precipitation_yesterday
      icon: mdi:weather-pouring
      device_class: precipitation
      state_class: measurement
      unit_of_measurement: mm
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_precipitation_yesterday_checked')) %}
          {{ states('sensor.home_sensors_precipitation_yesterday_checked') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_precipitation_yesterday')) %}
          {{ states('sensor.home_sensors_precipitation_yesterday') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_rain_yesterday')) %}
          {{ states('sensor.tempest_st_00057689_rain_yesterday') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_precipitation_yesterday')) %}
          {{ states('sensor.windsor_precipitation_yesterday') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_yesterday_checked')) %}
            WeatherFlow Cloud (C)
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_yesterday')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_yesterday')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_precipitation_yesterday')) %}
            Environment Canada
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_yesterday_checked')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_precipitation_yesterday')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_rain_yesterday')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_precipitation_yesterday'))) }}

    - name: "Precipitation Type"
      unique_id: precipitation_type #TEST current condition
      icon: mdi:weather-rainy
      state: >
        {% set condition = states('sensor.current_condition') %}
        {% if condition | contains('snow') %} snow
        {% elif condition | contains('rain')
            or condition | contains('pouring') %} rain
        {% else %} none
        {% endif %}
      availability: "{{ has_value('sensor.current_condition') }}"

    - name: "Lightning Count"
      unique_id: lightning_count
      icon: mdi:lightning-bolt
      state_class: measurement
      unit_of_measurement: strikes
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_lightnings_strikes')) %}
          {{ states('sensor.home_sensors_lightnings_strikes') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_lightning_count')) %}
          {{ states('sensor.tempest_st_00057689_lightning_count') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_lightnings_strikes')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_lightning_count')) %}
            WeatherFlow Local
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_lightnings_strikes')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_lightning_count'))) }}

    - name: "Nearest Storm Bearing"
      unique_id: nearest_storm_bearing
      state: "{{ states('sensor.pirateweather_nearest_storm_bearing') | int }}"
      state_class: measurement
      unit_of_measurement: "°"
      attributes:
        full_cardinal: >
          {% from 'speech.jinja' import full_cardinal_direction %}
          {{ full_cardinal_direction(states(this.entity_id)) }}
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_nearest_storm_bearing')) }}

    - name: "Nearest Storm Distance"
      unique_id: nearest_storm_distance
      device_class: distance
      state_class: measurement
      unit_of_measurement: km
      state: "{{ states('sensor.pirateweather_nearest_storm_distance') | int }}"
      attributes:
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_nearest_storm_distance')) }}

    - name: "Pressure Trend"
      unique_id: pressure_trend #TEST
      icon: >
        {% if is_state(this.entity_id, 'rising') %} mdi:trending-up
        {% elif is_state(this.entity_id, 'falling') %} mdi:trending-down
        {% else %} mdi:trending-up
        {% endif %}
      state: >
        {% set change = states('sensor.pressure_change') | float %}
        {% if change >= 1 %} rising
        {% elif change < -1 %} falling
        {% else %} steady
        {% endif %}
      availability: "{{ is_number(states('sensor.pressure_change')) }}"

    - name: "Barometric Pressure"
      unique_id: barometric_pressure
      device_class: atmospheric_pressure
      state_class: measurement
      unit_of_measurement: hPa
      state: >
        {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_sea_level_pressure')) %}
          {{ states('sensor.home_sensors_sea_level_pressure') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_sea_level_pressure')) %}
          {{ states('sensor.tempest_st_00057689_sea_level_pressure') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_pressure')) %}
          {{ states('sensor.windsor_pressure') | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_pressure')) %}
          {{ states('sensor.pirateweather_pressure') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_sea_level_pressure')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_sea_level_pressure')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_pressure')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_pressure')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_sea_level_pressure')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_sea_level_pressure')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_pressure')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_pressure'))) }}

    # pirate, envcan priority - more accurate
    - name: "Wind Speed"
      unique_id: wind_speed
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_wind_speed')) %}
          {{ states('sensor.pirateweather_wind_speed') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_wind_speed')) %}
          {{ states('sensor.windsor_wind_speed') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_wind_speed_avg')) %}
          {{ states('sensor.tempest_st_00057689_wind_speed_avg') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_wind_speed')) %}
          {{ states('sensor.home_sensors_wind_speed') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_speed')) %}
            Pirate Weather
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_wind_speed')) %}
            Environment Canada
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_speed_avg')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_speed')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_speed')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_wind_speed')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_speed')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_speed'))) }}

    - name: "Wind Speed Today"
      unique_id: wind_speed_today
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].wind_speed is defined
            and is_number(state_attr('weather.home_daily', 'forecast')[0].wind_speed) %}
          {{ state_attr('weather.home_daily', 'forecast')[0].wind_speed | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_wind_speed_0d')) %}
          {{ states('sensor.pirateweather_wind_speed_0d') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.home_daily', 'forecast')[0] is defined
            and state_attr('weather.home_daily', 'forecast')[0].wind_speed is defined
            and is_number(state_attr('weather.home_daily', 'forecast')[0].wind_speed) %}
            Daily Forecast
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_speed_0d')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (state_attr('weather.home_daily', 'forecast')[0] is defined
              and state_attr('weather.home_daily', 'forecast')[0].wind_speed is defined
              and is_number(state_attr('weather.home_daily', 'forecast')[0].wind_speed))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_speed_0d'))) }}

    # pirate, envcan priority - more accurate
    # if envcan gust n/a use envcan speed - gust never < speed
    - name: "Wind Gust"
      unique_id: wind_gust
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h # weatherflow local from m/s to km/h
      state: >
        {% if is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_wind_gust')) %}
          {{ states('sensor.pirateweather_wind_gust') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_wind_gust')) %}
          {{ states('sensor.windsor_wind_gust') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_wind_speed')) %}
          {{ states('sensor.windsor_wind_speed') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_wind_gust')) %}
          {{ (states('sensor.tempest_st_00057689_wind_gust') | int*3.6) | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_wind_gust')) %}
          {{ states('sensor.home_sensors_wind_gust') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_gust')) %}
            Pirate Weather
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and (is_number(states('sensor.windsor_wind_gust'))
                or is_number(states('sensor.windsor_wind_speed'))) %}
            Environment Canada
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_gust')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_gust')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_gust')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and (is_number(states('sensor.windsor_wind_gust'))
                or is_number(states('sensor.windsor_wind_speed'))))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_gust')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_gust'))) }}

    - name: "Wind Gust Today"
      unique_id: wind_gust_today
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: "{{ states('sensor.pirateweather_wind_gust_0d') | int }}"
      attributes:
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_wind_gust_0d')) }}

    - name: "Wind Lull"
      unique_id: wind_lull
      icon: mdi:weather-windy
      device_class: wind_speed
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_wind_lull')) %}
          {{ states('sensor.tempest_st_00057689_wind_lull') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_wind_lull')) %}
          {{ states('sensor.home_sensors_wind_lull') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_lull')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_lull')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_lull')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_lull'))) }}

    - name: "Wind Bearing"
      unique_id: wind_bearing
      picture: >
        {% set directions = [0, 11, 22, 33, 45, 56, 67, 78, 90, 101, 112, 123, 135, 146, 157, 168, 180, 191,
          202, 213, 225, 236, 247, 258, 270, 281, 292, 303, 315, 326, 337, 348, 0] %}
        /local/images/entity_icons/compass/{{ directions[((states('sensor.wind_bearing') | float(-1)/360) | float*32) | round] }}.png
      state_class: measurement
      unit_of_measurement: °
      state: >
        {% if is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_wind_bearing')) %}
          {{ states('sensor.pirateweather_wind_bearing') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_wind_bearing')) %}
          {{ states('sensor.windsor_wind_bearing') | int }}
        {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_wind_bearing')) %}
          {{ states('sensor.tempest_st_00057689_wind_bearing') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_wind_direction')) %}
          {{ states('sensor.home_sensors_wind_direction') | int }}
        {% endif %}
      attributes:
        cardinal: >
          {%- from 'speech.jinja' import cardinal_direction %}
          {{- cardinal_direction(states(this.entity_id)) -}}
        full_cardinal: >
          {%- from 'speech.jinja' import full_cardinal_direction %}
          {{- full_cardinal_direction(states(this.entity_id)) -}}
        provider: >
          {% if is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_bearing')) %}
            Pirate Weather
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_wind_bearing')) %}
            Environment Canada
          {% elif is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_bearing')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_direction')) %}
            WeatherFlow Cloud
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_wind_bearing')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_wind_bearing')))
            or (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_wind_bearing')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_wind_direction'))) }}

    - name: "Wind Beaufort Display"
      unique_id: wind_beaufort_display
      icon: mdi:windsock
      state: >
        {% set speed = states('sensor.wind_speed') | int(-1) %}
        {% if speed == -1 %} Unknown
        {% elif speed < 1 %} Calm
        {% elif speed < 6 %} Light Air
        {% elif speed < 12 %} Light Breeze
        {% elif speed < 20 %} Gentle Breeze
        {% elif speed < 29 %} Moderate Breeze
        {% elif speed < 38 %} Fresh Breeze
        {% elif speed < 50 %} Strong Breeze
        {% elif speed < 62 %} Near Gale
        {% elif speed < 75 %} Gale
        {% elif speed < 89 %} Strong Gale
        {% elif speed < 103 %} Storm
        {% elif speed < 118 %} Violent Storm
        {% else %} Hurricane
        {% endif %}

    - name: "Cloud Cover"
      unique_id: cloud_cover
      icon: mdi:cloud
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ states('sensor.pirateweather_cloud_coverage') | int }}"
      attributes:
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_cloud_coverage')) }}

    - name: "Cloud Cover Today"
      unique_id: cloud_cover_today
      icon: mdi:cloud
      state_class: measurement
      unit_of_measurement: "%"
      state: "{{ states('sensor.pirateweather_cloud_coverage_0d') | int }}"
      attributes:
        provider: Pirate Weather
      availability: >
        {{ is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_cloud_coverage_0d')) }}

    - name: "Visibility"
      unique_id: visibility
      icon: mdi:eye
      device_class: distance
      state_class: measurement
      unit_of_measurement: km
      state: >
        {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
            and is_number(states('sensor.tempest_st_00057689_visibility')) %}
          {{ states('sensor.tempest_st_00057689_visibility') | int }}
        {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
            and is_number(states('sensor.home_sensors_visibility')) %}
          {{ states('sensor.home_sensors_visibility') | int }}
        {% elif is_state('binary_sensor.envcan_connected', 'on')
            and is_number(states('sensor.windsor_visibility')) %}
          {{ states('sensor.windsor_visibility') | int }}
        {% elif is_state('binary_sensor.pirateweather_connected', 'on')
            and is_number(states('sensor.pirateweather_visibility')) %}
          {{ states('sensor.pirateweather_visibility') | int }}
        {% endif %}
      attributes:
        provider: >
          {% if is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_visibility')) %}
            WeatherFlow Local
          {% elif is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_visibility')) %}
            WeatherFlow Cloud
          {% elif is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_visibility')) %}
            Environment Canada
          {% elif is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_visibility')) %}
            Pirate Weather
          {% endif %}
      availability: >
        {{ (is_state('binary_sensor.weatherflow_local_connected', 'on')
              and is_number(states('sensor.tempest_st_00057689_visibility')))
            or (is_state('binary_sensor.weatherflow_cloud_connected', 'on')
              and is_number(states('sensor.home_sensors_visibility')))
            or (is_state('binary_sensor.envcan_connected', 'on')
              and is_number(states('sensor.windsor_visibility')))
            or (is_state('binary_sensor.pirateweather_connected', 'on')
              and is_number(states('sensor.pirateweather_visibility'))) }}
