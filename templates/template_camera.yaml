###############################################################################
## Templates - Camera
###############################################################################
- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: button.lorex_reboot
      from:
        - unknown
        - unavailable

    - platform: state
      entity_id: button.lorex_reboot
      to:
        - unknown
        - unavailable
  binary_sensor:
    - name: "Lorex NVR Connected"
      unique_id: lorex_nvr_connected
      icon: mdi:cctv
      device_class: connectivity
      state: >
        {{ expand(integration_entities('onvif'))
            |rejectattr('state','in',['unknown','unavailable'])|list|count > 0 }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id:
        - binary_sensor.lorex_nvr_connected
        - input_boolean.camera_alerts
      to:
        - "on"
        - "off"
  binary_sensor:
    - name: "Lorex NVR Connected Alert"
      unique_id: lorex_nvr_connected_alert
      icon: mdi:cctv
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.lorex_nvr_connected','off')
            and is_state('input_boolean.camera_alerts','on') }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id: sensor.frigate_status
      from:
        - unknown
        - unavailable

    - platform: state
      entity_id: sensor.frigate_status
      to:
        - unknown
        - unavailable
  binary_sensor:
    - name: "Frigate Connected"
      unique_id: frigate_connected
      icon: mdi:cctv
      device_class: connectivity
      state: >
        {{ expand(integration_entities('frigate'))
            |rejectattr('state','in',['unknown','unavailable'])|list|count > 0 }}

- trigger:
    - platform: homeassistant
      event: start

    - platform: event
      event_type: event_template_reloaded

    - platform: state
      entity_id:
        - binary_sensor.frigate_connected
        - input_boolean.camera_alerts
      to:
        - "on"
        - "off"
  binary_sensor:
    - name: "Frigate Connected Alert"
      unique_id: frigate_connected_alert
      icon: mdi:cctv
      device_class: problem
      delay_on: 60
      state: >
        {{ is_state('binary_sensor.frigate_connected','off')
            and is_state('input_boolean.camera_alerts','on') }}

- binary_sensor:
    - name: "Camera Object TTS Notifications"
      unique_id: camera_object_tts_notifications
      icon: mdi:cctv
      state: >
        {% if is_state('binary_sensor.someone_home','on')
            and is_state('input_boolean.camera_notifications','on') %}
          {{ is_state('binary_sensor.camera_object_tod','on')
              or states('alarm_control_panel.master') in ['pending','armed_night','armed_away'] }}
        {% else %} false
        {% endif %}

    - name: "Camera Tamper Alert"
      unique_id: camera_tamper_alert
      icon: mdi:cctv-off
      device_class: tamper
      delay_on: 15
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count > 0 if entities != none else none }}
      attributes:
        entity_id: >
          {{ states.binary_sensor
              |selectattr('entity_id','in',integration_entities('onvif')|list)
              |selectattr('entity_id','search','_tamper_detection')
              |selectattr('state','eq','on')
              |map(attribute='entity_id')|list }}

    - name: "Camera Offline Alert"
      unique_id: camera_offline_alert
      icon: mdi:cctv-off
      device_class: problem
      delay_on: 15
      state: >
        {% set entities = state_attr(this.entity_id,'entity_id') %}
        {{ entities|count > 0 if entities != none else none }}
      attributes:
        entity_id: >
          {{ states.camera
                |selectattr('entity_id','in',integration_entities('frigate')|list)
                |rejectattr('entity_id','search','_person|_dog|_car')
                |selectattr('state','in',['unknown','unavailable'])
                |map(attribute='entity_id')|list }}
- sensor:
    - name: "Frigate Clips Size Status"
      unique_id: frigate_clips_size_status
      icon: mdi:account-voice
      state: >
        {% set size = states('sensor.clips')|int(-1) %}
        {% if size > 1000 %} critical
        {% elif size > 750 %} severe
        {% elif size > 500 %} warning
        {% elif size > 250 %} minor
        {% else %} ok
        {% endif %}
