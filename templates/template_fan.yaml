###############################################################################
## Templates - Fan
###############################################################################
- binary_sensor:
    - name: 'Ceiling Fans On'
      unique_id: ceiling_fans_on
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.ceiling_fans_on','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.ceiling_fans_on','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: >
          {{ states.fan|selectattr('attributes.type','eq','ceiling_fan')
              |selectattr('state','eq','on')|map(attribute='entity_id')|list }}

    - name: 'Ceiling Fan In Use'
      unique_id: ceiling_fan_in_use
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.ceiling_fan_in_use','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.ceiling_fan_in_use','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: >
          {{ states.timer|selectattr('attributes.type','eq','ceiling_fan')
              |selectattr('state','eq','active')|map(attribute='entity_id')|list }}

    - name: 'Vent Fans On'
      unique_id: vent_fans_on
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.vent_fans_on','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.vent_fans_on','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: >
          {{ states.fan|selectattr('attributes.type','eq','vent_fan')
              |selectattr('state','eq','on')|map(attribute='entity_id')|list }}

    - name: 'Vent Fan In Use Timers'
      unique_id: vent_fan_in_use
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.vent_fan_in_use','entities')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('binary_sensor.vent_fan_in_use','entities')|count > 0 }}
        {% endif %}
      attributes:
        entities: >
          {{ states.timer|selectattr('attributes.type','eq','vent_fan')
              |selectattr('state','eq','active')|map(attribute='entity_id')|list }}

    - name: 'HVAC Fan'
      unique_id: hvac_fan
      icon: mdi:fan
      state: >
        {{ true if is_state('fan.hvac_fan','on')
            and is_state('input_boolean.ceiling_fan_automation','on')
            and is_state('input_boolean.climate_automation','on')
            and is_state('input_boolean.hvac_fan_control','on')  }}

    - name: 'Schedule Fan'
      unique_id: schedule_fan
      icon: mdi:fan-auto
      state: >
        {{ is_state('input_boolean.fan_schedule','on')
            and is_state('timer.fan_schedule_duration','active') }}

    - name: 'Upstairs Bathroom Humidity Fan'
      unique_id: upstairs_bathroom_humidity_fan
      icon: mdi:water-alert
      device_class: moisture
      delay_off:
        minutes: 5 # will run for at least 5 minutes
      state: "{{ states('sensor.upstairs_bathroom_sensor_humidity')|int(0) > states('input_number.bathroom_humidity_threshold')|int(0) }}"

    - name: 'Upstairs Bathroom Mold Fan'
      unique_id: upstairs_bathroom_mold_fan
      icon: mdi:mushroom
      device_class: moisture
      delay_off:
        minutes: 5
      state: "{{ states('sensor.upstairs_bathroom_mold_risk')|int(0) > states('input_number.mold_risk_threshold')|int(0) }}"

    # uses absolute value so we can use temp above or below (negative value)
    # adjusts for seasons - doesn't run if outside is colder than inside, vice versa for warmer outside
    # bathroom colder than thermostat temp diff, colder outside than thermostat - on
    # bathroom warmer than thermostat temp diff, warmer outside than thermostat - on
    - name: 'Upstairs Bathroom Temperature Fan'
      unique_id: upstairs_bathroom_temperature_fan
      icon: mdi:thermometer-lines
      device_class: heat
      delay_off:
        minutes: 5 # will run for at least 5 minutes
      state: >
        {% set tempdiff = (states('sensor.upstairs_bathroom_sensor_temperature')|int(0) - states('sensor.thermostat_temperature')|int(0)|abs) %}
        {{ (states('sensor.upstairs_bathroom_sensor_temperature')|int(0) > states('input_number.high_temperature_threshold')|int(0))
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int(0) < states('input_number.low_temperature_threshold')|int(0))
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int(0) < states('sensor.thermostat_temperature')|int(0)
                  and states('sensor.outdoor_temperature')|int(0) < states('sensor.thermostat_temperature')|int(0)
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int(0))
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int(0) > states('sensor.thermostat_temperature')|int(0)
                  and states('sensor.outdoor_temperature')|int(0) > states('sensor.thermostat_temperature')|int(0)
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int(0)) }}
