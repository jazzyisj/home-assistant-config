###############################################################################
## Templates - Fan
###############################################################################
- binary_sensor:
    - name: 'Fans On'
      unique_id: fans_on
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.fans_on','entity_id') != none %}
          {{ state_attr('binary_sensor.fans_on','entity_id')|count > 0 }}
        {% endif %}
      attributes:
        entity_id: "{{ expand('group.fans')|selectattr('state','eq','on')|map(attribute='entity_id')|list }}"

    - name: 'Fan In Use'
      unique_id: fan_in_use
      icon: mdi:fan
      state: >
        {% if state_attr('binary_sensor.fan_in_use','entity_id') != none %}
          {{ state_attr('binary_sensor.fan_in_use','entity_id')|count > 0 }}
        {% endif %}
      attributes:
        entity_id: "{{ expand('group.fan_timers')|selectattr('state','ne','idle')|map(attribute='entity_id')|list }}"

    - name: 'HVAC Fan'
      unique_id: hvac_fan
      icon: mdi:fan
      state: >
        {{ is_state('fan.hvac_fan','on')
            and is_state('input_boolean.climate_automation','on')
            and is_state('input_boolean.hvac_fan_control','on') }}

    - name: 'Schedule Fan'
      unique_id: schedule_fan
      icon: mdi:fan-auto
      state: >
        {{ is_state('input_boolean.fan_schedule','on')
            and is_state('timer.fan_schedule_duration','active') }}

    - name: 'Bathroom Sensor Fan'
      unique_id: bathroom_sensor_fan
      icon: mdi:fan-auto
      device_class: power
      state: >
        {{ is_state('binary_sensor.bathroom_humidity_fan','on')
            or is_state('binary_sensor.bathroom_mold_fan','on')
            or is_state('binary_sensor.bathroom_temperature_fan','on') }}

    - name: 'Bathroom Humidity Fan'
      unique_id: bathroom_humidity_fan
      icon: mdi:water-alert
      device_class: moisture
      # will run for at least 5 minutes
      delay_off: "{{ 0 if is_state('binary_sensor.bathroom_humidity_fan','unknown') else 300 }}"
      state: "{{ states('sensor.bathroom_sensor_humidity')|int(0) > states('input_number.bathroom_humidity_threshold')|int(0) }}"

    - name: 'Bathroom Mold Fan'
      unique_id: bathroom_mold_fan
      icon: mdi:mushroom
      device_class: moisture
      # will run for at least 5 minutes
      delay_off: "{{ 0 if is_state('binary_sensor.bathroom_mold_fan','unknown') else 300 }}"
      state: "{{ states('sensor.bathroom_mold_risk')|int(0) > states('input_number.mold_risk_threshold')|int(0) }}"

    # uses absolute value so we can use temp above or below (negative value)
    # adjusts for seasons - doesn't run if outside is colder than inside, vice versa for warmer outside
    # bathroom colder than thermostat temp diff, colder outside than thermostat - on
    # bathroom warmer than thermostat temp diff, warmer outside than thermostat - on
    - name: 'Bathroom Temperature Fan'
      unique_id: bathroom_temperature_fan
      icon: mdi:thermometer-lines
      device_class: heat
      # will run for at least 5 minutes
      delay_off: "{{ 0 if is_state('binary_sensor.bathroom_temperature_fan','unknown') else 300 }}"
      state: >
        {% set tempdiff = (states('sensor.bathroom_sensor_air_temperature')|int(0) - states('sensor.thermostat_temperature')|int(0)|abs) %}
        {{ (states('sensor.bathroom_sensor_air_temperature')|int(0) > states('input_number.high_temperature_threshold')|int(0))
              or (states('sensor.bathroom_sensor_air_temperature')|int(0) < states('input_number.low_temperature_threshold')|int(0))
              or (states('sensor.bathroom_sensor_air_temperature')|int(0) < states('sensor.thermostat_temperature')|int(0)
                  and states('sensor.outdoor_temperature')|int(0) < states('sensor.thermostat_temperature')|int(0)
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int(0))
              or (states('sensor.bathroom_sensor_air_temperature')|int(0) > states('sensor.thermostat_temperature')|int(0)
                  and states('sensor.outdoor_temperature')|int(0) > states('sensor.thermostat_temperature')|int(0)
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int(0)) }}

    - name: 'Unavailable Fans'
      unique_id: unavailable_fans
      icon: mdi:fan
      device_class: problem
      state: >
        {% if state_attr('binary_sensor.unavailable_fans','entity_id') != none %}
          {{ state_attr('binary_sensor.unavailable_fans','entity_id')|count > 0  }}
        {% endif %}
      attributes:
        entity_id: "{{ states.fan|selectattr('state','in',['unknown','unavailable'])|map(attribute='entity_id')|list }}"
