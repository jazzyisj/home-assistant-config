- binary_sensor:
    - unique_id: ceiling_fans_on
      name: Ceiling Fans On
      icon: mdi:fan
      state: >
        {{ states.fan|selectattr('attributes.type','eq','ceiling_fan')
            |selectattr('state','eq','on')|list|count > 0 }}
      attributes:
        entities: >
          {{ states.fan|selectattr('attributes.type','eq','ceiling_fan')
              |selectattr('state','eq','on')|map(attribute='entity_id')|list }}

    - unique_id: ceiling_fan_in_use
      name: Ceiling Fan In Use
      icon: mdi:fan
      state: >
        {{ states.timer|selectattr('attributes.type','eq','ceiling_fan')
          |selectattr('state','eq','active')|list|count > 0 }}
      attributes:
        entities: >
          {{ states.timer|selectattr('attributes.type','eq','ceiling_fan')
              |selectattr('state','eq','active')|map(attribute='entity_id')|list }}

    - unique_id: vent_fans_on
      name: Vent Fans On
      icon: mdi:fan
      state: >
        {{ states.fan|selectattr('attributes.type','eq','vent_fan')
          |selectattr('state','eq','on')|list|count > 0 }}
      attributes:
        entities: >
          {{ states.fan|selectattr('attributes.type','eq','vent_fan')
              |selectattr('state','eq','on')|map(attribute='entity_id')|list }}

    - unique_id: vent_fan_in_use
      name: Vent Fan In Use Timers
      icon: mdi:fan
      state: >
        {{ states.timer|selectattr('attributes.type','eq','vent_fan')
            |selectattr('state','eq','active')|list|count > 0 }}
      attributes:
        entities: >
          {{ states.timer|selectattr('attributes.type','eq','vent_fan')
              |selectattr('state','eq','active')|map(attribute='entity_id')|list }}

    - unique_id: hvac_fan
      name: HVAC Fan
      icon: mdi:fan
      state: >
        {{ true if is_state('fan.hvac_fan','on')
            and is_state('input_boolean.ceiling_fan_automation','on')
            and is_state('input_boolean.climate_automation','on')
            and is_state('input_boolean.hvac_fan_control','on')  }}

    - unique_id: upstairs_bathroom_humidity_fan
      name: Upstairs Bathroom Humidity Fan
      icon: mdi:water
      device_class: moisture
      delay_off:
        minutes: 5 # will run for at least 5 minutes
      state: "{{ states('sensor.upstairs_bathroom_sensor_humidity')|int > states('input_number.bathroom_humidity_fan_threshold')|int }}"

    - unique_id: upstairs_bathroom_mold_fan
      name: Upstairs Bathroom Mold Fan
      icon: mdi:mushroom
      device_class: moisture
      delay_off:
        minutes: 5
      state: "{{ states('sensor.upstairs_bathroom_mold_indicator')|int > states('input_number.mold_risk_threshold')|int }}"

    # uses absolute value so we can use temp above or below (negative value)
    # adjusts for seasons - doesn't run if outside is colder than inside, vice versa for warmer outside
    # bathroom colder than thermostat temp diff, colder outside than thermostat - on
    # bathroom warmer than thermostat temp diff, warmer outside than thermostat - on
    - unique_id: upstairs_bathroom_temperature_fan
      name: Upstairs Bathroom Temperature Fan
      icon: mdi:thermometer-lines
      device_class: heat
      delay_off:
        minutes: 5 # will run for at least 5 minutes
      state: >
        {% set tempdiff = (states('sensor.upstairs_bathroom_sensor_temperature')|int - states('sensor.thermostat_temperature')|int|abs) %}
        {{ (states('sensor.upstairs_bathroom_sensor_temperature')|int > states('input_number.high_temperature_threshold')|int)
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int < states('input_number.low_temperature_threshold')|int)
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int < states('sensor.thermostat_temperature')|int
                  and states('sensor.outdoor_temperature')|int < states('sensor.thermostat_temperature')|int
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int)
              or (states('sensor.upstairs_bathroom_sensor_temperature')|int > states('sensor.thermostat_temperature')|int
                  and states('sensor.outdoor_temperature')|int > states('sensor.thermostat_temperature')|int
                  and tempdiff >= states('input_number.bathroom_temperature_differential')|int) }}


