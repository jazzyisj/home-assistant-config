- binary_sensor:
    - name: Work Schedule Disabled
      unique_id: work_schedule_disabled
      icon: mdi:beach
      state: "{{ is_state('input_boolean.work_schedule','off') }}"

    - name: Work Today
      unique_id: work_today
      icon: >
        {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
        {% elif is_state('sensor.current_shift','Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.current_shift','Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: > # now().weekday() == 5 is Saturday
        {% if is_state('input_boolean.work_schedule','off') %} false
        {% elif is_state('calendar.work_holiday','on') %} false
        {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 5 %} true
        {% elif is_state('input_boolean.sunday_workday','on') and now().weekday() == 6 %} true
        {% elif is_state('binary_sensor.workday','on') %} true
        {% endif %}

    - name: Work Tomorrow
      unique_id: work_tomorrow
      icon: >
        {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
        {% elif is_state('sensor.tomorrow_shift','Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.tomorrow_shift','Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      state: > # now().weekday() == 4 is Friday
        {% if is_state('input_boolean.work_schedule','off') %} false
        {% elif is_state('binary_sensor.holiday_tomorrow','on') %} false
        {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 4 %} true
        {% elif is_state('input_boolean.sunday_workday','on') and now().weekday() == 5 %} true
        {% elif is_state('binary_sensor.workday_tomorrow','on') %} true
        {% endif %}

    - name: Pre Work Active
      unique_id: prework_active
      icon: mdi:account-hard-hat
      state: > # on for 30 minutes before leave home time on workdays
        {% if is_state('binary_sensor.work_today','on') and is_state('sensor.current_shift','Days') %}
            {% set diff =  (as_timestamp(states('sensor.date') ~ ' ' ~ states('input_datetime.days_leave_home_time'))|int - as_timestamp(now())|int) %}
        {% elif is_state('binary_sensor.work_today','on') and is_state('sensor.current_shift','Afternoons') %}
            {% set diff = (as_timestamp(states('sensor.date') ~ ' ' ~ states('input_datetime.afternoons_leave_home_time'))|int - as_timestamp(now())|int ) %}
        {% else %}{% set diff = 0 %}
        {% endif %}
        {{ 0 < diff|int < 1800 }}

    # limit media player volumes during set hours
    # if QHS < QHE time does not span midnight
    #  - time >= QHS and time <= QHE
    # else if QHE < QHS quiet hours spans midnight
    # - before midnight time >= QHS
    # -  after midnight time <= QHE
    # if waketime or bedtime state is Off default to set times
    - name: Quiet Hours
      unique_id: quiet_hours
      icon: mdi:volume-low
      state: >
        {% set time = states('sensor.time') %}
        {% if is_state('input_boolean.quiet_hours_bedtime_sync','on') and not (is_state('sensor.bedtime_today','Off') or is_state('sensor.waketime_today','Off'))%}
          {% set start = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.bedtime_today'))|int - states('input_number.quiet_hours_before_bedtime')|int * 60 )|timestamp_custom('%H:%M',true) %}
          {% set end = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_today'))|int + states('input_number.quiet_hours_after_waketime')|int * 60 )|timestamp_custom('%H:%M',true) %}
        {% else %}
          {% set start = states('input_datetime.quiet_hours_start')[0:5] %}
          {% set end = states('input_datetime.quiet_hours_end')[0:5] %}
        {% endif %}
        {% if is_state('input_boolean.quiet_hours_override','on') or is_state('input_select.occupancy_mode','Night') %} true
        {% elif is_state('input_boolean.quiet_hours_enabled','on') %}{{ start <= time < end if start < end else start <= time or time < end }}
        {% else %} false
        {% endif %}

    # after bedtime, not in night mode, before 4am
    # never true if waketime or bedtime state is Off
    # before 4am only (prevent bedtime trigger if someone wakes up house early)
    # bed > wake - bedtime is before midnight
    # bed < time or bed > time < wake - its after bedtime (before midnight), or after bedtime and before waketime (after midnight)
    # else - bedtime is before midnight
    # bed < time < wake - after bedtime and before waketime (bed after midnight)
    - name: Bedtime Active
      unique_id: bedtime_active
      icon: mdi:bed-empty
      delay_on:
        seconds: 30 # allow automation.schedule_bedtime to detect bedtime trigger
      state: >
        {% set time = states('sensor.time') %}
        {% set wake = states('sensor.waketime_today') %}
        {% set bed = states('sensor.bedtime_today') %}
        {{ states('input_select.occupancy_mode') in ['Home','Guest']
            and is_state('binary_sensor.someone_home','on')
            and ((bed != 'Off' and wake != 'Off')
              and (time < '04:00')
              and (bed < time or bed > time < wake if bed > wake else bed < time < wake))
            or is_state('script.scene_bedtime','on') }}

    - unique_id: bedtime_led_alert
      state: >
        {{ is_state('binary_sensor.bedtime_active','on')
            or is_state('input_boolean.bedtime_delayed','on') }}

    - unique_id: reminder_led_alert
      state: >
        {{ is_state('input_boolean.dexter_medication_active','on')
            or is_state('input_boolean.jason_medication_active','on')
            or is_state('input_boolean.maddie_mealtime_active','on') }}

- sensor:
    - name: Wake Time Today
      unique_id: waketime_today
      icon: mdi:white-balance-sunny
      state: > # defaults to days if shift unknown or none
        {% set alm = states('sensor.alarm_clock_next_alarm') %}
        {% set day = states('input_datetime.days_waketime')[0:5] %}
        {% set aft = states('input_datetime.afternoons_waketime')[0:5] %}
        {% set wkd = states('input_datetime.weekend_waketime')[0:5] %}
        {% set gst = states('input_datetime.guest_waketime')[0:5] %}

        {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_morning','on') %}
          {% set wake = gst %}
        {% else %}
          {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on')%}
              {% set wake = aft if is_state('sensor.current_shift','Afternoons') else day %}
          {% elif is_state('binary_sensor.work_today','off') and is_state('input_boolean.weekend_morning','on')%}
              {% set wake = wkd %}
          {% else %} {% set wake = 'Off' %}
          {% endif %}
        {% endif %}
        {{ wake if alm == 'Off' else wake if wake == 'Off' else [alm,wake]|min }}

    - name: Wake Time Today
      unique_id: waketime_today_display
      icon: mdi:white-balance-sunny
      state: >
        {{ states('sensor.waketime_today') if states('sensor.waketime_today') in ['Off','unknown','unavailable','none']
            else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_today'))|timestamp_custom('%-I:%M %p') }}

    - name: Waketime Tomorrow
      unique_id: waketime_tomorrow # defaults to days if shift unknown or none
      icon: mdi:weather-sunset-up
      state: > # bedtime before noon and time < bedtime check  work today, else check work tomorrow to account for bedtimes after midnight
        {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_morning','on') %}
          {{ states('input_datetime.guest_waketime')[0:5] }}
        {% else %}
          {% if is_state('sensor.bedtime_today','Off') or states('sensor.time') < states('sensor.bedtime_today') < '12:00' %}
            {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
              {% if is_state('sensor.current_shift','Afternoons') %}{{ states('input_datetime.afternoons_waketime')[0:5] }}
              {% else %}{{ states('input_datetime.days_waketime')[0:5] }}
              {% endif %}
            {% elif is_state('input_boolean.weekend_morning','on')%}{{ states('input_datetime.weekend_waketime')[0:5] }}
            {% else %} Off
            {% endif %}
          {% else %}
            {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_morning','on') %}
              {% if is_state('sensor.tomorrow_shift','Afternoons') %}{{ states('input_datetime.afternoons_waketime')[0:5] }}
              {% else %}{{ states('input_datetime.days_waketime')[0:5] }}
              {% endif %}
            {% elif is_state('input_boolean.weekend_morning','on') %}{{ states('input_datetime.weekend_waketime')[0:5] }}
            {% else %} Off
            {% endif %}
          {% endif %}
        {% endif %}

    - name: Wake Time Today
      unique_id: waketime_tomorrow_display
      icon: mdi:weather-sunset-up
      state: >
        {{ states('sensor.waketime_tomorrow') if states('sensor.waketime_tomorrow') in ['Off','unknown','unavailable','none']
            else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_tomorrow'))|timestamp_custom('%-I:%M %p') }}

    - name: Bedtime Today
      unique_id: bedtime_today
      icon: mdi:bed
      state: > # - defaults to days if shift unknown or none, weekends if work schedule off, accounts for bedtimes after midnight
        {% set day = states('input_datetime.days_bedtime')[0:5] %}
        {% set aft = states('input_datetime.afternoons_bedtime')[0:5] %}
        {% set wkd = states('input_datetime.weekend_bedtime')[0:5] %}
        {% set bed = [day,aft,wkd]|reject('>','12:00')|max if [day,aft,wkd]|min < '12:00' else [day,aft,wkd]|max %}
        {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_night','on') %}
          {{ states('input_datetime.guest_bedtime')[0:5] }}
        {% else %}
          {% if is_state('sensor.current_shift','Afternoons') and (states('sensor.time') < bed) %}
            {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_night','on') %} {{ aft }}
            {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
            {% else %} Off
            {% endif %}
          {% elif is_state('sensor.tomorrow_shift','Afternoons') %}
            {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_night','on') %} {{ aft }}
            {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
            {% else %} Off
            {% endif %}
          {% elif is_state('sensor.current_shift','Days') and (states('sensor.time') < bed) %}
            {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_night','on') %} {{ day }}
            {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
            {% else %} Off
            {% endif %}
          {% elif is_state('sensor.tomorrow_shift','Days') %}
            {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_night','on') %} {{ day }}
            {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
            {% else %} Off
            {% endif %}
          {% else %}
            {% if is_state('input_boolean.work_schedule','off') and is_state('input_boolean.weekend_night','on') %} {{ wkd }}
            {% elif is_state('input_boolean.workday_night','on') %} {{ day }}
            {% else %} Off
            {% endif %}
          {% endif %}
        {% endif %}

    - name: Bedtime Today
      unique_id: bedtime_today_display
      icon: mdi:bed
      state: >
          {{ states('sensor.bedtime_today') if states('sensor.bedtime_today')|lower in ['off','unknown','unavailable','none']
              else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.bedtime_today'))|timestamp_custom('%-I:%M %p') }}
