###############################################################################
## Templates - Alarm Clock
###############################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_sounds
      attribute: file_list
      to:
      for: 30
  sensor:
    - name: "Alarm Clock Soundlist"
      unique_id: alarm_clock_soundlist
      icon: mdi:alarm-bell
      state: >
        {% set sounds = state_attr(this.entity_id, 'soundlist') %}
        {{ 0 if sounds == none else sounds | count }}
      attributes:
        soundlist: >
          {% set files = namespace(value=[]) %}
          {% set file_list = state_attr('sensor.alarm_clock_sounds', 'file_list') %}
          {% if file_list != none %}
            {% for item in file_list %}
            {% set files.value = files.value
                + [item | replace('/media/music/Alarm Clock Sounds/', '')
                    | replace('.mp3', '') | replace('_', ' ') | title] %}
            {% endfor %}
          {% else %}{% set files.value = ['None'] %}
          {% endif %}
          {{ files.value }}

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_player_wake
      to:
  select:
    - name: "Alarm Clock Media Player Wake"
      unique_id: alarm_clock_media_player_wake
      state: "{{ states('input_text.alarm_clock_media_player_wake') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_player_wake
          data:
            value: "{{ option }}"
      options: &alarm_players >
        {% set options = expand('group.alarm_clock_media_players') | map(attribute='name') | list | sort %}
        {% if options | count > 0 %} {{ options }}
        {% else %} none
        {% endif %}

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_player_manual
      to:
  select:
    - name: "Alarm Clock Media Player Manual"
      unique_id: alarm_clock_media_player_manual
      state: "{{ states('input_text.alarm_clock_media_player_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_player_manual
          data:
            value: "{{ option }}"
      options: *alarm_players

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_player_nap
      to:
  select:
    - name: "Alarm Clock Media Player Nap"
      unique_id: alarm_clock_media_player_nap
      state: "{{ states('input_text.alarm_clock_media_player_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_player_nap
          data:
            value: "{{ option }}"
      options: *alarm_players

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_sound_wake
      to:
  select:
    - name: "Alarm Clock Sound Wake"
      unique_id: alarm_clock_sound_wake
      state: "{{ states('input_text.alarm_clock_sound_wake') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_sound_wake
          data:
            value: "{{ option }}"
      options: &alarm_sounds >
        {% set sounds = state_attr('sensor.alarm_clock_soundlist', 'soundlist') %}
        {% set sounds = iif(sounds != none, sounds, []) %}
        {{ ['Media'] + sounds }}

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_sound_manual
      to:
  select:
    - name: "Alarm Clock Sound Manual"
      unique_id: alarm_clock_sound_manual
      state: "{{ states('input_text.alarm_clock_sound_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_sound_manual
          data:
            value: "{{ option }}"
      options: *alarm_sounds

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_sound_nap
      to:
  select:
    - name: "Alarm Clock Sound Nap"
      unique_id: alarm_clock_sound_nap
      state: "{{ states('input_text.alarm_clock_sound_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_sound_nap
          data:
            value: "{{ option }}"
      options: *alarm_sounds

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: input_text.alarm_clock_media_wake
      to:
  select:
    - name: "Alarm Clock Media Wake"
      unique_id: alarm_clock_media_wake
      state: "{{ states('input_text.alarm_clock_media_wake') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_wake
          data:
            value: "{{ option }}"
      options: !include &media_playlist /config/include/mass_playlist_list.yaml

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: input_text.alarm_clock_media_manual
      to:
  select:
    - name: "Alarm Clock Media Manual"
      unique_id: alarm_clock_media_manual
      state: "{{ states('input_text.alarm_clock_media_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_manual
          data:
            value: "{{ option }}"
      options: *media_playlist

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: input_text.alarm_clock_media_nap
      to:
  select:
    - name: "Alarm Clock Media Nap"
      unique_id: alarm_clock_media_nap
      state: "{{ states('input_text.alarm_clock_media_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_nap
          data:
            value: "{{ option }}"
      options: *media_playlist

- binary_sensor:
    - name: "Alarm Clock"
      unique_id: alarm_clock
      icon: mdi:alarm-note
      state: >
        {{ not is_state('input_select.alarm_clock_type', 'off')
            and (is_state('switch.alarm_clock_wake', 'on')
              or is_state('switch.alarm_clock_manual', 'on')
              or is_state('switch.alarm_clock_nap', 'on')) }}

    - name: "Alarm Clock Presence Alert"
      unique_id: alarm_clock_presence_alert
      icon: mdi:clock-alert
      device_class: problem
      delay_on: 30 # allow temporary switch on/off
      state: >
        {{ is_state('input_boolean.alarm_clock_alerts', 'on')
            and is_state('binary_sensor.alarm_clock', 'on')
            and (is_state('binary_sensor.someone_home', 'off')
              or is_state('input_select.occupancy_mode', 'Away')) }}

    - name: "Alarm Clock LED Alert"
      unique_id: alarm_clock_led_alert
      state: >
        {{ is_state('binary_sensor.alarm_clock', 'on')
            or is_state('input_boolean.alarm_clock_failed', 'on') }}

- sensor:
    - name: "Alarm Clock Active Media Player"
      unique_id: alarm_clock_active_media_player
      icon: mdi:animation-play
      state: >
        {% set alarm_type = states('input_select.alarm_clock_type') %}
        {% if alarm_type != "off" %}
          {% set player_name = states('select.alarm_clock_media_player_' ~ alarm_type) %}
          {{ expand('group.alarm_clock_media_players')
              | selectattr('name', 'eq', player_name)
              | map(attribute='entity_id') | join }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        entity_id: >
          {% if has_value(this.entity_id) %}
            {% set sensor = states(this.entity_id) %}
            {% if is_state_attr(sensor, 'type', 'group') %}
              {{ state_attr('sensor.' ~ sensor.split('.')[1], 'entity_id') }}
            {% else %} ['{{ sensor }}']
            {% endif %}
          {% else %} none
          {% endif %}

    - name: "Alarm Clock Wake Next Alarm"
      unique_id: alarm_clock_wake_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% set days = today_at(states('input_datetime.days_waketime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
        {% set wkds = today_at(states('input_datetime.weekend_waketime')) %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% if is_state('input_select.occupancy_mode', 'Guest') %}
          {% set next_alarm = guest if is_state('input_boolean.alarm_clock_guest', 'on') else none %}
        {% else %}
          {% set alarm_today = wkds if is_state('binary_sensor.work_today', 'off')
              else afts if is_state('sensor.work_shift_today', 'Afternoons') else days %}
          {% set alarm_tom = wkds if is_state('binary_sensor.work_tomorrow', 'off')
              else afts if is_state('sensor.work_shift_tomorrow', 'Afternoons') else days %}
          {% set alarm_tom = alarm_tom + timedelta(days=1) %}
          {# set next alarm to tomorrows alarm time if now is past alarm time #}
          {% set next_alarm = alarm_tom if now() > alarm_today else alarm_today %}

          {# set next alarm to null if not boolean enabled #}
          {% if (now() <= alarm_today and is_state('input_boolean.alarm_clock_wake_workdays', 'off')
                if is_state('binary_sensor.work_today', 'on')
                else is_state('input_boolean.alarm_clock_wake_weekends', 'off'))
              or (now() > alarm_today and is_state('binary_sensor.work_tomorrow', 'off')
                and is_state('input_boolean.alarm_clock_wake_weekends', 'off'))
              or (now() > alarm_today and is_state('binary_sensor.work_tomorrow', 'on')
                and is_state('input_boolean.alarm_clock_wake_workdays', 'off'))
              or (now() > alarm_today and is_state('binary_sensor.work_tomorrow', 'off')
                and is_state('input_boolean.alarm_clock_wake_weekends', 'off')) %}
            {% set next_alarm = none %}
          {% endif %}
        {% endif %}
        {{ next_alarm }}
      attributes:
        source: Wake
        status: >
          {% if is_state('switch.alarm_clock_wake', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_wake_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Wake')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Alarm Clock Manual Next Alarm"
      unique_id: alarm_clock_manual_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% if is_state('input_boolean.alarm_clock_manual', 'on') %}
          {% set alarm_time = today_at(states('input_datetime.alarm_clock_manual_time')) %}
          {% set alarm_time = alarm_time + timedelta(days=1) if alarm_time < now () else alarm_time %}
          {{ alarm_time }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        source: Manual
        status: >
          {% if is_state('switch.alarm_clock_manual', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_manual_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Manual')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Alarm Clock Nap Next Alarm"
      unique_id: alarm_clock_nap_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: "{{ state_attr('timer.alarm_clock_nap', 'finishes_at') if is_state('input_boolean.alarm_clock_nap', 'on') else none }}"
      attributes:
        source: Nap
        status: >
          {% if is_state('switch.alarm_clock_nap', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_nap_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Nap')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # other alarm clocks set in next 24 hours
    - name: "Alarm Clock Other"
      unique_id: alarm_clock_other
      device_class: timestamp
      icon: "{{ iif(has_value('sensor.alarm_clock_other'), 'mdi:alarm-check', 'mdi:alarm-off') }}"
      state: >
        {% set set_alarms = namespace(value=[]) %}
        {% set alarms = state_attr('sensor.alarm_clock_other', 'alarm_clocks') %}
        {% if alarms != none %}
          {% for item in alarms  %}
            {% if has_value('sensor.' ~ item ~ '_next_alarm') %}
              {% set next = states('sensor.' ~ item ~ '_next_alarm') %}
              {% if next | as_datetime <= now() + timedelta(hours=24) %}
                {% set set_alarms.value = set_alarms.value + [next | as_datetime] %}
              {% endif %}
            {% endif %}
          {% endfor %}
            {{ (set_alarms.value | min) if set_alarms.value | count > 0 else none }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        alarm_clocks: >
          {{ ['jason_phone', 'dining_room_hub', 'bedroom_hub',
                'bathroom_speaker', 'office_hub', 'office_speaker', 'living_room_speaker', 'laundry_room_speaker'] }}
        status: "{{ 'off' if state_attr('sensor.alarm_clock_other', 'source') == none else 'set' }}"
        source: >
          {% set source = namespace(value=none) %}
          {% if has_value('sensor.alarm_clock_other') %}
            {% set next = states('sensor.alarm_clock_other') %}
            {% set alarms = expand('group.alarm_clock_other_alarms') %}
            {% for item in alarms if next == item.state %}
              {% set source.value = item.name | replace(' Next Alarm', '') %}
              {% break %}
            {% endfor %}
          {% endif %}
          {{ source.value }}
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # earliest of wake, manual, phone, google home alarms in next 24 hours
    - name: "Alarm Clock Next Alarm"
      unique_id: alarm_clock_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% set set_alarms = state_attr('sensor.alarm_clock_next_alarm', 'set_alarms') %}
        {{ set_alarms | min | as_datetime if set_alarms != none else none }}
      attributes:
        set_alarms: >
          {% set set_alarms = namespace(value=[]) %}
          {% set other_alarms = state_attr('sensor.alarm_clock_other', 'alarm_clocks')
              if state_attr('sensor.alarm_clock_other', 'alarm_clocks') != none else [] %}
          {% set alarm_clocks = ['alarm_clock_wake', 'alarm_clock_manual', 'alarm_clock_nap'] + other_alarms %}
          {% for item in alarm_clocks %}
            {% if has_value('sensor.' ~ item ~ '_next_alarm') %}
              {% set alarm = states('sensor.' ~ item ~ '_next_alarm') %}
              {% if alarm | as_datetime <= now() + timedelta(hours=24) %}
                {% set set_alarms.value = set_alarms.value + [alarm | as_timestamp] %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ set_alarms.value if set_alarms.value | count > 0 else none }}
        status: >
          {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
          {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
          {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
          {% elif is_state('binary_sensor.alarm_clock', 'on') %}
            {% if is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
            {% else %} delayed
            {% endif %}
          {% elif state_attr('sensor.alarm_clock_next_alarm', 'set_alarms') == none %} off
          {% elif is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} {{ state_attr('sensor.alarm_clock_next_alarm', '12hour') }}
          {% endif %}
        source: >
          {% set next = states('sensor.alarm_clock_next_alarm') %}
          {% if has_value('sensor.alarm_clock_next_alarm') %}
            {% if next == states('sensor.alarm_clock_wake_next_alarm') %} Wake
            {% elif next == states('sensor.alarm_clock_manual_next_alarm') %} Manual
            {% elif next == states('sensor.alarm_clock_nap_next_alarm') %} Nap
            {% elif next == states('sensor.alarm_clock_other') %} {{ state_attr('sensor.alarm_clock_other', 'source') }}
            {% else %} {{ none }}
            {% endif %}
          {% else %} {{ none }}
          {% endif %}
        12hour: >
          {% from 'speech.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
