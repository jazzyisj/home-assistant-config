###################################################################################################
## Templates - Alarm Clock
###################################################################################################
- switch:
    - name: "Alarm Clock Daily"
      unique_id: alarm_clock_daily
      icon: mdi:alarm
      state: "{{ is_state('input_select.alarm_clock_type', 'daily') }}"
      turn_on:
        - if:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: "off"
          then:
            - action: input_select.select_option
              target:
                entity_id: input_select.alarm_clock_type
              data:
                option: daily

            - delay: 1 # allow sensor.alarm_clock_active_media_player to calculate

            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_play
      turn_off:
        # allow reset to turn other alarm clock switches off
        - if: "{{ is_state('input_select.alarm_clock_type', 'daily') }}"
          then:
            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_stop

    - name: "Alarm Clock Manual"
      unique_id: alarm_clock_manual
      icon: mdi:alarm
      state: "{{ is_state('input_select.alarm_clock_type', 'manual') }}"
      turn_on:
        - if:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: "off"
          then:
            - action: input_select.select_option
              target:
                entity_id: input_select.alarm_clock_type
              data:
                option: manual

            - delay: 1 # allow sensor.alarm_clock_active_media_player to calculate

            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_play

        - condition: state
          entity_id:
            - input_boolean.alarm_clock_test_play
            - input_boolean.alarm_clock_manual_repeat
          state: "off"

        - action: input_boolean.turn_off
          target:
            entity_id: input_boolean.alarm_clock_manual
      turn_off:
        # allow reset to turn other alarm clock switches off
        - if: "{{ is_state('input_select.alarm_clock_type', 'manual') }}"
          then:
            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_stop

    - name: "Alarm Clock Nap"
      unique_id: alarm_clock_nap
      icon: mdi:alarm
      state: "{{ is_state('input_select.alarm_clock_type', 'nap') }}"
      turn_on:
        - if:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: "off"
          then:
            - action: input_select.select_option
              target:
                entity_id: input_select.alarm_clock_type
              data:
                option: nap

            - delay: 1 # allow sensor.alarm_clock_active_media_player to calculate

            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_play
      turn_off:
        # allow reset to turn other alarm clock switches off
        - if: "{{ is_state('input_select.alarm_clock_type', 'nap') }}"
          then:
            - action: script.turn_on
              target:
                entity_id: script.alarm_clock_stop

        - action: input_boolean.turn_off
          target:
            entity_id: input_boolean.alarm_clock_nap

        - action: timer.cancel
          target:
            entity_id: timer.alarm_clock_nap

    - name: "Alarm Clock Snooze"
      unique_id: alarm_clock_snooze
      icon: mdi:sleep
      state: "{{ is_state('timer.alarm_clock_snooze', ['active', 'paused']) }}"
      turn_on:
        - if:
            - condition: state
              entity_id: binary_sensor.alarm_clock
              state: "on"
          then:
            # this allows snooze from notification or external button before alarm starts playing
            - if: "{{ is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering', 'on']) }}"
              then:
                - action: media_player.media_pause
                  target:
                    entity_id: "{{ states('sensor.alarm_clock_active_media_player') }}"

            - if:
                - condition: state
                  entity_id: timer.alarm_clock_snooze
                  state:
                    - idle
                    - paused
              then:
                - action: timer.start
                  target:
                    entity_id: timer.alarm_clock_snooze
                  data:
                    duration:
                      minutes: "{{ states('input_number.alarm_clock_snooze_time') | int(0) }}"
          else:
            - action: browser_mod.notification
              data:
                duration: 10000
                message: "Cannot snooze alarm.  Alarm clock is not active."
      turn_off:
        - if:
            - condition: state
              entity_id: timer.alarm_clock_snooze
              state:
                - active
                - paused
          then:
            - action: timer.cancel
              target:
                entity_id: timer.alarm_clock_snooze
          else:
            - if:
                - condition: state
                  entity_id: binary_sensor.alarm_clock
                  state: "on"

                - condition: template
                  alias: "Alarm clock media player is snoozed / paused"
                  value_template: "{{ is_state(states('sensor.alarm_clock_active_media_player'), 'paused') }}"
              then:
                - delay: 1 # allow alarm clock to turn off if timer cancelled / paused

                - action: media_player.media_play_pause
                  target:
                    entity_id: "{{ states('sensor.alarm_clock_active_media_player') }}"

###################################################################################################
## Soundlist
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_sounds
      attribute: file_list
      to:
      for: 30
  sensor:
    - name: "Alarm Clock Soundlist"
      unique_id: alarm_clock_soundlist
      icon: mdi:alarm-bell
      state: >
        {% set sounds = state_attr(this.entity_id, 'soundlist') %}
        {{ 0 if sounds == none else sounds | count }}
      attributes:
        soundlist: >
          {% set files = namespace(value=[]) %}
          {% set file_list = state_attr('sensor.alarm_clock_sounds', 'file_list') %}
          {% if file_list != none %}
            {% for item in file_list %}
            {% set files.value = files.value
                + [item | replace('/media/music/Alarm Clock Sounds/', '')
                    | replace('.mp3', '') | replace('_', ' ') | title] %}
            {% endfor %}
          {% else %}{% set files.value = ['None'] %}
          {% endif %}
          {{ files.value }}

###################################################################################################
## Speaker
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_speaker_daily
      to:
  select:
    - name: "Alarm Clock Speaker Daily"
      unique_id: alarm_clock_speaker_daily
      state: "{{ states('input_text.alarm_clock_speaker_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_speaker_daily
          data:
            value: "{{ option }}"
      options: &alarm_players >
        {% set options = expand('group.alarm_clock_media_players') | map(attribute='name') | sort %}
        {% if options | count > 0 %} {{ options }}
        {% else %} none
        {% endif %}

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_speaker_manual
      to:
  select:
    - name: "Alarm Clock Speaker Manual"
      unique_id: alarm_clock_speaker_manual
      state: "{{ states('input_text.alarm_clock_speaker_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_speaker_manual
          data:
            value: "{{ option }}"
      options: *alarm_players

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.alarm_clock_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_speaker_nap
      to:
  select:
    - name: "Alarm Clock Speaker Nap"
      unique_id: alarm_clock_speaker_nap
      state: "{{ states('input_text.alarm_clock_speaker_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_speaker_nap
          data:
            value: "{{ option }}"
      options: *alarm_players

###################################################################################################
## Media
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_daily
      to:
  select:
    - name: "Alarm Clock Media Daily"
      unique_id: alarm_clock_media_daily
      state: "{{ states('input_text.alarm_clock_media_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_daily
          data:
            value: "{{ option }}"
      options: &alarm_sounds >
        {% set sounds = state_attr('sensor.alarm_clock_soundlist', 'soundlist') %}
        {% set sounds = iif(sounds != none, sounds, []) %}
        {{ state_attr('input_select.media_type_play', 'options') + sounds }}

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_manual
      to:
  select:
    - name: "Alarm Clock Media Manual"
      unique_id: alarm_clock_media_manual
      state: "{{ states('input_text.alarm_clock_media_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_manual
          data:
            value: "{{ option }}"
      options: *alarm_sounds

- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: sensor.alarm_clock_soundlist
      attribute: soundlist
      to:
      for: 30

    - trigger: state
      entity_id: input_text.alarm_clock_media_nap
      to:
  select:
    - name: "Alarm Clock Media Nap"
      unique_id: alarm_clock_media_nap
      state: "{{ states('input_text.alarm_clock_media_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_media_nap
          data:
            value: "{{ option }}"
      options: *alarm_sounds

###################################################################################################
## Media Artist
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: button.update_mass_media
      to:

    - trigger: state
      entity_id:
        - input_text.alarm_clock_artist_daily
        - input_text.alarm_clock_artist_manual
        - input_text.alarm_clock_artist_nap

    - trigger: time_pattern
      minutes: 50 # sync with library every hour at 50 min after
  action:
    - action: music_assistant.get_library
      data:
        config_entry_id: 01JG86QY33GS4K1FFQJ18SREYP
        media_type: artist
        favorite: true
        limit: 50
      response_variable: mass_artists

    - variables:
        artists: >
          {% set artist_list = namespace(names=[]) %}
          {% for artist in mass_artists['items'] %}
            {% set artist_list.names = artist_list.names + [artist.name] %}
          {% endfor %}
          {{ artist_list.names | unique | sort }}
  select:
    - name: "Alarm Clock Artist Daily"
      unique_id: alarm_clock_artist_daily
      state: "{{ states('input_text.alarm_clock_artist_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_artist_daily
          data:
            value: "{{ option }}"
      options: "{{ artists }}"

    - name: "Alarm Clock Artist Manual"
      unique_id: alarm_clock_artist_manual
      state: "{{ states('input_text.alarm_clock_artist_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_artist_manual
          data:
            value: "{{ option }}"
      options: "{{ artists }}"

    - name: "Alarm Clock Artist Nap"
      unique_id: alarm_clock_artist_nap
      state: "{{ states('input_text.alarm_clock_artist_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_artist_nap
          data:
            value: "{{ option }}"
      options: "{{ artists }}"

###################################################################################################
## Media Album
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: button.update_mass_media
      to:

    - trigger: state
      entity_id:
        - input_text.alarm_clock_album_daily
        - input_text.alarm_clock_album_manual
        - input_text.alarm_clock_album_nap

    - trigger: time_pattern
      minutes: 50 # sync with library every hour at 50 min after
  action:
    - action: music_assistant.get_library
      data:
        config_entry_id: 01JG86QY33GS4K1FFQJ18SREYP
        media_type: album
        favorite: true
        limit: 100
      response_variable: mass_albums

    - variables:
        albums: >
          {% set album_list = namespace(names=[]) %}
          {% for album in mass_albums['items'] %}
            {% set album_list.names = album_list.names + [album.name] %}
          {% endfor %}
          {{ album_list.names | unique | sort }}
  select:
    - name: "Alarm Clock Album Daily"
      unique_id: alarm_clock_album_daily
      state: "{{ states('input_text.alarm_clock_album_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_album_daily
          data:
            value: "{{ option }}"
      options: "{{ albums }}"

    - name: "Alarm Clock Album Manual"
      unique_id: alarm_clock_album_manual
      state: "{{ states('input_text.alarm_clock_album_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_album_manual
          data:
            value: "{{ option }}"
      options: "{{ albums }}"

    - name: "Alarm Clock Album Nap"
      unique_id: alarm_clock_album_nap
      state: "{{ states('input_text.alarm_clock_album_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_album_nap
          data:
            value: "{{ option }}"
      options: "{{ albums }}"

###################################################################################################
## Media Track
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: button.update_mass_media
      to:

    - trigger: state
      entity_id:
        - input_text.alarm_clock_track_daily
        - input_text.alarm_clock_track_manual
        - input_text.alarm_clock_track_nap

    - trigger: time_pattern
      minutes: 50 # sync with library every hour at 50 min after
  action:
    - action: music_assistant.get_library
      data:
        config_entry_id: 01JG86QY33GS4K1FFQJ18SREYP
        media_type: track
        favorite: true
        limit: 100
      response_variable: mass_tracks

    - variables:
        tracks: >
          {% set track_list = namespace(names=[]) %}
          {% for track in mass_tracks['items'] %}
            {% set track_list.names = track_list.names + [track.name] %}
          {% endfor %}
          {{ track_list.names | unique | sort }}
  select:
    - name: "Alarm Clock Track Daily"
      unique_id: alarm_clock_track_daily
      state: "{{ states('input_text.alarm_clock_track_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_track_daily
          data:
            value: "{{ option }}"
      options: "{{ tracks }}"

    - name: "Alarm Clock Track Manual"
      unique_id: alarm_clock_track_manual
      state: "{{ states('input_text.alarm_clock_track_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_track_manual
          data:
            value: "{{ option }}"
      options: "{{ tracks }}"

    - name: "Alarm Clock Track Nap"
      unique_id: alarm_clock_track_nap
      state: "{{ states('input_text.alarm_clock_track_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_track_nap
          data:
            value: "{{ option }}"
      options: "{{ tracks }}"

###################################################################################################
## Media Playlist
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: button.update_mass_media
      to:

    - trigger: state
      entity_id:
        - input_text.alarm_clock_playlist_daily
        - input_text.alarm_clock_playlist_manual
        - input_text.alarm_clock_playlist_nap

    - trigger: time_pattern
      minutes: 55 # sync with library every hour at 55 min after
  action:
    - action: music_assistant.get_library
      data:
        config_entry_id: 01JG86QY33GS4K1FFQJ18SREYP
        media_type: playlist
        favorite: true
        limit: 100
      response_variable: mass_playlists

    - variables:
        playlists: >
          {% set playlist_list = namespace(names=[]) %}
          {% for playlist in mass_playlists['items'] %}
            {% set playlist_list.names = playlist_list.names + [playlist.name] %}
          {% endfor %}
          {{ playlist_list.names | unique | sort }}
  select:
    - name: "Alarm Clock Playlist Daily"
      unique_id: alarm_clock_playlist_daily
      state: "{{ states('input_text.alarm_clock_playlist_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_playlist_daily
          data:
            value: "{{ option }}"
      options: "{{ playlists }}"

    - name: "Alarm Clock Playlist Manual"
      unique_id: alarm_clock_playlist_manual
      state: "{{ states('input_text.alarm_clock_playlist_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_playlist_manual
          data:
            value: "{{ option }}"
      options: "{{ playlists }}"

    - name: "Alarm Clock Playlist Nap"
      unique_id: alarm_clock_playlist_nap
      state: "{{ states('input_text.alarm_clock_playlist_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_playlist_nap
          data:
            value: "{{ option }}"
      options: "{{ playlists }}"

###################################################################################################
## Media Radio
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: button.update_mass_media
      to:

    - trigger: state
      entity_id:
        - input_text.alarm_clock_radio_daily
        - input_text.alarm_clock_radio_manual
        - input_text.alarm_clock_radio_nap

    - trigger: time_pattern
      minutes: 55 # sync with library every hour at 55 min after
  action:
    - action: music_assistant.get_library
      data:
        config_entry_id: 01JG86QY33GS4K1FFQJ18SREYP
        media_type: radio
        favorite: true
        limit: 100
      response_variable: mass_radios

    - variables:
        radios: >
          {% set radio_list = namespace(names=[]) %}
          {% for radio in mass_radios['items'] %}
            {% set radio_list.names = radio_list.names + [radio.name] %}
          {% endfor %}
          {{ radio_list.names | unique | sort }}
  select:
    - name: "Alarm Clock Radio Daily"
      unique_id: alarm_clock_radio_daily
      state: "{{ states('input_text.alarm_clock_radio_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_radio_daily
          data:
            value: "{{ option }}"
      options: "{{ radios }}"

    - name: "Alarm Clock Radio Manual"
      unique_id: alarm_clock_radio_manual
      state: "{{ states('input_text.alarm_clock_radio_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_radio_manual
          data:
            value: "{{ option }}"
      options: "{{ radios }}"

    - name: "Alarm Clock Radio Nap"
      unique_id: alarm_clock_radio_nap
      state: "{{ states('input_text.alarm_clock_radio_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_radio_nap
          data:
            value: "{{ option }}"
      options: "{{ radios }}"

###################################################################################################
## Media Video
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id:
        - input_text.alarm_clock_video_daily
        - input_text.alarm_clock_video_manual
        - input_text.alarm_clock_video_nap
      to:

    - trigger: state
      entity_id: button.update_mass_media
      to:
      not_from:
        - unknown
        - unavailable

    #DISABLED not required until automatic video list
    # - trigger: time_pattern
    #   minutes: 55 # sync with library every hour at 55 min after
  select:
    - name: "Alarm Clock Video Daily"
      unique_id: alarm_clock_video_daily
      state: "{{ states('input_text.alarm_clock_video_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_daily
          data:
            value: "{{ option }}"
      options: !include /config/include/media_preset_videos.yaml

    - name: "Alarm Clock Video Manual"
      unique_id: alarm_clock_video_manual
      state: "{{ states('input_text.alarm_clock_video_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_manual
          data:
            value: "{{ option }}"
      options: !include /config/include/media_preset_videos.yaml

    - name: "Alarm Clock Video Nap"
      unique_id: alarm_clock_video_nap
      state: "{{ states('input_text.alarm_clock_video_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_nap
          data:
            value: "{{ option }}"
      options: !include /config/include/media_preset_videos.yaml

###################################################################################################
## Media Video Display
###################################################################################################
- trigger:
    - trigger: homeassistant
      event: start

    - trigger: event
      event_type: event_template_reloaded

    - trigger: state
      entity_id: group.cast_media_players
      attribute: entity_id
      to:
      for: 30

    - trigger: state
      entity_id:
        - input_text.alarm_clock_video_display_daily
        - input_text.alarm_clock_video_display_manual
        - input_text.alarm_clock_video_display_nap
  condition:
    - condition: template
      value_template: >
        {{ state_attr('group.cast_media_players', 'entity_id')
            not in ['', '[]', none] }}
  select:
    - name: "Alarm Clock Video Display Daily"
      unique_id: alarm_clock_video_display_daily
      state: "{{ states('input_text.alarm_clock_video_display_daily') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_display_daily
          data:
            value: "{{ option }}"
      options: >
        {{ expand('group.cast_media_players')
            | map(attribute='name') | sort }}

    - name: "Alarm Clock Video Display Manual"
      unique_id: alarm_clock_video_display_manual
      state: "{{ states('input_text.alarm_clock_video_display_manual') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_display_manual
          data:
            value: "{{ option }}"
      options: >
        {{ expand('group.cast_media_players')
            | map(attribute='name') | sort }}

    - name: "Alarm Clock Video Display Nap"
      unique_id: alarm_clock_video_display_nap
      state: "{{ states('input_text.alarm_clock_video_display_nap') }}"
      select_option:
        - condition: template
          value_template: "{{ option not in ['', none] }}"

        - action: input_text.set_value
          target:
            entity_id: input_text.alarm_clock_video_display_nap
          data:
            value: "{{ option }}"
      options: >
        {{ expand('group.cast_media_players')
            | map(attribute='name') | sort }}

###################################################################################################
## Non-Trigger Templates
###################################################################################################
- binary_sensor:
    - name: "Alarm Clock"
      unique_id: alarm_clock
      icon: mdi:alarm-note
      delay_on: 1 # allow sensor.alarm_clock_active_media_player to calculate
      state: >
        {{ not is_state('input_select.alarm_clock_type', 'off')
            and (is_state('switch.alarm_clock_daily', 'on')
              or is_state('switch.alarm_clock_manual', 'on')
              or is_state('switch.alarm_clock_nap', 'on')) }}

    - name: "Alarm Clock Presence Alert"
      unique_id: alarm_clock_presence_alert
      icon: mdi:clock-alert
      device_class: problem
      delay_on: 30 # allow temporary switch on/off
      state: >
        {{ is_state('input_boolean.alarm_clock_alerts', 'on')
            and is_state('binary_sensor.alarm_clock', 'on')
            and (is_state('binary_sensor.someone_home', 'off')
              or is_state('input_select.occupancy_mode', 'Away')) }}

    - name: "Alarm Clock LED Alert"
      unique_id: alarm_clock_led_alert
      state: >
        {{ is_state('binary_sensor.alarm_clock', 'on')
            or is_state('input_boolean.alarm_clock_failed', 'on') }}

- sensor:
    - name: "Alarm Clock Active Media Player"
      unique_id: alarm_clock_active_media_player
      icon: mdi:animation-play
      device_class: enum
      state: >
        {% set alarm_type = states('input_select.alarm_clock_type') %}
        {% set media_type = states('select.alarm_clock_media_' ~ alarm_type) %}
        {% if alarm_type != "off" %}
          {% if media_type == 'Video' %}
            {% set player_name = states('select.alarm_clock_video_display_' ~ alarm_type) %}
          {% else %}
            {% set player_name = states('select.alarm_clock_speaker_' ~ alarm_type) %}
          {% endif %}
            {{ expand('group.alarm_clock_media_players')
                | selectattr('name', 'eq', player_name)
                | map(attribute='entity_id') | join }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        entity_id: >
          {% if has_value(this.entity_id) %}
            {% set sensor = states(this.entity_id) %}
            {% if is_state_attr(sensor, 'type', 'group') %}
              {{ state_attr('sensor.' ~ sensor.split('.')[1], 'entity_id') }}
            {% else %} ['{{ sensor }}']
            {% endif %}
          {% else %} none
          {% endif %}
        options: "{{ state_attr('select.alarm_clock_speaker_daily', 'options') }}"

    - name: "Alarm Clock Daily Next Alarm"
      unique_id: alarm_clock_daily_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% set reset = today_at(states('input_datetime.day_reset')) %}
        {% set midnight = today_at('00:00') %}
        {% set days = today_at(states('input_datetime.days_waketime')) %}
        {% set afts = today_at(states('input_datetime.afternoons_waketime')) %}
        {% set wkds = today_at(states('input_datetime.weekend_waketime')) %}
        {% set guest = today_at(states('input_datetime.guest_waketime')) %}
        {% set work_today = is_state('binary_sensor.work_today', 'on') %}
        {% set work_tomorrow = is_state('binary_sensor.work_tomorrow', 'on') %}
        {% set shift_today = states('sensor.scheduled_shift_today') %}
        {% set shift_tomorrow = states('sensor.scheduled_shift_tomorrow') %}
        {% if is_state('input_select.occupancy_mode', 'Guest') %}
          {% set next_alarm = guest if is_state('input_boolean.alarm_clock_guest', 'on') else none %}
        {% else %}
          {# now between midnight and reset - tomorrow #}
          {% if midnight < reset > now() %}
            {% set work_today = work_tomorrow %}
            {% set shift_today = shift_tomorrow %}
          {% endif %}
          {% set alarm_today = wkds if not work_today
              else afts if shift_today == 'Afternoons' else days %}
          {% set alarm_tom = wkds if not work_tomorrow
              else afts if shift_tomorrow == 'Afternoons' else days %}
          {# tomorrows alarm time is time of alarm today + 1 day #}
          {% set alarm_tom = alarm_tom + timedelta(days=1) %}
          {# next alarm to tomorrows alarm time if now is past today's alarm time #}
          {% set next_alarm = alarm_tom if now() > alarm_today else alarm_today %}
          {# set next alarm to null if not boolean enabled #}
          {# now < reset (after midnight) and before alarm_today - tomorrow #}
          {# now between reset and alarm_today - today #}
          {# now after alarm_today - tomorrow #}
          {% if (reset > now() < alarm_today and work_tomorrow
                and is_state('input_boolean.alarm_clock_daily_workdays', 'off'))
              or (reset > now() <= alarm_today and not work_tomorrow
                and is_state('input_boolean.alarm_clock_daily_weekends', 'off'))
              or (reset < now() < alarm_today and work_today
                and is_state('input_boolean.alarm_clock_daily_workdays', 'off'))
              or  (reset < now() < alarm_today and not work_today
                and is_state('input_boolean.alarm_clock_daily_weekends', 'off'))
              or (now() > alarm_today and work_tomorrow
                and is_state('input_boolean.alarm_clock_daily_workdays', 'off'))
              or (now() > alarm_today and not work_tomorrow
                and is_state('input_boolean.alarm_clock_daily_weekends', 'off')) %}
            {% set next_alarm = none %}
          {% endif %}
        {% endif %}
        {{ next_alarm }}
      attributes:
        source: Daily
        status: >
          {% if is_state('switch.alarm_clock_daily', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_daily_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Daily')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        display: >
          {% set status = state_attr(this.entity_id, 'status') %}
          {{ status | title if status
                in ['off', 'failed', 'snoozed', 'testing', 'playing', 'skipped']
              else state_attr(this.entity_id, '12hour') }}
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Alarm Clock Manual Next Alarm"
      unique_id: alarm_clock_manual_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% if is_state('input_boolean.alarm_clock_manual', 'on') %}
          {% set alarm_time = today_at(states('input_datetime.alarm_clock_manual_time')) %}
          {% set alarm_time = alarm_time + timedelta(days=1) if alarm_time < now () else alarm_time %}
          {{ alarm_time }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        source: Manual
        status: >
          {% if is_state('switch.alarm_clock_manual', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_manual_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Manual')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        display: >
          {% set status = state_attr(this.entity_id, 'status') %}
          {{ status | title if status
                in ['off', 'failed', 'snoozed', 'testing', 'playing', 'skipped']
              else state_attr(this.entity_id, '12hour') }}
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    - name: "Alarm Clock Nap Next Alarm"
      unique_id: alarm_clock_nap_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: "{{ state_attr('timer.alarm_clock_nap', 'finishes_at') if is_state('input_boolean.alarm_clock_nap', 'on') else none }}"
      attributes:
        source: Nap
        status: >
          {% if is_state('switch.alarm_clock_nap', 'on') %}
              {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
              {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
              {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
              {% elif is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
              {% else %} delayed
              {% endif %}
          {% elif not has_value('sensor.alarm_clock_nap_next_alarm') %} off
          {% elif is_state_attr('sensor.alarm_clock_next_alarm', 'source', 'Nap')
              and is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} pending
          {% endif %}
        display: >
          {% set status = state_attr(this.entity_id, 'status') %}
          {{ status | title if status
                in ['off', 'failed', 'snoozed', 'testing', 'playing', 'skipped']
              else state_attr(this.entity_id, '12hour') }}
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # other alarm clocks set in next 24 hours
    - name: "Alarm Clock Other"
      unique_id: alarm_clock_other
      device_class: timestamp
      icon: "{{ iif(has_value('sensor.alarm_clock_other'), 'mdi:alarm-check', 'mdi:alarm-off') }}"
      state: >
        {% set set_alarms = namespace(value=[]) %}
        {% set alarms = state_attr('sensor.alarm_clock_other', 'alarm_clocks') %}
        {% if alarms != none %}
          {% for item in alarms  %}
            {% if has_value('sensor.' ~ item ~ '_next_alarm') %}
              {% set next = states('sensor.' ~ item ~ '_next_alarm') %}
              {% if next | as_datetime <= now() + timedelta(hours=24) %}
                {% set set_alarms.value = set_alarms.value + [next | as_datetime] %}
              {% endif %}
            {% endif %}
          {% endfor %}
            {{ (set_alarms.value | min) if set_alarms.value | count > 0 else none }}
        {% else %} {{ none }}
        {% endif %}
      attributes:
        alarm_clocks: >
          {{ ['jason_phone', 'dining_room_hub', 'kitchen_hub',
                'bathroom_speaker', 'bedroom_hub', 'office_speaker', 'living_room_speaker', 'laundry_room_speaker'] }}
        status: "{{ 'off' if state_attr('sensor.alarm_clock_other', 'source') == none else 'set' }}"
        source: >
          {% set source = namespace(value=none) %}
          {% if has_value('sensor.alarm_clock_other') %}
            {% set next = states('sensor.alarm_clock_other') %}
            {% set alarms = expand('group.alarm_clock_other_alarms') %}
            {% for item in alarms if next == item.state %}
              {% set source.value = item.name | replace(' Next Alarm', '') %}
              {% break %}
            {% endfor %}
          {% endif %}
          {{ source.value }}
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}

    # earliest of daily, manual, phone, google home alarms in next 24 hours
    - name: "Alarm Clock Next Alarm"
      unique_id: alarm_clock_next_alarm
      device_class: timestamp
      icon: >
        {% from 'media.jinja' import alarm_clock_icon %}
        {{ alarm_clock_icon(this.entity_id) }}
      state: >
        {% set set_alarms = state_attr('sensor.alarm_clock_next_alarm', 'set_alarms') %}
        {{ set_alarms | min | as_datetime if set_alarms != none else none }}
      attributes:
        set_alarms: >
          {% set set_alarms = namespace(value=[]) %}
          {% set other_alarms = state_attr('sensor.alarm_clock_other', 'alarm_clocks')
              if state_attr('sensor.alarm_clock_other', 'alarm_clocks') != none else [] %}
          {% set alarm_clocks = ['alarm_clock_daily', 'alarm_clock_manual', 'alarm_clock_nap'] + other_alarms %}
          {% for item in alarm_clocks %}
            {% if has_value('sensor.' ~ item ~ '_next_alarm') %}
              {% set alarm = states('sensor.' ~ item ~ '_next_alarm') %}
              {% if alarm | as_datetime <= now() + timedelta(hours=24) %}
                {% set set_alarms.value = set_alarms.value + [alarm | as_timestamp] %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ set_alarms.value if set_alarms.value | count > 0 else none }}
        status: >
          {% if is_state('input_boolean.alarm_clock_failed', 'on') %} failed
          {% elif is_state('switch.alarm_clock_snooze', 'on') %} snoozed
          {% elif is_state('input_boolean.alarm_clock_test_play', 'on') %} testing
          {% elif is_state('binary_sensor.alarm_clock', 'on') %}
            {% if is_state(states('sensor.alarm_clock_active_media_player'), ['playing', 'buffering']) %} playing
            {% else %} delayed
            {% endif %}
          {% elif state_attr('sensor.alarm_clock_next_alarm', 'set_alarms') == none %} off
          {% elif is_state('input_boolean.alarm_clock_skip_next', 'on') %} skipped
          {% else %} {{ state_attr('sensor.alarm_clock_next_alarm', '12hour') }}
          {% endif %}
        source: >
          {% if has_value('sensor.alarm_clock_next_alarm') %}
            {% set next = states('sensor.alarm_clock_next_alarm') %}
            {% if next == states('sensor.alarm_clock_daily_next_alarm') %} Daily
            {% elif next == states('sensor.alarm_clock_manual_next_alarm') %} Manual
            {% elif next == states('sensor.alarm_clock_nap_next_alarm') %} Nap
            {% elif next == states('sensor.alarm_clock_other') %} {{ state_attr('sensor.alarm_clock_other', 'source') }}
            {% else %} {{ none }}
            {% endif %}
          {% else %} {{ none }}
          {% endif %}
        12hour: >
          {% from 'schedule.jinja' import twelve_hour %}
          {{ twelve_hour(this.entity_id) }}
