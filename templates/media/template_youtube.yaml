###############################################################################
## Templates - Youtube
###############################################################################
- binary_sensor:
    - name: 'Youtube Connected'
      unique_id: youtube_connected
      icon: >
        {{ 'mdi:youtube' if not states('media_player.ytube_music_player')|lower
            in ['unknown','unavailable','none'] else 'mdi:alert-circle' }}
      device_class: connectivity
      state: "{{ states('media_player.ytube_music_player')|lower not in ['unknown','unavailable','none'] }}"

    - name: 'Youtube Connected Alert'
      unique_id: youtube_connected_alert
      icon: mdi:youtube
      state: >
        {{ is_state('binary_sensor.youtube_connected','off')
            and is_state('input_boolean.media_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: 'Youtube'
      unique_id: youtube
      icon: mdi:youtube
      delay_off: 5 # allow switch playlist, media player etc.
      state: >
        {{ states('media_player.youtube') in ['playing','paused']
            or states('input_text.active_youtube_media_player') not in ['off','']
            or is_state('input_boolean.resume_youtube','on') }}

- sensor:
    - name: 'Youtube Media Player'
      unique_id: youtube_media_player
      icon: mdi:youtube
      state: >
        {{ expand(state_attr('group.play_media_players','entity_id'))
              |selectattr('name','eq',states('input_select.youtube_media_player'))
              |map(attribute='entity_id')|join('') }}
      attributes:
        player_state: "{{ states(states('sensor.youtube_media_player')) }}"
        entity_id: >
          {% set player = states('sensor.youtube_media_player') %}
          {% if player|lower not in ['off','','unknown','unavailable','none'] %}
            {{ expand(state_attr('group.single_media_players','entity_id'))
                |selectattr('attributes.' ~ player.split('.')[1],'eq',true)|map(attribute='entity_id')|list
                  if is_state_attr(player,'type','group') else [player] }}
          {% endif %}

    # media_content_id:
    #   playlist <- normal
    #   channel
    #   vid_channel
    #   album
    #   track
    #   history
    #   user_tracks
    #   user_album
    #   user_artist

    - name: 'Youtube Playlists' #IDEA playlist sensor
      unique_id: youtube_playlists
      icon: mdi:youtube
      state: ok
      attributes:
        playlists: >
          {{
            [
              {
                "name":"Epic Classic Rock",
                "type":"playlist",
                "uri":"RDCLAK5uy_lxC3w7O3LZIA1fqRM4tl9Fv9aECoP_r9E"
              },
              {
                "name":"'90s Aggro Anthems",
                "type":"playlist",
                "uri":"RDCLAK5uy_lwY3SiMAbTD39tOkEvAMGae_EGEyfs69c"
              },
              {
                "name":"Dancing to the Oldies",
                "type":"playlist",
                "uri":"RDCLAK5uy_mAS17Kus0n-4lqR-KhwQBCy5vM1rPwfWo"
              },
              {
                "name":"Feelin' Good in the '80s",
                "type":"playlist",
                "uri":"RDCLAK5uy_nKfNEHo6Yu1lao4pamzirHgatT0liBhzY"
              },
              {
                "name":"Hard Rock Headbangers",
                "type":"playlist",
                "uri":"RDCLAK5uy_lhDj6v_l4ZFQr3Gcsnk84Ignq2qQbQjuY"
              },
              {
                "name":"My Top Favorites",
                "type":"playlist",
                "uri":"PL01BD0622E6F54275"
              },
              {
                "name":"Top 100 Songs Canada",
                "type":"playlist",
                "uri":"PL4fGSI1pDJn57Q7WbODbmXjyjgXi0BTyD"
              }
            ]
          }}
