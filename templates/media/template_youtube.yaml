###############################################################################
## Templates - Youtube
###############################################################################
- button:
    - name: "Update Youtube Lists"
      unique_id: update_youtube_lists
      icon: mdi:youtube
      press:
        - service: ytube_music_player.call_method
          target:
            entity_id: media_player.youtube
          data:
            command: reload_dropdowns

    - name: "Start Youtube Radio"
      unique_id: start_youtube_radio
      icon: mdi:youtube
      press:
        - service: ytube_music_player.start_radio
          target:
            entity_id: media_player.youtube

- trigger:
    - platform: state #YOUTUBE youtube playlist sensor from integration
      entity_id: sensor.youtube_playlists
      attribute: playlists
      to: ~

    - platform: state
      entity_id: input_boolean.startup_pending
      to: "off"
  sensor:
    - name: "Youtube Playlists"
      unique_id: youtube_playlists
      icon: mdi:youtube
      state: >
        {% set playlists = state_attr('sensor.youtube_playlists','playlists') %}
        {{ 0 if playlists == none else playlists|count }}
      attributes: #YOUTUBE update playlists
        playlists: >
          {{
            [
              {
                "name":"Epic Classic Rock",
                "type":"playlist",
                "uri":"RDCLAK5uy_lxC3w7O3LZIA1fqRM4tl9Fv9aECoP_r9E"
              },
              {
                "name":"'90s Aggro Anthems",
                "type":"playlist",
                "uri":"RDCLAK5uy_lwY3SiMAbTD39tOkEvAMGae_EGEyfs69c"
              },
              {
                "name":"Dancing to the Oldies",
                "type":"playlist",
                "uri":"RDCLAK5uy_mAS17Kus0n-4lqR-KhwQBCy5vM1rPwfWo"
              },
              {
                "name":"Feelin' Good in the '80s",
                "type":"playlist",
                "uri":"RDCLAK5uy_nKfNEHo6Yu1lao4pamzirHgatT0liBhzY"
              },
              {
                "name":"Hard Rock Headbangers",
                "type":"playlist",
                "uri":"RDCLAK5uy_lhDj6v_l4ZFQr3Gcsnk84Ignq2qQbQjuY"
              },
              {
                "name":"Swamp Blues",
                "type":"playlist",
                "uri":"RDCLAK5uy_nfs4xLoOqCVro0_fvOVFzU7KKVpH7X0B4"
              },
              {
                "name":"Best Country Music Last 25 Years | Only the Country Songs you want to hear",
                "type":"playlist",
                "uri":"PLnuz-9jDGNBIeGzLfdm4n7goQLw4cbHqL"
              },
              {
                "name":"Hell Raisin' Country",
                "type":"playlist",
                "uri":"RDCLAK5uy_l1BnI_Z1w4u9RWuZEXSBHJg7EMM_5IDsk"
              },
              {
                "name":"All-Time Hip Hop Hits",
                "type":"playlist",
                "uri":"RDCLAK5uy_kw2wIlEv9llILhO0qoMTLsBBhmjzuibAc"
              },
              {
                "name":"My Top Favorites",
                "type":"playlist",
                "uri":"PL01BD0622E6F54275"
              },
              {
                "name":"Top 100 Songs Canada",
                "type":"playlist",
                "uri":"PL4fGSI1pDJn57Q7WbODbmXjyjgXi0BTyD"
              }
            ]
          }}

- trigger:
    - platform: state
      entity_id: sensor.media_play_media_players
      attribute: entity_id
      to: ~

    - platform: state
      entity_id: input_text.youtube_media_player
      to: ~

    - platform: state
      entity_id: input_boolean.startup_pending
      to: "off"
  select:
    - name: "Youtube Media Player"
      unique_id: youtube_media_player
      state: "{{ states('input_text.youtube_media_player') }}"
      select_option:
        - condition: template
          value_template: "{{ option != none }}"

        - service: input_text.set_value
          target:
            entity_id: input_text.youtube_media_player
          data:
            value: "{{ option }}"
      options: "{{ expand(state_attr('sensor.media_play_media_players','entity_id'))|map(attribute='name')|list }}"

- binary_sensor:
    #YOUTUBE youtube media players doesn't go unavailable, this doesn't work
    - name: "Youtube Connected"
      unique_id: youtube_connected
      icon: mdi:youtube
      device_class: connectivity
      state: "{{ states('media_player.youtube') not in ['unknown','unavailable'] }}"

    - name: "Youtube Connected Alert"
      unique_id: youtube_connected_alert
      icon: mdi:youtube
      state: >
        {{ is_state('binary_sensor.youtube_connected','off')
            and is_state('input_boolean.media_alerts','on')
            and is_state('input_boolean.startup_pending','off')
            and is_state('binary_sensor.wan_connected','on') }}

    - name: "Youtube"
      unique_id: youtube
      icon: mdi:youtube
      state: >
        {{ is_state('input_boolean.youtube','on')
            or is_state('input_boolean.resume_youtube','on') }}

- sensor:
    - name: "Youtube Media Player"
      unique_id: youtube_media_player
      icon: mdi:youtube
      state: >
        {% set active = states('input_text.active_youtube_media_player') %}
        {% set selected = expand('group.media_play_media_players')
            |selectattr('name','eq',states('input_select.youtube_player_speaker'))|map(attribute='entity_id')|join('') %}
        {{ iif(is_state('script.media_play','off') and active != 'off',active,selected) }}
      attributes:
        entity_id: >
          {% set player = states('sensor.youtube_media_player') %}
          {% if player not in ['unknown','unavailable'] %}
          {{ state_attr('sensor.' ~ player.split('.')[1],'entity_id') if is_state_attr(player,'type','group') else [player] }}
          {% endif %}
