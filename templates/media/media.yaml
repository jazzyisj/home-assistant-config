###################################################################################################
## Templates - Media
###################################################################################################
- switch:
    ###################################################################################################
    ## Switch - Media Mute
    ###################################################################################################
    - name: "Media Mute"
      unique_id: media_mute
      icon: mdi:volume-off
      turn_on:
        - action: script.media_players_mute
          data:
            mute: true
      turn_off:
        - action: script.media_players_mute
          data:
            mute: false

    ###################################################################################################
    ## Switch - Shuffle Mode
    ###################################################################################################
    - name: "Shuffle Mode"
      unique_id: shuffle_mode
      icon: mdi:shuffle
      turn_on:
        - variables:
            media_players: >
              {% set shuffle = namespace(entity_id=[]) %}
              {% for item in expand('group.media_players') %}
                {% if item.attributes.supported_features | bitwise_and(32768) %}
                  {% set shuffle.entity_id = shuffle.entity_id + [item.entity_id] %}
                {% endif %}
              {% endfor %}
              {{ shuffle.entity_id }}

        - if: "{{ media_players | count > 0 }}"
          then:
            - action: media_player.shuffle_set
              target:
                entity_id: "{{ media_players }}"
              data:
                shuffle: true

        - action: browser_mod.notification
          data:
            duration: 10000
            message: "Global media player shuffle turned on."
      turn_off:
        - variables:
            media_players: >
              {% set shuffle = namespace(entity_id=[]) %}
              {% for item in expand('group.media_players') %}
                {% if item.attributes.supported_features | bitwise_and(32768) %}
                  {% set shuffle.entity_id = shuffle.entity_id + [item.entity_id] %}
                {% endif %}
              {% endfor %}
              {{ shuffle.entity_id }}

        - if: "{{ media_players | count > 0 }}"
          then:
            - action: media_player.shuffle_set
              target:
                entity_id: "{{ media_players }}"
              data:
                shuffle: false

        - action: browser_mod.notification
          data:
            duration: 10000
            message: "Global media player shuffle turned off."

- binary_sensor:
    - name: "Media"
      unique_id: media
      icon: mdi:monitor-speaker
      device_class: power
      delay_off: 5 # avoid changing cards in ui between tracks
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ entities | count > 0 if entities != none else false }}
      attributes:
        entity_id: >
          {{ expand('group.media_players')
              | rejectattr('state', 'in', ['off', 'idle', 'standby', 'unknown', 'unavailable'])
              | map(attribute='entity_id') | sort }}

    - name: "Speaker"
      unique_id: speaker
      icon: mdi:music-circle
      device_class: power
      state: >
        {% set entities = state_attr(this.entity_id, 'entity_id') %}
        {{ ((entities | count > 0 if entities != none else false)
              and is_state('input_boolean.tts', 'off'))
              or is_state('input_boolean.resume_media', 'on') }}
      attributes:
        entity_id: >
          {{ expand('group.speaker_media_players')
              | rejectattr('state', 'in', ['off', 'idle', 'standby', 'unknown', 'unavailable'])
              | map(attribute='entity_id') | sort }}

    - name: "Media LED Alert"
      unique_id: media_led_alert
      state: >
        {{ is_state('switch.media_mute', 'on')
            or states('sensor.tts_saved_messages') | int(0) > 0
            or is_state('binary_sensor.scene_active', 'on') }}

- sensor:
    - name: "Media Light Color"
      unique_id: media_light_color
      state: >
        {% if is_state('input_boolean.media_color_light_sync', 'on') %}
            {% if is_state('light.dining_room_light_rgb', 'on') %}
              rgb{{ state_attr('light.dining_room_light_rgb', 'rgb_color') }}
            {% else %} var(--state-icon-color)
            {% endif %}
        {% else %} var(--state-icon-color)
        {% endif %}
