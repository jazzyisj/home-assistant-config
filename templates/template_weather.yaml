- binary_sensor:
    - name: "Pollen Connected"
      unique_id: pollen_connected
      icon: "{{ 'mdi:flower' if is_state('binary_sensor.pollen_connected','on') else 'mdi:alert-circle' }}"
      device_class: connectivity
      state: >
        {{ not states('sensor.allergy_index_today')|lower in ['unknown','unavailable','none']
            and not states('sensor.asthma_index_today')|lower in ['unknown','unavailable','none'] }}

    - name: "Pollen Connected Alert"
      unique_id: pollen_connected_alert
      icon: mdi:flower
      state: >
        {{ is_state('binary_sensor.pollen_connected','off')
            and is_state('input_boolean.system_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "OpenUV Connected"
      unique_id: openuv_connected
      icon: "{{ 'mdi:weather-sunny-alert' if is_state('binary_sensor.openuv_connected','on') else 'mdi:alert-circle' }}"
      device_class: connectivity
      state: "{{ not states('sensor.current_uv_index')|lower in ['unknown','unavailable','none'] }}"

    - name: "OpenUV Connected Alert"
      unique_id: openuv_connected_alert
      icon: mdi:weather-sunny-alert
      state: >
        {{ is_state('binary_sensor.openuv_connected','off')
            and is_state('input_boolean.system_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - name: "WAQI Connected"
      unique_id: waqi_connected
      icon: "{{ 'mdi:smog' if is_state('binary_sensor.waqi_connected','on') else 'mdi:alert-circle' }}"
      device_class: connectivity
      state: "{{ not states('sensor.waqi_windsor')|lower in ['unknown','unavailable','none'] }}"

    - name: "WAQI Connected Alert"
      unique_id: waqi_connected_alert
      icon: mdi:smog
      state: >
        {{ is_state('binary_sensor.waqi_connected','off')
            and is_state('input_boolean.system_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: weather_alert_active
      state: >
        {{ is_state('binary_sensor.noaa_weather_alert','on')
            or is_state('binary_sensor.envcan_weather_alert','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: air_quality_alert
      state: >
        {{ states('sensor.uv_index')|int > 100
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: uv_risk_alert
      state: "{{ states('sensor.max_uv_index')|int > 6 and is_state('input_boolean.weather_alerts','on') }}"

    - unique_id: weather_led_alert
      state: >
        {{ is_state('binary_sensor.envcan_weather_alert','on')
            or is_state('binary_sensor.noaa_weather_alert','on')
            or is_state('binary_sensor.outdoor_low_temperature_alert','on')
            or is_state('binary_sensor.outdoor_high_temperature_alert','on')
            or is_state('binary_sensor.storm_approaching_alert','on') }}

    - unique_id: outdoor_high_temperature_alert
      state: >
        {{ states('sensor.outdoor_apparent_temperature')|int > states('input_number.outdoor_high_temperature_threshold')|int
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}
      availability: > # just to be consistent
        {{ states('sensor.outdoor_apparent_temperature')|lower not in ['unknown','unavailable','none'] }}

    - unique_id: outdoor_low_temperature_alert
      state: >
        {{ states('sensor.outdoor_apparent_temperature')|int < states('input_number.outdoor_low_temperature_threshold')|int
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}
      availability: > # req unknown|int = 0
        {{ states('sensor.outdoor_apparent_temperature')|lower not in ['unknown','unavailable','none'] }}

    - name: "Outdoor Temperature Alert"
      unique_id: outdoor_temperature_alert # for weather card
      icon: >
        {% if is_state('binary_sensor.outdoor_high_temperature_alert','on') %} mdi:thermometer-alert
        {% elif is_state('binary_sensor.outdoor_low_temperature_alert','on') %} mdi:thermometer-alert
        {% else %} mdi:thermometer
        {% endif %}
      state: >
        {{ is_state('binary_sensor.outdoor_high_temperature_alert','on')
            or is_state('binary_sensor.outdoor_low_temperature_alert','on') }}
      attributes:
        type: >
          {% if is_state('binary_sensor.outdoor_high_temperature_alert','on') %} Heat
          {% elif is_state('binary_sensor.outdoor_low_temperature_alert','on') %} Cold
          {% else %} Off
          {% endif %}

    #IDEA wind alert

    - unique_id: asthma_risk_alert
      state: >
        {{ is_state('sensor.asthma_risk_today','High')
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: allergy_risk_alert
      state: >
        {{ is_state('sensor.allergy_risk_today','High')
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: flu_risk_alert
      state: > # No Data, Minimal, Low, Moderate, High, None
        {{ (states('sensor.cold_flu_index_today')|float > 4.9
            or states('sensor.cold_flu_forecasted_average')|float > 4.9)
              and is_state('input_boolean.weather_alerts','on')
              and is_state('input_boolean.startup_pending','off') }}

    - unique_id: storm_approaching_alert #DARKSKY
      icon: mdi:weather-lightning-rainy
      state: >
        {{ states('sensor.precipitation_probability')|int >= 40
            and states('sensor.nearest_storm_distance')|int < 5
            and not states('sensor.nearest_storm_distance')|lower in ['unknown','unavailable','none']
            and is_state('input_boolean.weather_alerts','on')
            and is_state('input_boolean.startup_pending','off') }}

    - unique_id: tornado_alert
      icon: mdi:weather-hurricane
      device_class: safety
      state: >
        {{ 'tornado' in states('sensor.envcan_warnings')|lower
            or (is_state_attr('binary_sensor.noaa_weather_alert','condition','tornado')
              and state_attr('binary_sensor.noaa_weather_alert','severity') in ['severe','extreme']) }}

    - name: "Rain Today"
      unique_id: rain_today
      icon: mdi:weather-pouring
      state: >
        {% set threshold = 24 %}
        {% set forecast = state_attr('weather.kdtw_hourly','forecast') %}
        {{ forecast[0].precipitation_probability|int > threshold
          or forecast[1].precipitation_probability| int > threshold
          or forecast[2].precipitation_probability| int > threshold
          or forecast[3].precipitation_probability| int > threshold
          or forecast[4].precipitation_probability| int > threshold
          or forecast[5].precipitation_probability| int > threshold
          or forecast[6].precipitation_probability| int > threshold
          or forecast[7].precipitation_probability| int > threshold
          or forecast[8].precipitation_probability| int > threshold
          or forecast[9].precipitation_probability| int > threshold
          or forecast[10].precipitation_probability| int > threshold }}
      availability: "{{ state_attr('weather.kdtw_hourly','forecast')|lower not in ['unknown','unavailable','none'] }}"

- sensor:
    - name: "Temperature Trend"
      unique_id: temperature_trend # for weather card
      icon: >
        {% if is_state('binary_sensor.temperature_rising','on') %} mdi:arrow-up-circle
        {% elif is_state('binary_sensor.temperature_falling','on') %} mdi:arrow-down-circle
        {% else %} mdi:minus-circle
        {% endif %}
      state: >
        {% if is_state('binary_sensor.temperature_rising','on') %} Rising
        {% elif is_state('binary_sensor.temperature_falling','on') %} Falling
        {% else %} Steady
        {% endif %}

    - name: "Pressure Trend"
      unique_id: pressure_trend # for weather card
      icon: >
        {% if is_state('binary_sensor.pressure_rising','on') %} mdi:arrow-up-circle
        {% elif is_state('binary_sensor.pressure_falling','on') %} mdi:arrow-down-circle
        {% else %} mdi:minus-circle
        {% endif %}
      state: >
        {% if is_state('binary_sensor.pressure_rising','on') %} Rising
        {% elif is_state('binary_sensor.pressure_falling','on') %} Falling
        {% else %} Steady
        {% endif %}

    - unique_id: outdoor_temperature_daily_max  #INFLUXDB
      state: "{{ state_attr('sensor.outdoor_temperature_daily','max_value') }}"

    - unique_id: outdoor_temperature_daily_min # INFLUXDB
      state: "{{ state_attr('sensor.outdoor_temperature_daily','max_value') }}"

    - unique_id: nws_precipitation_probability
      state_class: measurement
      unit_of_measurement: '%'
      state: "{{ state_attr('weather.kdtw_daynight','forecast')[0].precipitation_probability|int }}"
      availability: "{{ state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] }}"

    - name: "Moon Phases"
      unique_id: moon_phases
      picture: >
        {% if is_state('sensor.moon','new_moon') %} /local/images/moon_phases/new_moon.jpg
        {% elif is_state('sensor.moon','waxing_crescent') %} /local/images/moon_phases/waxing_crescent.jpg
        {% elif is_state('sensor.moon','first_quarter') %} /local/images/moon_phases/first_quarter.jpg
        {% elif is_state('sensor.moon','waxing_gibbous') %} /local/images/moon_phases/waxing_gibbous.jpg
        {% elif is_state('sensor.moon','full_moon') %} /local/images/moon_phases/full_moon.jpg
        {% elif is_state('sensor.moon','waning_gibbous') %} /local/images/moon_phases/waning_gibbous.jpg
        {% elif is_state('sensor.moon','last_quarter') %} /local/images/moon_phases/last_quarter.jpg
        {% elif is_state('sensor.moon','waning_crescent') %} /local/images/moon_phases/waning_crescent.jpg
        {% endif %}
      state: "{{ states('sensor.moon')|replace('_',' ')|title }}"

    - name: "Allergy Risk Today" # https://www.home-assistant.io/integrations/iqvia/
      unique_id: allergy_risk_today
      icon: mdi:flower
      state: >
        {% set level = states('sensor.allergy_index_today')|float %}
        {% if level < 2.5 %} Low
        {% elif level < 4.9 %} Low-Medium
        {% elif level < 7.3 %} Medium
        {% elif level < 9.7 %} Medium-High
        {% else %} High
        {% endif %}
      availability: >
        {{ is_state('binary_sensor.pollen_connected','on')
          and not states('sensor.allergy_index_today')|lower in ['unknown','unavailable','none'] }}

    - name: "Allergy Risk Tomorrow"
      unique_id: allergy_risk_tomorrow
      icon: mdi:flower
      state: >
        {% set level = states('sensor.allergy_index_tomorrow')|float %}
        {% if level < 2.5 %} Low
        {% elif level < 4.9 %} Low-Medium
        {% elif level < 7.3 %} Medium
        {% elif level < 9.7 %} Medium-High
        {% else %} High
        {% endif %}
      availability: >
        {{ is_state('binary_sensor.pollen_connected','on')
          and not states('sensor.allergy_index_tomorrow')|lower in ['unknown','unavailable','none'] }}

    - name: "Asthma Risk Today"
      unique_id: asthma_risk_today
      icon: mdi:lungs
      state: >
        {% set level = states('sensor.asthma_index_today')|float %}
        {% if level < 2.5 %} Low
        {% elif level < 4.9 %} Low-Medium
        {% elif level < 7.3 %} Medium
        {% elif level < 9.7 %} Medium-High
        {% else %} High
        {% endif %}
      availability: >
        {{ is_state('binary_sensor.pollen_connected','on')
          and not states('sensor.asthma_index_today')|lower in ['unknown','unavailable','none'] }}

    - name: "Asthma Risk Tomorrow"
      unique_id: asthma_risk_tomorrow
      icon: mdi:lungs
      state: >
        {% set level = states('sensor.asthma_index_tomorrow')|float %}
        {% if level < 2.5 %} Low
        {% elif level < 4.9 %} Low-Medium
        {% elif level < 7.3 %} Medium
        {% elif level < 9.7 %} Medium-High
        {% else %} High
        {% endif %}
      availability: >
        {{ is_state('binary_sensor.pollen_connected','on')
          and not states('sensor.asthma_index_tomorrow')|lower in ['unknown','unavailable','none'] }}

    - name: "UV Risk Today"
      unique_id: uv_risk_today # https://www.openuv.io/uvindex
      icon: mdi:weather-sunny
      state: >
        {% set level = states('sensor.max_uv_index')|int %}
        {% if level < 3 %} Low
        {% elif level < 7 %} Moderate
        {% elif level < 9 %} High
        {% else %} Very High
        {% endif %}
      availability: >
        {{ is_state('binary_sensor.openuv_connected','on')
            and not states('sensor.max_uv_index')|lower in ['unknown','unavailable','none'] }}

    - name: "AQI Risk Level"
      unique_id: aqi_risk_level
      icon: mdi:smog
      state: >
        {% set level = states('sensor.air_quality_index')|int %}
        {% if level < 51 %} Good
        {% elif level < 101 %} Moderate
        {% elif level < 101 %} Unhealthy Sensitive Groups
        {% elif level < 201 %} Unhealthy
        {% elif level < 301 %} Very Unhealthy
        {% else %} Hazardous
        {% endif %}
      availability: "{{ not states('sensor.air_quality_index')|lower in ['unknown','unavailable','none'] }}"

    - name: "Flu Risk Level"
      unique_id: flu_risk_level
      icon: mdi:virus
      state: >
        {% set level = states('sensor.cold_flu_index_today')|int %}
        {% if level < 2.5 %} Low
        {% elif level < 4.9 %} Low-Medium
        {% elif level < 7.3 %} Medium
        {% elif level < 9.7 %} Medium-High
        {% else %} High
        {% endif %}

# --weather-icon-clear-night
# --weather-icon-cloudy
# --weather-icon-fog
# --weather-icon-lightning
# --weather-icon-lightning-rainy
# --weather-icon-partlycloudy
# --weather-icon-pouring
# --weather-icon-rainy
# --weather-icon-hail
# --weather-icon-snowy
# --weather-icon-snowy-rainy
# --weather-icon-sunny
# --weather-icon-windy
# --weather-icon-windy-variant
# --weather-icon-exceptional

#IDEA add icons for extra #ENVCAN conditions

    # envcan, nws, accuweather, darksky, climacell
    - name: "Current Condition"
      unique_id: current_condition #DARKSKY
      icon: mdi:weather-partly-rainy
      state: >
        {% if states('sensor.envcan_condition')|lower not in ['unknown','unavailable','none'] %}
          {% set condition = states('sensor.envcan_condition') %}
        {% elif states('weather.kdtw_hourly')|lower not in ['unknown','unavailable','none'] %}
          {% set condition = states('weather.kdtw_hourly') %}
        {% elif states('weather.home')|lower not in ['unknown','unavailable','none'] %}
          {% set condition = states('weather.home') %}
        {% elif states('sensor.dark_sky_icon')|lower not in ['unknown','unavailable','none'] %}
          {% set condition = states('sensor.dark_sky_icon') %}
        {% elif states('weather.climacell_nowcast')|lower not in ['unknown','unavailable','none'] %}
          {% set condition = states('weather.climacell_nowcast') %}
        {% endif %}
        {% if condition|lower == 'clear' and is_state('sensor.day_night','Day') %} sunny
        {% elif condition|lower == 'clear' and is_state('sensor.day_night','Night') %} clear-night
        {% elif condition|lower == 'mainly clear' %} sunny
        {% elif condition|lower == 'mainly sunny' %} sunny
        {% elif condition|lower == 'mist' %} fog
        {% elif condition|lower == 'haze' %} partlycloudy
        {% elif condition|lower == 'partly cloudy' %} partlycloudy
        {% elif condition|lower == 'mostly cloudy' %} cloudy
        {% elif condition|lower == 'light rain' %} rainy
        {% elif condition|lower == 'rain' %} rainy
        {% elif condition|lower == 'heavy rain' %} pouring


        {% elif condition|lower == 'clear-day' %} sunny
        {% elif condition|lower == 'partly-cloudy-day' %} partlycloudy
        {% elif condition|lower == 'partly-cloudy-night' %} partlycloudy
        {% elif condition|lower == 'wind' %} windy
        {% else %} {{ condition|lower }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_condition')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('weather.kdtw_hourly')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('weather.home')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.dark_sky_icon')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('weather.climacell_nowcast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_condition')|lower not in ['unknown','unavailable','none']
          or states('weather.kdtw_hourly')|lower not in ['unknown','unavailable','none']
          or states('weather.home')|lower not in ['unknown','unavailable','none']
          or states('sensor.dark_sky_icon')|lower not in ['unknown','unavailable','none']
          or states('weather.climacell_nowcast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, climacell
    - name: "Outdoor Temperature"
      unique_id: outdoor_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if states('sensor.envcan_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_temperature')|float }}
        {% elif states('sensor.kdtw_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_temperature')|float }}
        {% elif state_attr('weather.home','temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','temperature')|float }}
        {% elif states('sensor.climacell_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_temperature')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_temperature')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.kdtw_temperature')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.home','temperature')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.climacell_temperature')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_temperature')|lower not in ['unknown','unavailable','none']
          or states('sensor.kdtw_temperature')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.home','temperature')|lower not in ['unknown','unavailable','none']
          or states('sensor.climacell_temperature')|lower not in ['unknown','unavailable','none'] }}

      #NOTE availability required for template weather sensors for apex graphs - fill_raw: last

    # accuweather, nws, envcan, climacell
    - name: "Outdoor Apparent Temperature"
      unique_id: outdoor_apparent_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if states('sensor.home_apparent_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_apparent_temperature')|float }}
        {% elif states('sensor.home_realfeel_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_realfeel_temperature')|float }}
        {% elif states('sensor.kdtw_heat_index')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_heat_index')|float }}
        {% elif states('sensor.kdtw_wind_chill')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_wind_chill')|float }}
        {% elif states('sensor.envcan_humidex')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_humidex')|float }}
        {% elif states('sensor.envcan_wind_chill')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_wind_chill')|float }}
        {% elif states('sensor.climacell_feels_like')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_feels_like')|float }}
        {% else %}
          {{ states('sensor.outdoor_temperature')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.home_apparent_temperature')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_realfeel_temperature')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.kdtw_heat_index')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_wind_chill')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('sensor.envcan_humidex')|lower not in ['unknown','unavailable','none']
            or states('sensor.envcan_wind_chill')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.climacell_feels_like')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% else %} Temperature Sensor
          {% endif %}

    # envcan, nws, accuweather, climacell
    - name: "Outdoor High Temperature"
      unique_id: outdoor_high_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if states('sensor.envcan_high_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_high_temperature')|float }}
        {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.kdtw_daynight','forecast')[0].temperature|float }}
        {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','forecast')[0].temperature|float }}
        {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'].temperature|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_low_temperature')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_low_temperature')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, climacell
    - name: "Outdoor Low Temperature"
      unique_id: outdoor_low_temperature
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: > # state_attr('weather.kdtw_daynight','forecast')[1] is overnight low
        {% if states('sensor.envcan_low_temperature')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_low_temperature')|float }}
        {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.kdtw_daynight','forecast')[1].temperature|float }}
        {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','forecast')[0].templow|float }}
        {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'].templow|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_low_temperature')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_low_temperature')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none']
          or state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, climacell
    - name: "Dew Point"
      unique_id: dew_point
      device_class: temperature
      state_class: measurement
      unit_of_measurement: °C
      state: >
        {% if states('sensor.envcan_dewpoint')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_humidex')|float }}
        {% elif states('sensor.kdtw_dew_point')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_dew_point')|float }}
        {% elif states('sensor.home_dew_point')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_dew_point')|float }}
        {% elif states('sensor.climacell_dew_point')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_dew_point')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_dewpoint')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.kdtw_dew_point')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('sensor.home_dew_point')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.climacell_dew_point')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_dewpoint')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_dew_point')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_dew_point')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_dew_point')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, darksky, climacell
    - name: "Outdoor Humidity"
      unique_id: outdoor_humidity #DARKSKY
      device_class: humidity
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if states('sensor.envcan_humidity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_humidity')|int }}
        {% elif states('sensor.kdtw_relative_humidity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_relative_humidity')|int }}
        {% elif state_attr('weather.home','humidity')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','humidity')|int }}
        {% elif states('sensor.dark_sky_humidity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_humidity')|int }}
        {% elif states('sensor.climacell_humidity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_humidity')|int }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_humidity')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.kdtw_relative_humidity')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.home','humidity')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.dark_sky_humidity')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.climacell_humidity')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_humidity')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_relative_humidity')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.home','humidity')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_humidity')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_humidity')|lower not in ['unknown','unavailable','none'] }}

    - name: "Outdoor Humidity Today"
      unique_id: outdoor_humidity_today #DARKSKY
      device_class: humidity
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if states('sensor.dark_sky_humidity_0d')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_humidity_0d')|int }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.dark_sky_humidity_0d')|lower not in ['unknown','unavailable','none'] %} Dark Sky
            {{ states('sensor.dark_sky_humidity_0d')|int }}
          {% endif %}
      availability: >
        {{ states('sensor.dark_sky_humidity_0d')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, darksky, climacell
    - name: "Precipitation Probability"
      unique_id: precipitation_probability #DARKSKY
      icon: mdi:weather-rainy
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if states('sensor.envcan_chance_of_precip')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_chance_of_precip')|int }}
        {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.kdtw_daynight','forecast')[0].precipitation_probability|int }}
        {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','forecast')[0].precipitation_probability|int }}
        {% elif states('sensor.dark_sky_precip_probability')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_precip_probability')|int }}
        {% elif state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_nowcast','forecast')[0].precipitation_probability|int }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_chance_of_precip')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %} NWS
          {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.dark_sky_precip_probability')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_chance_of_precip')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_precip_probability')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, darksky, climacell
    - name: "Precipitation Probability Today"
      unique_id: precipitation_probability_today #DARKSKY
      icon: mdi:weather-rainy
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.envcan_daily','forecast')[0].precipitation_probability|int }}
        {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.kdtw_daynight','forecast')[0].precipitation_probability|int }}
        {% elif states('sensor.dark_sky_precip_probability_0d')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_precip_probability_0d')|int }}
        {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','forecast')[0].precipitation_probability|int }}
        {% elif state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_nowcast','forecast')[0].precipitation_probability|int }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %} NWS
          {% elif states('sensor.dark_sky_precip_probability_0d')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_precip_probability_0d')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.home','forecast')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.climacell_nowcast','forecast')|lower not in ['unknown','unavailable','none'] }}

    # darksky, climacell
    - name: "Precipitation Intensity"
      unique_id: precipitation_intensity #DARKSKY
      icon: mdi:weather-pouring
      state_class: measurement
      unit_of_measurement: mm/hr
      state: >
        {% if states('sensor.dark_sky_precip_intensity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_precip_intensity')|float }}
        {% elif states('sensor.climacell_precipitation_intensity')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_precipitation_intensity')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.dark_sky_precip_intensity')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.climacell_precipitation_intensity')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.dark_sky_precip_intensity')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_precipitation_intensity')|lower not in ['unknown','unavailable','none'] }}

    # envcan, accuweather
    - name: "Precipitation Yesterday - Rain"
      unique_id: precipitation_yesterday_rain
      icon: mdi:weather-pouring
      state_class: measurement
      unit_of_measurement: mm
      state: > # must return a number for statistics
        {% if states('sensor.sensor.envcan_precipitation_yesterday')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.sensor.envcan_precipitation_yesterday')|float }}
        {% elif states('sensor.home_precipitation')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_precipitation')|float }}
        {% else %}
          0
        {% endif %}
      attributes:
        provider: > # must return a number for statistics
          {% if states('sensor.envcan_precipitation_yesterday')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.home_precipitation')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% else %} default value
          {% endif %}
      # availability: >  #TODO error can't be unavailabe, stats
      #   {{ states('sensor.envcan_precipitation_yesterday')|lower not in ['unknown','unavailable','none']
      #       or states('sensor.home_precipitation')|lower not in ['unknown','unavailable','none'] }}

    # darksky, climacell
    - name: "Precipitation Yesteray - Snow"
      unique_id: precipitation_yesterday_snow #TEMP state
      icon: mdi:weather-snowy-heavy
      state_class: measurement
      unit_of_measurement: cm
      state: 0
      attributes:
        provider: ''
      availability: "{{ true }}"

    - name: "Precipitation Type"
      unique_id: precipitation_type #DARKSKY
      icon: mdi:weather-rainy
      state: >
        {% if states('sensor.dark_sky_precip')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_precip') }}
        {% elif states('sensor.climacell_precipitation_type')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_precipitation_type') }}
        {% else %}
          {{ 'rain' if states('sensor.outdoor_temperature')|int > 0 else 'snow' }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.dark_sky_precip')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.climacell_precipitation_type')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% else %} Outdoor Temperature
          {% endif %}

    # darksky
    - name: "Nearest Storm Bearing"
      unique_id: nearest_storm_bearing #DARKSKY
      state: "{{ states('sensor.dark_sky_nearest_storm_bearing')|float }}"
      state_class: measurement
      unit_of_measurement: '°'
      attributes:
        provider: Dark Sky
      availability: "{{ states('sensor.dark_sky_nearest_storm_bearing')|lower not in ['unknown','unavailable','none'] }}"

    # darksky
    - name: "Nearest Storm Distance"
      unique_id: nearest_storm_distance #DARKSKY
      state: "{{ states('sensor.dark_sky_nearest_storm_distance')|int }}"
      state_class: measurement
      unit_of_measurement: km
      attributes:
        provider: Dark Sky
      availability: "{{ states('sensor.dark_sky_nearest_storm_distance')|lower not in ['unknown','unavailable','none'] }}"

    - unique_id: storm_full_direction #NAME
      state: >
        {% set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
            'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
            'West-Northwest','Northwest','North-Northwest','North'] %}
        {{ directions[((states('sensor.nearest_storm_bearing')|float/360)|float*16)|round] }}
      attributes:
        provider: "{{ state_attr('sensor.nearest_storm_bearing','provider') }}"
      availability: >
        {{ states('sensor.nearest_storm_bearing')|lower not in ['unknown','unavailable','none'] }}

    # envcan, accuweather, nws, climacell
    - name: "Barometric Pressure"
      unique_id: barometric_pressure
      device_class: pressure
      state_class: measurement
      unit_of_measurement: hPa # unit conversion - nws: pa-> hpa, envcan kPa -> hPa
      state: >
        {% if states('sensor.envcan_pressure')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_pressure')|float * 10 }}
        {% elif state_attr('weather.home','pressure')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','pressure')|float }}
        {% elif states('sensor.kdtw_barometric_pressure')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_barometric_pressure')|float/100 }}
        {% elif state_attr('weather.climacell_hourly','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_hourly','forecast')[0].pressure|float }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.home','pressure')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.envcan_pressure')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.kdtw_sea_level_pressure')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.climacell_hourly','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ state_attr('weather.home','pressure')|lower not in ['unknown','unavailable','none']
            or states('sensor.envcan_pressure')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_sea_level_pressure')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.climacell_hourly','forecast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, accuweather, nws, climacell
    - name: "Wind Speed"
      unique_id: wind_speed
      icon: mdi:weather-windy
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_wind_speed')|float }}
        {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_wind')|float }}
        {% elif states('sensor.kdtw_wind_speed')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_wind_speed')|float }}
        {% elif states('sensor.climacell_wind_speed')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_wind_speed')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.kdtw_wind_speed')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('sensor.climacell_wind_speed')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_wind')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_wind_speed')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_wind_speed')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, climacell
    - name: "Wind Speed Today"
      unique_id: wind_speed_today
      icon: mdi:weather-windy
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.envcan_daily','forecast')[0].wind_speed|int }}
        {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.kdtw_daynight','forecast')[0].wind_speed|int }}
        {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %}
          {% set day = states('sensor.home_wind_day_0d')|int %}
          {% set night = states('sensor.home_wind_night_0d')|int %}
          {{ [day,night]|max }}
        {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.climacell_daily','forecast')[0].wind_speed|int }}
        {% endif %}
      attributes:
        provider: >
          {% if state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none'] %} NWS
          {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ state_attr('weather.envcan_daily','forecast')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.kdtw_daynight','forecast')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_wind')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.climacell_daily','forecast')|lower not in ['unknown','unavailable','none'] }}

    # envcan, accuweather, nws, darksky, climacell
    - name: "Wind Gust"
      unique_id: wind_gust # DARK SKY
      icon: mdi:weather-windy
      state_class: measurement
      unit_of_measurement: km/h
      state: > # envcan gust = unavailable if gust == speed -> use envcan wind_speed
        {% if states('sensor.envcan_wind_gust')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_wind_gust')|float }}
        {% elif not states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_wind_speed')|float }}
        {% elif states('sensor.home_wind_gust')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_wind_gust')|float }}
        {% elif states('sensor.kdtw_wind_gust')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_wind_gust')|float }}
        {% elif states('sensor.dark_sky_wind_gust')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_wind_gust')|float }}
        {% elif states('sensor.climacell_wind_gust')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_wind_gust')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_wind_gust')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.home_wind_gust')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.kdtw_wind_gust')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('sensor.dark_sky_wind_gust')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.climacell_wind_gust')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_wind_gust')|lower not in ['unknown','unavailable','none']
            or states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_wind_gust')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_wind_gust')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_wind_gust')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_wind_gust')|lower not in ['unknown','unavailable','none'] }}

    # darksky, accuweather
    - name: "Wind Gust Today"
      unique_id: wind_gust_today #DARKSKY
      icon: mdi:weather-windy
      state_class: measurement
      unit_of_measurement: km/h
      state: >
        {% if states('sensor.dark_sky_wind_gust_0d')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_wind_gust_0d')|int }}
        {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %}
          {% set day = states('sensor.home_wind_gust_day_0d')|int %}
          {% set night = states('sensor.home_wind_gust_night_0d')|int %}
          {{ [day,night]|max }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.dark_sky_wind_gust_0d')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.home_wind')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% endif %}
      availability: >
        {{ states('sensor.envcan_wind_speed')|lower not in ['unknown','unavailable','none']
            or states('sensor.home_wind_gust_day_0d')|lower not in ['unknown','unavailable','none'] }}

    # envcan, nws, accuweather, climacell
    - name: "Wind Bearing"
      unique_id: wind_bearing
      icon: mdi:compass
      state_class: measurement
      unit_of_measurement: °
      state: >
        {% if states('sensor.envcan_wind_bearing')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_wind_bearing')|float }}
        {% elif states('sensor.kdtw_wind_direction')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_wind_direction')|float }}
        {% elif state_attr('weather.home','wind_bearing')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','wind_bearing')|float }}
        {% elif states('sensor.climacell_wind_bearing')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_wind_bearing')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_wind_bearing')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif states('sensor.kdtw_wind_direction')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif state_attr('weather.home','wind_bearing')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.climacell_wind_bearing')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_wind_bearing')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_wind_direction')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.home','wind_bearing')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_wind_bearing')|lower not in ['unknown','unavailable','none'] }}

    - name: "Wind Direction"
      unique_id: wind_direction
      icon: mdi:compass
      state: >
        {% set directions = ['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW','N'] %}
        {{ directions[((states('sensor.wind_bearing')|float/360)|float*16)|round] }}
      attributes:
        provider: "{{ state_attr('sensor.wind_bearing','provider') }}"
      availability: "{{ states('sensor.wind_bearing')|lower not in ['unknown','unavailable','none'] }}"

    - unique_id: wind_condition_verbose
      state: >
        {% set directions = ['North','North-Northeast','Northeast','East-Northeast','East','East-Southeast',
            'Southeast','South-Southeast','South','South-Southwest','Southwest','West-Southwest','West',
            'West-Northwest','Northwest','North-Northwest','North'] %}
        {{ states('sensor.wind_gust')|int }} kilometers per hour from the
        {{ directions[((states('sensor.wind_bearing')|float/360)|float*16)|round] }}
      attributes:
        provider: "{{ state_attr('sensor.wind_bearing','provider') }}"
      availability: >
        {{ states('sensor.wind_gust')|lower not in ['unknown','unavailable','none']
             and states('sensor.wind_bearing')|lower not in ['unknown','unavailable','none'] }}

    # accuweather, darksky, climacell
    - name: "Cloud Cover"
      unique_id: cloud_cover
      icon: mdi:cloud
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if states('sensor.home_cloud_cover')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.home_cloud_cover')|int }}
        {% elif states('sensor.dark_sky_cloud_coverage')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_cloud_coverage')|int }}
        {% elif states('sensor.climacell_cloud_cover')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_cloud_cover')|int }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.home_cloud_cover')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.dark_sky_cloud_coverage')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% elif states('sensor.climacell_cloud_cover')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.home_cloud_cover')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_cloud_coverage')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_cloud_cover')|lower not in ['unknown','unavailable','none'] }}

    # accuweather, darksky
    - name: "Cloud Cover Today"
      unique_id: cloud_cover_today
      icon: mdi:cloud
      state_class: measurement
      unit_of_measurement: '%'
      state: >
        {% if states('sensor.home_cloud_cover_day_0d')|lower not in ['unknown','unavailable','none'] %}
          {% set day = states('sensor.home_cloud_cover_day_0d')|int %}
          {% set night = states('sensor.home_cloud_cover_night_0d')|int %}
          {{ [day,night]|max }}
        {% elif states('sensor.dark_sky_cloud_coverage_0d')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.dark_sky_cloud_coverage_0d')|int }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.home_cloud_cover_day_0d')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.dark_sky_cloud_coverage_0d')|lower not in ['unknown','unavailable','none'] %} Dark Sky
          {% endif %}
      availability: >
        {{ states('sensor.home_cloud_cover_day_0d')|lower not in ['unknown','unavailable','none']
            or states('sensor.dark_sky_cloud_coverage_0d')|lower not in ['unknown','unavailable','none'] }}

    # envcan, accuweather, nws, climacell
    - name: "Visibility"
      unique_id: visibility
      icon: mdi:eye
      state_class: measurement
      unit_of_measurement: km
      state: >
        {% if states('sensor.envcan_visibility')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.envcan_visibility')|float }}
        {% elif state_attr('weather.home','visibility')|lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('weather.home','visibility')|float }}
        {% elif states('sensor.kdtw_visibility')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.kdtw_visibility')|float }}
        {% elif states('sensor.climacell_visibility')|lower not in ['unknown','unavailable','none'] %}
          {{ states('sensor.climacell_visibility')|float }}
        {% endif %}
      attributes:
        provider: >
          {% if states('sensor.envcan_visibility')|lower not in ['unknown','unavailable','none'] %} Environment Canada
          {% elif state_attr('weather.home','visibility')|lower not in ['unknown','unavailable','none'] %} Accuweather
          {% elif states('sensor.kdtw_visibility')|lower not in ['unknown','unavailable','none'] %} National Weather Service
          {% elif states('sensor.climacell_visibility')|lower not in ['unknown','unavailable','none'] %} Climacell
          {% endif %}
      availability: >
        {{ states('sensor.envcan_visibility')|lower not in ['unknown','unavailable','none']
            or state_attr('weather.home','visibility')|lower not in ['unknown','unavailable','none']
            or states('sensor.kdtw_visibility')|lower not in ['unknown','unavailable','none']
            or states('sensor.climacell_visibility')|lower not in ['unknown','unavailable','none'] }}

    - name: "Air Quality Index"
      unique_id: air_quality_index
      device_class: aqi
      state_class: measurement
      unit_of_measurement: AQI
      state: "{{ states('sensor.waqi_windsor')|int }}"
      #OPTION  sensor.envcan_air_quality_health_index

    - name: "UV Index"
      unique_id: uv_index
      icon: mdi:brightness-6
      state_class: measurement
      state: "{{ states('sensor.current_uv_index')|int }}" # open uv
      #OPTION sensor.climacell_global_horizontal_irradiance ?
      #OPTION sensor.envcan_uv_index

    - name: "Ozone"
      unique_id: ozone
      device_class: ozone
      state_class: measurement
      unit_of_measurement: ppb # µg/m³
      state:  "{{ states('sensor.climacell_ozone')|float }}"
      #OPTION sensor.current_ozone_level  openuv unit: du <- pay attention
      #OPTION sensor.waqi_windsor attribute: ozone unit: AQI <- pay attention

    - name: "Carbon Monoxide"
      unique_id: carbon_monoxide
      device_class: carbon_monoxide
      state_class: measurement
      unit_of_measurement: ppm # Gas CNG/LPG
      state: "{{ states('sensor.climacell_carbon_monoxide')|float }}"
      #OPTION sensor.waqi_windsor attribute: co  unit: AQI <- pay attention

    - name: "Nitrogen Dioxide"
      unique_id: nitrogen_dioxide
      device_class: nitrogen_dioxide
      state_class: measurement
      unit_of_measurement: ppb # µg/m³
      state: "{{ states('sensor.climacell_nitrogen_dioxide')|float }}"
      #OPTION sensor.waqi_windsor attribute: nitrogen_dioxide  unit: AQI <- pay attention

    - name: "Sulphur Dioxide"
      unique_id: sulphur_dioxide
      device_class: sulphur_dioxide
      state_class: measurement
      unit_of_measurement: ppb # µg/m³
      state: "{{ states('sensor.climacell_sulfur_dioxide')|float }}"
      #OPTION sensor.waqi_windsor attribute: sulfur_dioxide   unit: AQI <- pay attention

    - name: "Particulate Matter 10"
      unique_id: particulate_matter_10
      device_class: pm10
      state_class: measurement
      unit_of_measurement: μg/m³
      state: "{{ states('sensor.climacell_particulate_matter_10_mm')|float }}"
      #OPTION sensor.waqi_windsor attribute: pm_10  unit: AQI <- pay attention

    - name: "Particulate Matter 2.5"
      unique_id: particulate_matter_2_5
      device_class: pm25
      state_class: measurement
      unit_of_measurement: μg/m³
      state: "{{ states('sensor.climacell_particulate_matter_2_5_mm')|float }}"
      #OPTION sensor.waqi_windsor attribute: pm_2_5  unit: AQI <- pay attention
