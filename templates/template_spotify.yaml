- binary_sensor:
    - unique_id: spotify_connected
      name: Spotify Connected
      icon: >
        {{ 'mdi:spotify' if not states('media_player.spotify_hassio')|lower
            in ['unknown','unavailable','none'] else 'mdi:alert-circle' }}
      device_class: connectivity
      state: "{{ states('media_player.spotify_hassio')|lower not in ['unknown','unavailable','none'] }}"

    - unique_id: spotify_connected_alert
      name: Spotify Connected Alert
      icon: mdi:spotify
      state: "{{ is_state('binary_sensor.spotify_connected','off') and is_state('input_boolean.system_alerts','on') }}"

    - unique_id: spotify_active # control spotify in UI
      state: >
       {{ is_state('input_boolean.spotify','on')
          or not is_state('sensor.spotify_media_player','off')
          or not is_state('sensor.spotify_media_player_jazzyisj','off')
          or not is_state('sensor.spotify_media_player_sherigagnon','off') }}

    - unique_id: spotify_failed
      name: Spotify Failed # separated from spotify_status to add delay and avoid false triggers
      delay_on:
        seconds: 15
      state: > # script.tts play is req because tts_playing boolean doesn't turn on until end of tts play script
        {% if is_state('input_boolean.spotify_failed','on') %} true
        {% elif is_state('input_boolean.startup_pending','on')
          or is_state('input_boolean.resume_spotify','on')
          or is_state('binary_sensor.alarm_clock_active','on')
          or is_state('script.tts_play','on')
          or is_state('input_boolean.tts_playing','on') %} false
        {% elif is_state('input_boolean.spotify','on') and is_state('sensor.spotify_status','off') %} true
        {% else %} false
        {% endif %}

- sensor:
    - unique_id: spotify_status # picture glance state
      name: Spotify Status
      icon: mdi:spotify
      state: >
        {% if is_state('binary_sensor.spotify_failed','on') %} failed
        {% elif is_state('input_boolean.spotify','on') %}
          {% if states(states('sensor.spotify_media_player')) in ['playing','paused'] %}
            {% if is_state('input_select.media_preset_type_sleep','Spotify')
                and is_state('timer.media_preset_sleep','active') %} sleep %} sleep
            {% elif is_state('input_select.media_preset_type_wake','Spotify')
                and is_state('script.scene_wake_up','on') %} wake
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        {% else %} off
        {% endif %}

    # only populated while Spotify is playing, detects spotify starting from spotcast/app etc.
    #BUG cannot use media_player.spotify_hassio source or source_list attributes - spotcast won't popuplate w/cast groups
    #ISSUE media_player.spotify_hassio can take up to 15 seconds to populate
    - unique_id: spotify_media_player # don't name entity id w/hassio - breaks media type templates
      name: Spotify Media Player
      icon: mdi:spotify
      state: > # entity_id of spotify media player (filters jason/sheri spotify players if active)
        {% set jason_spotify = [] if state_attr('sensor.spotify_media_player_jazzyisj','players')|lower == 'none'
            else state_attr('sensor.spotify_media_player_jazzyisj','players') %}
        {% set sheri_spotify = [] if state_attr('sensor.spotify_media_player_sherigagnon','players')|lower == 'none'
            else state_attr('sensor.spotify_media_player_sherigagnon','players') %}

        {% set group = expand(state_attr('sensor.media_player_groups','players'))
            |rejectattr('entity_id','in',jason_spotify)|rejectattr('entity_id','in',sheri_spotify)
            |selectattr('attributes.app_name','eq','Spotify')|map(attribute='entity_id')|join('') %}

        {% set single = expand(state_attr('sensor.media_players_single','players'))|selectattr('attributes.app_name','eq','Spotify')
            |rejectattr('entity_id','in',jason_spotify)|rejectattr('entity_id','in',sheri_spotify)|map(attribute='entity_id')|join('') %}

        {% if group != '' %}{{ group }}
        {% elif single != '' %}{{ single }}
        {% else %} off
        {% endif %}
      attributes:
        players: > # media players in spotify group
          {% set jason_spotify = [] if state_attr('sensor.spotify_media_player_jazzyisj','players')|lower == 'none'
              else state_attr('sensor.spotify_media_player_jazzyisj','players') %}
          {% set sheri_spotify = [] if state_attr('sensor.spotify_media_player_sherigagnon','players')|lower == 'none'
              else state_attr('sensor.spotify_media_player_sherigagnon','players') %}

          {% set group = expand(state_attr('sensor.media_players','players'))|selectattr('attributes.type','eq','single')
              |rejectattr('entity_id','in',jason_spotify)|rejectattr('entity_id','in',sheri_spotify)
              |selectattr('attributes.app_name','eq','Spotify')|map(attribute='entity_id')|list %}

          {% set single = expand(state_attr('sensor.media_players_single','players'))|selectattr('attributes.app_name','eq','Spotify')
              |rejectattr('entity_id','in',jason_spotify)|rejectattr('entity_id','in',sheri_spotify)|map(attribute='entity_id')|list %}

          {% if group|count > 0 %}{{ group }}
          {% else %}{{ single }}
          {% endif %}

    - unique_id: spotify_media_player_jazzyisj
      name: Spotify Media Player JazzyisJ
      icon: mdi:spotify
      state: >
        {% set player = expand(state_attr('sensor.media_players','players'))|selectattr('name','eq',state_attr('media_player.spotify_jazzyisj','source'))|map(attribute='entity_id')|list|join('') %}
        {{ player if player != '' else 'off' }}
      attributes:
         players: >
          {% set jason_spotify = expand(state_attr('sensor.media_players','players'))|selectattr('name','eq',state_attr('media_player.spotify_jazzyisj','source'))|map(attribute='entity_id')|list|join('') %}
          {% if is_state_attr(jason_spotify,'type','group') %}
            {{ expand(state_attr('sensor.media_players','players'))|selectattr('attributes.' ~ jason_spotify.split('.')[1],'eq',true)|map(attribute='entity_id')|list }}
          {% else %}{{ [jason_spotify] }}
          {% endif %}

    - unique_id: spotify_media_player_sherigagnon
      name: Spotify Media Player SheriGagnon
      icon: mdi:spotify
      state: >
        {% set player = expand(state_attr('sensor.media_players','players'))|selectattr('name','eq',state_attr('media_player.spotify_sherigagnon','source'))|map(attribute='entity_id')|list|join('') %}
        {{ player if player != '' else 'off' }}
      attributes:
         players: >
          {% set sheri_spotify = expand(state_attr('sensor.media_players','players'))|selectattr('name','eq',state_attr('media_player.spotify_sherigagnon','source'))|map(attribute='entity_id')|list|join('') %}
          {% if is_state_attr(sheri_spotify,'type','group') %}
            {{ expand(state_attr('sensor.media_players','players'))|selectattr('attributes.' ~ sheri_spotify.split('.')[1],'eq',true)|map(attribute='entity_id')|list }}
          {% else %}{{ [sheri_spotify] }}
          {% endif %}

    - unique_id: spotcast_hassio # acct name
      name: Spotcast Hassio #SPOTIFY
      icon: mdi:spotify
      state: "{{ states('media_player.spotify_hassio') }}" # get from spotify API, also use to indicate acct error?
      attributes:
        source: "{{ state_attr('media_player.spotify_hassio','source') }}" # get from spotify API, current source
        playing: "{{ states('input_select.spotify_playlist_hassio') }}"  # get from spotify API, current play selection
        playlists: |
          [
            {
              "name":"Liked From Radio",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"0rnrGv8vEW55kxi2GmjHPD"
            },
            {
              "name":"Shower Songs",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DWSqmBTGDYngZ"
            },
            {
              "name":"All Out 60s",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXaKIA8E7WcJj"
            },
            {
              "name":"All Out 80s",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX4UtSsGT1Sbe"
            },
            {
              "name":"2000s Hip Hop",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"01pNIDYGqmeawppy32wr3D"
            },
            {
              "name":"70s Road Trip",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DWWiDhnQ2IIru"
            },
            {
              "name":"I Love My 90s Hip Hop",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX186v583rmzp"
            },
            {
              "name":"Good Times Great Oldies",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXa19sXUAHiO1"
            },
            {
              "name":"AC/DC Radio",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1E4sEEhVjuqbvL"
            },
            {
              "name":"2000s Hits",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"2f6tXtN0XesjONxicAzMIw"
            },
            {
              "name":"70s Rock Anthems",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DWWwzidNQX6jx"
            },
            {
              "name":"Classic Oldies",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX56bqlsMxJYR"
            },
            {
              "name":"Have A Great Day!",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX7KNKjOK0o75"
            },
            {
              "name":"Classic Rock Workout",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DWYNSm3Z3MxiM"
            },
            {
              "name":"The Ultimate Classic House/Dance Mix (Club Hits)",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"7uu3l3ykYssiyUJAsyqtCK"
            },
            {
              "name":"Funk Outta Here",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX70TzPK5buVf"
            },
            {
              "name":"Funk & Soul Classics",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DWWvhKV4FBciw"
            },
            {
              "name":"Funk It Up",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"6kOEw0xcu5QKbN9lour0e5"
            },
            {
              "name":"Funk Rock",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX23YPJntYMnh"
            },
            {
              "name":"Blues Classics",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXd9rSDyQguIk"
            },
            {
              "name":"This Is Pink Floyd",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXaQ34lqGBfrU"
            },
            {
              "name":"Home Asssitant",
              "type":"show",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"6PeAI9SHRZhghU7NRPXvT3"
            }
          ]

    - unique_id: spotcast_jazzyisj
      name: Spotcast Jason
      icon: mdi:spotify
      state: "{{ states('media_player.spotify_jazzyisj') }}"
      attributes:
        source: "{{ state_attr('media_player.spotify_jazzyisj','source') }}"
        playing: "{{ states('input_select.spotify_playlist_jazzyisj') }}"
        playlists: |
          [
            {
              "name":"Liked From Radio",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"0rnrGv8vEW55kxi2GmjHPD"
            },
            {
              "name":"Funk Rock",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DX23YPJntYMnh"
            },
            {
              "name":"Home Asssitant",
              "type":"show",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"0rnrGv8vEW55kxi2GmjHPD"
            }
          ]

    - unique_id: spotcast_sherigagnon
      name: Spotcast Sheri
      icon: mdi:spotify
      state: "{{ states('media_player.spotify_sherigagnon') }}"
      attributes:
        source: "{{ state_attr('media_player.spotify_sherigagnon','source') }}"
        playing: "{{ states('input_select.spotify_playlist_sherigagnon') }}"
        playlists: |
          [
            {
              "name":"Blues Classics",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXd9rSDyQguIk"
            },
            {
              "name":"This Is Pink Floyd",
              "type":"playlist",
              "image":"https://i.scdn.co/image/ab67706f0000000304920365f870708dd107711e",
              "uri":"37i9dQZF1DXaQ34lqGBfrU"
            }
          ]