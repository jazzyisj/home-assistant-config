#######################################################################################################################
## Radio Package
## Inspired by https://community.home-assistant.io/t/chromecast-radio-with-station-and-player-selection
#######################################################################################################################

variable:
#######################################################################################################################
## Radio Variables
#######################################################################################################################
  active_media_player_radio:
    value: none
    attributes:
      friendly_name: "Active Radio Media Player"
      icon: mdi:radio
    restore: true

  radio_failed:
    value: 'false'
    attributes:
      friendly_name: "Radio Failed"
      icon: mdi:radio
    restore: false

  #DELETE radio_wake_source:
  #   value: 'cleared'
  #   attributes:
  #     friendly_name: "Radio Wake Source"
  #     icon: mdi:radio
  #   restore: true

  # radio_sleep_source:
  #   value: 'cleared'
  #   attributes:
  #     friendly_name: "Radio Sleep Source"
  #     icon: mdi:radio
  #   restore: true

timer:
#######################################################################################################################
## Radio Sleep Timer
#######################################################################################################################
  radio_sleep:
    name: Sleep Radio Timer
    icon: mdi:progress-clock

#######################################################################################################################
## Radio Wake Volume Timer
#######################################################################################################################
  radio_volume_wake:
    name: Wake Radio Volume Timer
    icon: mdi:progress-clock

input_boolean:
#######################################################################################################################
## Radio On
#######################################################################################################################
  radio_on:
    name: Play Radio
    icon: mdi:radio

#######################################################################################################################
## Radio Pause
#######################################################################################################################
  radio_pause:
    name: Pause Radio
    icon: mdi:pause-circle
    initial: false

#######################################################################################################################
## Override Volume Limit
#######################################################################################################################
  radio_volume_override:
    name: Override Volume Limit
    icon: mdi:volume-low
    initial: false

#######################################################################################################################
## Radio Enabled
#######################################################################################################################
  radio_enabled_wake:
    name: Wake Radio Enabled
    icon: mdi:power

  radio_enabled_morning:
    name: Morning Radio Enabled
    icon: mdi:power

  radio_enabled_sleep:
    name: Sleep Radio Enabled
    icon: mdi:power

  radio_enabled_jason:
    name: Jason Radio Enabled
    icon: mdi:power

  radio_enabled_sheri:
    name: Sheri Radio Enabled
    icon: mdi:power

  radio_enabled_shower:
    name: Shower Radio Enabled
    icon: mdi:power

  radio_enabled_company:
    name: Company Radio Enabled
    icon: mdi:power

#######################################################################################################################
## Radio Preset
#######################################################################################################################
  radio_preset_morning:
    name: Morning Radio
    icon: mdi:weather-sunny

  radio_preset_sleep:
    name: Sleep Radio
    icon: mdi:weather-night

  radio_preset_jason:
    name: Jason Radio
    icon: mdi:alpha-j-box

  radio_preset_sheri:
    name: Sheri Radio
    icon: mdi:alpha-s-box

  radio_preset_shower:
    name: Shower Radio
    icon: mdi:shower-head

  radio_preset_company:
    name: Company Radio
    icon: mdi:account-group

input_select:
#######################################################################################################################
## Media Player Radio
#######################################################################################################################
  radio_media_player:
    name: Radio Speaker
    icon: mdi:speaker-wireless
    options: &media_player_names
      !include /config/include/entities/media_player_names.yaml

  radio_media_player_wake:
    name: Wake Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_morning:
    name: Morning Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_sleep:
    name: Sleep Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_jason:
    name: Jason Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_sheri:
    name: Sheri Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_shower:
    name: Shower Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

  radio_media_player_company:
    name: Company Radio Speaker
    icon: mdi:speaker-wireless
    options: *media_player_names

#######################################################################################################################
## Streaming Radio Stations
#######################################################################################################################
  radio_station:
    name: Radio Station
    icon: mdi:radio-tower
    options: &radio_stations
      !include /config/include/entities/radio_station_names.yaml

  radio_station_morning:
    name: Morning Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

  radio_station_sleep:
    name: Sleep Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

  radio_station_jason:
    name: Jason Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

  radio_station_sheri:
    name: Sheri Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

  radio_station_shower:
    name: Shower Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

  radio_station_company:
    name: Shower Radio Station
    icon: mdi:radio-tower
    options: *radio_stations

input_number:
#######################################################################################################################
## Morning Radio Delay (minutes)
#######################################################################################################################
  radio_morning_delay:
    name: Morning Radio Delay
    icon: mdi:timer-outline
    unit_of_measurement: 'min'
    min: 0
    max: 60
    step: 1

#######################################################################################################################
## Radio Sleep Time (minutes)
#######################################################################################################################
  radio_sleep_time:
    name: Radio Sleep Time
    icon: mdi:av-timer
    unit_of_measurement: 'min'
    min: 5
    max: 120
    step: 5

#######################################################################################################################
## Radio Volume (percent)
#######################################################################################################################
  radio_volume:
    name: Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_default:
    name: Default Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_wake:
    name: Wake Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_quiet:
    name: Quiet Hours Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_sleep:
    name: Sleep Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_jason:
    name: Jason Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_sheri:
    name: Sheri Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_shower:
    name: Shower Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

  radio_volume_company:
    name: Company Radio Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min: 0
    max: 100
    step: 5

sensor:
#######################################################################################################################
## Template Sensors
#######################################################################################################################
  - platform: template
    sensors:
#######################################################################################################################
## Radio Status - used for picture glance state
#######################################################################################################################
      radio_status:
        friendly_name: Radio Status
        unique_id: radio_status
        icon_template: mdi:radio
        value_template: >
          {% if is_state('variable.radio_failed','true') %} failed
          {% elif is_state('input_boolean.radio_on','off')
               or is_state('script.radio_play','on')
               or is_state('script.radio_off','on')
               or is_state('variable.startup_complete','false')%} off
          {% elif is_state('input_boolean.radio_on','on') %}
              {% if states(states('sensor.radio_media_player')) in ['playing','paused']
                  or is_state('script.radio_on','on')
                  or is_state('script.radio_off','on')
                  or is_state('binary_sensor.alarm_clock_active','on')
                  or is_state('binary_sensor.tts_playing','on')
                  or is_state('script.tts_announcement','on') %}
                {% if is_state('input_boolean.radio_preset_sleep','on') %} sleep
                {% elif is_state('input_boolean.radio_preset_morning','on') %} morning
                {% else %} on
                {% endif %}
              {% else %} failed
              {% endif %}
          {% else %} off
          {% endif %}

#######################################################################################################################
## Radio Media Player - entity_id of selected media player
#######################################################################################################################
      radio_media_player:
        friendly_name: Radio Media Player
        unique_id: radio_media_player
        icon_template: mdi:animation-play
        value_template: >
          {{ expand('group.media_players')|selectattr('name','eq',states('input_select.radio_media_player'))|map(attribute='entity_id')|join(',') }}

script:
#######################################################################################################################
## Play Radio
#######################################################################################################################
  radio_play:
    alias: "Radio Play"
    description: "Play streaming radio station or start Spotify."
    fields:
      preset:
        description: "Radio preset name."
        example: 'Morning'
      resume:
        description: "Resume radio play."
        example: true
    mode: restart
    variables:
      player: >
        {% if preset == 'Jason' %}{{ states('input_select.radio_media_player_jason') }}
        {% elif preset == 'Sheri' %}{{ states('input_select.radio_media_player_sheri') }}
        {% elif preset == 'Shower' %}{{ states('input_select.radio_media_player_shower') }}
        {% elif preset == 'Company' %}{{ states('input_select.radio_media_player_company') }}
        {% elif preset == 'Wake' %}{{ states('input_select.radio_media_player_wake') }}
        {% elif preset == 'Morning' %}{{ states('input_select.radio_media_player_morning') }}
        {% elif preset == 'Sleep' %}{{ states('input_select.radio_media_player_sleep') }}
        {% else %}{{ states('input_select.radio_media_player') }}
        {% endif %}
      station: >
        {% if preset == 'Jason' %}{{ states('input_select.radio_station_jason') }}
        {% elif preset == 'Sheri' %}{{ states('input_select.radio_station_sheri') }}
        {% elif preset == 'Shower' %}{{ states('input_select.radio_station_shower') }}
        {% elif preset == 'Company' %}{{ states('input_select.radio_station_company') }}
        {% elif preset in ['Wake','Morning'] %}{{ states('input_select.radio_station_morning') }}
        {% elif preset == 'Sleep' %}{{ states('input_select.radio_station_sleep') }}
        {% else %}{{ states('input_select.radio_station') }}
        {% endif %}
      volume: >
        {% set qvol = states('input_number.radio_volume_quiet')|int %}
        {% if preset == 'Jason' %}{% set vol = states('input_number.radio_volume_jason')|int %}
        {% elif preset == 'Sheri' %}{% set vol = states('input_number.radio_volume_sheri')|int %}
        {% elif preset == 'Shower' %}{% set vol = states('input_number.radio_volume_shower')|int %}
        {% elif preset == 'Company' %}{% set vol = states('input_number.radio_volume_company')|int %}
        {% elif preset == 'Wake' %}{% set vol = states('input_number.radio_volume_wake')|int %}
        {% elif preset == 'Morning' %}{% set vol = states('input_number.radio_volume_default')|int %}
        {% elif preset == 'Sleep' %}{% set vol = states('input_number.radio_volume_sleep')|int %}
        {% else %}{% set vol = states('input_number.radio_volume')|int %}
        {% endif %}
        {{ qvol if is_state('binary_sensor.quiet_hours','on') and vol > qvol else vol }}
      spotify: "{{ states('input_select.radio_station')[0:7] == 'Spotify' }}"

    sequence:
      - service: variable.set_variable
        data:
          variable: radio_failed
          value: 'false'

      - wait_template: "{{ is_state('script.radio_off','off') and is_state('binary_sensor.tts_playing','off') }}"
        timeout:
          seconds: 300
        continue_on_timeout: false # something wrong, do not continue

      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity_id: input_boolean.mute_all
                    state: 'on'

                  - condition: state
                    entity_id: alarm_control_panel.house
                    state: triggered

                  - !include /config/include/template/radio_alarm_clock_active_condition.yaml

            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.radio_on

              - service: browser_mod.toast
                data:
                  duration: 30000
                  message: >
                    Radio cannot be turned on.
                    {% if is_state('input_boolean.mute_all','on') %} The system mute is on.
                    {% elif is_state('alarm_control_panel.house','triggered') %} The house alarm has been triggered.
                    {% elif is_state('binary_sensor.alarm_clock_active','on') %} There is an alarm clock playing.
                    {% else %} Try again later.
                    {% endif %}

        default:
          # turn radio power button on to keep in sync if radio_play was called by script
          - service: input_boolean.turn_on
            entity_id: input_boolean.radio_on

          # turn off radio pause boolean
          - service: input_boolean.turn_off
            entity_id: input_boolean.radio_pause

          # if morning preset make sure preset boolean is on
          - service: "{{ 'input_boolean.turn_on' if preset == 'Wake' else 'input_boolean.turn_off' }}"
            entity_id: input_boolean.radio_preset_morning

          # if sleep preset make sure  preset boolean is on
          - service: "{{ 'input_boolean.turn_on' if preset == 'Sleep' else 'input_boolean.turn_off' }}"
            entity_id: input_boolean.radio_preset_sleep

          # cancel morning volume timer if timer on and morning preset boolean is not
          - choose:
            - conditions:
                - condition: state
                  entity_id: timer.radio_volume_wake
                  state: active

                - condition: state
                  entity_id: input_boolean.radio_preset_morning
                  state: 'off'

              sequence:
                - service: timer.cancel
                  entity_id: timer.radio_volume_wake

          # cancel sleep timer if timer on and sleep preset boolean is not
          - choose:
            - conditions:
                - condition: state
                  entity_id: timer.radio_sleep
                  state: active

                - condition: state
                  entity_id: input_boolean.radio_preset_sleep
                  state: 'off'

              sequence:
                - service: timer.cancel
                  entity_id: timer.radio_sleep

          # set radio station to selected value
          - service: input_select.select_option
            data:
              entity_id: input_select.radio_station
              option: "{{ station }}"

          # set media player to selected value
          - service: input_select.select_option
            data:
              entity_id: input_select.radio_media_player
              option: "{{ player }}"

          # only set volume if not auto resumed from settings/tts/alarm clock)
          - choose:
              - conditions: "{{ not resume }}"

                sequence:
                  - service: input_number.set_value
                    data:
                      entity_id: input_number.radio_volume
                      value: "{{ volume }}"

                  - service: script.save_media_player_volumes
                    data:
                      media_player: "{{ states('sensor.radio_media_player') }}"
                      source: 'radio_on'

          # if current media player != new media player, turn off previous active radio media player so we don't leave it stranded on
          - choose:
              - conditions: "{{ not is_state('variable.active_media_player_radio','cleared') and states('variable.active_media_player_radio') != states('sensor.radio_media_player') }}"
                sequence:
                  - service: script.active_radio_player_off

          # if radio on speaker group check state for each media_player
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% if states('sensor.radio_media_player') in state_attr('group.google_speaker_groups','entity_id') %}
                        {% set unavail = namespace(value=0) %}
                        {% for entity_id in state_attr('group.' ~ states('sensor.radio_media_player').split('.')[1], 'entity_id') -%}
                          {% if states(entity_id) in ['unknown','unavailable','none'] %}
                            {% set unavail.value = unavail.value + 1 %}
                          {% endif %}
                        {% endfor %}
                        {{ unavail.value|int > 0 }}
                      {% else %}
                        {{ states(states('sensor.radio_media_player')) in ['','unknown','unavailable','none'] }}
                      {% endif %}

                sequence:
                  - service: variable.set_variable
                    data:
                      variable: radio_failed
                      value: 'true'

            default:
              # mute media player volumes to prevent google bloops
              - service: script.set_media_player_volumes
                data:
                  media_player: "{{ states('sensor.radio_media_player') }}"
                  source: mute

              # play streaming radio or start spotcast
              - choose:
                  - conditions: "{{ spotify }}"
                    sequence:
                      - service: spotcast.start
                        data:
                          entity_id: "{{ states('sensor.radio_media_player') }}"
                          uri: !include /config/include/template/radio_station_selection_template.yaml
                          random_song: 'true'

                      # wait for radio/spotify media player to begin playing
                      - wait_template: "{{ is_state(states('sensor.radio_media_player'),'playing') }}"
                        timeout:
                          seconds: 30
                        continue_on_timeout: true # must continue to run radio failed!

                default:
                  - service: media_player.play_media
                    data:
                      entity_id: "{{ states('sensor.radio_media_player') }}"
                      media_content_id: !include /config/include/template/radio_station_selection_template.yaml
                      media_content_type: music

                  # wait for radio media player to begin playing
                  - wait_template: "{{ is_state(states('sensor.radio_media_player'),'playing') }}"
                    timeout:
                      seconds: 30
                    continue_on_timeout: true

                  # set radio media player volumes , this sets ALL radio media players in a group to same volume
                  - service: script.set_media_player_volumes
                    data:
                      media_player: "{{ states('sensor.radio_media_player') }}"
                      source: radio_on

              # run radio failed script if media player doesn't play
              - choose:
                  - conditions: "{{ not is_state(states('sensor.radio_media_player'),'playing') }}"

                    sequence:
                      - service: variable.set_variable
                        data:
                          variable: radio_failed
                          value: 'true'

                default:
                  - service: variable.set_variable
                    data:
                      variable: radio_failed
                      value: 'false'

                  # populate variable with new active media player entity_id
                  - service: variable.set_variable
                    data:
                      variable: active_media_player_radio
                      value: "{{ states('sensor.radio_media_player') }}"

                  # start morning volume timer if not already active and preset on
                  - choose:
                    - conditions:
                        - condition: state
                          entity_id: input_boolean.radio_preset_morning
                          state: 'on'

                        - condition: state
                          entity_id: timer.radio_volume_wake
                          state: 'idle'

                      sequence:
                        - service: timer.start
                          data:
                            entity_id: timer.radio_volume_wake
                            duration:
                              minutes: "{{ states('input_number.radio_morning_delay')|int }}"

                  # start sleep timer if not already active and preset on
                  - choose:
                    - conditions:
                        - condition: state
                          entity_id: input_boolean.radio_preset_sleep
                          state: 'on'

                        - condition: state
                          entity_id: timer.radio_sleep
                          state: 'idle'

                      sequence:
                        - service: timer.start
                          data:
                            entity_id: timer.radio_sleep
                            duration:
                              minutes: "{{ states('input_number.radio_sleep_time')|int }}"

#######################################################################################################################
## Radio Off
#######################################################################################################################
  radio_off:
    alias: "Radio Off"
    description: "Turn off radio media players, reset booleans and timers."
    mode: restart
    sequence:
      - service: script.turn_off
        entity_id: script.radio_play

      - service: input_boolean.turn_off
        entity_id:
          - input_boolean.radio_on
          - input_boolean.radio_pause
          - input_boolean.radio_volume_override
          - input_boolean.radio_preset_morning
          - input_boolean.radio_preset_sleep
          - input_boolean.radio_preset_jason
          - input_boolean.radio_preset_sheri
          - input_boolean.radio_preset_shower
          - input_boolean.radio_preset_company

      #NOTE broswer players/chromecast don't turn off so stop play first
      - choose:
        - conditions: "{{ is_state(states('sensor.radio_media_player'), 'playing') }}"

          sequence:
            - service: media_player.media_stop
              data:
                entity_id: "{{ states('sensor.radio_media_player') }}"

      # turn off radio media player (media players in lovelace don't close in idle state)
      - service: media_player.turn_off
        data:
          entity_id: "{{ states('sensor.radio_media_player') }}"

      - service: variable.set_variable
        data:
          variable: active_media_player_radio
          value: cleared

      - service: timer.cancel
        entity_id:
          - timer.radio_volume_wake
          - timer.radio_sleep

      - service: script.set_media_player_volumes
        data:
          media_player: "{{ states('sensor.radio_media_player') }}"
          source: radio_off

#######################################################################################################################
## Active Radio Player Off
## variable.active_media_player_radio populated during radio_on, stores active playing radio media player
## req to turn off current media player before starting new media player because 'sensor.radio_media_player will have already changed to new value if has been changed
# #######################################################################################################################
  active_radio_player_off:
    alias: "Active Radio Player Off"
    description: "Turn the current radio media player off."
    icon: mdi:alarm-note-off
    mode: single
    variables:
      old: "{{ states('variable.active_media_player_radio') }}"
      new: "{{ states('sensor.radio_media_player') }}"
      groups: "state_attr('group.google_speaker_groups','entity_id')"
    sequence:
      # make sure variable is a valid media player (not cleared)
      - condition: template
        value_template: "{{ states('variable.active_media_player_radio') in state_attr('group.media_players','entity_id') }}"

      #NOTE broswer players/chromecast don't turn off so stop play first
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state(states('variable.active_media_player_radio'), 'playing') }}"

            sequence:
              - service: media_player.media_stop
                data:
                  entity_id: "{{ states('variable.active_media_player_radio') }}"

      # turn off active radio media players that are not part of the new radio media player group
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {% if old in groups %}
                    {% if new in groups %}
                        {{ expand('group.' ~ old.split('.')[1])|map(attribute='entity_id')
                            |reject('in',expand('group.' ~ new.split('.')[1])|map(attribute='entity_id')|list)|list|count > 0 }}
                    {% else %} true
                    {% endif %}
                  {% else %}
                    {% if new in groups %}{{ expand('group.' ~ new.split('.')[1])|selectattr('entity_id','eq',old)|map(attribute='entity_id')|list|count == 0 }}
                    {% else %}{{ old != new }}
                    {% endif %}
                  {% endif %}

            sequence:
              - service: media_player.turn_off
                data:
                  entity_id: >
                    {% if old in groups %}
                      {% if new in groups %}
                          {{ expand('group.' ~ old.split('.')[1])|map(attribute='entity_id')
                              |reject('in',expand('group.' ~ new.split('.')[1])|map(attribute='entity_id')|list)|list|join(',') }}
                      {% else %}{{ expand('group.' ~ old.split('.')[1])|rejectattr('entity_id','eq',new)|map(attribute='entity_id')|list|join(',') }}
                      {% endif %}
                    {% else %}
                      {% if new in groups %}{{ expand('group.' ~ old.split('.')[1])|rejectattr('entity_id','eq',new)|map(attribute='entity_id')|list|join(',') }}
                       {% else %}{{ old }}
                      {% endif %}
                    {% endif %}

      - service: variable.set_variable
        data:
          variable: active_media_player_radio
          value: cleared

automation:
#######################################################################################################################
## Radio Turned On
#######################################################################################################################
  - id: radio_turned_on
    alias: "[Radio] Turned On"
    description: "Play radio with current settings."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_boolean.radio_on
          - input_boolean.radio_preset_morning
          - input_boolean.radio_preset_sleep
          - input_boolean.radio_preset_jason
          - input_boolean.radio_preset_sheri
          - input_boolean.radio_preset_shower
          - input_boolean.radio_preset_company
        to: 'on'

      - platform: state
        entity_id: variable.startup_complete
        to: 'true'

    condition:
      # if trigger is startup only run if radio on boolean is on
      - condition: template
        value_template: "{{ true if trigger.entity_id != 'variable.startup_complete' else is_state('input_boolean.radio_on','on') }}"

    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: script.radio_play
                state: 'off'

            sequence:
              # check to see if morning/sleep preset on if triggered by startup
              - service: script.turn_on
                data:
                  entity_id: script.radio_play
                  variables:
                    preset: >
                      {% if trigger.entity_id == 'input_boolean.radio_preset_morning' %}
                          {{ 'Wake 'if is_state('input_boolean.radio_enabled_wake','on') else 'Morning' }}
                      {% elif trigger.entity_id == 'input_boolean.radio_preset_sleep' %} Sleep
                      {% elif trigger.entity_id == 'input_boolean.radio_preset_jason' %} Jason
                      {% elif trigger.entity_id == 'input_boolean.radio_preset_sheri' %} Sheri
                      {% elif trigger.entity_id == 'input_boolean.radio_preset_shower' %} Shower
                      {% elif trigger.entity_id == 'input_boolean.radio_preset_company' %} Company
                      {% elif trigger.entity_id == 'variable.startup_complete' %}
                        {% if is_state('input_boolean.radio_preset_morning','on') %} Wake
                        {% elif is_state('input_boolean.radio_preset_sleep','on') %} Sleep
                        {% endif %}
                      {% else %} None
                      {% endif %}

      # momentary preset switches (turn boolean back off)
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ trigger.entity_id in ['input_boolean.radio_preset_jason','input_boolean.radio_preset_sheri','input_boolean.radio_preset_shower','input_boolean.radio_preset_company'] }}

            sequence:
              - service: input_boolean.turn_off
                data:
                  entity_id: "{{ trigger.entity_id }}"

#######################################################################################################################
## Radio - Turned Off
#######################################################################################################################
  - id: radio_turned_off
    alias: "[Radio] Turned Off"
    description: "Turn off radio."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_boolean.radio_on
          - input_boolean.radio_preset_sleep
        to: 'off'

      - platform: state
        entity_id: variable.alarm_triggered
        to: 'true'

      # pause on too long
      - platform: state
        entity_id: input_boolean.radio_pause
        to: 'on'
        for:
          minutes: 5

      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Night
          - Away
          - Vacation
        for:
          seconds: 10

      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.radio_sleep

    condition:
      - "{{ true if trigger.entity_id == 'input_boolean.radio_on' else is_state('input_boolean.radio_on','on') }}"

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      - service: script.turn_on
        entity_id: script.radio_off

#######################################################################################################################
## Radio - Pause
#######################################################################################################################
  - id: radio_pause
    alias: "[Radio] Pause"
    description: "Pause radio when radio paused boolean turns on."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.radio_pause
        to: 'on'

    condition:
      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_on
                state: 'off'

            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.radio_pause

        default:
          # pause radio media player if playing
          - choose:
              - conditions: "{{ is_state(states('sensor.radio_media_player'),'playing') }}"

                sequence:
                  - service: media_player.media_pause
                    data:
                      entity_id: "{{ states('sensor.radio_media_player') }}"

#######################################################################################################################
## Radio - Resume
#######################################################################################################################
  - id: radio_resume
    alias: "[Radio] Resume"
    description: "Restart radio when resumed."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.radio_pause
        to: 'off'

    condition:
      - condition: template
        value_template: "{{ is_state(states('sensor.radio_media_player'),'paused') }}"

      - condition: state
        entity_id: input_boolean.radio_on
        state: 'on'

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      - choose:
          - conditions:
              - !include /config/include/template/radio_tts_active_condition.yaml
              - !include /config/include/template/radio_alarm_clock_active_condition.yaml

            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.radio_pause

              - service: browser_mod.toast
                data:
                  message: "Radio cannot be resumed when an announcement or alarm clock is playing on the radio media player!"
                  duration: 30000

        default:
          - service: media_player.media_play
            data:
              entity_id: "{{ states('sensor.radio_media_player') }}"

#######################################################################################################################
## Radio - Auto Resume
#######################################################################################################################
  - id: radio_auto_resume
    alias: "[Radio] Auto Resume"
    description: "Restart radio after announcement, alarm clock, or settings chnage."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_select.radio_media_player
          - input_select.radio_station

      # resume after an announcement
      - platform: state
        entity_id: binary_sensor.tts_playing
        to: 'off'

      # resume after an alarm clock
      - platform: state
        entity_id: binary_sensor.alarm_clock_active
        to: 'off'

    condition:
      - condition: state
        entity_id: input_boolean.radio_on
        state: 'on'

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

      - !include /config/include/template/radio_tts_off_condition.yaml
      - !include /config/include/template/radio_alarm_clock_off_condition.yaml

    action:
      # if tts announcement played on a member of active speaker group that speaker will now be disconnected
      # restart radio play instead of just resuming so all media players reconnect
      # radio pause boolean will turn off in radio_play if it was on
      - service: script.turn_on
        data:
          entity_id: script.radio_play
          variables:
            resume: true
            preset: >
              {% if is_state('input_boolean.radio_preset_morning','on') %} Wake
              {% elif is_state('input_boolean.radio_preset_sleep','on') %} Sleep
              {% else %} None
              {% endif %}

#######################################################################################################################
## Radio - Volume Change
## - media player expects float value, input_number is percent (/100)
## - if night/quiet mode check volume level, reset volume if necessary
#######################################################################################################################
  - id: radio_volume_change
    alias: "[Radio] Volume Change"
    description: "Change media player volume when radio volume control changed."
    initial_state: true
    mode: restart
    trigger:
      - platform: state
        entity_id:
          - input_number.radio_volume
          - input_boolean.radio_volume_override

    condition:
      - condition: state
        entity_id: input_boolean.radio_on
        state: 'on'

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      # reset volume if set value > night/quiet mode value unless override on
      - service: input_number.set_value
        data:
          entity_id: input_number.radio_volume
          value: >
            {% set radio = states('input_number.radio_volume')|int %}
            {% set quiet = states('input_number.radio_volume_quiet')|int %}
            {% if is_state('input_boolean.radio_volume_override','on') %}{{ radio }}
            {% elif is_state('binary_sensor.quiet_hours','on') and radio > quiet %}{{ quiet }}
            {% else %}{{ radio }}
            {% endif %}

      # set media player volume to input_number value
      - service: media_player.volume_set
        data:
          entity_id: "{{ states('sensor.radio_media_player') }}"
          volume_level: " {{ states('input_number.radio_volume')|float / 100 }}"

#######################################################################################################################
## Radio - Volume Override On
#######################################################################################################################
  - id: radio_volume_override_on
    alias: "[Radio] Volume Override On"
    description: "Turn override off after delay."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.radio_volume_override
        to: 'on'

    condition:
      # don't turn off if scene scripts running
      - condition: state
        entity_id:
          - script.scene_company
          - script.scene_movie
        state: 'off'

    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_on
                state: 'off'

            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.radio_volume_override

        default:
          - delay:
              minutes: 120

          - service: input_boolean.turn_off
            entity_id: input_boolean.radio_volume_override

# #######################################################################################################################
# ## Radio - Wake Radio Finished
# #######################################################################################################################
  - id: radio_wake_radio_finished
    alias: "[Radio] Wake Radio Finished"
    description: "Adjust radio volume/players when wake radio finished."
    initial_state: true
    mode: single
    max_exceeded: silent # retriggered when timer cancelled
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.radio_volume_wake

      - platform: event
        event_type: timer.cancelled
        event_data:
          entity_id: timer.radio_volume_wake

      - platform: state
        entity_id: input_boolean.radio_preset_morning
        to: 'off'

    condition:
      - condition: state
        entity_id: input_boolean.radio_on
        state: 'on'

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.radio_preset_morning

      # stop if timer was cancelled
      - condition: template
        value_template: >
          {% if trigger.entity_id == 'timer.radio_volume_wake' %}{{ not trigger.event.event_type == 'timer.cancelled' }}
          {% else %} true
          {% endif %}

      # cancel timer if still running
      - service: timer.cancel
        entity_id: timer.radio_volume_wake

      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_enabled_morning
                state: 'on'

            sequence:
              # turn on media player so we can set volume
              - service: script.radio_play
                data:
                  preset: Morning

#######################################################################################################################
## Radio - Sleep Timer Changed
#######################################################################################################################
  - id: radio_sleep_timer_changed
    alias: "[Radio] Sleep Timer Changed"
    description: "Restart sleep timer when sleep time control changed."
    initial_state: true
    mode: restart
    trigger:
      - platform: state
        entity_id: input_number.radio_sleep_time

    condition:
      - condition: state
        entity_id:
          - input_boolean.radio_on
          - input_boolean.radio_preset_sleep
        state: 'on'

      - condition: state
        entity_id:
          - script.radio_play
          - script.radio_off
        state: 'off'

    action:
      - service: timer.start
        data:
          entity_id: timer.radio_sleep
          duration:
            minutes: "{{ states('input_number.radio_sleep_time')|int }}"

#######################################################################################################################
## Radio Media Player Turned Off
#######################################################################################################################
  - id: radio_media_player_turned_off
    alias: "[Radio] Media Player Turned Off"
    description: "Turn radio off when radio media player turns off."
    initial_state: true
    mode: single
    max_exceeded: silent # triggered by each media player if speaker group
    trigger:
      - platform: state
        entity_id: &media_player_entities !include /config/include/entities/media_player_entities.yaml
        to:
          - 'off'
          - idle
          - unavailable
          - unknown
        for:
          seconds: 5 #NOTE if this is set lower radio can turn off after alarm clock/tts

    condition:
      - !include /config/include/template/radio_media_player_condition.yaml

      #ISSUE when tts turns off any member of radio group it turns off others that arent part of tts group
      #- !include /config/include/template/radio_not_tts_media_player_condition.yaml
      - condition: state
        entity_id:
          - binary_sensor.tts_playing
          - script.tts_announcement # req because media players turn off before sensor turns on
        state: 'off'

      #ISSUE when tts turns off any member of radio group it turns off others that arent part of tts group
      #- !include /config/include/template/radio_not_alarm_clock_media_player_condition.yaml
      - condition: state
        entity_id:
          - binary_sensor.alarm_clock_active
          - script.alarm_clock_play
          - script.alarm_clock_stop
        state: 'off'

    action:
      - service: script.turn_on
        entity_id: script.radio_off

#######################################################################################################################
## Radio - Media Player Paused
#######################################################################################################################
  - id: radio_media_player_paused
    alias: "[Radio] Media Player Paused"
    description: "Turn radio pause boolean on when radio media player is paused."
    initial_state: true
    mode: single
    max_exceeded: silent # triggered by each media player if speaker group
    trigger:
      - platform: state
        entity_id: *media_player_entities
        to: paused

    condition:
      - !include /config/include/template/radio_media_player_condition.yaml
      - !include /config/include/template/radio_not_tts_media_player_condition.yaml
      - !include /config/include/template/radio_not_alarm_clock_media_player_condition.yaml

    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.radio_pause

#######################################################################################################################
## Radio - Media Player Resumed
#######################################################################################################################
  - id: radio_media_player_resumed
    alias: "[Radio] Media Player Resumed"
    description: "Turn radio pause boolean off when radio media player play resumed."
    initial_state: true
    mode: single
    max_exceeded: silent # triggered by each media player if speaker group
    trigger:
      - platform: state
        entity_id: *media_player_entities
        to: playing
        from: paused

    condition:
      - !include /config/include/template/radio_media_player_condition.yaml
      - !include /config/include/template/radio_not_tts_media_player_condition.yaml
      - !include /config/include/template/radio_not_alarm_clock_media_player_condition.yaml

    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.radio_pause

#######################################################################################################################
## Radio - Media Player Volume Changed
## - media player is decimal, input_number is percent
#######################################################################################################################
  - id: radio_media_player_volume_changed
    alias: "[Radio] Media Player Volume Changed"
    description: "Change radio volume control when radio media player volume changes."
    initial_state: true
    mode: queued
    max: 10
    trigger:
      - platform: state
        entity_id: *media_player_entities

    condition:
      - !include /config/include/template/radio_media_player_condition.yaml
      - !include /config/include/template/radio_not_tts_media_player_condition.yaml
      - !include /config/include/template/radio_not_alarm_clock_media_player_condition.yaml

      # if radio player is speaker group only if run if trigger is group player
      - condition: template
        value_template: >
          {% set r = states('sensor.radio_media_player') %}
          {{ (true if r == trigger.entity_id else false) if r in state_attr('group.google_speaker_groups','entity_id') else true }}

      # only run if the volume has changed on trigger entity
      # UndefinedError: 'mappingproxy object' has no attribute 'volume_level'
      - condition: template
        value_template: >
          {% if trigger.from_state.attributes.volume_level is defined
              and trigger.to_state.attributes.volume_level is defined %}
            {{ '%0.2f'|format(trigger.from_state.attributes.volume_level|float)
                != '%0.2f'|format(trigger.to_state.attributes.volume_level|float) }}
          {% else %} false
          {% endif %}

      # only run if trigger to_state is not off or volume will be set to 0
      - condition: template
        value_template: "{{ not states(trigger.entity_id) in ['off','idle','unknown','unavailable','none'] }}"

      # only run if the new media player volume is not equal to the radio set volume
      - condition: template
        value_template: "{{ '%0.2f'|format(state_attr(trigger.entity_id,'volume_level')|float) != '%0.2f'|format(states('input_number.radio_volume')|float/100) }}"

    action:
      # media player volume float*100 format float to zero decimal for percent value
      - service: input_number.set_value
        data:
          entity_id: input_number.radio_volume
          value: "{{ '%0.0f'|format(state_attr(trigger.entity_id,'volume_level')|float*100 ) }}"

#######################################################################################################################
## Radio - Failed
#######################################################################################################################
  - id: radio_play_failed
    alias: "[Radio] Play Failed"
    description: "Play announcement, reset alarm clock when failed."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: variable.radio_failed
        to: 'true'

    condition:
      - condition: state
        entity_id: input_boolean.radio_on
        state: 'on'

    action:
      - service: script.radio_off

      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.alerts_enabled
                state: 'on'

            sequence:
              # delay to allow occupant to reset radio before notification
              - delay:
                  minutes: 5

              - condition: state
                entity_id: variable.radio_failed
                state: 'true'

              - service: !include /config/include/template/notify_jason_template.yaml
                data:
                  title: "Radio Play Failed"
                  message: "The radio has failed to play!"
                  data:
                    actions:
                      - action: close_radio_play_failed
                        title: Close
                    tag: radio_play_failed
                    timestamp: "{{ as_timestamp(now()) }}" #push
                    priority: normal
                    renotify: false #push
                    ttl: 3600
                    silent: true #push
                    requireInteraction: false #push
                    sticky: false #app
                    url: /lovelace/media #push
                    clickAction: /lovelace/media #app
                    color: !secret WARNING_COLOR #app
                    image: !secret RADIO_ALERT_IMAGE
                    icon: !secret ALERT_ICON #push
                    badge: !secret ALERT_BADGE #push

      # delay before resetting alarm status
      - delay:
          hours: 1

      - service: variable.set_variable
        data:
          variable: radio_failed
          value: false

#######################################################################################################################
## Radio - Play Failed Notification Closed
#######################################################################################################################
  - id: radio_play_failed_notification_closed
    alias: "[Radio] Play Failed Notification Closed"
    description: "Dismiss notifications on all devices."
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      - platform: event
        event_type: html5_notification.closed
        event_data:
          tag: radio_play_failed

      #BUG html5 closed event doesn't work if notification is in tray
      - platform: event
        event_type: html5_notification.clicked
        event_data:
          action: close_radio_play_failed

      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: close_radio_play_failed

    action:
      - service: variable.set_variable
        data:
          variable: radio_failed
          value: 'false'

      - service: script.close_notifications
        data:
          target: mobile_app_jphone
          tag: radio_play_failed