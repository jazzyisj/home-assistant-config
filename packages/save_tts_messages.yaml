###############################################################################
# PACKAGE - Save and Play TTS Messages + Message History
# DESCRIPTION: Save tts messages to play later, save messages history, re-play the last message.
# REQUIREMENTS: Hass-Variables Integration v3.0  https://github.com/Wibias/hass-variables
# INSTALLATION: https://github.com/jazzyisj/save-tts-messages#readme
###############################################################################

#OPTIONAL delete if tts history / play last message not required
sensor:
  - platform: file
    name: "TTS Last Message"
    file_path: /config/www/tts_message_history.txt

#OPTIONAL delete if tts history / play last message not required
notify:
  - platform: file
    name: "TTS Message History"
    filename: /config/www/tts_message_history.txt
    value_template: "{{ value_json }}"

#OPTIONAL buttons to call scripts in UI
template:
  button:
    - name: "TTS Play Saved Messages"
      unique_id: tts_play_saved_messages
      icon: mdi:play-box-multiple
      press:
        - service: script.tts_play_saved_messages

    - name: "TTS Clear Saved Messages"
      unique_id: tts_clear_saved_messages
      icon: mdi:delete-forever
      press:
        - service: script.tts_clear_saved_messages

    - name: "TTS Play Last Message"
      unique_id: tts_play_last_message
      icon: mdi:comment-arrow-left-outline
      press:
        - service: script.tts_play_last_message

script:
  #REQUIRED
  ###############################################################################
  # TTS Play Message
  ###############################################################################
  tts_play_message:
    alias: "TTS Play Message"
    description: "Play or save TTS message."
    mode: queued
    fields:
      message:
        description: "Message to play or save."
        example: "This is my message!"
      save_message:
        description: "Save TTS message if required."
        example: "true"
    variables:
      save_message: "{{ save_message | default(true) }}"
    sequence:
      - service: notify.tts_message_history #OPTIONAL delete if tts history / play last message not required
        data:
          message: "{{ (now() ~ ' ' ~ message)[0:250] | replace('\n', ' ') }}"

      - if:
          - condition: template
            alias: "Save message parameter is true."
            value_template: "{{ save_message }}"

          - condition: state #CHANGE_ME change condition(s) for your needs
            entity_id: binary_sensor.someone_home
            state: "off"
        then:
          - service: script.tts_save_message
            data:
              message: "{{ message }}"
        else:
          - service: tts.cloud_say #CHANGE_ME - change to your tts/notify service
            target:
              entity_id: media_player.kiosk #CHANGE_ME change to your own media player entity
            data:
              message: "{{ message }}"

  #REQUIRED
  ###############################################################################
  # TTS Save Message
  ###############################################################################
  tts_save_message:
    alias: "TTS Save Message"
    description: "Save TTS message."
    mode: queued
    fields:
      message:
        description: "Message to be saved."
        example: "This is a message!"
    variables:
      count: "{{ states('sensor.tts_saved_messages') | int(0) }}"
      repeat_message: "{{ message in states.sensor.tts_saved_messages.attributes.values() }}"
    sequence:
      - service: variable.update_sensor
        target:
          entity_id: sensor.tts_saved_messages
        data:
          value: "{{ count if repeat_message else count + 1 }}"
          attributes: >
            {% set message = message | replace('\n', ' ') %} {# newlines mess with dictionary format #}
            {% set msg_num = namespace(value=0) %}
            {% set found_msg = namespace(value=0) %}
            {% set dict_string = namespace(value='') %}
            {% if count > 0 %}
              {% for key, value in states.sensor.tts_saved_messages.attributes.items()
                  if key not in ['icon', 'friendly_name'] %}
                {% if loop.index % 2 == 1 %} {# even number attribute is msg, odd is msg_time #}
                  {% set msg_num.value = msg_num.value + 1 %}
                  {% if message == value %}
                    {# message is a repeat - record index #}
                    {% set found_msg.value = msg_num.value %}
                  {% else %}
                    {# add to message dict string, 2 attributes - msg, msg_time #}
                    {% set dict_string.value = dict_string.value
                        ~ '"msg' ~ msg_num.value ~ '":"'
                        ~ states.sensor.tts_saved_messages.attributes['msg' ~ msg_num.value] ~ '"' ~ ', '
                        ~ '"msg_time' ~ msg_num.value ~ '":"'
                        ~ states.sensor.tts_saved_messages.attributes['msg_time' ~ msg_num.value] ~ '"' ~ ', ' %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
            {% if repeat_message %}
              {# update found message time attribute value #}
              {% set dict_string.value = '"msg_time' ~ found_msg.value ~ '":"' ~ now() ~ '"' %}
            {% else %}
              {# new message, we will replace all attributes so add to previous message string #}
              {% set dict_string.value = dict_string.value ~ '"msg' ~ (count + 1) ~ '":"' ~ message  ~ '", "msg_time' ~ (count + 1) ~ '":"' ~ now()  ~ '"' %}
            {% endif %}
            {# complete dictionary format -#}
            {{- '{ ' ~ dict_string.value ~ ' }' -}}
          replace_attributes: "{{ not repeat_message }}"

  #REQUIRED
  ###############################################################################
  # TTS Play Saved Messages
  ###############################################################################
  tts_play_saved_messages:
    alias: "TTS Play Saved Messages"
    description: "Play and delete saved TTS messages."
    icon: mdi:play-box-multiple
    fields:
      skip_none:
        description: "Skip the no saved messages announcement."
        example: "true"
    variables:
      skip_none: "{{ skip_none | default(false) }}"
      msgs: "{{ states('sensor.tts_saved_messages') | int(0) }}"
    sequence:
      - condition: template
        alias: "Message count > 0 if skip_none is true"
        value_template: "{{ msgs > 0 if skip_none else true }}"

      - service: tts.cloud_say #CHANGE_ME - change to your tts service
        target:
          entity_id: media_player.kiosk #CHANGE_ME change to your tts media player entity
        data:
          message: |
            There {{ 'are no messages' if msgs == 0
              else ('is 1 message' if msgs == 1 else 'are ' ~ msgs ~ ' messages') }} waiting for you.

      - delay: 1 # don't skip next wait_template

      - wait_template: "{{ is_state('media_player.kiosk', 'playing') }}" #CHANGE_ME change to your tts media player entity
        timeout: 60

      - wait_template: "{{ not is_state('media_player.kiosk', 'playing') }}" #CHANGE_ME change to your tts media player entity
        timeout: 60

      - choose:
          - conditions: "{{ msgs > 0 }}"
            sequence:
              - repeat:
                  count: "{{ msgs }}"
                  sequence:
                    - if: "{{ state_attr('sensor.tts_saved_messages', 'msg' ~ repeat.index) != none }}"
                      then:
                        - service: tts.cloud_say #CHANGE_ME - change to your tts service
                          target:
                            entity_id: media_player.kiosk #CHANGE_ME change to your tts media player entity
                          data:
                            message: |
                              {%- set date = state_attr('sensor.tts_saved_messages', 'msg_time' ~ repeat.index) | as_datetime %}
                              {{ state_attr('sensor.tts_saved_messages', 'msg' ~ repeat.index) }}
                              {% if now().day == date.day %} Today at {{ date.strftime('%-I:%M %p') }}
                              {% elif now().day - date.day == 1 %} Yesterday at {{ date.strftime('%-I:%M %p') }}
                              {% elif now().day - date.day > 6%} {{ date.strftime('%A, %B %-d at %-I:%M %p') }}
                              {% else %} {{ date.strftime('%A at %-I:%M %p') }}
                              {%- endif -%}

                        - wait_template: "{{ is_state('media_player.kiosk', 'playing') }}" #CHANGE_ME change to your tts media player entity
                          timeout: 15

                        - wait_template: "{{ not is_state('media_player.kiosk', 'playing') }}" #CHANGE_ME change to your tts media player entity
                          timeout: 60 #CHANGE_ME change this to desired longest possible tts message

                    - delay: 1 # delay between messages

      - service: script.tts_clear_saved_messages

  #REQUIRED
  ###############################################################################
  # TTS Clear Saved Messages
  ###############################################################################
  tts_clear_saved_messages:
    alias: "TTS Clear Saved Messages"
    description: "Clear saved TTS messages."
    icon: mdi:delete-forever
    sequence:
      - service: variable.update_sensor
        target:
          entity_id: sensor.tts_saved_messages
        data:
          value: 0
          replace_attributes: true

  #OPTIONAL delete if tts history / play last message not required
  ###############################################################################
  # TTS Play Last Message
  ###############################################################################
  tts_play_last_message:
    alias: "TTS Play Last Message"
    description: "Play last TTS message."
    icon: mdi:comment-arrow-left-outline
    sequence:
      - service: tts.cloud_say #CHANGE_ME - change to your tts service
        target:
          entity_id: media_player.kiosk #CHANGE_ME change to your media player entity_id
        data:
          message: |
            {% set message = states('sensor.tts_last_message')[33:255] %}
            {% if message == '' %} There are no messages in the history.
            {% else %}
              {% set time = as_datetime(states('sensor.tts_last_message')[0:32]) %}
              {% if now().day == time.day %} {% set time_msg = 'Today at ' ~ time.strftime('%-I:%M %p') %}
              {% elif now().day - time.day == 1 %} {% set time_msg = 'Yesterday at ' ~ time.strftime('%-I:%M %p') %}
              {% elif now().day - time.day > 6%} {% set time_msg = time.strftime('%A, %B %-d at %-I:%M %p') %}
              {% else %} {% set time_msg = time.strftime('%A at %-I:%M %p') %}
              {% endif %}
              {{ message }}
              {{ time_msg }}.
            {% endif %}

#OPTIONAL - example automation, delete if not required
automation:
  ###############################################################################
  # TTS Auto Play Saved Messages
  ###############################################################################
  - id: tts_auto_play_saved_messages
    alias: "TTS Auto Play Saved Messages"
    description: "Automatically play saved TTS messages."
    max_exceeded: silent
    trigger:
      #OPTIONAL example triggers - delete or adjust for your needs
      - platform: state
        entity_id: binary_sensor.someone_home
        to: "on"
        for:
          minutes: 5
        not_from:
          - unknown
          - unavailable

      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Home
          - Guest
        from: Night
        for:
          minutes: 5

      - platform: state
        entity_id:
          - input_boolean.alarm_triggered
          - switch.system_mute
          - binary_sensor.scene_active
          - binary_sensor.mobile_phone_in_use
        to: "off"
        not_from:
          - unknown
          - unavailable
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.tts_saved_messages
        above: 0

      #OPTIONAL example conditions - delete or adjust for your needs
      - condition: state
        entity_id: binary_sensor.someone_home
        state: "on"

      - condition: state
        entity_id: input_select.occupancy_mode
        match: any
        state:
          - Home
          - Guest
    action:
      - service: script.tts_play_saved_messages
        data:
          skip_none: true #OPTIONAL change to false to play no messages notifications.
