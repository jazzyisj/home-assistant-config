###################################################################################################
# Package - Saved TTS Messages
###################################################################################################
template:
  - button:
      - name: "Play Saved TTS Messages"
        unique_id: play_saved_tts_messages
        icon: mdi:play-box-multiple
        press:
          - action: script.play_saved_tts_messages

      - name: "Clear Saved TTS Messages"
        unique_id: clear_saved_tts_messages
        icon: mdi:delete-forever
        press:
          - event: clear_saved_tts_messages

  - trigger:
      - platform: event
        event_type: save_tts_message

      - platform: event
        event_type: clear_saved_tts_messages
    condition:
      - condition: template
        value_template: >
          {{ (trigger.event.event_type == 'save_tts_message'
                and trigger.event.data is defined
                and trigger.event.data.key is defined
                and trigger.event.data.value is defined)
              or trigger.event.event_type == 'clear_saved_tts_messages' }}
    sensor:
      - name: "Saved TTS Messages"
        unique_id: saved_tts_messages
        icon: mdi:account-voice
        state: >
          {% if trigger.event.event_type == 'save_tts_message' %}
            {% set dupe = namespace(value=false) %}
            {% set msgs = dict(this.attributes.get('messages', {}).items()) %}
            {% set current = this.attributes.messages | count %}
            {% for item in msgs %}
              {% if trigger.event.data.value
                  == state_attr(this.entity_id, 'messages')[item]['message'] %}
              {% set dupe.value = true %}
              {% break %}
              {% endif %}
            {% endfor %}
            {{ iif(dupe.value, current, current + 1) }}
          {% else %} 0
          {% endif %}
        attributes:
          messages: >
            {% set dupe = namespace(value=false) %}
            {% set msgs = dict(this.attributes.get('messages', {}).items()) %}
            {% if trigger.event.event_type == 'save_tts_message' %}
              {% for item in msgs %}
                {% if trigger.event.data.value
                    == state_attr(this.entity_id, 'messages')[item]['message'] %}
                {% set dupe.value = true %}
                {% break %}
                {% endif %}
              {% endfor %}
              {% if dupe.value %}{{ msgs }}
              {% else %}
                {% set value  = trigger.event.data.value %}
                {% set value = value.isoformat() if value is datetime else value %}
                {% set new = {trigger.event.data.key: {'message': value, 'timestamp': now().isoformat() }} %}
                {{ dict(msgs, **new) }}
              {% endif %}
            {% elif trigger.event.event_type == 'clear_saved_tts_messages' %} {}
            {% endif %}

script:
  ###################################################################################################
  # Save TTS Message
  ###################################################################################################
  save_tts_message:
    alias: "Save TTS Message"
    description: "Save TTS message."
    mode: queued
    fields:
      message:
        description: "Message to be saved."
        example: "This is a message!"
    sequence:
      - event: save_tts_message
        event_data:
          key: "msg{{ states.sensor.saved_tts_messages.attributes.messages | count + 1  }}"
          value: "{{ message }}"

  ###################################################################################################
  # TTS Play Saved Messages
  ###################################################################################################
  play_saved_tts_messages:
    alias: "Play Saved TTS Messages"
    description: "Play and clear saved TTS messages."
    icon: mdi:play-box-multiple
    max_exceeded: silent
    fields:
      skip_none:
        description: "Skip the no saved messages announcement."
        example: "true"
    variables:
      skip_none: "{{ skip_none | default(false) }}"
      msgs: "{{ states('sensor.saved_tts_messages') | int(0) }}"
    sequence:
      - condition: template
        alias: "Message count > 0 if skip_none is true"
        value_template: "{{ msgs > 0 if skip_none else true }}"

      - action: script.tts_play
        data:
          message: |-
            {% from 'speech_helpers.jinja' import plural %}
            {% from 'speech_helpers.jinja' import plural_verb %}
            There {{ plural_verb(msgs) }} {{ iif(msgs == 0, 'no messages', plural('message', msgs, true)) }} waiting for you.
          provider: "HASS"
          language: "English (USA)"
          voice: "Tony:friendly"
          always_play: true

      - choose:
          - conditions: "{{ msgs > 0 }}"
            sequence:
              - repeat:
                  count: "{{ msgs }}"
                  sequence:
                    - variables:
                        msg_num: "msg{{ repeat.index }}"
                    - if: "{{ state_attr('sensor.saved_tts_messages', 'messages')[msg_num] != none }}"
                      then:
                        - action: script.tts_play
                          data:
                            message: |-
                              {{ state_attr('sensor.saved_tts_messages', 'messages')[msg_num]['message'] }}
                              {%- set date = as_datetime(state_attr('sensor.saved_tts_messages', 'messages')[msg_num]['timestamp'], none) %}
                              {%- if date != none %}
                                {%- from 'schedule.jinja' import day_or_date %}
                                {{- day_or_date(date, false, true, true) }}
                              {%- endif %}
                            provider: "HASS"
                            language: "English (USA)"
                            voice: "Jenny:newscast"
                            always_play: true
                          continue_on_error: true

              - event: clear_saved_tts_messages

automation:
  ###################################################################################################
  # Play Saved TTS Messages
  ###################################################################################################
  - id: play_saved_tts_messages
    alias: "Play Saved TTS Messages"
    description: "Play saved TTS messages."
    max_exceeded: silent
    trigger:
      - trigger: state
        entity_id: binary_sensor.someone_home #STARTUP
        to: "on"
        from: "off"
        for:
          minutes: 5

      - trigger: state
        entity_id: input_select.occupancy_mode
        to:
          - Home
          - Guest
        from: Night
        for:
          minutes: 5

      - trigger: state
        entity_id:
          - input_boolean.alarm_triggered
          - switch.media_mute
          - binary_sensor.scene_active
          - binary_sensor.mobile_phone_in_use
          - binary_sensor.quiet_time
        to: "off"
        from: "on"
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.saved_tts_messages
        above: 0

      - condition: state
        entity_id: binary_sensor.someone_home
        state: "on"

      - condition: state
        entity_id:
          - binary_sensor.mobile_phone_in_use
          - binary_sensor.scene_active
          - switch.media_mute
        state: "off"

      - condition: state
        entity_id: input_select.occupancy_mode
        match: any
        state:
          - Home
          - Guest
    action:
      - action: script.play_saved_tts_messages
        data:
          skip_none: true
