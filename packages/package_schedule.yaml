#######################################################################################################################
## Package - Schedule
#######################################################################################################################
homeassistant:
  customize:
    alert.shift_selection:
      friendly_name: Work Shift Alert
      icon: mdi:calendar-question
      category: schedule

input_boolean:
#######################################################################################################################
## Schedule Automation
#######################################################################################################################
  schedule_automation:
    name: Schedule Automation
    icon: mdi:calendar-multiple-check

#######################################################################################################################
## Work Schedule
#######################################################################################################################
  work_schedule:
    name: Work Schedule
    icon: mdi:factory

#######################################################################################################################
## Weekend Workdays Scheduled
#######################################################################################################################
  saturday_workday:
    name: Saturday Workday
    icon: mdi:calendar-star

  sunday_workday:
    name: Sunday Workday
    icon: mdi:calendar-star

#######################################################################################################################
## Shift Overrride Enabled
#######################################################################################################################
  shift_override:
    name: Shift Override
    icon: mdi:calendar-remove

#######################################################################################################################
## Schedule Routine
#######################################################################################################################
  house_wakeup:
    name: House Wakeup
    icon: mdi:weather-sunset-up

  workday_morning:
    name: Workday Mornings
    icon: mdi:weather-sunset-up

  workday_night:
    name: Workday Nights
    icon: mdi:bed

  weekend_morning:
    name: Weekend Mornings
    icon: mdi:weather-sunset-up

  weekend_night:
    name: Weekend Nights
    icon: mdi:bed

  guest_morning:
    name: Guest Mornings
    icon: mdi:weather-sunset-up

  guest_night:
    name: Guest Nights
    icon: mdi:bed

#######################################################################################################################
## Bedtime Delayed - used to control bedtime routine if someone stays up past bedtime
#######################################################################################################################
  bedtime_delayed:
    name: Bedtime Delayed
    icon: mdi:clock
    initial: false

#######################################################################################################################
## Quiet Hours
#######################################################################################################################
  quiet_hours:
    name: Quiet Hours
    icon: mdi:volume-medium

  quiet_hours_bedtime_sync:
    name: Sync Quiet/Bedtime Hours
    icon: mdi:volume-medium

  quiet_hours_override:
    name: Quiet Hours Override
    icon: mdi:volume-medium

input_datetime:
#######################################################################################################################
## Wake Times
#######################################################################################################################
  days_waketime:
    name: Days Wake Time
    icon: mdi:clock
    has_date: false
    has_time: true

  afternoons_waketime:
    name: Afternoons Wake Time
    icon: mdi:clock
    has_date: false
    has_time: true

  weekend_waketime:
    name: Weekend Wake Time
    icon: mdi:clock
    has_date: false
    has_time: true

  guest_waketime:
    name: Guest Wake Time
    icon: mdi:clock
    has_date: false
    has_time: true

  house_waketime:
    name: House Wake Time
    icon: mdi:clock
    has_date: false
    has_time: true

#######################################################################################################################
## Bed Times
#######################################################################################################################
  days_bedtime:
    name: Days Bed Time
    icon: mdi:clock
    has_date: false
    has_time: true

  afternoons_bedtime:
    name: Afternoons Bed Time
    icon: mdi:clock
    has_date: false
    has_time: true

  weekend_bedtime:
    name: Weekend Bed Time
    icon: mdi:clock
    has_date: false
    has_time: true

  guest_bedtime:
    name: Guest Bed Time
    icon: mdi:clock
    has_date: false
    has_time: true

#######################################################################################################################
## Quiet Hours
#######################################################################################################################
  quiet_hours_start:
    name: Quiet Hours Start
    icon: mdi:clock
    has_date: false
    has_time: true

  quiet_hours_end:
    name: Quiet Hours End
    icon: mdi:clock
    has_date: false
    has_time: true

input_number:
#######################################################################################################################
## Stay Awake Delay - delay before bedtime if stay_awake activated
#######################################################################################################################
  stay_awake_delay:
    name: Stay Awake Delay
    icon: mdi:progress-clock
    min: 0
    max: 60
    step: 1
    unit_of_measurement: min

#######################################################################################################################
## Bedtime Delay - delay before bedtime lights
#######################################################################################################################
  bedtime_delay:
    name: Bedtime Delay
    icon: mdi:progress-clock
    min: 0
    max: 30
    step: 1
    unit_of_measurement: min

#######################################################################################################################
## Bedtime Night Mode Delay - delay before switch to night mode
#######################################################################################################################
  bedtime_night_mode_delay:
    name: Bedtime Night Mode Delay
    icon: mdi:progress-clock
    min: 0
    max: 30
    step: 1
    unit_of_measurement: min

#######################################################################################################################
## Quiet Hours
#######################################################################################################################
  quiet_hours_after_waketime:
    name: Quiet After Waketime
    icon: mdi:progress-clock
    min: 0
    max: 120
    step: 5
    unit_of_measurement: min

  quiet_hours_before_bedtime:
    name: Quiet Before Bedtime
    icon: mdi:progress-clock
    min: 0
    max: 120
    step: 5
    unit_of_measurement: min

input_select:
#######################################################################################################################
## Shift Selection
#######################################################################################################################
  shift_selection:
    name: Shift Selection
    icon: mdi:calendar-text
    options:
      - Days
      - Afternoons
      - 'Off'

binary_sensor:
#######################################################################################################################
## Workday (hidden)
## - python workday sensor
## - do not exclude holiday - work scheduled on some holidays, use google cal holidays instead
## https://www.home-assistant.io/integrations/workday/
#######################################################################################################################
  - platform: workday
    name: Workday
    country: CA
    province: 'ON'
    workdays: [mon, tue, wed, thu, fri]
    excludes: [sat, sun]
    days_offset: 0

#######################################################################################################################
## Workday Tomorrow (hidden)
## - internal workday sensor w/offset (work tomorrow)
## - do not exlude holiday - work scheduled on some holidays, use google cal holidays instead
#######################################################################################################################
  - platform: workday
    name: Workday Tomorrow
    country: CA
    province: 'ON'
    workdays: [mon, tue, wed, thu, fri]
    excludes: [sat, sun]
    days_offset: 1

#######################################################################################################################
## Utilities Workday
## - use offpeak billing on holidays and weekends
#######################################################################################################################
  - platform: workday
    name: Utilities Workday
    country: CA
    province: 'ON'
    workdays: [mon, tue, wed, thu, fri]
    excludes: [sat, sun, holiday]
    days_offset: 0

  - platform: template
    sensors:
#######################################################################################################################
## Shift Selection
## - delay on so user can select new shift before notification is sent
#######################################################################################################################
      shift_selection_alert:
        unique_id: shift_selection_alert
        delay_on:
          minutes: 5
        value_template: >
          {{ false if is_state('binary_sensor.alerts_enabled','off') or is_state('input_boolean.work_schedule','off')
              else is_state('input_boolean.shift_override','on') or (is_state('input_boolean.shift_override','off')
                and is_state('sensor.current_shift','Off')) }}

#######################################################################################################################
## Work Schedule Disabled
#######################################################################################################################
      work_schedule_disabled:
        friendly_name: Work Schedule Disabled
        unique_id: work_schedule_disabled
        icon_template: mdi:beach
        value_template: "{{ is_state('input_boolean.work_schedule','off') }}"

#######################################################################################################################
## Work Today - is today is a workday
## now().weekday() == 5is Saturday
#######################################################################################################################
      work_today:
        friendly_name: Work Today
        unique_id: work_today
        icon_template: >
          {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
          {% elif is_state('sensor.current_shift','Days') %} mdi:alpha-d-circle
          {% elif is_state('sensor.current_shift','Afternoons') %} mdi:alpha-a-circle
          {% else %} mdi:calendar-alert
          {% endif %}
        value_template: >
          {% if is_state('calendar.work_holiday','on') %} false
          {% elif is_state('input_boolean.work_schedule','off') %} false
          {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 5 %} true
          {% elif is_state('input_boolean.sunday_workday','on') and now().weekday() == 6 %} true
          {% elif is_state('binary_sensor.workday','on') %} true
          {% endif %}

#######################################################################################################################
## Work Tomorrow
## now().weekday() == 4 is Friday
#######################################################################################################################
      work_tomorrow:
        friendly_name: Work Tomorrow
        unique_id: work_tomorrow
        icon_template: >
          {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
          {% elif is_state('sensor.tomorrow_shift','Days') %} mdi:alpha-d-circle
          {% elif is_state('sensor.tomorrow_shift','Afternoons') %} mdi:alpha-a-circle
          {% else %} mdi:calendar-alert
          {% endif %}
        value_template: >
          {% if is_state('input_boolean.work_schedule','off') %} false
          {% elif is_state('binary_sensor.holiday_tomorrow','on') %} false
          {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 4 %} true
          {% elif is_state('input_boolean.sunday_workday','on') and now().weekday() == 5 %} true
          {% elif is_state('binary_sensor.workday_tomorrow','on') %} true
          {% endif %}

#######################################################################################################################
## Pre Work Active - on for 30 minutes before leave home time on workdays
#######################################################################################################################
      pre_work_active:
        friendly_name: Pre Work Active
        unique_id: pre_work_active
        icon_template: mdi:account-hard-hat
        value_template: >
          {{ is_state('binary_sensor.work_today','on') and is_state('sensor.current_shift','Days')
              and (as_timestamp(states('sensor.date') ~ ' ' ~ states('input_datetime.days_leave_home_time'))|int - as_timestamp(now())|int < 1800 )
            or is_state('binary_sensor.work_today','on') and is_state('sensor.current_shift','Afternoons')
              and (as_timestamp(states('sensor.date') ~ ' ' ~ states('input_datetime.afternoons_leave_home_time'))|int - as_timestamp(now())|int < 1800 ) }}

#######################################################################################################################
## Quiet Hours - limit media player volumes during set hours
## if QHS < QHE time does not span midnight
##  - time >= QHS and time <= QHE
## else if QHE < QHS quiet hours spans midnight
## - before midnight time >= QHS
## -  after midnight time <= QHE
#NOTE if waketime or bedtime state is Off default to set times
#######################################################################################################################
      quiet_hours:
        friendly_name: Quiet Hours
        unique_id: quiet_hours
        icon_template: mdi:volume-low
        value_template: >
          {% set time = states('sensor.time') %}
          {% if is_state('input_boolean.quiet_hours_bedtime_sync','on') and not (is_state('sensor.bedtime_today','Off') or is_state('sensor.waketime_today','Off'))%}
            {% set start = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.bedtime_today'))|int - states('input_number.quiet_hours_before_bedtime')|int * 60 )|timestamp_custom('%H:%M',true) %}
            {% set end = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_today'))|int + states('input_number.quiet_hours_after_waketime')|int * 60 )|timestamp_custom('%H:%M',true) %}
          {% else %}
            {% set start = states('input_datetime.quiet_hours_start')[0:5] %}
            {% set end = states('input_datetime.quiet_hours_end')[0:5] %}
          {% endif %}
          {% if is_state('input_boolean.quiet_hours_override','on') %} true
          {% elif is_state('input_boolean.quiet_hours','on') %}{{ start <= time < end if start < end else start <= time or time < end }}
          {% else %} false
          {% endif %}

#######################################################################################################################
## Bedtime Active - after bedtime, not in night mode, before 4am
#NOTE never active if waketime or bedtime state is Off
#######################################################################################################################
      bedtime_active:
        friendly_name: Bedtime Active
        unique_id: bedtime_active
        icon_template: mdi:bed-emmpty
        delay_on:
          seconds: 10  # allow automation.schedule_bedtime to detect bedtime trigger
        value_template: >
          {% set time = states('sensor.time') %}
          {% set wake = states('sensor.waketime_today') %}
          {% set bed = states('sensor.bedtime_today') %}
          {{ states('input_select.occupancy_mode') in ['Home','Guest']
              and (bed != 'Off' and wake != 'Off')
              and (bed < time or bed > time < wake if bed > wake else  bed < time < wake) }}

sensor:
#######################################################################################################################
## Time_Date Sensor
#######################################################################################################################
  - platform: time_date
    display_options:
      - time
      - date
      - date_time

  - platform: template
    sensors:
#######################################################################################################################
## Waketime Today
## - defaults to days if shift unknown or none
#######################################################################################################################
      waketime_today:
        friendly_name: Wake Time Today
        unique_id: waketime_today
        icon_template: mdi:white-balance-sunny
        value_template: >
          {% set alm = states('sensor.alarm_clock_next_alarm') %}
          {% set day = states('input_datetime.days_waketime')[0:5] %}
          {% set aft = states('input_datetime.afternoons_waketime')[0:5] %}
          {% set wkd = states('input_datetime.weekend_waketime')[0:5] %}
          {% set gst = states('input_datetime.guest_waketime')[0:5] %}

          {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_morning','on') %}
            {% set wake = gst %}
          {% else %}
            {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on')%}
                {% set wake = aft if is_state('sensor.current_shift','Afternoons') else day %}
            {% elif is_state('binary_sensor.work_today','off') and is_state('input_boolean.weekend_morning','on')%}
                {% set wake = wkd %}
            {% else %} {% set wake = 'Off' %}
            {% endif %}
          {% endif %}
          {{ wake if alm == 'Off' else wake if wake == 'Off' else [alm,wake]|min }}

      waketime_today_display:
        friendly_name: Wake Time Today
        unique_id: waketime_today_display
        icon_template: mdi:white-balance-sunny
        value_template: >
          {{ states('sensor.waketime_today') if states('sensor.waketime_today') in ['Off','unknown','unavailable','none']
              else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_today'))|timestamp_custom('%-I:%M %p') }}

#######################################################################################################################
## Waketime Tomorrow
## - bedtime before noon and time < bedtime check  work today, else check work tomorrow to account for bedtimes after midnight
## - defaults to days if shift unknown or none
#######################################################################################################################
      waketime_tomorrow:
        friendly_name: Waketime Tomorrow
        unique_id: waketime_tomorrow
        icon_template: mdi:weather-sunset-up
        value_template: >
          {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_morning','on') %}
            {{ states('input_datetime.guest_waketime')[0:5] }}
          {% else %}
            {% if is_state('sensor.bedtime_today','Off') or states('sensor.time') < states('sensor.bedtime_today') < '12:00' %}
              {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_morning','on') %}
                {% if is_state('sensor.current_shift','Afternoons') %}{{ states('input_datetime.afternoons_waketime')[0:5] }}
                {% else %}{{ states('input_datetime.days_waketime')[0:5] }}
                {% endif %}
              {% elif is_state('input_boolean.weekend_morning','on')%}{{ states('input_datetime.weekend_waketime')[0:5] }}
              {% else %} Off
              {% endif %}
            {% else %}
              {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_morning','on') %}
                {% if is_state('sensor.tomorrow_shift','Afternoons') %}{{ states('input_datetime.afternoons_waketime')[0:5] }}
                {% else %}{{ states('input_datetime.days_waketime')[0:5] }}
                {% endif %}
              {% elif is_state('input_boolean.weekend_morning','on') %}{{ states('input_datetime.weekend_waketime')[0:5] }}
              {% else %} Off
              {% endif %}
            {% endif %}
          {% endif %}

      waketime_tomorrow_display:
        friendly_name: Wake Time Today
        unique_id: waketime_tomorrow_display
        icon_template: mdi:weather-sunset-up
        value_template: >
          {{ states('sensor.waketime_tomorrow') if states('sensor.waketime_tomorrow') in ['Off','unknown','unavailable','none']
              else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_tomorrow'))|timestamp_custom('%-I:%M %p') }}

#######################################################################################################################
## Bedtime Today
## - accounts for bedtimes after midnight
## - defaults to days if shift unknown or none, weekends if work schedule off
#######################################################################################################################
      bedtime_today:
        friendly_name: Bedtime Today
        unique_id: bedtime_today
        icon_template: mdi:bed
        value_template: >
          {% set day = states('input_datetime.days_bedtime')[0:5] %}
          {% set aft = states('input_datetime.afternoons_bedtime')[0:5] %}
          {% set wkd = states('input_datetime.weekend_bedtime')[0:5] %}
          {% set bed = [day,aft,wkd]|reject('>','12:00')|max if [day,aft,wkd]|min < '12:00' else [day,aft,wkd]|max %}
          {% if is_state('binary_sensor.someone_home','on') and is_state('binary_sensor.owner_home','off') and is_state('input_boolean.guest_night','on') %}
            {{ states('input_datetime.guest_bedtime')[0:5] }}
          {% else %}
            {% if is_state('sensor.current_shift','Afternoons') and (states('sensor.time') < bed) %}
              {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_night','on') %} {{ aft }}
              {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
              {% else %} Off
              {% endif %}
            {% elif is_state('sensor.tomorrow_shift','Afternoons') %}
              {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_night','on') %} {{ aft }}
              {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
              {% else %} Off
              {% endif %}
            {% elif is_state('sensor.current_shift','Days') and (states('sensor.time') < bed) %}
              {% if is_state('binary_sensor.work_today','on') and is_state('input_boolean.workday_night','on') %} {{ day }}
              {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
              {% else %} Off
              {% endif %}
            {% elif is_state('sensor.tomorrow_shift','Days') %}
              {% if is_state('binary_sensor.work_tomorrow','on') and is_state('input_boolean.workday_night','on') %} {{ day }}
              {% elif is_state('input_boolean.weekend_night','on') %} {{ wkd }}
              {% else %} Off
              {% endif %}
            {% else %}
              {% if is_state('input_boolean.work_schedule','off') and is_state('input_boolean.weekend_night','on') %} {{ wkd }}
              {% elif is_state('input_boolean.workday_night','on') %} {{ day }}
              {% else %} Off
              {% endif %}
            {% endif %}
          {% endif %}

      bedtime_today_display:
        friendly_name: Bedtime Today
        unique_id: bedtime_today_display
        icon_template: mdi:bed
        value_template: >
            {{ states('sensor.bedtime_today') if states('sensor.bedtime_today')|lower in ['off','unknown','unavailable','none']
                else as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.bedtime_today'))|timestamp_custom('%-I:%M %p') }}

alert:
#######################################################################################################################
## Alert - Shift Selection
#######################################################################################################################
  shift_selection:
    name: Shift Selection
    title: Shift Selection Alert
    message: >-
      {% if is_state('binary_sensor.google_calendar_connected','off') %} Google Calendar is not connected. {{'\n'}}{% endif %}
      {%- if is_state('input_boolean.shift_override','on') -%} The shift override is on {%- endif -%}
      {{ ', and the' if is_state('input_boolean.shift_override','on') else '\nThe' }} current shift is {{ states('sensor.current_shift') }}.
    entity_id: binary_sensor.shift_selection_alert
    state: 'on'
    repeat: 1440
    notifiers: mobile_app_jphone
    data:
      tag: shift_selection
      group: General
      channel: Alert
      importance: max
      clickAction: /lovelace/schedule
      color: !secret WARNING_COLOR
      icon_url: !secret WORK_ICON
      image: !secret WORK_IMAGE
      actions:
        - action: turn_off_shift_override
          title: Override Off
        - action: pause_shift_selection
          title: Pause