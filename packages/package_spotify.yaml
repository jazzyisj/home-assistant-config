#######################################################################################################################
## Spotify Package
#######################################################################################################################
spotify:
  client_id: !secret SPOTIFY_CLIENTID
  client_secret: !secret SPOTIFY_SECRET

spotcast:
  sp_dc: !secret HASSIO_SP_DC
  sp_key: !secret HASSIO_SP_KEY
  accounts:
    jason:
      sp_dc: !secret JAZZYISJ_SP_DC
      sp_key: !secret JAZZYISJ_SP_KEY
    sheri:
      sp_dc: !secret SHERI_SP_DC
      sp_key: !secret SHERI_SP_KEY

variable:
  active_spotify_player:
    value: cleared
    attributes:
      friendly_name: "Active Spotify Media Player"
      icon: mdi:spotify
    restore: true

input_boolean:
#######################################################################################################################
## Restart Spotify - used to restart spotify after TTS
#######################################################################################################################
  spotify_restart:
    name: Restart Spotfy
    icon: mdi:spotify

sensor:
#######################################################################################################################
## Spotcast Sensor
#######################################################################################################################
  - platform: spotcast

  - platform: template
    sensors:
#######################################################################################################################
## Spotify Media Player app_name: Spotify
#NOTE media_player.spotify_hassio source doesn't pick up speaker groups
#######################################################################################################################
      spotify_media_player:
        friendly_name: Spotify Media Player
        unique_id: spotify_media_player
        icon_template: mdi:spotify
        value_template: >
          {% if expand('group.google_speaker_groups')|selectattr('attributes.app_name','eq','Spotify')
              |map(attribute='entity_id')|list|count > 0 %}
             {{ expand('group.google_speaker_groups')|selectattr('attributes.app_name','eq','Spotify')
                |map(attribute='entity_id')|join(',') }}
          {% else %}
            {{ expand('group.media_players_single')|selectattr('attributes.app_name','eq','Spotify')
                |map(attribute='entity_id')|join(',') }}
          {% endif %}

binary_sensor:
  - platform: template
    sensors:
#######################################################################################################################
## Spotify Connected
#######################################################################################################################
      spotify_connected:
        friendly_name: Spotify Connected
        unique_id: spotify_connected
        icon_template: >
          {{ 'mdi:spotify' if not states('media_player.spotify_hassio') in ['unknown','unavailable','none']
             else 'mdi:alert-circle' }}
        device_class: connectivity
        value_template: "{{ states('media_player.spotify_hassio') not in ['unknown','unavailable','none'] }}"

      spotify_connected_alert:
        friendly_name: Spotify
        unique_id: spotify_connected_alert
        icon_template: mdi:spotify
        value_template: "{{ is_state('binary_sensor.spotify_connected','off') and is_state('binary_sensor.alerts_enabled','on') }}"

#######################################################################################################################
## Spotify Active
#######################################################################################################################
      spotify_active:
        friendly_name: Spotify Active
        unique_id: spotify_active
        icon_template: mdi:spotify
        value_template: "{{ states(states('sensor.spotify_media_player')) in ['playing','paused'] }}"
        availability_template: "{{ is_state('binary_sensor.spotify_connected','on') }}"

script:
#######################################################################################################################
## Start Spotcast
#######################################################################################################################
  start_spotcast:
    alias: "Start Spotcast"
    description: "Play spotify playlist."
    icon: mdi:spotify
    mode: single
    sequence:
      - service: spotcast.start
        data:
          device_name: >
            {{ expand('group.media_players')|selectattr('entity_id','eq',states('variable.active_spotify_player'))
            |map(attribute='name')|join(',') }}
          force_playback: true

#######################################################################################################################
## Stop Spotify
#######################################################################################################################
  spotify_stop:
    alias: "Stop Spotify"
    description: "Stop Spotify media player."
    icon: mdi:spotify
    mode: single
    sequence:
      - service: media_player.turn_off
        data:
          entity_id: "{{ states('sensor.spotify_media_player') }}"

automation:
#######################################################################################################################
## Spotify - Play Started
#######################################################################################################################
  - id: spotify_play_started
    alias: "[Spotify] Play Started"
    description: "Store spotify media player, turn off radio if necessary."
    initial_state: true
    mode: queued
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.spotify_active
        to: 'on'

    action:
      - service: variable.set_variable
        data:
          variable: active_spotify_player
          value: "{{ states('sensor.spotify_media_player') }}"

      # turn off radio if spotify playing on a radio media player
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_on
                state: 'on'

              - !include /config/include/template/spotify_radio_playing_condition.yaml

            sequence:
              # turn automation off so spotify media players don't get turned off
              # radio media players turn off when speaker group memeber(s) get turned off
              - service: automation.turn_off
                data:
                  entity_id: automation.radio_turned_off
                  stop_actions: false

              - service: input_boolean.turn_off
                entity_id: input_boolean.radio_on

              - service: automation.turn_on
                entity_id: automation.radio_turned_off

      - service: script.set_media_player_volumes
        data:
          media_player: "{{ states('sensor.spotify_media_player') }}"
          source: radio_on

#######################################################################################################################
## Spotify - Resume Play
#######################################################################################################################
  - id: spotify_resume_play
    alias: "[Spotify] Resume Play"
    description: "Resume playing spotify playlist after TTS announcement."
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.tts_playing
        to: 'off'

      - platform: state
        entity_id: binary_sensor.alarm_clock_active
        to: 'off'

    condition:
      - condition: state
        entity_id: input_boolean.spotify_restart
        state: 'on'

    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.spotify_restart

      - service: spotcast.start
        data:
          device_name: >
            {{ expand('group.media_players')|selectattr('entity_id','eq',states('variable.active_spotify_player'))
            |map(attribute='name')|join(',') }}
          force_playback: true