###############################################################################
## Package - Spa Maintenance Reminder
###############################################################################
input_boolean:
  spa_maintenance_enabled:
    name: "Spa Maintenance Enabled"
    icon: mdi:hot-tub
  spa_maintenance_active:
    name: "Spa Maintenance Active"
    icon: mdi:hot-tub
  spa_maintenance_paused:
    name: "Spa Maintenance Paused"
    icon: mdi:hot-tub
    initial: false
  spa_maintenance_skip_next:
    name: "Spa Maintenance Skip Next"
    icon: mdi:hot-tub
    initial: false

input_datetime:
  spa_maintenance_days:
    name: "Spa Maintenance Days"
    icon: mdi:clock
    has_date: false
    has_time: true
  spa_maintenance_afternoons:
    name: "Spa Maintenance Afternoons"
    icon: mdi:clock
    has_date: false
    has_time: true
  spa_maintenance_weekends:
    name: "Spa Maintenance Weekends"
    icon: mdi:clock
    has_date: false
    has_time: true

input_number:
  spa_maintenance_day_interval:
    name: "Spa Maintenance Day Interval"
    icon: mdi:calendar-range
    unit_of_measurement: days
    mode: slider
    min: 1
    max: 7
    step: 1
  spa_maintenance_notification_interval:
    name: "Spa Maintenance Reminder Interval"
    icon: mdi:calendar-range
    unit_of_measurement: minutes
    mode: slider
    min: 5
    max: 240
    step: 5

template:
  - button:
      - name: "Spa Maintenance Done"
        unique_id: spa_maintenance_done
        icon: mdi:hot-tub
        press:
          - condition: state
            entity_id: binary_sensor.spa_maintenance_reminder
            state: "on"

          - action: input_boolean.turn_off
            target:
              entity_id: input_boolean.spa_maintenance_active

          - action: browser_mod.notification
            data:
              message: "Spa Maintenance reminder has been turned off."
              duration: 10000

      - name: "Skip Next Spa Maintenance"
        unique_id: skip_next_spa_maintenance
        icon: mdi:hot-tub
        press:
          - action: input_boolean.turn_on
            target:
              entity_id: input_boolean.spa_maintenance_skip_next

          - action: input_boolean.turn_off
            target:
              entity_id: input_boolean.spa_maintenance_active

      - name: "Pause Spa Maintenance"
        unique_id: pause_spa_maintenance
        icon: mdi:hot-tub
        press:
          - action: input_boolean.turn_on
            target:
              entity_id: input_boolean.spa_maintenance_paused

  - binary_sensor:
      - name: "Spa Maintenance Reminder"
        unique_id: spa_maintenance_reminder
        icon: mdi:hot-tub
        picture: >
          {% if is_state('input_boolean.spa_maintenance_paused', 'on') %}
            /local/images/entity_icons/spa_maintenance_paused.png
          {% elif is_state('input_boolean.spa_maintenance_active', 'on') %}
            /local/images/entity_icons/spa_maintenance.png
          {% else %}
            /local/images/entity_icons/spa_maintenance_off.png
          {% endif %}
        state: >
          {{ is_state('input_boolean.spa_maintenance_enabled', 'on')
                and is_state('input_boolean.spa_maintenance_active', 'on') }}

automation:
  ###############################################################################
  ## Reminders - Turn On Spa Maintenance
  ###############################################################################
  - id: reminders_turn_on_spa_maintenance
    alias: "[Reminders] Turn On Spa Maintenance"
    description: "Turn on reminder active boolean."
    trigger:
      - trigger: template
        value_template: >
          {% set time = states('sensor.time') %}
          {% set shift = states('sensor.time_trigger_shift') %}
          {% set last_run = states('button.spa_maintenance_done') %}
          {% if is_state('input_boolean.spa_maintenance_enabled', 'on')
              and not is_state('input_select.occupancy_mode','Vacation') %}
            {{ ((shift == 'days' and time == states('input_datetime.spa_maintenance_days')[0:5])
                  or (shift == 'afts' and time == states('input_datetime.spa_maintenance_afternoons')[0:5])
                  or (shift == 'wknd' and time == states('input_datetime.spa_maintenance_weekends')[0:5]))
                and (last_run == 'unknown' or (now().date()- (last_run | as_datetime).date()).days
                  >= states('input_number.spa_maintenance_day_interval') | int) }}
          {% endif %}
    action:
      - if:
          - condition: state
            entity_id: input_boolean.spa_maintenance_skip_next
            state: "off"
        then:
          - action: input_boolean.turn_on
            target:
              entity_id: input_boolean.spa_maintenance_active
        else:
          - action: input_boolean.turn_off
            target:
              entity_id: input_boolean.spa_maintenance_skip_next

  ###############################################################################
  ## Reminders - Spa Maintenance Done
  ###############################################################################
  - id: reminders_spa_maintenance_done
    alias: "[Reminders] Spa Maintenance Done"
    description: "Reset Spa Maintenance."
    max_exceeded: silent
    trigger:
      - trigger: event
        event_type: mobile_app_notification_action
        event_data:
          action: spa_maintenance_done
    condition:
      - condition: state
        entity_id: binary_sensor.spa_maintenance_reminder
        state: "on"
    action:
      - action: button.press
        target:
          entity_id: button.spa_maintenance_done

  ###############################################################################
  ## Reminders - Spa Maintenance Skip Next
  ###############################################################################
  - id: reminders_spa_maintenance_skip_next
    alias: "[Reminders] Spa Maintenance Skip Next"
    description: "Skip next Spa Maintenance reminder."
    max_exceeded: silent
    trigger:
      - trigger: event
        event_type: mobile_app_notification_action
        event_data:
          action: spa_maintenance_skip_next
    condition:
      - condition: state
        entity_id: binary_sensor.spa_maintenance_reminder
        state: "on"
    action:
      - action: button.press
        target:
          entity_id: button.skip_next_spa_maintenance

  ###############################################################################
  ## Reminders - Pause Spa Maintenance
  ###############################################################################
  - id: reminders_pause_spa_maintenance
    alias: "[Reminders] Pause Spa Maintenance"
    description: "Pause Spa Maintenance reminder."
    max_exceeded: silent
    trigger:
      - trigger: event
        event_type: mobile_app_notification_action
        event_data:
          action: pause_spa_maintenance
    condition:
      - condition: state
        entity_id: binary_sensor.spa_maintenance_reminder
        state: "on"
    action:
      - action: button.press
        target:
          entity_id: button.pause_spa_maintenance

  ###############################################################################
  ## Reminders -  Reset Spa Maintenance Paused
  ###############################################################################
  - id: reminders_reset_pause_spa_maintenance_paused
    alias: "[Reminders] Reset Spa Maintenance Paused"
    description: "Reset Spa Maintenance reminder paused."
    max_exceeded: silent
    trigger:
      - trigger: state
        entity_id: input_boolean.spa_maintenance_active
        to: "off"

      - trigger: state
        entity_id: input_boolean.spa_maintenance_paused
        to: "on"
        for:
          hours: 4

      - trigger: state
        id: check
        entity_id: input_boolean.spa_maintenance_paused
        to: "on"

      - trigger: state
        entity_id: binary_sensor.jason_home
        to: "on"
        for:
          minutes: 15
    condition:
      - condition: state
        entity_id: input_boolean.spa_maintenance_paused
        state: "on"

      - condition: template
        value_template: "{{ iif(trigger.id == 'check', is_state('input_boolean.spa_maintenance_active', 'off'), true) }}"
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.spa_maintenance_paused

  ###############################################################################
  ## Reminders - Reset Spa Maintenance Active
  ###############################################################################
  - id: reminders_reset_spa_maintenance_active
    alias: "[Reminders] Reset Spa Maintenance Active"
    description: "Reset Spa Maintenance Active boolean."
    trigger:
      - trigger: state
        entity_id: input_boolean.spa_maintenance_enabled
        to: "off"

      - trigger: state
        entity_id: input_boolean.spa_maintenance_active
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.spa_maintenance_enabled
        state: "off"
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.spa_maintenance_active

  ###############################################################################
  ## Reminders - Reset Spa Maintenance Skip Next
  ###############################################################################
  - id: reminders_reset_spa_maintenance_skip_next
    alias: "[Reminders] Reset Jason Medication Skip Next"
    description: "Reset Jason Medication skip next boolean."
    trigger:
      - trigger: state
        entity_id: input_boolean.spa_maintenance_enabled
        to: "off"

      - trigger: state
        entity_id: input_boolean.spa_maintenance_skip_next
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.spa_maintenance_enabled
        state: "off"
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.spa_maintenance_skip_next

  ###############################################################################
  ## Reminders - Spa Maintenance Notification
  ###############################################################################
  - id: reminders_spa_maintenance_notification
    alias: "[Reminders] Spa Maintenance Notification"
    description: "Send notification until reminder is off."
    trigger:
      - trigger: homeassistant
        event: start

      - trigger: state
        entity_id: binary_sensor.spa_maintenance_reminder
        to: "on"
        not_from:
          - unknown
          - unavailable

      - trigger: state
        entity_id: input_boolean.spa_maintenance_paused
        to: "off"
    condition:
      - condition: state
        entity_id: binary_sensor.spa_maintenance_reminder
        state: "on"

      - condition: state
        entity_id: input_boolean.spa_maintenance_paused
        state: "off"
    action:
      - repeat:
          sequence:
            - if: "{{ not is_state('input_select.occupancy_mode', 'Night') }}"
              then:
                - action: notify.jason
                  data:
                    message: "It's time to check the spa!"
                    data:
                      tag: spa_maintenance_reminder
                      group: Reminder
                      visibility: public
                      persistent: true
                      notification_icon: mdi:hot-tub
                      icon_url: !secret HOTTUB_ICON
                      actions:
                        - title: "Pause"
                          action: pause_spa_maintenance

                        - title: "Skip"
                          action: spa_maintenance_skip_next

                        - title: "Done"
                          action: spa_maintenance_done

                # wait to see if turned off before tts
                - wait_template: "{{ is_state('binary_sensor.spa_maintenance_reminder', 'off') }}"
                  timeout:
                    minutes: 2

                - if:
                    - condition: state
                      entity_id: binary_sensor.spa_maintenance_reminder
                      state: "on"
                  then:
                    - action: script.turn_on
                      continue_on_error: true
                      target:
                        entity_id: script.tts_play
                      data:
                        variables:
                          message: "Attention! The Spa Maintenance needs to be done!"
                          quiet_play: true
                          save_message: true

            - wait_template: >
                {{ is_state('binary_sensor.spa_maintenance_reminder', 'off')
                    or is_state('input_boolean.spa_maintenance_paused', 'on') }}
              timeout:
                minutes: "{{ states('input_number.spa_maintenance_notification_interval') | int }}"
          until:
            - or:
                - condition: state
                  entity_id: binary_sensor.spa_maintenance_reminder
                  state: "off"

                - condition: state
                  entity_id: input_boolean.spa_maintenance_paused
                  state: "on"

  ###############################################################################
  ## Reminders - Clear Spa Maintenance Notification
  ###############################################################################
  - id: reminders_clear_spa_maintenance_notification
    alias: "[Reminders] Clear Spa Maintenance Notification"
    description: "Clear reminder notification."
    trigger:
      - trigger: state
        entity_id: input_boolean.spa_maintenance_active
        to: "off"

      - trigger: state
        entity_id: input_boolean.spa_maintenance_paused
        to: "on"
    action:
      - action: notify.jason
        data:
          message: clear_notification
          data:
            tag: spa_maintenance_reminder
