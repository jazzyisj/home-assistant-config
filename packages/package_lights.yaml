#######################################################################################################################
## Package - Lights #NEW_LIGHT
#######################################################################################################################
homeassistant:
  customize:
    light.dining_room_rgb_light:
      supported_features: 177
    light.upstairs_bathroom_vanity_rgb_light:
      supported_features: 177
    light.upstairs_bathroom_vanity_rgb1_light:
      supported_features: 177
    light.upstairs_bathroom_vanity_rgb2_light:
      supported_features: 177

    sensor.garage_luminance:
      device_class: illuminance
    sensor.upstairs_bathroom_luminance:
      device_class: illuminance

lutron_caseta:
  host: !secret LUTRON_IP
  keyfile: /ssl/lutron/caseta.key
  certfile: /ssl/lutron/caseta.crt
  ca_certs: /ssl/lutron/caseta-bridge.crt

color_extractor:

light:
#######################################################################################################################
## Light Switches
#######################################################################################################################
  - platform: switch
    name: Kitchen Sink Light
    entity_id: switch.kitchen_sink_light

  - platform: switch
    name: Back Yard Garden Light
    entity_id: switch.back_yard_garden_light

#######################################################################################################################
## Light Groups
## https://www.home-assistant.io/components/light.group/
#######################################################################################################################
  - platform: group
    name: Upstairs Potlights
    entities:
      - light.kitchen_potlights
      - light.dining_room_potlights
      - light.upstairs_hallway_potlights

  - platform: group
    name: Garage Lights
    entities:
      - light.side_entrance_light

  - platform: group
    name: Upstairs Bathroom Vanity RGB Light
    entities:
      - light.upstairs_bathroom_vanity_rgb_light_1
      - light.upstairs_bathroom_vanity_rgb_light_2

#######################################################################################################################
## Virtual Lights #VIRTUAL
#######################################################################################################################
  - platform: virtual
    name: Downstairs Hallway Light

  - platform: virtual
    name: Family Room Potlights

  - platform: virtual
    name: Master Bedroom Hallway Light

  - platform: virtual
    name: Master Bedroom Closet Light

  - platform: virtual
    name: Downstairs Kitchen Light

  - platform: virtual
    name: Downstairs Dining Room Light

  - platform: virtual
    name: Downstairs Shower Room Light

  - platform: virtual
    name: Downstairs Shower Light

  - platform: virtual
    name: Downstairs Shower Vanity Light

  - platform: virtual
    name: Downstairs Bathroom Light

  - platform: virtual
    name: Downstairs Bathroom Vanity Light

  - platform: virtual
    name: Downstairs Laundry Room Light

switch:
#######################################################################################################################
## Flux Light Platform ##
## https://www.home-assistant.io/integrations/flux/
#######################################################################################################################
  - platform: flux
    lights:
      - light.dining_room_rgb_light
      - light.upstairs_bathroom_vanity_rgb_light
    name: Light Flux
    start_time: '10:00'
    stop_time: '22:00'
    start_colortemp: 3000
    sunset_colortemp: 2700
    stop_colortemp: 2100
    disable_brightness_adjust: true
    mode: xy
    transition: 15
    interval: 300

input_boolean:
#######################################################################################################################
## Light Automation
#######################################################################################################################
  light_automation:
    name: Light Automation
    icon: mdi:lightbulb-on-outline

#######################################################################################################################
## Auto Light Enabled
#######################################################################################################################
  auto_light_enabled:
    name: Auto Light Enabled
    icon: mdi:lightbulb-on-outline

#######################################################################################################################
## Illuminance Light Enabled
#######################################################################################################################
  illuminance_light_enabled:
    name: Illuminance Light Enabled
    icon: mdi:lightbulb-on-outline

#######################################################################################################################
## Auto Light On - override
#######################################################################################################################
  auto_light_on:
    name: Auto Light Override
    icon: mdi:lightbulb-on-outline

input_number:
#######################################################################################################################
## Illluminance Threshold
#######################################################################################################################
  illuminance_threshold:
    name: Illluminance Threshold
    icon: mdi:weather-sunny
    unit_of_measurement: lux
    min: 0
    max: 20000
    step: 100

#######################################################################################################################
## Lighting On Sun Elevation
#######################################################################################################################
  lighting_on_sun_elevation:
    name: Lights On Sun Elevation
    icon: mdi:weather-sunset-down
    unit_of_measurement: '°'
    min: -20
    max: 20
    step: 1

#######################################################################################################################
## Lighting Off Sun Elevation
#######################################################################################################################
  lighting_off_sun_elevation:
    name: Lights Off Sun Elevation
    icon: mdi:weather-sunset-up
    unit_of_measurement: '°'
    min: -20
    max: 20
    step: 1

#######################################################################################################################
## Light History Hours
#######################################################################################################################
  light_history_hours:
    name: Light History Hours
    icon: mdi:progress-clock
    min: 0
    max: 168
    step: 1
    unit_of_measurement: hours

timer:
#######################################################################################################################
## Arrive Home Lights Timer
#######################################################################################################################
  arrive_home_lights:
    name: Arrive Home Lights
    icon: mdi:timer-outline
    duration:
      minutes: 10

#######################################################################################################################
## Light In Use Timers #NEW_LIGHT
#######################################################################################################################
  side_entrance_light:
    name: Side Entrance
    icon: mdi:progress-clock
    duration:
      minutes: 15

  living_room_pot_lights:
    name: Living Room Pot Lights
    icon: mdi:progress-clock
    duration:
      hours: 4

  kitchen_potlights:
    name: Kitchen Potlights
    icon: mdi:progress-clock
    duration:
      hours: 4

  kitchen_sink_light:
    name: Kitchen Sink Light
    icon: mdi:progress-clock
    duration:
      hours: 4

  dining_room_potlights:
    name: Dining Room Potlights
    icon: mdi:progress-clock
    duration:
      hours: 4

  dining_room_light:
    name: Dining Room Light
    icon: mdi:progress-clock
    duration:
      hours: 4

  upstairs_hallway_potlights:
    name: Upstairs Hallway Potlights
    icon: mdi:progress-clock
    duration:
      hours: 4

  upstairs_bathroom_shower_light:
    name: Upstairs Bathroom Shower
    icon: mdi:progress-clock
    duration:
      minutes: 30

  upstairs_bathroom_vanity_light:
    name: Upstairs Bathroom Vanity Light
    icon: mdi:progress-clock
    duration:
      minutes: 30

  office_light:
    name: Office Light
    icon: mdi:progress-clock
    duration:
      minutes: 60

  office_potlights:
    name: Office Potlights
    icon: mdi:progress-clock
    duration:
      minutes: 60

  upstairs_bedroom_light:
    name: Upstairs Bedroom Light
    icon: mdi:progress-clock
    duration:
      minutes: 90

  upstairs_bedroom_potlights:
    name: Upstairs Bedroom Potlights
    icon: mdi:progress-clock
    duration:
      minutes: 90

  master_bedroom_light:
    name: Master Bedroom Light
    icon: mdi:progress-clock
    duration:
      minutes: 90

group:
#################################################################################################
## Lights
#######################################################################################################################
  lights:
    icon: mdi:lightbulb-on
    all: true
    entities: !include /config/include/entities/light_entities.yaml

#######################################################################################################################
## Light - In Use Timers
#######################################################################################################################
  light_in_use_timers:
    icon: mdi:timer-outline
    all: true
    entities:
      - timer.side_entrance_light
      - timer.living_room_pot_lights
      - timer.kitchen_potlights
      - timer.kitchen_sink_light
      - timer.dining_room_light
      - timer.dining_room_potlights
      - timer.upstairs_hallway_potlights
      - timer.upstairs_bathroom_vanity_light
      - timer.upstairs_bathroom_shower_light
      - timer.office_light
      - timer.office_potlights
      - timer.upstairs_bedroom_light
      - timer.upstairs_bedroom_potlights
      - timer.master_bedroom_light

#######################################################################################################################
## Light - In Use Automations
#######################################################################################################################
  light_in_use_automations:
    icon: mdi:lightbulb-on
    entities:
      - automation.light_living_room_pot_lights_in_use
      - automation.light_side_entrance_light_in_use

binary_sensor:
#######################################################################################################################
## Sun2 Elevation Sensors
#######################################################################################################################
  - platform: sun2 #TEST
    monitored_conditions:
      - elevation
      - elevation: 3
      - elevation:
          above: -6
          name: Above Civil Dawn

#######################################################################################################################
## Light Binary Sensors
#######################################################################################################################

  - platform: template
    sensors:
#######################################################################################################################
## Lutron Bridge Connected - test a lutron light for unknown status to see if lutron is connected
#######################################################################################################################
      lutron_connected:
        friendly_name: Lutron Bridge
        unique_id: lutron_connected
        icon_template: "{{ 'mdi:lightbulb' if not states('light.living_room_pot_lights')|lower in ['unknown','unavailable','none'] else 'mdi:alert-circle' }}"
        device_class: connectivity
        value_template: "{{ not states('light.living_room_pot_lights')|lower in ['unknown','unavailable','none'] }}"

      lutron_connected_alert:
        friendly_name: Lutron
        unique_id: lutron_connected_alert
        icon_template: mdi:lightbulb
        value_template: "{{ is_state('binary_sensor.lutron_connected','off') and is_state('binary_sensor.alerts_enabled','on') }}"

#######################################################################################################################
## Lights On
#######################################################################################################################
      lights_on:
        friendly_name: Lights On
        icon_template: mdi:lightbulb
        value_template: "{{ expand('group.lights')|selectattr('state','eq','on')|list|count > 0 }}"

#######################################################################################################################
## Light In Use
#######################################################################################################################
      light_in_use:
        friendly_name: Light In Use
        icon_template: mdi:light-switch
        value_template: "{{ expand('group.light_in_use_timers')|selectattr('state','eq','active')|list|count > 0}}"

#######################################################################################################################
## Auto Lights - https://www.home-assistant.io/cookbook/automation_sun/
## switch to allow lights to turn on by automation/script when if sun has set
#######################################################################################################################
      auto_light_on:
        friendly_name: Auto Lights
        icon_template: mdi:lightbulb-on
        value_template: >
          {% set time = states('sensor.time') %}
          {% set sun = states('sensor.sun_elevation')|float %}
          {% if is_state('input_boolean.auto_light_on','on') %} true
          {% else %}
             {{ is_state('binary_sensor.startup_complete','on')
                and ((is_state('input_boolean.auto_light_enabled','on')
                  and (sun < states('input_number.lighting_on_sun_elevation')|int and time > '12:00')
                  or (sun < states('input_number.lighting_off_sun_elevation')|int and time < '12:00'))) }}
           {% endif %}

#######################################################################################################################
## Illuminance Light On https://github.com/pnbruckner/ha-illuminance
## switch to allow lights to turn on by illuminance sensor
## only on when auto_light_on is off
#######################################################################################################################
      illuminance_light_on:
        friendly_name: Illuminance Lights
        icon_template: mdi:lightbulb-on
        value_template: >
          {{ is_state('input_boolean.illuminance_light_enabled','on')
              and is_state('binary_sensor.auto_light_on','off')
              and is_state('binary_sensor.startup_complete','on')
               and states('sensor.illuminance')|int <= states('input_number.illuminance_threshold')|int }}

#######################################################################################################################
## Light Scene Active - used to prevent auto light automations from triggering when scene script running
#######################################################################################################################
      light_scene_active:
        friendly_name: Light Scene Active
        icon_template: mdi:home-lightbulb-outline
        value_template: >
            {{ is_state('script.scene_morning_lights','on')
                or is_state('script.scene_bedtime_lights','on')
                or is_state('script.scene_movie','on')
                or is_state('script.scene_company','on') }}

sensor:
#######################################################################################################################
## Illuminance Sensor   https://github.com/pnbruckner/ha-illuminance
#######################################################################################################################
  - platform: illuminance
    name: Illuminance
    entity_id: sensor.dark_sky_icon

  - platform: sun2
    monitored_conditions:
      - solar_midnight
      - astronomical_dawn
      - nautical_dawn
      - dawn
      - sunrise
      - solar_noon
      - sunset
      - dusk
      - nautical_dusk
      - astronomical_dusk
      - daylight
      - civil_daylight
      - nautical_daylight
      - astronomical_daylight
      - night
      - civil_night
      - nautical_night
      - astronomical_night
      - elevation
      - min_elevation
      - max_elevation

  - platform: template
    sensors:
#######################################################################################################################
## Day / Night Sensor
#######################################################################################################################
      day_night:
        friendly_name: "Day/Night"
        unique_id: day_night
        icon_template: "{{ 'mdi:weather-sunny' if is_state('sun.sun','above_horizon') else 'mdi:weather-night' }}"
        value_template: "{{ 'Day' if is_state('sun.sun','above_horizon') else 'Night' }}"

#######################################################################################################################
## Sun Elevation
#######################################################################################################################
      sun_elevation:
        friendly_name: Sun Elevation
        unique_id: sun_elevation
        icon_template: mdi:weather-sunset
        unit_of_measurement: '°'
        value_template: "{{ state_attr('sun.sun','elevation') }}"

#######################################################################################################################
## Sun Next Rising
#######################################################################################################################
      sun_next_rising:
        friendly_name: Sun Rise
        unique_id: sun_next_rising
        icon_template: mdi:weather-sunset-up
        value_template: "{{ as_timestamp(state_attr('sun.sun','next_rising'))|timestamp_custom('%-I:%M %p',true) }}"

#######################################################################################################################
## Sun Next Setting
#######################################################################################################################
      sun_next_setting:
        friendly_name: Sun Set
        unique_id: sun_next_setting
        icon_template: mdi:weather-sunset-down
        value_template: "{{ as_timestamp(state_attr('sun.sun','next_setting'))|timestamp_custom('%-I:%M %p',true) }}"

#######################################################################################################################
## Illuminance
# pnbruckner's sensor component as a template.
# https://github.com/pnbruckner/ha-illuminance/blob/master/custom_components/illuminance/sensor.py
# https://community.home-assistant.io/t/outdoor-illuminance-template-sensor/228581
#######################################################################################################################
  - platform: template
    sensors:
      outdoor_illuminance_darksky: #TEST
        friendly_name: Outdoor Illuminance
        icon_template: mdi:brightness-auto
        unit_of_measurement: lx
        attribute_templates: #"sensor.dark_sky_icon"  #TEST  sensor.cc_home_weather_condition
          current_condition: |
            {%- set factors = namespace(current_condition='') %}

            {#- Retrieve the current condition and normalize the value #}
            {%- set weather_sensors = ['sensor.dark_sky_icon'] %}
            {%- for sensor in weather_sensors if states(sensor) != "unknown" and factors.current_condition == "" %}
              {%- set factors.current_condition = states(sensor) %}
            {%- endfor %}
            {%- set current_condition = factors.current_condition|lower|replace("partly cloudy w/ ","")|replace("mostly cloudy w/ ","")|replace("freezing","")|replace("and","")|replace("-", " ")|replace("_", " ")|replace("(","")|replace(")","")|replace(" ", "") %}

            {{ current_condition }}
          condition_factor: |
            {% set factors = namespace(condition='') %}
            {% set current_condition = state_attr("sensor.outdoor_illuminance_darksky","current_condition") %}

            {%- set condition_factors = {
              "10000": ("clear","clearday","clearnight","sunny","windy","wind","exceptional"),
              "7500": ("partlycloudy","partlycloudyday","partlycloudynight","partlysunny","mostlysunny","mostlyclear","hazy","hazysunshine","intermittentclouds"),
              "2500": ("cloudy","mostlycloudy"),
              "1000": ("fog","rainy","rain","showers","pouring","snowy","snow","snowyheavy","snowyrainy","flurries","chanceflurries", "chancerain","chancesleet","drearyovercast","sleet"),
              "200": ("hail", "lightning", "tstorms")
            } %}
            {%- for factor in condition_factors if current_condition in condition_factors[factor] %}
              {%- set factors.condition = factor %}
            {%- endfor %}

            {{ factors.condition }}
          sun_factor: |
            {% set factors = namespace(sun='') %}

            {%- set right_now = now() | as_timestamp %}
            {%- set sunrise = states("sensor.sunrise") | as_timestamp %}
            {%- set sunrise_begin = states("sensor.dawn") | as_timestamp %}
            {%- set sunrise_end = sunrise + (40 * 60) %}
            {%- set sunset = states("sensor.sunset") | as_timestamp %}
            {%- set sunset_begin = sunset - (40 * 60) %}
            {%- set sunset_end = states("sensor.dusk") | as_timestamp %}
            {%- if sunrise_end < right_now and right_now < sunset_begin %}
              {%- set factors.sun = 1 %}
            {%- elif sunset_end < right_now or right_now < sunrise_begin %}
              {%- set factors.sun = 0 %}
            {%- elif right_now <= sunrise_end %}
              {%- set factors.sun = (right_now - sunrise_begin) / (60*60) %}
            {%- else %}
              {%- set factors.sun = (sunset_end - right_now) / (60*60) %}
            {%- endif %}

            {%- set factors.sun = 1 if factors.sun > 1 else factors.sun %}

            {{ factors.sun }}
        value_template: |
          {%- set sun_factor = state_attr("sensor.outdoor_illuminance_darksky","sun_factor") %}
          {%- set condition_factor = state_attr("sensor.outdoor_illuminance_darksky","condition_factor") %}

          {# Take an educated guess #}
          {%- set illuminance = (sun_factor|float * condition_factor|float) | round %}
          {%- set illuminance = 10 if illuminance < 10 else illuminance %}
          {{ illuminance }}

  - platform: template
    sensors:
      outdoor_illuminance_cc: #TEST
        friendly_name: Outdoor Illuminance
        icon_template: mdi:brightness-auto
        unit_of_measurement: lx
        attribute_templates:
          current_condition: |
            {%- set factors = namespace(current_condition='') %}

            {#- Retrieve the current condition and normalize the value #}
            {%- set weather_sensors = ['sensor.cc_home_weather_condition'] %}
            {%- for sensor in weather_sensors if states(sensor) != "unknown" and factors.current_condition == "" %}
              {%- set factors.current_condition = states(sensor) %}
            {%- endfor %}
            {%- set current_condition = factors.current_condition|lower|replace("partly cloudy w/ ","")|replace("mostly cloudy w/ ","")|replace("freezing","")|replace("and","")|replace("-", " ")|replace("_", " ")|replace("(","")|replace(")","")|replace(" ", "") %}

            {{ current_condition }}
          condition_factor: |
            {% set factors = namespace(condition='') %}
            {% set current_condition = state_attr("sensor.outdoor_illuminance_cc","current_condition") %}

            {%- set condition_factors = {
              "10000": ("clear","clearday","clearnight", "sunny", "windy", "exceptional"),
              "7500": ("partlycloudy","partlycloudyday","partlycloudynight", "partlysunny", "mostlysunny", "mostlyclear", "hazy", "hazysunshine", "intermittentclouds"),
              "2500": ("cloudy", "mostlycloudy"),
              "1000": ("fog", "rainy", "showers", "pouring", "snowy", "snowyheavy", "snowyrainy", "flurries", "chanceflurries", "chancerain", "chancesleet", "drearyovercast", "sleet"),
              "200": ("hail", "lightning", "tstorms")
            } %}
            {%- for factor in condition_factors if current_condition in condition_factors[factor] %}
              {%- set factors.condition = factor %}
            {%- endfor %}

            {{ factors.condition }}
          sun_factor: |
            {% set factors = namespace(sun='') %}

            {%- set right_now = now() | as_timestamp %}
            {%- set sunrise = states("sensor.sunrise") | as_timestamp %}
            {%- set sunrise_begin = states("sensor.dawn") | as_timestamp %}
            {%- set sunrise_end = sunrise + (40 * 60) %}
            {%- set sunset = states("sensor.sunset") | as_timestamp %}
            {%- set sunset_begin = sunset - (40 * 60) %}
            {%- set sunset_end = states("sensor.dusk") | as_timestamp %}
            {%- if sunrise_end < right_now and right_now < sunset_begin %}
              {%- set factors.sun = 1 %}
            {%- elif sunset_end < right_now or right_now < sunrise_begin %}
              {%- set factors.sun = 0 %}
            {%- elif right_now <= sunrise_end %}
              {%- set factors.sun = (right_now - sunrise_begin) / (60*60) %}
            {%- else %}
              {%- set factors.sun = (sunset_end - right_now) / (60*60) %}
            {%- endif %}

            {%- set factors.sun = 1 if factors.sun > 1 else factors.sun %}

            {{ factors.sun }}
        value_template: |
          {%- set sun_factor = state_attr("sensor.outdoor_illuminance_cc","sun_factor") %}
          {%- set condition_factor = state_attr("sensor.outdoor_illuminance_cc","condition_factor") %}

          {# Take an educated guess #}
          {%- set illuminance = (sun_factor|float * condition_factor|float) | round %}
          {%- set illuminance = 10 if illuminance < 10 else illuminance %}
          {{ illuminance }}