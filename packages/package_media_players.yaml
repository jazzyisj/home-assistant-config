#######################################################################################################################
## Medie Player Package #NEW_MEDIA_PLAYER
#NOTE cast device with alarm display names must end with '_display' (eg alarm clock casting etc.)
#NOTE TV cast device names must end with '_tv'
#######################################################################################################################
homeassistant:
  customize:
    group.all_speakers:
      friendly_name: All Speakers
    group.broadcast_speakers:
      friendly_name: Broadcast Speakers
    group.music_speakers:
      friendly_name: Music Speakers
    group.quiet_speakers:
      friendly_name: Quiet Speakers
    group.night_speakers:
      friendly_name: Night Speakers

    media_player.living_room_speaker:
      device_class: speaker
    media_player.dining_room_display:
      device_class: speaker
    media_player.bedroom_display:
      device_class: speaker
    media_player.bathroom_speaker:
      device_class: speaker
    media_player.laundry_room_speaker:
      device_class: speaker
    media_player.garage_speaker:
      device_class: speaker
    media_player.living_room_tv:
      device_class: tv
    media_player.bedroom_tv:
      device_class: tv
    media_player.deck_tv:
      device_class: tv

variable:
#######################################################################################################################
## Speaker Volumes (float) - store/restore media player reset volume
#######################################################################################################################
  living_room_speaker_volume:
    value: 0
    attributes:
      friendly_name: Volume - Living Room Speaker
      icon: mdi:volume-low
    restore: true

  dining_room_display_volume:
    value: 0
    attributes:
      friendly_name: Volume - Dining Room Display
      icon: mdi:volume-low
    restore: true

  bedroom_display_volume:
    value: 0
    attributes:
      friendly_name: Volume - Bedroom Display
      icon: mdi:volume-low
    restore: true

  bathroom_speaker_volume:
    value: 0
    attributes:
      friendly_name: Volume - Bathroom Speaker
      icon: mdi:volume-low
    restore: true

  laundry_room_speaker_volume:
    value: 0
    attributes:
      friendly_name: Volume - Laundry Room Speaker
      icon: mdi:volume-low
    restore: true

  garage_speaker_volume:
    value: 0
    attributes:
      friendly_name: Volume - Garage Speaker
      icon: mdi:volume-low
    restore: true

  living_room_tv_volume:
    value: 0
    attributes:
      friendly_name: Volume - Living Room TV
      icon: mdi:volume-low
    restore: true

  bedroom_tv_volume:
    value: 0
    attributes:
      friendly_name: Volume - Bedroom TV
      icon: mdi:volume-low
    restore: true

  deck_tv_volume:
    value: 0
    attributes:
      friendly_name: Volume - Deck TV
      icon: mdi:volume-low
    restore: true

input_boolean:
#######################################################################################################################
## Media Player Automation
#######################################################################################################################
  media_player_automation:
    name: Media Player Automation
    icon: mdi:disc-player

#######################################################################################################################
## Mute All
#######################################################################################################################
  mute_all:
    name: Mute All
    icon: mdi:volume-off

group:
#######################################################################################################################
## Media Players
## all media players (except spotify)
#######################################################################################################################
  media_players:
    icon: mdi:music-box-multiple
    all: true
    entities:
      !include /config/include/entities/media_player_entities.yaml

#######################################################################################################################
## Media Players
## individual media players (no groups)
#######################################################################################################################
  media_players_single:
    icon: mdi:music-box-multiple
    all: true
    entities:
      !include /config/include/entities/media_player_entities_single.yaml

#######################################################################################################################
## Google Speaker Group Media Players - Google Home Speaker Groups
## - used to identify group media players and check group for individual media player states
#######################################################################################################################
  google_speaker_groups:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.all_speakers
      - media_player.music_speakers
      - media_player.broadcast_speakers
      - media_player.quiet_speakers
      - media_player.night_speakers

#######################################################################################################################
## All Speakers - Entities in corresponding Google Home Speaker Group
#######################################################################################################################
  all_speakers:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.living_room_speaker
      - media_player.dining_room_display
      - media_player.bedroom_display
      - media_player.bathroom_speaker
      - media_player.laundry_room_speaker
      - media_player.garage_speaker
      - media_player.living_room_tv
#DISABLED      - media_player.bedroom_tv  # still on Gen1 Chromcast, cannot be in google group
#DISABLED      - media_player.deck_tv  # still on Gen1 Chromcast, cannot be in google group

#######################################################################################################################
## Music Speakers - Entities in corresponding Google Home Speaker Group
#######################################################################################################################
  music_speakers:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.living_room_speaker
      - media_player.dining_room_display
      - media_player.bedroom_display
      - media_player.bathroom_speaker
      - media_player.laundry_room_speaker
      - media_player.garage_speaker

#######################################################################################################################
## Broadcast Speakers - Entities in corresponding Google Home Speaker Group
#######################################################################################################################
  broadcast_speakers:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.living_room_speaker
      - media_player.dining_room_display
      - media_player.bedroom_display
      - media_player.bathroom_speaker
      - media_player.laundry_room_speaker
      - media_player.garage_speaker

#######################################################################################################################
## Quiet Speakers - Entities in corresponding Google Home Speaker Group
#######################################################################################################################
  quiet_speakers:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.dining_room_display
      - media_player.laundry_room_speaker
      - media_player.garage_speaker

#######################################################################################################################
## Night Speakers - Entities in corresponding Google Home Speaker Group
#######################################################################################################################
  night_speakers:
    icon: mdi:music-box-multiple
    all: true
    entities:
      - media_player.dining_room_display
      - media_player.garage_speaker

binary_sensor:
  - platform: template
    sensors:
#######################################################################################################################
## Speaker Group Playing
## - delay_off for switching between speaker/tts
#######################################################################################################################
      speaker_group_playing:
        friendly_name: Speaker Group Playing
        unique_id: speaker_group_playing
        icon_template: mdi:speaker-multiples
        delay_off:
          seconds: 5
        value_template: "{{ expand('group.google_speaker_groups')|selectattr('state','in',['playing','paused'])|list|count > 0 }}"

sensor:
  - platform: template
    sensors:
######################################################################################################################
## Media Player Display Sensors - used by conditional media player display cards
## check if media player is on and is active radio/tts/alarm clock player or in player speaker group
######################################################################################################################
      all_speakers:
        unique_id: all_speakers
        value_template: >
          {% set media = 'media_player.all_speakers' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}

          {% if states(media) in ['playing','paused'] %}
            {% if tts == media and is_state('binary_sensor.tts_playing','on') %} tts
            {% elif alarm == media and is_state('binary_sensor.alarm_clock_active','on') %} alarm_clock
            {% elif spotify == media and is_state('binary_sensor.spotify_active','on') %} spotify
            {% elif radio == media and is_state('input_boolean.radio_on','on') %} radio
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.all_speakers') not in ['unknown','unavailable','none'] }}"

      broadcast_speakers:
        unique_id: broadcast_speakers
        value_template: >
          {% set media = 'media_player.broadcast_speakers' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}

          {% if states(media) in ['playing','paused'] %}
            {% if tts == media and is_state('binary_sensor.tts_playing','on') %} tts
            {% elif alarm == media and is_state('binary_sensor.alarm_clock_active','on') %} alarm_clock
            {% elif spotify == media and is_state('binary_sensor.spotify_active','on') %} spotify
            {% elif radio == media and is_state('input_boolean.radio_on','on') %} radio
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.broadcast_speakers') not in ['unknown','unavailable','none'] }}"

      music_speakers:
        unique_id: music_speakers
        value_template: >
          {% set media = 'media_player.music_speakers' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}

          {% if states(media) in ['playing','paused'] %}
            {% if tts == media and is_state('binary_sensor.tts_playing','on') %} tts
            {% elif alarm == media and is_state('binary_sensor.alarm_clock_active','on') %} alarm_clock
            {% elif spotify == media and is_state('binary_sensor.spotify_active','on') %} spotify
            {% elif radio == media and is_state('input_boolean.radio_on','on') %} radio
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.music_speakers') not in ['unknown','unavailable','none'] }}"

      quiet_speakers:
        unique_id: quiet_speakers
        value_template: >
          {% set media = 'media_player.quiet_speakers' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}

          {% if states(media) in ['playing','paused'] %}
            {% if tts == media and is_state('binary_sensor.tts_playing','on') %} tts
            {% elif alarm == media and is_state('binary_sensor.alarm_clock_active','on') %} alarm_clock
            {% elif spotify == media and is_state('binary_sensor.spotify_active','on') %} spotify
            {% elif radio == media and is_state('input_boolean.radio_on','on') %} radio
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.quiet_speakers') not in ['unknown','unavailable','none'] }}"

      night_speakers:
        unique_id: night_speakers
        value_template: >
          {% set media = 'media_player.night_speakers' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}

          {% if states(media) in ['playing','paused'] %}
            {% if tts == media and is_state('binary_sensor.tts_playing','on') %} tts
            {% elif alarm == media and is_state('binary_sensor.alarm_clock_active','on') %} alarm_clock
            {% elif spotify == media and is_state('binary_sensor.spotify_active','on') %} spotify
            {% elif radio == media and is_state('input_boolean.radio_on','on') %} radio
            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.night_speakers') not in ['unknown','unavailable','none'] }}"

      living_room_speaker:
        unique_id: living_room_speaker
        value_template: >
          {% set media = 'media_player.living_room_speaker' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.living_room_speaker') not in ['unknown','unavailable','none'] }}"

      dining_room_display:
        unique_id: dining_room_display
        value_template: >
          {% set media = 'media_player.dining_room_display' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.dining_room_display') not in ['unknown','unavailable','none'] }}"

      bedroom_display:
        unique_id: bedroom_display
        value_template: >
          {% set media = 'media_player.bedroom_display' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.bedroom_display') not in ['unknown','unavailable','none'] }}"

      bathroom_speaker:
        unique_id: bathroom_speaker
        value_template: >
          {% set media = 'media_player.bathroom_speaker' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.bathroom_speaker') not in ['unknown','unavailable','none'] }}"

      laundry_room_speaker:
        unique_id: laundry_room_speaker
        value_template: >
          {% set media = 'media_player.laundry_room_speaker' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.laundry_room_speaker') not in ['unknown','unavailable','none'] }}"

      garage_speaker:
        unique_id: garage_speaker
        value_template: >
          {% set media = 'media_player.garage_speaker' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.garage_speaker') not in ['unknown','unavailable','none'] }}"

      living_room_tv:
        unique_id: living_room_tv
        value_template: >
          {% set media = 'media_player.living_room_tv' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.living_room_tv') not in ['unknown','unavailable','none'] }}"

      bedroom_tv:
        unique_id: bedroom_tv
        value_template: >
          {% set media = 'media_player.bedroom_tv' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.bedroom_tv') not in ['unknown','unavailable','none'] }}"

      deck_tv:
        unique_id: deck_tv
        value_template: >
          {% set media = 'media_player.deck_tv' %}
          {% set radio = states('sensor.radio_media_player') %}
          {% set alarm = states('sensor.alarm_clock_media_player') %}
          {% set spotify = states('sensor.spotify_media_player') %}
          {% set tts = states('sensor.tts_media_player') %}
          {% set t_on = is_state('binary_sensor.tts_playing','on') %}
          {% set a_on = is_state('binary_sensor.alarm_clock_active','on') %}
          {% set r_on = is_state('input_boolean.radio_on','on') %}
          {% set s_on = is_state('binary_sensor.spotify_active','on') %}

          {% if states(media) in ['playing','paused'] %}
            {% if t_on and tts == media %} tts
            {% elif t_on and tts in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ tts.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'tts_group' if found.value|int == 1 else 'false' }}

            {% elif a_on and alarm == media %} alarm_clock
            {% elif a_on and alarm in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ alarm.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'alarm_clock_group' if found.value|int == 1 else 'false' }}

            {% elif s_on and spotify == media %} spotify
            {% elif s_on and spotify in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ spotify.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'spotify_group' if found.value|int == 1 else 'false' }}

            {% elif r_on and radio == media %} radio
            {% elif  r_on and  radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if item == media %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ 'radio_group' if found.value|int == 1 else 'false' }}

            {% else %} on
            {% endif %}
          {% else %} off
          {% endif %}
        availability_template: "{{ states('media_player.deck_tv') not in ['unknown','unavailable','none'] }}"

script:
#######################################################################################################################
## Pause All Media Players
#######################################################################################################################
  pause_all_media_players:
    alias: "Pause All Media Players"
    description: "Pause all media players."
    icon: mdi:play-box-multiple-outline
    mode: restart
    sequence:
      # check if any media players are playing
      - condition: template
        value_template: >
          {{ expand('group.media_players')|selectattr('state','eq','playing')|list|count > 0 }}

      # pause any playing media players
      - service: media_player.media_pause
        data:
          entity_id: >
            {{ expand('group.media_players')|selectattr('state','eq','playing')|map(attribute='entity_id')|join(',') }}

#######################################################################################################################
## Resume All Media Players
#######################################################################################################################
  resume_all_media_players:
    alias: "Resume All Media Players"
    description: "Resume all media players."
    icon: mdi:play-box-multiple-outline
    mode: restart
    sequence:
      # check if any media players are paused
      - condition: template
        value_template: >
          {{ expand('group.media_players')|selectattr('state','eq','paused')|list|count > 0 }}

      # resume any paused media players
      - service: media_player.media_play
        data:
          entity_id: >
            {{ expand('group.media_players')|selectattr('state','eq','paused')|map(attribute='entity_id')|join(',') }}


#######################################################################################################################
## Set Media Player Volumes
#NOTE - this does not set speaker group volumes, group volumes are determined by individual media players
#######################################################################################################################
  set_media_player_volumes:
    alias: "Set Media Player Volumes"
    description: "Set media player volumes."
    icon: mdi:play-box-multiple-outline
    mode: restart
    fields:
      media_player:
        description: "Media player entity_id(spotify), or 'all'"
        example: media_player.dining_room_display
      source:
        description: "Module calling script (tts_off, t_on, phone_off etc.)"
        example: 'tts_off'
    variables:
      players: "{{ state_attr('group.media_players_single','entity_id') }}"
    sequence:
      - repeat:
          while:
            - condition: template
              value_template: "{{ state_attr('group.media_players_single','entity_id')|count > repeat.index }}"

          sequence:
            # if is specified media player or media player is in specified speaker group
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {% set item = players[repeat.index-1] %}
                        {% if media_player in ['all',item] or item in media_player %} true
                        {% elif media_player in state_attr('group.google_speaker_groups','entity_id') %}
                            {{ expand('group.' ~ media_player.split('.')[1])|selectattr('entity_id','eq',item)|list|length > 0 }}
                        {% else %} off  {# only an invalid media player should make it here #}
                        {% endif %}

                    # else don'tts restore zero volumes - media player volume may have been adjusted in off state by user
                    - condition: template
                      value_template: >
                        {% set item = players[repeat.index-1] %}
                        {% set n = item.split('.')[1] %}
                        {% set src_on = ['radio_on','radio_reset','alarm_clock_on','phone_on','tts_on','mute'] %}
                        {% set src_off = ['tts_off','alarm_clock_off','phone_off','speakerphone_off'] %}
                        {% if source in src_on %} true
                        {% elif source in src_off %}{{ states('variable.' ~ source[0:-3] ~ n)|float > 0 }}
                        {% else %}{{ states('variable.' ~ n ~ '_volume')|float > 0 }}
                        {% endif %}

                    # *reset - set all idle media players to stored device volumes
                    # *radio_off - set active radio media players back to stored device volumes when radio off
                    # alarm_clock - set active alarm clock media players to stored volumes
                    # alarm_clock_on - set active alarm clock media players to set alarm clock volume
                    # radio_reset - set active radio media players to normal/quiet/night volume or leave if volume alreadly lower
                    # radio_on - set active radio media players to set radio volume
                    # tts_off - set active tts media players to stored volumes after when off
                    # t_on - set all media players to 20% during tts play
                    # phone_off - set all media players to stored volumes when phone off
                    # phone_on - set all media players to 20% during phone calls
                    # speakerphone_off - set all media players to stored volumes when speakerphone off
                    # mute - set all media players to 0

                  sequence:
                    - service: media_player.volume_set
                      data:
                        entity_id: >
                          {{ players[repeat.index-1] }}
                        # enforces quiet hours volume limit on radio play unless override on
                        # UndefinedError: 'mappingproxy object' has no attribute 'volume_level'
                        volume_level: >
                          {% set phone_vol = 0.2 %}
                          {% set src_off = ['tts_off','alarm_clock_off','phone_off','speakerphone_off'] %}
                          {% set players = state_attr('group.media_players_single','entity_id') %}
                          {% set item = players[repeat.index-1] %}
                          {% set n = item.split('.')[1] %}
                          {% if states[item].attributes.volume_level is defined %}{% set v = state_attr(item,'volume_level')|float %}
                          {% else %}{% set v = states('variable.' ~ n ~ '_volume')|float %}
                          {% endif %}
                          {% set rpv = states('input_number.radio_volume')|float/100 %}
                          {% set rqv = states('input_number.radio_volume_quiet')|float/100 %}
                          {% set rdv = states('input_number.radio_volume_default')|float/100 %}
                          {% set res_vol = rqv if is_state('binary_sensor.quiet_hours','on') else rdv %}
                          {% if source == 'radio_on' and is_state('sensor.phone_in_use','on') %}
                            {% set radio_vol = 0 if is_state_attr('sensor.speakerphone_in_use','speaker_on',true)
                                 else (v if v <= phone_vol else phone_vol) %}
                          {% else %}
                            {% set radio_vol = rqv if is_state('binary_sensor.quiet_hours','on') and is_state('input_boolean.radio_volume_override','off') else rpv %}
                          {% endif %}
                          {% if source in src_off %}{{ states('variable.' ~ source[0:-3] ~ n)|float }}
                          {% elif source in ['tts_on','phone_on'] %}{{ v if v <= phone_vol else phone_vol }}
                          {% elif source == 'radio_on' %}{{ radio_vol }}
                          {% elif source == 'radio_reset' %}{{ v if v <= res_vol else res_vol }}
                          {% elif source == 'alarm_clock_on' %}{{ states('input_number.alarm_clock_volume')|float/100 }}
                          {% elif source == 'mute' %} 0
                          {% else %}{{ states('variable.' ~ n ~ '_volume')|float }}
                          {% endif %}

#######################################################################################################################
## Save Media Player Volumes
#NOTE - does not save speaker group volumes, group volumes are determined by individual media players
#######################################################################################################################
  save_media_player_volumes:
    alias: "Save Media Player Volumes"
    description: "Store media player volumes to corresponding input_number entity, format to 2 decimal places."
    icon: mdi:play-box-multiple-outline
    mode: single
    fields:
      source:
        description: "Source calling script."
        example: 't_on'
    variables:
      players: "{{ state_attr('group.media_players_single','entity_id') }}"
    sequence:
      - repeat:
          while:
            - condition: template
              value_template: >
                {% set players = state_attr('group.media_players_single','entity_id') %}
                {{ players|count > repeat.index }}

          sequence:
            - choose:
                # don'tts save if media player is in off state (volume will be null == 0)
                - conditions:
                    - condition: template
                      value_template: >
                        {{ not states(players[repeat.index-1]) in ['off','unknown','unavailable','none'] }}

                    # do not save zero volume values - user may have adjusted media player volume in off state
                    - condition: template
                      value_template: >
                        {% if states[players[repeat.index-1]].attributes.volume_level is defined %}
                        {{ true if source in ['tts_reset','alarm_clock_reset']
                            else state_attr(players[repeat.index-1],'volume_level')|float > 0 }}
                        {% else %} off
                        {% endif %}

                  sequence:
                    # source is radio_on and phone on store radio input volume to restore when phone turns off
                    - choose:
                        - conditions: "{{ source == 'radio_on' and is_state('sensor.phone_in_use','on') }}"
                          sequence:
                            - service: variable.set_variable
                              data:
                                variable: >
                                  {% set n = players.split('.')[1] %}
                                  {{ 'phone_' ~ n }}
                                value: >
                                  {{ states('input_number.radio_volume')|float }}

                            # speakerphone on store radio input volume to restore when speakerphone turns off
                            - choose:
                                - conditions: "{{ is_state_attr('sensor.phone_in_use','speaker_on',true) }}"
                                  sequence:
                                    - service: variable.set_variable
                                      data:
                                        variable: >
                                          {% set n = players[repeat.index-1].split('.')[1] %}
                                          {{ 'speakerphone_' ~ n }}
                                        value: >
                                          {{ states('input_number.radio_volume')|float }}

                      default:
                        # if radio_on and not phone/speakerphone nothing to save
                        - choose:
                            - conditions: "{{ source != 'radio_on'}}"
                              sequence:
                                - service: variable.set_variable
                                  data:
                                    variable: >
                                      {% set n = players[repeat.index-1].split('.')[1] %}
                                      {% set src_on = ['tts_on','phone_on','speakerphone_on','alarm_clock_on'] %}
                                      {{ source[0:-2] ~ n if source in src_on else n ~ '_volume' }}

                                    value: >
                                      {% set n = players[repeat.index-1].split('.')[1] %}
                                      {{ states('variable.' ~ n ~ '_volume') if source in ['tts_reset','alarm_clock_reset']
                                          else '%0.2f'|format(state_attr(players[repeat.index-1],'volume_level')|float) }}

automation:
#######################################################################################################################
## Media Player - Mute All
#######################################################################################################################
  - id: media_player_mute_all
    alias: "[Media Player] Mute All"
    description: "Display system toast message."
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.mute_all

    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.mute_all
                state: 'off'

            sequence:
              - service: browser_mod.toast
                data:
                  duration: 30000
                  message: "Sytem mute has been turned off."

        default:
          - service: browser_mod.toast
            data:
              duration: 30000
              message: "Sytem mute has been turned on."

#######################################################################################################################
## Media Player - Auto Off
#######################################################################################################################
  - id: media_player_auto_off
    alias: "[Media Player] Auto Off"
    description: "Automatically stop media players."
    initial_state: true
    mode: restart
    trigger:
      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Night
          - Away
          - Vacation
        for:
          seconds: 5 # prevent trigger on quick changes in state (eg guest-> home-> guest)

      - platform: state
        entity_id:
          - input_boolean.mute_all
          - binary_sensor.smoke_detected_alert
          - binary_sensor.co_detected_alert
        to: 'on'
        from: 'off'

      - platform: state
        entity_id: alarm_control_panel.house
        to: 'triggered'

    # if triggered by occupancy mode only run if presence, media_player automation enabled, always run for alerts, smoke etc.
    condition: >
      {{ (is_state('input_boolean.presence_automation','on') and is_state('input_boolean.media_player_automation','on'))
          if trigger.entity_id == 'input_select.occupancy_mode' else true }}

    action:
      # stop any playing media players
      - choose:
          - conditions: "{{ expand('group.media_players')|selectattr('state','in',['playing','paused'])|map(attribute='entity_id')|list|count > 0 }}"
            sequence:
              - service: media_player.media_stop
                data:
                  entity_id: >
                    {{ expand('group.media_players')|selectattr('state','in',['playing','paused'])|map(attribute='entity_id')|join(',') }}

      # if alarm keep media players turned on to play alert
      - condition: not
        conditions:
          - condition: state
            entity_id: alarm_control_panel.house
            state: triggered

      - service: media_player.turn_off
        entity_id: all

      # only run if assistant relay addon running
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.assistant_relay_status
                state: 'on'

            sequence:
              # delay turning off TV if night mode #TEMP
              - choose:
                  - conditions: "{{ trigger.entity_id == 'input_select.occupancy_mode' and is_state('input_select.occupancy_mode','Night') }}"
                    sequence:
                      - delay:
                          minutes: 60

              # turn of livingroom TV with assistant relay
              - service: rest_command.assistant_relay
                data:
                  command: "Turn off the living room TV"

#######################################################################################################################
## Media Player - Auto Pause
#IDEA speakerphone -> all tvs alarm problem?
#######################################################################################################################
  - id: media_player_auto_pause
    alias: "[Media Player] Auto Pause"
    description: "Automatically pause media players."
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: alarm_control_panel.house
        to: warning

    condition:
      - condition: state
        entity_id: input_boolean.media_player_automation
        state: 'on'

    action:
      - service: script.pause_all_media_players

#######################################################################################################################
## Media Player - Auto Resume
#IDEA speakerphone -> all tvs alarm problem?
#######################################################################################################################
  - id: media_player_auto_resume
    alias: "[Media Player] Auto Resume"
    description: "Automatically resume media players."
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      # radio and alarm clock will replay automatically - this is for everything else
      # delay to allow radio/alarm to replay first
      - platform: state
        entity_id: alarm_control_panel.house
        to: disarmed
        from: warning
        for:
          seconds: 5

    condition:
      - condition: state
        entity_id: input_boolean.media_player_automation
        state: 'on'

    action:
      - service: script.resume_all_media_players

#######################################################################################################################
## Media Player Volume Changed
## - media player is float, input_number is percent
## - if alarm speaker group volume changed it will trigger individual media player volume changes
#NOTE volume changes aren'tts picked up when media player is off state - no fix
#######################################################################################################################
  - id: media_player_volume_changed
    alias: "[Media Player] Volume Changed"
    description: "Change stored volume when media player volume changes."
    initial_state: true
    mode: queued
    max: 20
    trigger:
      - platform: state
        entity_id: !include /config/include/entities/media_player_entities_single.yaml

    condition:
      - condition: state
        entity_id: input_boolean.media_player_automation
        state: 'on'

      - condition: template
        value_template: "{{ not is_state('alarm_control_panel.house','triggered') }}"

      # only run if the volume has changed on trigger entity
      - condition: template
        value_template: >
              {{ '%0.2f'|format(state_attr(trigger.from_state.entity_id,'volume_level')|float)
                  != '%0.2f'|format(state_attr(trigger.to_state.entity_id,'volume_level')|float) }}

        # only run if trigger state is not off or volume will be set to 0
      - condition: template
        value_template: "{{ not states(trigger.to_state.state)|lower in ['off','unknown','unavailable','none'] }}"

      # trigger is not alarm radio media player if radio is on
      - condition: template
        value_template: >
          {% if is_state('input_boolean.radio_on','off') %} true
          {% else %}
            {% set radio = states('sensor.radio_media_player') %}
            {% if trigger.entity_id == radio %} false
            {% elif radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if trigger.entity_id == item %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ found.value|int == 0 }}
            {% else %} on
            {% endif %}
          {% endif %}

      # trigger is not alarm spotify media player if spotify playing
      - condition: template
        value_template: >
          {% if is_state('binary_sensor.spotify_active','off') %} true
          {% else %}
            {% set radio = states('sensor.spotify_media_player') %}
            {% if trigger.entity_id == radio %} false
            {% elif radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if trigger.entity_id == item %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ found.value|int == 0 }}
            {% else %} on
            {% endif %}
          {% endif %}

      # trigger is not an alarm clock media player if alarm clock is on
      - condition: template
        value_template: >
          {% if is_state('binary_sensor.alarm_clock_active','off') %} true
          {% else %}
            {% set radio = states('sensor.alarm_clock_media_player') %}
            {% if trigger.entity_id == radio %} false
            {% elif radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if trigger.entity_id == item %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ found.value|int == 0 }}
            {% else %} on
            {% endif %}
          {% endif %}

      # trigger is not annoucement media player if announcement/alert playing
      - condition: template
        value_template: >
          {% if is_state('binary_sensor.tts_playing','off') %} true
          {% else %}
            {% set radio = states('sensor.tts_media_player') %}
            {% if trigger.entity_id == radio %} false
            {% elif radio in state_attr('group.google_speaker_groups','entity_id') %}
              {% set found = namespace(value=0) %}
              {% for item in state_attr('group.' ~ radio.split('.')[1],'entity_id') %}
                {% if trigger.entity_id == item %}{% set found.value = 1 %}{% endif %}
              {% endfor %}
              {{ found.value|int == 0 }}
            {% else %} on
            {% endif %}
          {% endif %}

    action:
      - service: system_log.write
        data:
          message: "**** TRIGGER - {{ trigger.entity_id }} **** "
          level: critical

      - service: variable.set_variable
        data:
          variable: "{{ trigger.entity_id.split('.')[1] }}_volume"
          value: "{{ '%0.2f'|format(state_attr(trigger.to_state.entity_id,'volume_level')|float) }}"

#######################################################################################################################
## Media Player - Volume Reset #NEW_MEDIA_PLAYER
#NOTE not done in repeat so we can set volumes per media player
#######################################################################################################################
  - id: media_player_volume_reset
    alias: "[Media Player] Volume Reset"
    description: "Reset media player volumes according to home mode or quiet hours."
    initial_state: true
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.quiet_hours

      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Night
          - Home
          - Guest
        from:
          - Night
          - Home
          - Guest

      # quiet hours/occupancy mode may have changed during while offline
      - platform: state
        entity_id: variable.startup_complete
        to: 'true'

      # reset volumes when turning system mute off
      - platform: state
        entity_id: input_boolean.mute_all
        to: 'off'

      # could have been prevented from running during alarm event
      - platform: state
        entity_id: alarm_control_panel.house
        to: disarmed
        from: triggered

    condition:
      - condition: state
        entity_id: input_boolean.media_player_automation
        state: 'on'

      # wait until startup complete, quiet hours off at startup
      - condition: state
        entity_id: variable.startup_complete
        state: 'true'

    action:
      # if night/quiet only reset if volume higher than mode volume unless player volume zero then set to mode volume
      - service: variable.set_variable
        data:
          variable: living_room_speaker_volume
          value: >
            {% set v = states('variable.living_room_speaker_volume')|float %}
            {% set q = 0.5 %}
            {% set n = 0.3 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: dining_room_display_volume
          value: >
            {% set v = states('variable.dining_room_display_volume')|float %}
            {% set q = 0.3 %}
            {% set n = 0.2 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: bedroom_display_volume
          value: >
            {% set v = states('variable.bedroom_display_volume')|float %}
            {% set q = 0.3 %}
            {% set n = 0.15 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: bathroom_speaker_volume
          value: >
            {% set v = states('variable.bathroom_speaker_volume')|float %}
            {% set q = 0.3 %}
            {% set n = 0.2 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: laundry_room_speaker_volume
          value: >
            {% set v = states('variable.laundry_room_speaker_volume')|float %}
            {% set q = 0.3 %}
            {% set n = 0.2 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: garage_speaker_volume
          value: >
            {% set v = states('variable.garage_speaker_volume')|float %}
            {% set q = 0.5 %}
            {% set n = 0.5 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 0.5
            {% endif %}

      - service: variable.set_variable
        data:
          variable: living_room_tv_volume
          value: >
            {% set v = states('variable.living_room_tv_volume')|float %}
            {% set q = 0.7 %}
            {% set n = 0.4 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 1
            {% endif %}

      - service: variable.set_variable
        data:
          variable: bedroom_tv_volume
          value: >
            {% set v = states('variable.bedroom_tv_volume')|float %}
            {% set q = 0.7 %}
            {% set n = 0.4 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 1
            {% endif %}

      - service: variable.set_variable
        data:
          variable: deck_tv_volume
          value: >
            {% set v = states('variable.deck_tv_volume')|float %}
            {% set q = 0.7 %}
            {% set n = 0.4 %}
            {% if is_state('input_select.occupancy_mode','Night') %}{{ n if v > n else v if v > 0 else n }}
            {% elif is_state('binary_sensor.quiet_hours','on') %}{{ q if v > q else v if v > 0 else q }}
            {% else %} 1
            {% endif %}

      # adjust radio player volumes if higher than check value (default/quiet)
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_on
                state: 'on'

            sequence:
              - service: script.set_media_player_volumes
                data:
                  media_player: "{{ states('sensor.radio_media_player') }}"
                  source: radio_reset

      # adjust spotify player volumes if higher than check value (default/quiet)
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.radio_on
                state: 'on'

            sequence:
              - service: script.set_media_player_volumes
                data:
                  media_player: "{{ states('sensor.spotify_media_player') }}"
                  source: radio_reset

      # store new values in alarm_clock variables if alarm_clock on so they are set to new values when alarm clock off
      # do this after radio - more recent values for overlapping players
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.alarm_clock_active
                state: 'on'

            sequence:
              - service: script.save_media_player_volumes
                data:
                  media_player: "{{ states('sensor.tts_media_player') }}"
                  source: alarm_clock_reset

      # store new values in tts variables if tts on so they are set to new values when tts off
      # do after alarm clock - more recent values for overlapping players
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.tts_playing
                state: 'on'

            sequence:
              - service: script.save_media_player_volumes
                data:
                  media_player: "{{ states('sensor.tts_media_player') }}"
                  source: tts_reset

      # reset all idle media player volumes, do last in case any media players have turned off
      #NOTE volumes won'tts be reset if something else (ie. youtube) is playing on the media player
      - service: script.set_media_player_volumes
        data:
          media_player: >
            {{ states.media_player|select('in', expand('group.media_players'))|selectattr('state','in',['off','idle'])|map(attribute='entity_id')|join(',') }}
          source: reset