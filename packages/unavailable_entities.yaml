#######################################################################################################################
## PACKAGE: Unavailable Entities Sensor v2.2
## DESCRIPTION: Count and list entities with a state of unknown or unavailable
## REQUIREMENTS: Home Assistant v2024.8
## USAGE: https://github.com/jazzyisj/unavailable-entities-sensor/blob/main/README.md
#######################################################################################################################

# REQUIRED - This command line sensor is a list disabled entities
command_line:
  sensor:
      name: Disabled Device Entities
      unique_id: disabled_device_entities
      json_attributes:
        - entities
      value_template: "{{ value_json.entities | length }}"
      command: 'jq ''.data.entities |= map(select(.disabled_by? != null) | {entity_id: .entity_id}) | del(.data.deleted_entities) | flatten | .[3]'' < .storage/core.entity_registry'

# REQUIRED - This template sensor is the number of unavailable entities
template:
  - sensor:
      - name: "Unavailable Entities"
        unique_id: unavailable_entities
        icon: "{{ iif(states(this.entity_id)|int(-1) > 0, 'mdi:alert-circle', 'mdi:check-circle') }}"
        state_class: measurement
        state: >
          {% set entities = state_attr('group.unavailable_entities', 'entity_id') %}
          {{ entities | count if entities != none else -1 }}

# REQUIRED - Add individual entities to ignore to this group (remove [] if adding entities)
group:
  ignored_entities:
    entities: []

# REQUIRED - This automation is required to create and update the monitored entities group. Updates once every minute.
automation:
  - id: update_unavailable_entities_group
    alias: "Update Unavailable Entities Group"
    description: "Update unavailable entities group."
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: homeassistant
        id: startup
        event: start

      - trigger: event
        event_type: call_service
        event_data:
          domain: group
          service: reload

      - trigger: time_pattern
        minutes: "/1"
    actions:
      # IMPORTANT - This is the template to edit to bulk exclude entities with filters.
      - action: group.set
        data:
          object_id: unavailable_entities
          entities: >
            {% set disabled = state_attr('sensor.disabled_device_entities', 'entities')
                |regex_replace(find='\[|\]|\{|\}|\'entity_id\':', replace='') %}
            {{ states
                | rejectattr('domain', 'in', ['button', 'conversation', 'event', 'group', 'image',
                  'input_button', 'input_text', 'remote', 'tts', 'scene', 'stt'])
                | rejectattr('entity_id', 'in', state_attr('group.ignored_entities', 'entity_id'))
                | rejectattr('entity_id', 'in', disabled)
                | selectattr('state', 'in', ['unknown', 'unavailable'])
                | map(attribute='entity_id') | sort }}

  # OPTIONAL - Example automation to demonstrate how you can utilize this sensor, see example folder for more.
  # - id: unavailable_entities_notification
  #   alias: "Unavailable Entities Notification"
  #   description: "Create persistent notification if unavailable entities, dismiss if none."
  #   mode: restart
  #   triggers:
  #     - trigger: state
  #       entity_id: group.unavailable_entities
  #       attribute: entity_id
  #       to: ~
  #       for: 5 # throttle triggers and prevent blank notifications
  #   conditions:
  #     - condition: template
  #       alias: "Sensor state is a valid numerical value"
  #       value_template: "{{ is_number(states('sensor.unavailable_entities')) }}"
  #   actions:
  #     - if:
  #         - condition: numeric_state
  #           entity_id: sensor.unavailable_entities
  #           below: 1
  #       then:
  #         - action: persistent_notification.dismiss
  #           data:
  #             notification_id: unavailable_entities
  #       else:
  #         - action: persistent_notification.create
  #           data:
  #             notification_id: unavailable_entities
  #             title: "Unavailable Entities"
  #             message: "{{ state_attr('group.unavailable_entities', 'entity_id') | join('\n') }}"

  - id: unavailable_entities_notification
    alias: "Unavailable Entities Notification"
    description: "Create persistent notification if unavailable entities, dismiss if none."
    mode: restart
    triggers:
      - trigger: state
        entity_id: group.unavailable_entities
        attribute: entity_id
        to: ~
        for: 5 # throttle triggers and prevent blank notifications
    conditions:
      - condition: template
        alias: "Sensor state is a valid numerical value"
        value_template: "{{ is_number(states('sensor.unavailable_entities')) }}"
    actions:
      - action: persistent_notification.create
        data:
          notification_id: unavailable_entities
          title: "Unavailable Entities"
          message: >
            {% set ns = namespace(result=[]) %}
            {% for s in expand(state_attr('group.unavailable_entities', 'entity_id')) %}
              {% set ns.result = ns.result + [
                  device_attr(s.entity_id, "name") ~ "|" ~ device_id(s.entity_id) ~ "|- **" ~ s.name ~ "**\n"
                  ~ "  - *entity_id*: " ~ s.entity_id ~ "\n"
                  ~ "  - *state*: " ~ s.state ~ "\n"
                ]
              %}
            {% endfor %}
            {% set ns.result = ns.result | sort %}
            {% set lastdev = namespace( id="" ) %}
            {% set tarr = ns.result %}
            {% set ns.result = [] %}
            {% for item in tarr %}
              {% set dev = namespace( id="" ) %}
              {% set entity = namespace( data="" ) %}
              {% set dev.id = item.split("|")[1] %}
              {% set entity.data = item.split("|")[2] %}
              {% if lastdev.id != dev.id %}
                {% if dev.id != 'None' %}
                  {% set ns.result = ns.result + [ "**<a href=\"/config/devices/device/" ~ dev.id ~ "\">" ~ device_attr(dev.id, "name") ~ "</a>**" ] %}
                {% else %}
                  {% set ns.result = ns.result + [ "**Non-Device Entities**" ] %}
                {% endif %}
                {% set lastdev.id = dev.id %}
              {% endif %}
              {% set ns.result = ns.result + [ entity.data ] %}
            {% endfor %}
            {{ ns.result | join('\n') }}