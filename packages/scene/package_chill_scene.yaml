###############################################################################
## Package - Chill Scene
###############################################################################
input_boolean:
  chill_scene:
    name: "Chill Scene"
    icon: mdi:creation

timer:
  chill_scene:
    name: "Chill Scene Timer"
    icon: mdi:progress-clock
    restore: true

input_number:
  chill_scene_duration:
    name: "Chill Scene Duration"
    unit_of_measurement: min
    min: 30
    max: 480
    step: 10

  rgb_blue_chill:
    name: "RGB Blue"
    min: 0
    max: 255
    step: 1

  rgb_green_chill:
    name: "RGB Green"
    min: 0
    max: 255
    step: 1

  rgb_red_chill:
    name: "RGB Red"
    min: 0
    max: 255
    step: 1

template:
  - sensor:
      - name: "RGB Chill Scene"
        unique_id: rgb_chill_scene
        icon: mdi:lightbulb
        state: >
          rgb({{ states('input_number.rgb_red_chill')|int }},
          {{- states('input_number.rgb_green_chill')|int }},
          {{- states('input_number.rgb_blue_chill')|int }})
        attributes:
          rgb_color: >
            [{{ states('input_number.rgb_red_chill')|int }},
              {{- states('input_number.rgb_green_chill')|int }},
              {{- states('input_number.rgb_blue_chill')|int }}]

automation:
  ###############################################################################
  ## Scene - Set Light Color Chill
  ###############################################################################
  - id: scene_set_light_color_chill
    alias: "[Scene] Set Light Color Chill"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.rgb_chill_scene

      - platform: state
        entity_id: input_boolean.chill_scene
        to: "on"
        for: 5 # allow reset toggle, light scene on
    condition:
      - condition: state
        entity_id: input_boolean.chill_scene
        state: "on"
    action:
      - condition: template
        value_template: "{{ states('sensor.rgb_chill_scene') not in ['unknown','unavailable'] }}"

      - service: light.turn_on
        target:
          entity_id: light.dining_room_rgb_light
        data:
          rgb_color: "{{ state_attr('sensor.rgb_chill_scene','rgb_color') }}"

  ###############################################################################
  ## Scene - Chill Scene On
  ###############################################################################
  - id: scene_chill_scene_on
    alias: "[Scene] Chill Scene On"
    description: "Turn on chill scene."
    trigger:
      - platform: state
        entity_id: input_boolean.chill_scene
        to: "on"
        from: "off"
    action:
      - if:
          - condition: state
            entity_id: input_select.occupancy_mode
            state:
              - Night
              - Away
              - Vacation
        then:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.chill_scene

          - service: browser_mod.notification
            data:
              message: "company scene cannot be turned on in Night or Away mode."
              duration: 30000
        else:
          - variables:
              scene_modes: "{{ ['movie_scene','company_scene'] }}"

          - repeat: # turn off other scenes
              count: "{{ scene_modes|count }}"
              sequence:
                - variables:
                    scene_mode: "{{ scene_modes[repeat.index-1] }}"

                - if: "{{ is_state('input_boolean.' ~ scene_mode,'on') }}"
                  then:
                    - service: input_boolean.turn_off
                      target:
                        entity_id: "input_boolean.{{ scene_mode }}"

          - service: script.turn_off
            target:
              entity_id:
                - script.waketime
                - script.morning_lights
                - script.bedtime

          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.bedtime_delayed

          - service: script.activate_light_scene
            data:
              scene: >
                {{ 'chill_lights' if is_state('binary_sensor.nighttime_illuminance_lights','on')
                    else 'chill_daytime_lights' }}

          - service: script.media_players_off
            data:
              ignore_players:
                - media_player.office_tv
                - media_player.bedroom_tv
                - media_player.bedroom_hub

          - if:
              - condition: state
                entity_id: input_boolean.media_preset_enabled_chill
                state: "on"
            then:
              - service: script.media_preset_play
                data:
                  preset: chill

          - service: timer.start
            target:
              entity_id: timer.chill_scene
            data:
              duration:
                minutes: "{{ states('input_number.chill_scene_duration')|int(0) }}"

  ###############################################################################
  ## Scene - Chill Scene Off
  ###############################################################################
  - id: scene_chill_scene_off
    alias: "[Scene] Chill Scene Off"
    description: "Turn off chill scene."
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: input_boolean.chill_scene
        to: "off"
        from: "on"

      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Night
          - Away
          - Vacation

      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.chill_scene
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.chill_scene

      - service: timer.cancel
        entity_id: timer.chill_scene

      - condition: state
        entity_id: input_select.occupancy_mode
        state:
          - Home
          - Guest

      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.bedtime_delayed

      - service: script.media_players_off
        data:
          entity_id: > # turns of both reg and mass players
            {{ states.media_player
              |selectattr('name','eq',states('select.media_preset_speaker_chill'))
              |map(attribute='entity_id')|list }}
