###############################################################################
## Package - Shower Scene
###############################################################################
input_boolean:
  shower_scene:
    name: "Shower Scene"
    icon: mdi:shower-head

timer:
  shower_scene:
    name: "Shower Scene Timer"
    icon: mdi:progress-clock
    restore: true

input_number:
  shower_scene_duration:
    name: "Shower Scene Duration"
    unit_of_measurement: min
    min: 5
    max: 60
    step: 5

automation:
  ###############################################################################
  ## Scene - Shower Scene On
  ###############################################################################
  - id: scene_shower_scene_on
    alias: "[Scene] Shower Scene On"
    description: "Turn on shower scene."
    variables:
      shower_volume: "{{ states('input_number.media_preset_volume_shower')|float(-1)/100 }}"
    trigger:
      - platform: state
        entity_id: input_boolean.shower_scene
        to: "on"
        from: "off"
    action:
      - if:
          - condition: state
            entity_id: input_select.occupancy_mode
            state:
              - Home
              - Guest
        then:
          - service: timer.start
            target:
              entity_id: timer.shower_scene
            data:
              duration:
                minutes: "{{ states('input_number.shower_scene_duration')|int(0) }}"

          - if:
              - condition: state
                entity_id: input_boolean.media_preset_enabled_shower
                state: "on"
            then:
              - if:
                  - condition: state
                    entity_id: input_boolean.tts
                    state: "on"
                then:
                  - service: input_number.set_value
                    target:
                      entity_id: input_number.bathroom_speaker_tts
                    data:
                      value: "{{ shower_volume }}"

                  - wait_template: "{{ is_state('input_boolean.tts','off') }}"
                    timeout: 120
                    continue_on_timeout: false

              - if:
                  - condition: template
                    alias: "Bathroom speaker already playing something"
                    value_template: > #MASS media playing?
                      {{ states('media_player.mass_bathroom_speaker') in ['playing','paused'] }}
                then:
                  # wait until media resumes if tts
                  - wait_template: "{{ is_state('media_player.mass_bathroom_speaker','playing') }}"
                    timeout: 30

                  - service: media_player.volume_set
                    target:
                      entity_id: media_player.mass_bathroom_speaker
                    data:
                      volume_level: "{{ shower_volume }}"
                else:
                  - service: script.media_preset_play
                    data:
                      preset: shower
        else:
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.shower_scene

          - service: browser_mod.notification
            data:
              duration: 30000
              message: "Shower mode cannot be run if occupancy mode is not Home or Guest."

  ###############################################################################
  ## Scene - Shower Scene Off
  ###############################################################################
  - id: scene_shower_scene_off
    alias: "[Scene] Shower Scene Off"
    description: "Turn off shower scene."
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: input_boolean.shower_scene
        to: "off"
        from: "on"

      - platform: state
        entity_id: input_select.occupancy_mode
        to:
          - Away
          - Vacation

      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.shower_scene
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.shower_scene

      - service: timer.cancel
        entity_id: timer.shower_scene

      - condition: state
        entity_id: input_select.occupancy_mode
        state:
          - Home
          - Guest

      - condition: state
        entity_id: input_boolean.media_preset_enabled_shower
        state: "on"

      - if:
          - condition: template
            alias: "TTS on and bathroom speaker in tts media players"
            value_template: >
              {{ (is_state('input_boolean.tts','on')
                  and 'media_player.mass_bathroom_speaker' in state_attr('sensor.tts_media_player','entity_id')) }}
        then:
          # set bathroom speaker tts restore volumes to media volume for appropriate post tts shower off volume levels
          - service: input_number.set_value
            alias: "Set bathroom speaker restore volume to media volume"
            target:
              entity_id: input_number.bathroom_speaker_tts
            data:
              value: "{{ states('input_number.' ~ media_type ~ '_volume')|float(-1)/100 }}" # - set to default volume

          # wait until media resumes if tts
          - wait_template: "{{ is_state('input_boolean.tts','off') }}"
            timeout: 30

      - if:
          - condition: template
            alias: "Bathroom speaker is active media speaker."
            value_template: > #MASS - if bathroom_speaker only one on
              {{ 'media_player.mass_bathroom_speaker' }}
        then:
          - service: script.media_stop #MASS - turn off media player?
        else:
          - service: script.media_players_set_volumes
            data:
              entity_id: media_player.mass_bathroom_speaker
              source: "{{ media_type }}" #MASS - set to default media player value
