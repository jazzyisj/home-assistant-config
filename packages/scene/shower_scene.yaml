###############################################################################
## Package - Shower Scene
###############################################################################
timer:
  shower_scene:
    name: "Shower Scene Timer"
    icon: mdi:progress-clock
    restore: true

input_number:
  shower_scene_duration:
    name: "Shower Scene Duration"
    icon: mdi:progress-clock
    unit_of_measurement: min
    mode: slider
    min: 5
    max: 60
    step: 5

switch:
  - platform: template
    switches:
      shower_scene:
        friendly_name: "Shower Scene"
        unique_id: shower_scene
        icon_template: mdi:shower-head
        value_template: "{{ not is_state('timer.shower_scene', 'idle') }}"
        turn_on:
          - action: timer.start
            target:
              entity_id: timer.shower_scene
            data:
              duration:
                minutes: "{{ states('input_number.shower_scene_duration') | int(0) }}"

          - action: script.turn_light_on
            data:
              lights: light.bathroom_shower_light
              profile: default_max
              activate_timer: false

          - action: script.turn_light_on
            data:
              lights: light.bathroom_vanity_light_rgb
              profile: default_max
              override: true
              activate_timer: false

          # ensure light timers aren't left on from another action
          - action: timer.cancel
            target:
              entity_id:
                - timer.bathroom_vanity_light
                - timer.bathroom_shower_light

          - if:
              - condition: state
                entity_id: input_boolean.media_preset_enabled_shower
                state: "on"

              - condition: state
                entity_id: input_select.occupancy_mode
                match: any
                state:
                  - Home
                  - Guest
            then:
              - if:
                  - condition: state
                    entity_id: input_boolean.tts
                    state: "on"
                then:
                  # set post tts volume level to preset volume
                  - action: input_number.set_value
                    target:
                      entity_id: input_number.bathroom_speaker_tts
                    data:
                      value: "{{ states('input_number.media_preset_volume_shower') | float(-1)/100 }}"

                  - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
                    timeout: 120

                  - delay: 5 # allow media to resume after tts

              - if:
                  - condition: template
                    alias: "Bathroom speaker already playing media"
                    value_template: "{{ is_state('media_player.bathroom_speaker', ['playing', 'buffering', 'paused']) }}"
                then:
                  - action: script.media_player_set_volumes
                    target:
                      entity_id: media_player.bathroom_speaker
                    data:
                      volume: "{{ states('input_number.media_preset_volume_shower') | int }}"
                else:
                  - action: script.media_play
                    data:
                      preset: shower
                    continue_on_error: true
        turn_off:
          - if:
              - condition: state
                entity_id: input_boolean.alarm_triggered
                state: "off"
            then:
              - action: light.turn_off
                target:
                  entity_id: light.bathroom_shower_light

              - if:
                  - condition: state
                    entity_id: binary_sensor.bathroom_illuminance_lights
                    state: "on"
                then:
                  - action: script.turn_light_on
                    data:
                      lights: light.bathroom_vanity_light_rgb
                      profile: default_max
                      override: true
                      activate_timer: true
                else:
                  - action: light.turn_off
                    target:
                      entity_id: light.bathroom_vanity_light_rgb

              - if:
                  - condition: state
                    entity_id: input_select.occupancy_mode
                    state:
                      - Home
                      - Guest

                  - condition: state
                    entity_id: input_boolean.media_preset_enabled_shower
                    state: "on"
                then:
                  - if:
                      - condition: template
                        alias: "TTS on and bathroom speaker is a tts media player"
                        value_template: >
                          {{ is_state('input_boolean.tts', 'on')
                              and 'media_player.bathroom_speaker' in state_attr('sensor.tts_active_media_player', 'entity_id') }}
                    then:
                      # set bathroom speaker to default volume for post tts volume level
                      - action: input_number.set_value
                        alias: "Set bathroom speaker restore volume to media volume"
                        target:
                          entity_id: input_number.bathroom_speaker_tts
                        data:
                          value: "{{ states('input_number.bathroom_speaker_default_volume') | float }}"

                      - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
                        timeout: 120

                  - if:
                      - condition: template
                        alias: "Bathroom speaker is in an active speaker group."
                        value_template: "{{ states('sensor.bathroom_speaker') == 'group' }}"
                    then:
                      # set bathroom speaker to group volume
                      - action: script.media_player_set_volumes
                        data:
                          entity_id: media_player.bathroom_speaker
                          volume: >
                            {% for item in state_attr('group.group_media_players', 'entity_id') %}
                              {% set sensor = 'sensor.' ~ states[item].object_id %}
                              {% if states(sensor) == 'on'
                                and 'media_player.bathroom_speaker' in state_attr(sensor, 'entity_id') %}
                                {{ (state_attr(item, 'volume_level')*100) | int }}
                              {% break %}
                              {% endif %}
                            {% endfor %}
                    else:
                      - action: script.turn_media_player_off
                        data:
                          entity_id: media_player.bathroom_speaker

          - action: timer.cancel
            target:
              entity_id: timer.shower_scene

automation:
  ###############################################################################
  ## Scene - Shower Scene Off
  ###############################################################################
  - id: scene_shower_scene_off
    alias: "[Scene] Shower Scene Off"
    description: "Turn off shower scene."
    max_exceeded: silent
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.shower_scene
    action:
      - action: switch.turn_off
        target:
          entity_id: switch.shower_scene
