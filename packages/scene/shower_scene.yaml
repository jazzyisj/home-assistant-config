###################################################################################################
## Package - Shower Scene
###################################################################################################
homeassistant:
  customize:
    timer.shower_scene:
      type: scene

timer:
  shower_scene:
    name: "Shower Scene Timer"
    icon: mdi:progress-clock
    restore: true

input_number:
  shower_scene_duration:
    name: "Shower Scene Duration"
    icon: mdi:progress-clock
    unit_of_measurement: min
    mode: slider
    min: 5
    max: 60
    step: 5

template:
  - switch:
      - name: "Shower Scene"
        unique_id: shower_scene
        icon: mdi:shower-head
        state: "{{ not is_state('timer.shower_scene', 'idle') }}"
        turn_on:
          - action: script.shower_on
        turn_off:
          - action: script.shower_off

script:
  ###################################################################################################
  ## Shower On
  ###################################################################################################
  shower_on:
    alias: "Shower On"
    description: "Turn on shower scene."
    icon: mdi:shower-head
    mode: restart
    sequence:
      - action: timer.start
        target:
          entity_id: timer.shower_scene
        data:
          duration:
            minutes: "{{ states('input_number.shower_scene_duration') | int(0) }}"

      - action: script.light_scene_on
        data:
          scene: shower

      - if:
          - condition: state
            entity_id: input_boolean.media_enabled_shower
            state: "on"
        then:
          - if:
              - condition: state
                entity_id: input_boolean.tts
                state: "on"
            then:
              # set post tts volume level to preset volume
              - action: input_number.set_value
                target:
                  entity_id: input_number.bathroom_speaker_tts
                data:
                  value: "{{ states('input_number.media_volume_shower') | float(-1)/100 }}"

              - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
                timeout: 120

              - wait_template: "{{ is_state('media_player.bathroom_speaker', ['playing', 'buffering']) }}"
                timeout: 10 # allow media to resume after tts

          - choose:
              - conditions:
                  - condition: template
                    alias: "Media playing on bathroom speaker"
                    value_template: >
                      {% from 'tts.jinja' import tts_player %}
                      {% from 'alarm_clock.jinja' import alarm_clock_player %}
                      {% set player = 'media_player.bathroom_speaker' %}
                      {{ is_state(player, ['playing', 'buffering', 'paused'])
                          and not bool(tts_player(player))
                          and not bool(alarm_clock_player(player)) }}
                sequence:
                  - action: media_player.volume_set
                    target:
                      entity_id: media_player.bathroom_speaker
                    data:
                      volume_level: "{{ states('input_number.media_volume_shower') | float / 100 }}"
                    continue_on_error: true

              - conditions:
                  - condition: template
                    alias: "Media playing elsewhere"
                    value_template: "{{ is_state('binary_sensor.speaker', 'on') }}"
                sequence:
                  - event: save_media_player

                  - wait_template: "{{ has_value('sensor.saved_media_player') }}"
                    timeout: 10

                  - if: "{{ wait.completed }}"
                    then:
                      - action: music_assistant.transfer_queue
                        target:
                          entity_id: media_player.bathroom_speaker_mass
                        data:
                          source_player: "{{ states('sensor.saved_media_player') }}_mass"
                          auto_play: true
                        continue_on_error: false

                      - action: media_player.volume_set
                        target:
                          entity_id: media_player.bathroom_speaker
                        data:
                          volume_level: "{{ states('input_number.media_volume_shower') | float / 100 }}"
                        continue_on_error: true
                    else: # media didn't transfer play shower preset
                      - action: script.media_play
                        data:
                          preset: shower
                        continue_on_error: true
            default:
              - action: script.media_play
                data:
                  preset: shower
                continue_on_error: true

  ###################################################################################################
  ## Shower Off
  ###################################################################################################
  shower_off:
    alias: "Shower Off"
    description: "Turn off shower scene."
    icon: mdi:shower-head
    mode: restart
    sequence:
      - action: light.turn_off
        target:
          entity_id: light.bathroom_shower_light
        continue_on_error: true

      - if:
          - condition: state
            entity_id: binary_sensor.bathroom_illuminance
            state: "on"
        then:
          - action: script.turn_light_on
            data:
              entity_id: light.bathroom_vanity_light_rgb
              profile: default_max
              override: true
              activate_timer: true
            continue_on_error: true
        else:
          - action: light.turn_off
            target:
              entity_id: light.bathroom_vanity_light_rgb
            continue_on_error: true

      - if:
          - condition: state
            entity_id: input_boolean.media_enabled_shower
            state: "on"
        then:
          - if:
              - condition: template
                alias: "Media player is an active tts player"
                value_template: >
                  {% from 'tts.jinja' import tts_player %}
                  {{ tts_player('media_player.bathroom_speaker') }}
            then:
              # set bathroom speaker to default volume for post tts volume level
              - action: input_number.set_value
                alias: "Set bathroom speaker restore volume to media volume"
                target:
                  entity_id: input_number.bathroom_speaker_tts
                data:
                  value: "{{ states('input_number.bathroom_speaker_default_volume') | float }}"

              - wait_template: "{{ is_state('input_boolean.tts', 'off') }}"
                timeout: 120

              - wait_template: "{{ is_state('media_player.bathroom_speaker', ['playing', 'buffering']) }}"
                timeout: 10 # allow media to resume after tts

          - if:
              - condition: template
                alias: "There is a stored media player and media is playing."
                value_template: >
                  {{ has_value('sensor.saved_media_player')
                      and is_state('binary_sensor.speaker', 'on') }}
            then:
              - action: music_assistant.transfer_queue
                target:
                  entity_id: "{{ states('sensor.saved_media_player') }}_mass"
                data:
                  source_player: media_player.bathroom_speaker_mass
                  auto_play: true

              - action: script.media_player_set_volumes
                data:
                  entity_id: "{{ states('sensor.saved_media_player') }}"
                  source: media
                  volume: "{{ state_attr('sensor.saved_media_player', 'volume_level') | float(-1) * 100 }}"
                continue_on_error: true
            else:
              - action: script.turn_media_player_off
                data:
                  entity_id: media_player.bathroom_speaker
                continue_on_error: true

          - event: clear_saved_media_player

      - action: timer.cancel
        target:
          entity_id: timer.shower_scene

automation:
  ###################################################################################################
  ## Turn Shower Scene Off
  ###################################################################################################
  - id: turn_shower_scene_off
    alias: "Turn Shower Scene Off"
    description: "Turn off shower scene."
    max_exceeded: silent
    trigger:
      - trigger: event
        event_type: timer.finished
        event_data:
          entity_id: timer.shower_scene
    action:
      - action: switch.turn_off
        target:
          entity_id: switch.shower_scene
