#######################################################################################################################
## Schedule Binary Sensors
#######################################################################################################################

#######################################################################################################################
## Workday (hidden)
## - python workday sensor
## - do not exclude holiday - work scheduled on some holidays, use google cal holidays instead
## https://www.home-assistant.io/integrations/workday/
#######################################################################################################################
- platform: workday
  name: Workday
  country: CA
  province: 'ON'
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun]
  days_offset: 0

#######################################################################################################################
## Workday Tomorrow (hidden)
## - internal workday sensor w/offset (work tomorrow)
## - do not exlude holiday - work scheduled on some holidays, use google cal holidays instead
#######################################################################################################################
- platform: workday
  name: Workday Tomorrow
  country: CA
  province: 'ON'
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun]
  days_offset: 1

#######################################################################################################################
## Utilities Workday
## - use offpeak billing on holidays and weekends
#######################################################################################################################
- platform: workday
  name: Utilities Workday
  country: CA
  province: 'ON'
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun, holiday]
  days_offset: 0

- platform: template
  sensors:
#######################################################################################################################
## Shift Selection
## - delay on so user can select new shift before notification is sent
#######################################################################################################################
    shift_selection_alert:
      unique_id: shift_selection_alert
      delay_on:
        minutes: 5
      value_template: >
        {{ false if is_state('binary_sensor.alerts_enabled','off') or is_state('input_boolean.work_schedule','off')
            else is_state('input_boolean.shift_override','on') or (is_state('input_boolean.shift_override','off')
              and is_state('sensor.current_shift','Not Set')) }}

#######################################################################################################################
## Work Schedule Disabled
#######################################################################################################################
    work_schedule_disabled:
      friendly_name: Work Schedule Disabled
      unique_id: work_schedule_disabled
      icon_template: mdi:beach
      value_template: "{{ is_state('input_boolean.work_schedule','off') }}"

#######################################################################################################################
## Google Calendar Connected
#######################################################################################################################
    google_calendar_connected:
      friendly_name: Google Calendar
      unique_id: google_calendar_connected
      icon_template: "{{ 'mdi:calendar' if is_state('binary_sensor.google_calendar_connected','on') else 'mdi:alert-circle' }}"
      device_class: connectivity
      value_template: >
        {{ not states('calendar.days') in ['unknown','unavailable','none']
            and not states('calendar.afternoons') in ['unknown','unavailable','none']
            and not states('calendar.work_holiday') in ['unknown','unavailable','none']
            and not states('calendar.garbage') in ['unknown','unavailable','none']
            and not states('calendar.recycle') in ['unknown','unavailable','none']
            and not states('calendar.yardwaste') in ['unknown','unavailable','none'] }}

    google_calendar_connected_alert:
      friendly_name: Calendar
      unique_id: google_calendar_connected_alert
      icon_template: mdi:calendar
      value_template: "{{ is_state('binary_sensor.google_calendar_connected','off') }}"

#######################################################################################################################
## Garbage Day Tomorrow Sensor
#######################################################################################################################
    garbage_tomorrow:
      friendly_name: Garbage Tomorrow
      unique_id: garbage_tomorrow
      icon_template: mdi:trash-can
      value_template: >
        {% set start = as_timestamp(state_attr('calendar.garbage','start_time'))|float %}
        {% set now = as_timestamp(strptime(states('sensor.date_time'), "%Y-%m-%d, %H:%M" ))|float %}
        {{ start - now < 86400 and start - now > 0  if is_state('binary_sensor.alerts_enabled','on') else false }}

#######################################################################################################################
## Recycle Day Tomorrow Sensor
#######################################################################################################################
    recycle_tomorrow:
      friendly_name: Recycle Tomorrow
      unique_id: recycle_tomorrow
      icon_template: mdi:recycle
      value_template: >
        {% set start = as_timestamp(state_attr('calendar.recycle','start_time'))|float %}
        {% set now = as_timestamp(strptime(states('sensor.date_time'), "%Y-%m-%d, %H:%M" ))|float %}
        {{ start - now < 86400 and start - now > 0  if is_state('binary_sensor.alerts_enabled','on') else false }}

#######################################################################################################################
## Yard Waste Day Tomorrow Sensor
#######################################################################################################################
    yardwaste_tomorrow:
      friendly_name: Yardwaste Tomorrow
      unique_id: yardwaste_tomorrow
      icon_template: mdi:pine-tree
      value_template: >
        {% set start = as_timestamp(state_attr('calendar.yardwaste','start_time'))|float %}
        {% set now = as_timestamp(strptime(states('sensor.date_time'), "%Y-%m-%d, %H:%M" ))|float %}
        {{ start - now < 86400 and start - now > 0  if is_state('binary_sensor.alerts_enabled','on') else false }}

#######################################################################################################################
## Work Holiday Tomorrow
## - sensor to determine if tomorrow is a work hoiday based on google calendar events
## - will not trigger if today is holiday and tomorrow is also holiday using a separate event
## - consecutive day holidays MUST BE ENTERED AS ONE EVENT in the google calendar
## - more than 24 hours until start time then tomorrow is NOT a holiday
## - less than 24 hours until start time but start time has not past (>0) then tomorrow IS a holiday
## - start time has passed, but more than 24 hours until end time - tomorrow IS STILL a holiday
#######################################################################################################################
    holiday_tomorrow:
      friendly_name: Holiday Tomorrow
      unique_id: holiday_tomorrow
      icon_template: mdi:calendar-heart
      value_template: >
        {% set start = as_timestamp( state_attr('calendar.work_holiday','start_time'))|float %}
        {% set end = as_timestamp( state_attr('calendar.work_holiday','end_time'))|float %}
        {% set now = as_timestamp( strptime( states('sensor.date_time'),'%Y-%m-%d, %H:%M' ))|float %}
        {{ (start - now < 0 and end - now > 86400) or (start - now > 0 and start - now < 86400) }}

#######################################################################################################################
## Work Today - is today is a workday
## now().weekday() == 5is Saturday
#######################################################################################################################
    work_today:
      friendly_name: Work Today
      unique_id: work_today
      icon_template: >-
        {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
        {% elif is_state('binary_sensor.work_today','off') %} mdi:alpha-x-circle
        {% elif is_state('sensor.current_shift','Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.current_shift','Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      value_template: >-
        {% if is_state('calendar.work_holiday','on') %} false
        {% elif is_state('input_boolean.work_schedule','off') %} false
        {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 5 %} true
        {% elif is_state('binary_sensor.workday','on') %} true
        {% endif %}

#######################################################################################################################
## Work Tomorrow
## now().weekday() == 4 is Friday
#######################################################################################################################
    work_tomorrow:
      friendly_name: Work Tomorrow
      unique_id: work_tomorrow
      icon_template: >
        {% if is_state('input_boolean.work_schedule','off') %} mdi:beach
        {% elif is_state('binary_sensor.work_tomorrow','off') %} mdi:alpha-x-circle
        {% elif is_state('sensor.tomorrow_shift','Days') %} mdi:alpha-d-circle
        {% elif is_state('sensor.tomorrow_shift','Afternoons') %} mdi:alpha-a-circle
        {% else %} mdi:calendar-alert
        {% endif %}
      value_template: >
        {% if is_state('input_boolean.work_schedule','off') %} false
        {% elif is_state('binary_sensor.holiday_tomorrow','on') %} false
        {% elif is_state('input_boolean.saturday_workday','on') and now().weekday() == 4 %} true
        {% elif is_state('binary_sensor.workday_tomorrow','on') %} true
        {% endif %}

#######################################################################################################################
## Quiet Hours - limit media player volumes during set hours
## if QHS < QHE time does not span midnight
##  - time >= QHS and time <= QHE
## else if QHE < QHS quiet hours spans midnight
## - before midnight time >= QHS
## -  after midnight time <= QHE
#######################################################################################################################
    quiet_hours:
      friendly_name: Quiet Hours
      unique_id: quiet_hours
      icon_template: mdi:volume-low
      value_template: >
        {% set time = states('sensor.time') %}
        {% if is_state('input_boolean.quiet_hours_bedtime_sync','on') %}
          {% set start = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.bedtime_today'))|int - states('input_number.quiet_hours_before_bedtime')|int * 60 )|timestamp_custom('%H:%M',true) %}
          {% set end = (as_timestamp(states('sensor.date') ~ ' ' ~ states('sensor.waketime_today'))|int + states('input_number.quiet_hours_after_waketime')|int * 60 )|timestamp_custom('%H:%M',true) %}
        {% else %}
          {% set start = states('input_datetime.quiet_hours_start')[0:5] %}
          {% set end = states('input_datetime.quiet_hours_end')[0:5] %}
        {% endif %}
        {% if is_state('input_boolean.quiet_hours_on','on') %} true
        {% elif is_state('input_boolean.quiet_hours_enabled','on') %}{{ start <= time < end if start < end else start <= time or time < end }}
        {% else %} false
        {% endif %}

#######################################################################################################################
## Bedtime Active - after bedtime, not in night mode, before 4am
#######################################################################################################################
    bedtime_active:
      friendly_name: Bedtime Active
      unique_id: bedtime_active
      icon_template: mdi:bed-emmpty
      delay_on:
        seconds: 10  # allow automation.schedule_bedtime to detect bedtime trigger
      value_template: >
        {% set time = states('sensor.time') %}
        {% set wake = states('sensor.waketime_today') %}
        {% set bed = states('sensor.bedtime_today') %}
        {% if states('input_select.occupancy_mode') in ['Home','Guest'] %}
          {{ bed < time or bed > time < wake if bed > wake else  bed < time < wake }}
        {% else %} false
        {% endif %}

