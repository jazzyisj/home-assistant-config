###################################################################################################
## Outdoor Temperature Detail Graph
###################################################################################################
type: custom:apexcharts-card
config_templates: weather_detail
apex_config:
  title:
    text: "7 Day History - 5 Day Forecast"
    align: center
    margin: 24
    offsetY: 12
    style:
      fontSize: 20px
graph_span: 2w
span:
  offset: +5d
now:
  show: true
  color: red
  label: "Now"
yaxis:
  - id: temperature
    show: true
    apex_config:
      tickAmount: 5
      decimalsInFloat: 1
      title:
        text: "Temperature"
        rotate: -90
        offsetX: -10
        style:
          fontSize: 20px
          fontFamily: Roboto
          fontWeight: normal
      labels:
        style:
          fontSize: 16px
          fontWeight: normal

  - id: humidity
    show: false
    opposite: true
    min: 0
    max: 100
    apex_config:
      tickAmount: 5
      decimalsInFloat: 0
      title:
        text: "Humidity"
        rotate: -90
        style:
          fontSize: 20px
          fontFamily: Roboto
          fontWeight: normal
      labels:
        style:
          fontSize: 16px
          fontWeight: normal
series:
  - entity: sensor.outdoor_normal_high_temperature
    name: "Normal High"
    yaxis_id: temperature
    stroke_width: 5
    opacity: 0.5
    color:  rgb(186, 6, 6)

  - entity: sensor.outdoor_normal_low_temperature
    name: "Normal Low"
    yaxis_id: temperature
    stroke_width: 5
    opacity: 0.5
    color: rgb(4, 97, 179)

  - entity: sensor.outdoor_humidity
    name: "Humidity"
    yaxis_id: humidity
    extend_to: now
    color: rgb(76, 138, 252)

  - entity: sensor.hourly_weather
    name: " "
    yaxis_id: humidity
    data_generator: |
      return entity.attributes.forecast.map((entry) => {
            return [new Date(entry.datetime).getTime(), entry.humidity];
          });
    color: rgb(76, 138, 252)

  - entity: sensor.outdoor_temperature_24_hour_average
    name: "Average (24h)"
    yaxis_id: temperature
    extend_to: now
    opacity: 1
    color: rgb(250, 83, 0)

  - entity: sensor.dew_point
    name: "Dew Point"
    yaxis_id: temperature
    extend_to: now
    color: rgb(189, 6, 106)

  - entity: sensor.hourly_weather
    name: " "
    yaxis_id: temperature
    data_generator: |
      return entity.attributes.forecast.map((entry) => {
            return [new Date(entry.datetime).getTime(), entry.dew_point];
          });
    color: rgb(189, 6, 106)

  - entity: sensor.outdoor_temperature
    name: "Temperature"
    yaxis_id: temperature
    type: area
    extend_to: now
    stroke_width: 0
    color: rgb(207, 232, 47)
    color_threshold: !include /config/ui/graph/include/temperature_area_color.yaml

  - entity: sensor.outdoor_temperature
    name: " "
    yaxis_id: temperature
    extend_to: now
    stroke_width: 4
    opacity: 1
    color: rgb(207, 232, 47)
    color_threshold: !include /config/ui/graph/include/temperature_line_color.yaml

  - entity: sensor.hourly_weather
    name: " "
    yaxis_id: temperature
    type: area
    data_generator: |
      return entity.attributes.forecast.map((entry) => {
            return [new Date(entry.datetime).getTime(), entry.temperature];
          });
    stroke_width: 0
    color: rgb(207, 232, 47)
    color_threshold: !include /config/ui/graph/include/temperature_area_color.yaml

  - entity: sensor.hourly_weather
    name: " "
    yaxis_id: temperature
    data_generator: |
      return entity.attributes.forecast.map((entry) => {
            return [new Date(entry.datetime).getTime(), entry.temperature];
          });
    stroke_width: 4
    opacity: 1
    color: rgb(207, 232, 47)
    color_threshold: !include /config/ui/graph/include/temperature_line_color.yaml

  - entity: sensor.outdoor_apparent_temperature
    name: "Feels Like"
    yaxis_id: temperature
    extend_to: now
    color: rgb(255, 255, 255)

  - entity: sensor.hourly_weather
    name: " "
    yaxis_id: temperature
    data_generator: |
      return entity.attributes.forecast.map((entry) => {
            return [new Date(entry.datetime).getTime(), entry.apparent_temperature];
          });
    color: rgb(255, 255, 255)
