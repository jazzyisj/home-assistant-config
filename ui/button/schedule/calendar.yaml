###############################################################################
## Calendar Button
###############################################################################
type: custom:button-card
template: menu_button
entity: sensor.next_waste_day
show_state: true
icon: >
  [[[
    if (states['sensor.next_garbage_day'].attributes['display'] == 'Tomorrow')
      return states['sensor.next_garbage_day'].attributes.icon;
    else if (states['sensor.next_recycle_day'].attributes['display'] == 'Tomorrow')
      return states['sensor.next_recycle_day'].attributes.icon;
    else if (states['sensor.next_yardwaste_day'].attributes['display'] == 'Tomorrow')
      return states['sensor.next_yardwaste_day'].attributes.icon;
    else
      return states['sensor.next_waste_day'].attributes.icon;
  ]]]
state_display: >
  [[[
    if (states['sensor.next_garbage_day'].attributes['display'] == 'Tomorrow'
          || states['sensor.next_recycle_day'].attributes['display'] == 'Tomorrow'
          || states['sensor.next_yardwaste_day'].attributes['display'] == 'Tomorrow')
      return 'TOMORROW';
    else if (states['sensor.next_garbage_day'].attributes['display'] == 'Today'
          || states['sensor.next_recycle_day'].attributes['display'] == 'Today'
          || states['sensor.next_yardwaste_day'].attributes['display'] == 'Today')
      return 'TODAY';
    else
      return states['sensor.next_waste_day'].attributes['display'].toUpperCase();
  ]]]
styles:
  icon:
    - color: >
        [[[
          if (states['sensor.next_garbage_day'].attributes['display'] == 'Tomorrow')
            return 'var(--calendar-garbage-color)';
          else if (states['sensor.next_recycle_day'].attributes['display'] == 'Tomorrow')
            return 'var(--calendar-recycle-color)';
          else if (states['sensor.next_yardwaste_day'].attributes['display'] == 'Tomorrow')
            return 'var(--calendar-yardwaste-color)';
          else if (states['sensor.next_garbage_day'].attributes['display'] == 'Today')
            return 'var(--calendar-garbage-color)';
          else if (states['sensor.next_recycle_day'].attributes['display'] == 'Today')
            return 'var(--calendar-recycle-color)';
          else if (states['sensor.next_yardwaste_day'].attributes['display'] == 'Today')
            return 'var(--calendar-yardwaste-color)';
          else
            return 'var(--state-icon-color)'
        ]]]
  card:
    - background-color: >
        [[[
          if (states['binary_sensor.wan'].state == 'off'
                || states['sensor.next_waste_day'].attributes['display'] == 'unknown')
            return 'var(--entity-button-critical-color)';
          else if (states['input_boolean.garbage_alert'].state == 'on'
              || states['input_boolean.recycle_alert'].state == 'on'
              || states['input_boolean.yardwaste_alert'].state == 'on')
            return 'var(--entity-button-active-color)';
          else
            return 'var(--ha-card-background)';
        ]]]
tap_action:
  action: navigate
  navigation_path: schedule
double_tap_action:
  action: call-service
  service: input_boolean.turn_off
  data:
    entity_id:
      - input_boolean.garbage_alert
      - input_boolean.recycle_alert
      - input_boolean.yardwaste_alert
hold_action:
  action: fire-dom-event
  browser_mod:
    service: browser_mod.popup
    data:
      content: !include /config/ui/card/schedule/schedule_settings.yaml
      timeout: 100000
      card_mod:
        style:
          ha-dialog$: |
            div.mdc-dialog__scrim {
              backdrop-filter: grayscale(100%) brightness(25%) !important;
              -webkit-backdrop-filter: grayscale(100%) brightness(25%) !important;
            }
            div.mdc-dialog div.mdc-dialog__container div.mdc-dialog__surface {
              background: transparent !important;
            }
