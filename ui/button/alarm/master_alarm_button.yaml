###############################################################################
## Alarm Button - Master Zone
###############################################################################
type: custom:button-card
template: menu_button
entity: alarm_control_panel.master
name: "MASTER"
show_name: true
show_state: true
show_icon: true
icon: "[[[ return states['sensor.master_alarm_status'].attributes.icon; ]]]"
state_display: "[[[ return states['sensor.master_alarm_status'].state.toUpperCase(); ]]]"
styles:
  icon:
    - color: >
        [[[
          if (states['sensor.master_alarm_status'].state == 'Disabled')
            return 'var(--disabled-text-color)';
          else if (states['alarm_control_panel.master'].state == 'disarmed')
            return 'var(--state-alarm_control_panel-disarming-color)';
          else if (states['alarm_control_panel.master'].state == 'armed_home')
            return 'var(--state-alarm_control_panel-armed_home-color)';
          else if (states['alarm_control_panel.master'].state == 'armed_night')
            return 'var(--state-alarm_control_panel-armed_night-color)';
          else if (states['alarm_control_panel.master'].state == 'armed_away')
            return 'var(--state-alarm_control_panel-armed_away-color)';
          else if (states['alarm_control_panel.master'].state == 'arming')
            return 'var(--state-alarm_control_panel-arming-color)';
          else if (states['alarm_control_panel.master'].state == 'pending')
            return 'var(--state-alarm_control_panel-pending-color)';
          else if (states['alarm_control_panel.master'].state == 'triggered')
          return 'var(--state-alarm_control_panel-triggered-color)';
          else
            return 'var(--entity-warning-color)';
        ]]]
  card:
    - background-color: >
        [[[
          if (states['binary_sensor.alarmo_connected'].state == 'off')
            return 'var(--entity-button-critical-color)';
          else if (states['binary_sensor.alarm_open_sensor_alert'].state == 'on'
              || states['binary_sensor.alarm_bypassed_sensor_alert'].state == 'on')
            return 'var(--entity-button-severe-color)';
          else if (states['binary_sensor.alarm_zone_sync'].state == 'on')
            return 'var(--entity-button-warning-color)';
          else if (states['input_boolean.alarm_triggered'].state == 'on'
              && states['alarm_control_panel.master'].state == 'disarmed')
            return 'var(--entity-button-minor-color)';
          else
            return 'var(--ha-card-background)';
        ]]]
tap_action:
  action: fire-dom-event
  browser_mod:
    service: browser_mod.popup
    data:
      content: !include /config/ui/card/alarm/alarm_control_panel.yaml
      timeout: 120000
double_tap_action:
  action: call-service
  service: input_boolean.turn_off
  service_data:
    entity_id: input_boolean.alarm_triggered
hold_action:
  action: fire-dom-event
  browser_mod:
    service: browser_mod.popup
    data:
      content: !include /config/ui/card/alarm/alarm_settings.yaml
      timeout: 120000
