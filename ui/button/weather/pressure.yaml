###################################################################################################
## Barometric Pressure Button
###################################################################################################
type: custom:button-card
template: weather_button
entity: sensor.barometric_pressure
icon: >
  [[[
    return states['sensor.pressure_trend'].attributes['icon'];
  ]]]
state_display: >
  [[[
    var pressure = parseInt(states['sensor.barometric_pressure'].state);
    if (isNaN(pressure))
      return 'OFFLINE';
    else
      return pressure + ' hPa';
  ]]]
styles:
  icon:
    - color: >
        [[[
          var pressure = parseInt(states['sensor.barometric_pressure'].state);
          if (isNaN(pressure))
            return 'var(--entity-disabled-color)';
          else if (pressure < 950)
            return 'rgb(8, 16, 48)';
          else if (pressure < 976)
            return 'rgb(0, 32, 96)';
          else if (pressure < 986)
            return 'rgb(0, 52, 146)';
          else if (pressure < 995)
            return 'rgb(0, 90, 148)';
          else if (pressure < 1002)
            return 'rgb(0, 117, 146)';
          else if (pressure < 1007)
            return 'rgb(26, 140, 147)';
          else if (pressure < 1011)
            return 'rgb(103, 162, 155)';
          else if (pressure < 1013)
            return 'rgb(155, 183, 172)';
          else if (pressure < 1015)
            return 'rgb(182, 182, 182)';
          else if (pressure < 1019)
            return 'rgb(176, 174, 152)';
          else if (pressure < 1024)
            return 'rgb(167, 147, 107)';
          else if (pressure < 1030)
            return 'rgb(163, 116, 67)';
          else if (pressure < 1038)
            return 'rgb(159, 81, 44)';
          else if (pressure < 1046)
            return 'rgb(142, 47, 57)';
          else if (pressure < 1080)
            return 'rgb(111, 24, 64)';
          else
            return 'rgb(48, 8, 24)';
        ]]]
  card:
    - background-color: >
        [[[
          var pressure = parseInt(states['sensor.barometric_pressure'].state);
          if (isNaN(pressure))
            return 'var(--entity-button-critical-color)';
          else
            return 'var(--ha-card-background)';
        ]]]
tap_action:
  action: navigate
  navigation_path: atmospheric-conditions
double_tap_action:
  action: none
hold_action:
  action: navigate
  navigation_path: pressure-map
