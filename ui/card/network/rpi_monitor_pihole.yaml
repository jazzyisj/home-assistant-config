###################################################################################################
## RPi Monitor - PiHole https://github.com/ironsheep/RPi-Reporter-MQTT2HA-Daemon
###################################################################################################
type: entities
title: "RPi Monitor"
entities:
  - type: custom:bar-card
    name: "Processor Temp"
    entity: sensor.pi_hole_rpi_cpu_temperature
    entity_row: true
    icon: mdi:thermometer
    positions:
      icon: outside
      name: outside
      indicator: inside
      value: outside
    direction: right
    height: 15px
    width: 60%
    decimal: 0
    min: 20
    max: 70
    severity: !include /config/ui/bar/include/processor_temp_bar_color.yaml
    card_mod:
      style: |
        ha-card {
          border: none !important;
        }
        {% from 'hass.jinja' import status_sensor_style %}
        {{ status_sensor_style(states('sensor.pi_hole_rpi_cpu_temperature'), 0, 50, 60, 70, 80) }}

  - type: custom:bar-card
    name: "Processor Use"
    entity: sensor.pi_hole_rpi_cpu_percent
    entity_row: true
    icon: mdi:cpu-32-bit
    positions:
      icon: outside
      name: outside
      indicator: inside
      value: outside
    direction: right
    height: 15px
    width: 60%
    decimal: 0
    min: 0
    max: 100
    severity: !include /config/ui/bar/include/processor_use_bar_color.yaml
    card_mod:
      style: |
        ha-card {
          border: none !important;
        }
        {% from 'hass.jinja' import status_sensor_style %}
        {{ status_sensor_style(states('sensor.pi_hole_rpi_cpu_percent'), 0, 45, 55, 65, 75) }}

  - type: custom:bar-card
    name: "Memory Use"
    entity: sensor.pi_hole_rpi_memory_percent
    entity_row: true
    icon: mdi:memory
    positions:
      icon: outside
      name: outside
      indicator: inside
      value: outside
    direction: right
    height: 15px
    width: 60%
    decimal: 0
    min: 0
    max: 100
    severity: !include /config/ui/bar/include/memory_use_bar_color.yaml
    card_mod:
      style: |
        ha-card {
          border: none !important;
        }
        {% from 'hass.jinja' import status_sensor_style %}
        {{ status_sensor_style(states('sensor.pi_hole_rpi_memory_percent'), 0, 60, 75, 85, 95) }}

  - type: custom:bar-card
    name: "Disk Use"
    entity: sensor.pi_hole_rpi_disk_percent
    entity_row: true
    icon: mdi:thermometer
    positions:
      icon: outside
      name: outside
      indicator: inside
      value: outside
    direction: right
    height: 15px
    width: 60%
    decimal: 0
    min: 0
    max: 100
    severity: !include /config/ui/bar/include/disk_use_bar_color.yaml
    card_mod:
      style: |
        ha-card {
          border: none !important;
        }
        {% from 'hass.jinja' import status_sensor_style %}
        {{ status_sensor_style(states('sensor.pi_hole_rpi_disk_percent'), 0, 50, 60, 70, 80) }}

  - type: custom:template-entity-row
    name: "Power Status"
    icon: mdi:flash-alert
    state: >
      {% if states.sensor.pi_hole_rpi_monitor.attributes is defined
          and states.sensor.pi_hole_rpi_monitor.attributes.throttle is defined
          and states.sensor.pi_hole_rpi_monitor.attributes.throttle[1] is defined %}
        {{ state_attr('sensor.pi_hole_rpi_monitor', 'throttle')[1] | title }}
      {% endif %}
    card_mod:
      style: |
        :host {
          --paper-item-icon-color:
            {%- set status = state_attr('sensor.pi_hole_rpi_monitor', 'throttle')[1] -%}
            {{ iif(status == 'Not throttled', ' var(--state-icon-color)',' var(--entity-severe-color)') }};
        }

  - type: attribute
    entity: sensor.pi_hole_rpi_monitor
    attribute: host_name
    name: "Hostname"
    icon: mdi:console-network-outline

  - type: attribute
    entity: sensor.pi_hole_rpi_monitor
    attribute: last_update
    name: "Updated"
    icon: mdi:update
    format: relative

  - type: attribute
    entity: sensor.pi_hole_rpi_monitor
    attribute: up_time
    name: "Uptime"
    icon: mdi:clock-check-outline

  - entity: button.pihole_reboot
