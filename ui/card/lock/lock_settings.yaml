###############################################################################
## Lock Entities Glance
###############################################################################
type: custom:swipe-card
reset_after: 120
parameters: !include /config/ui/swipe_parameters_auto_height.yaml
cards:
  - type: entities
    title: "Entry Lock Settings"
    state_color: true
    entities:
      - type: button
        entity: script.lock_entry_locks
        name: "Entry Locks"
        icon: mdi:home-lock
        action_name: "LOCK"
        tap_action:
          action: perform-action
          perform_action: script.lock_entry_locks

      - type: button
        entity: script.unlock_entry_locks
        name: "Entry Locks"
        action_name: "UNLOCK"
        tap_action:
          action: perform-action
          perform_action: script.unlock_entry_locks

      - entity: lock.front_door_lock
        name: "Front"
        double_tap_action:
          action: perform-action
          perform_action: lock.lock
          target:
            entity_id: lock.front_door_lock
        hold_action:
          action: perform-action
          perform_action: lock.unlock
          target:
            entity_id: lock.front_door_lock
        card_mod:
          style: |
            :host {
              --state-lock-unlocked-color:
                {% if is_state('binary_sensor.front_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-active-color)
                {% endif %}
              ;
              --state-lock-locked-color:
                {% if is_state('binary_sensor.front_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.front_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }

      - entity: lock.side_door_lock
        name: "Side"
        double_tap_action:
          action: perform-action
          perform_action: lock.lock
          target:
            entity_id: lock.side_door_lock
        hold_action:
          action: perform-action
          perform_action: lock.unlock
          target:
            entity_id: lock.side_door_lock
        card_mod:
          style: |
            :host {
              --state-lock-unlocked-color:
                {% if is_state('binary_sensor.side_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-active-color)
                {% endif %}
              ;
              --state-lock-locked-color:
                {% if is_state('binary_sensor.side_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.side_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }

      - entity: lock.garage_door_lock
        name: "Garage"
        double_tap_action:
          action: perform-action
          perform_action: lock.lock
          target:
            entity_id: lock.garage_door_lock
        hold_action:
          action: perform-action
          perform_action: lock.unlock
          target:
            entity_id: lock.garage_door_lock
        card_mod:
          style: |
            :host {
              --state-lock-unlocked-color:
                {% if is_state('binary_sensor.garage_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-active-color)
                {% endif %}
              ;
              --state-lock-locked-color:
                {% if is_state('binary_sensor.garage_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.garage_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }

      - entity: lock.back_door_lock
        name: "Back"
        double_tap_action:
          action: perform-action
          perform_action: lock.lock
          target:
            entity_id: lock.back_door_lock
        hold_action:
          action: perform-action
          perform_action: lock.unlock
          target:
            entity_id: lock.back_door_lock
        card_mod:
          style: |
            :host {
              --state-lock-unlocked-color:
                {% if is_state('binary_sensor.back_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-active-color)
                {% endif %}
              ;
              --state-lock-locked-color:
                {% if is_state('binary_sensor.back_door_lock_intrusion', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_system_hardware_failure', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_lock_jammed', 'on') %} var(--entity-critical-color)
                {% elif is_state('binary_sensor.back_door_lock_keypad_temporary_disabled', 'on') %} var(--entity-severe-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }

      - type: custom:auto-entities
        filter:
          template: "{{ state_attr('binary_sensor.unavailable_locks', 'entity_id') }}"
        sort:
          method: name
          ignore_case: true
        card:
          type: custom:fold-entity-row
          head:
            entity: binary_sensor.unavailable_locks
          group_config:
            secondary_info: last-changed

      - type: custom:auto-entities
        filter:
          template: "{{ states.alert | selectattr('attributes.category', 'eq', 'lock') | map(attribute='entity_id') | list }}"
        sort:
          method: name
          ignore_case: true
        card:
          type: custom:fold-entity-row
          padding: 5
          head:
            entity: input_boolean.lock_alerts
            card_mod:
              style: |
                {% from 'style.jinja' import alert_switch %}
                {{ alert_switch('input_boolean.lock_alerts') }}

  - !include /config/ui/card/lock/front_door_lock.yaml
  - !include /config/ui/card/lock/back_door_lock.yaml
  - !include /config/ui/card/lock/side_door_lock.yaml
  - !include /config/ui/card/lock/garage_door_lock.yaml
