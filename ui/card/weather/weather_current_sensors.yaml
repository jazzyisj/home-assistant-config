###############################################################################
## Current Weather Sensors
###############################################################################
type: entities
title: "Current Weather"
icon: mdi:weather-partly-snowy-rainy
state_color: true
entities:
  - entity: weather.home_daily
    name: "Current Weather"
    secondary: "{{ states('sensor.current_condition') | title }}"

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      name: "Temperature"
      entity: sensor.outdoor_temperature
      state: "{{ states('sensor.tempest_st_00057689_temperature_level') | title }}" #TODO template
      secondary: "{{ states('sensor.outdoor_temperature', with_unit=true) ~ ' - ' ~ states('sensor.outdoor_temperature_trend') | title }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if not is_state('alert.outdoor_high_temperature','idle') %} var(--entity-high-temp-color)
              {% elif not is_state('alert.outdoor_low_temperature','idle') %} var(--entity-low-temp-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }

    entities:
      - entity: sensor.outdoor_temperature
      - entity: sensor.outdoor_apparent_temperature
      - entity: sensor.dew_point
      - entity: binary_sensor.freezing

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.outdoor_humidity
      name: "Humidity Comfort"
      state: "{{ states('sensor.tempest_st_00057689_dewpoint_comfort_level') | title }}" #TODO template
      secondary: "{{ states('sensor.outdoor_humidity', with_unit=true) }}"
    entities:
      - entity: sensor.outdoor_humidity
        name: "Humidity"

      - entity: sensor.fog_probability
        name: "Fog Probability"

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.barometric_pressure
      name: "Barometric Pressure"
      state: "{{ states('sensor.barometric_pressure_description') | title }}"
      secondary: "{{ states('sensor.barometric_pressure', with_unit=true) ~ ' - ' ~ states('sensor.pressure_trend') | title }}"
    entities:
      - entity: sensor.barometric_pressure

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      name: "Precipitation"
      entity: sensor.precipitation_type
      state: >
        {% if states('sensor.precipitation_type') | lower == 'none' %} Dry
        {% else %} {{  states('sensor.precipitation_type') | title }}
        {% endif %}
      secondary: "Probability: {{ states('sensor.precipitation_probability', with_unit=true) }}"
      active: "{{  states('sensor.precipitation_type') | lower != 'none' }}" #ISSUE not working
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.precipitation_type') | lower != 'none' %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: binary_sensor.rain
      - entity: binary_sensor.snow
      - entity: binary_sensor.precipitation_likely_soon
      - entity: binary_sensor.precipitation_likely_today

      - entity: sensor.precipitation_start
        format: time

      - entity: sensor.precipitation_intensity
      - entity: sensor.precipitation_intensity_text
      - entity: sensor.nearest_storm_distance
      - entity: sensor.nearest_storm_bearing
      - entity: sensor.precipitation_probability
      - entity: sensor.snow_probability
      - entity: sensor.precipitation_today
      - entity: sensor.precipitation_24_hours
      - entity: sensor.precipitation_yesterday
      - entity: sensor.precipitation_duration_today
      - entity: sensor.precipitation_duration_24_hours
      - entity: sensor.precipitation_duration_yesterday

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: binary_sensor.home_binary_sensors_is_lightning
      name: "Lightning"
      state: "{{ iif(is_state('binary_sensor.home_binary_sensors_is_lightning','on'), 'Yes', 'No') }}" #TODO template
      secondary: "Last Hour: {{ states('sensor.home_sensors_lightning_strikes_last_hour') }}"
      active: "{{ is_state('binary_sensor.home_binary_sensors_is_lightning','off') }}" #ISSUE not working
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.home_binary_sensors_is_lightning','on') %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.lightning_count

      - entity: sensor.home_sensors_lightnings_strikes
        name: "Lightning Strike Count (WF)"

      - entity: sensor.home_sensors_lightning_strikes_last_hour
        name: "Lightning Strikes Last Hour"

      - entity: sensor.home_sensors_lightning_strikes_last_3_hours
        name: "Lightning Strikes Last 3 Hours"

      - entity: sensor.home_sensors_time_of_last_lightning_strike
        name: "Last Lightning Strike"
        format: relative

      - entity: sensor.home_sensors_distance_last_lightning_strike
        name: "Last Lightning Strike Distance"

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.wind_speed
      name: "Wind Conditions"
      state: "{{ states('sensor.wind_beaufort_display') }}"
      secondary: "{{ states('sensor.wind_speed', with_unit=true) }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set level = states('sensor.wind_beaufort_display') %}
              {% if not is_states('alert.wind','idle') %} var(--entity-severe-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.wind_speed
      - entity: sensor.wind_gust
      - entity: sensor.wind_lull
      - entity: sensor.wind_bearing

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.cloud_cover
      state: "{{ states('sensor.cloud_cover_description') }}"
      secondary: "{{ states('sensor.cloud_cover', with_unit=true) }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set level = states('sensor.cloud_cover_description') %}
              {% if level == 'Cloudy' %} var(--state-icon-color)
              {% elif level == 'Mostly Cloudy' %} var(--state-icon-color)
              {% elif level == 'Partly Cloudy' %} var(--state-icon-color)
              {% else level == 'Clear' %} var(--state-icon-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.cloud_cover
      - entity: sensor.visibility

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.uv_index
      name: "UV Risk"
      state: "{{ states('sensor.current_uv_level') | title }}"
      secondary: "UVI: {{ states('sensor.uv_index') }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set level = states('sensor.current_uv_level') %}
              {% if level == 'Very High' %} var(--entity-critical-color)
              {% elif level == 'High' %} var(--entity-severe-color)
              {% elif level == 'Moderate High' %} var(--entity-warning-color)
              {% elif level == 'Moderate' %} var(--entity-minor-color)
              {% elif level == 'Low' %} var(--state-icon-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.current_uv_index

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.air_quality_index
      name: "Air Quality"
      state: "{{ states('sensor.aqi_risk_level') | title }}"
      secondary: "AQI: {{ states('sensor.air_quality_index') }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set level = states('sensor.aqi_risk_level') %}
              {% if level == 'Hazardous' %} var(--entity-critical-color)
              {% elif level in ['Unhealthy', 'Very Unhealthy'] %} var(--entity-severe-color)
              {% elif level == 'Unhealthy Sensitive Groups' %} var(--entity-warning-color)
              {% elif level == 'Moderate' %} var(--entity-minor-color)
              {% else level == 'Good' %} var(--state-icon-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.air_quality_index
      - entity: sensor.ozone
      - entity: sensor.nitrogen_dioxide
      - entity: sensor.sulphur_dioxide
      - entity: sensor.particulate_matter_2_5
card_mod:
  class: basic
