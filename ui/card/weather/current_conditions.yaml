###############################################################################
## Current Conditions
###############################################################################
type: entities
title: "Current Conditions"
icon: mdi:weather-partly-snowy-rainy
state_color: true
entities:
  - entity: weather.home_daily
    name: "Home"

  - type: custom:template-entity-row
    entity: sensor.current_condition
    name: "Current Condition"
    state: "{{ states('sensor.current_condition') | title }}"

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      name: "Temperature"
      entity: sensor.outdoor_temperature
      icon: >
        {% if is_state('sensor.outdoor_temperature', 'Rising') %} mdi:thermometer-chevron-up
        {% elif is_state('sensor.outdoor_temperature', 'Falling') %} mdi:thermometer-chevron-down
        {% else %} mdi:thermometer
        {% endif %}
      state: "{{ states('sensor.outdoor_temperature_level') | title }}"
      secondary: >
        {{ states('sensor.outdoor_temperature', with_unit=true) }}
        {%- if states('sensor.outdoor_temperature') | int(-1) != states('sensor.outdoor_apparent_temperature') | int(-1) %}
        / {{ states('sensor.outdoor_apparent_temperature', with_unit=true) }}
        {% endif %}
        -  {{ states('sensor.outdoor_temperature_trend') }}
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if not is_state('alert.outdoor_high_temperature','idle') %} var(--entity-high-temp-color)
              {% elif not is_state('alert.outdoor_low_temperature','idle') %} var(--entity-low-temp-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.outdoor_temperature
        name: "Temperature"
      - entity: sensor.outdoor_apparent_temperature
        name: "Feels Like"
      - entity: sensor.outdoor_temperature_trend
        name: "Trend"

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.outdoor_humidity
      name: "Humidity"
      state: "{{ states('sensor.dew_point_comfort_level') | title }}"
      secondary: "{{ states('sensor.outdoor_humidity', with_unit=true) }}"
    entities:
      - entity: sensor.outdoor_humidity
        name: "Humidity"
      - entity: sensor.dew_point

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.barometric_pressure
      name: "Barometric Pressure"
      state: "{{ states('sensor.barometric_pressure_description') | title }}"
      secondary: "{{ states('sensor.barometric_pressure', with_unit=true) ~ ': ' ~ states('sensor.pressure_trend') }}"
    entities:
      - entity: sensor.barometric_pressure
      - entity: sensor.pressure_trend

  - type: conditional
    conditions:
      - entity: binary_sensor.precipitation_likely_soon
        state: "on"
      - entity: sensor.precipitation_type
        state: "none"
    row:
      type: custom:template-entity-row
      entity: binary_sensor.precipitation_likely_soon
      name: "Precipitation Likely Soon"
      state: "{{ state_attr('sensor.precipitation_start', 'type') }}"
      secondary: >
        {%- if has_value('sensor.precipitation_start') %}
          Expected at {{ state_attr('sensor.precipitation_start','12hour') }}
        {%- endif %}
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.precipitation_likely_soon', 'on') %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }

  - type: conditional
    conditions:
      - entity: binary_sensor.precipitation_likely_today
        state: "on"
      - entity: binary_sensor.precipitation_likely_soon
        state: "off"
      - entity: sensor.precipitation_type
        state: "none"
    row:
      type: custom:template-entity-row
      entity: binary_sensor.precipitation_likely_today
      name: "Precipitation Likely Today"
      state: "{{ state_attr('sensor.precipitation_start', 'type') }}"
      secondary: >
        {%- if has_value('sensor.precipitation_start') %}
          Expected at {{ state_attr('sensor.precipitation_start','12hour') }}
        {%- endif %}
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.precipitation_likely_today', 'on') %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.precipitation_type
      name: "Current Precipitation"
      state: "{{ states('sensor.precipitation_type') | title }}"
      secondary: "Probability: {{ states('sensor.precipitation_probability', with_unit=true) }}"
      active: "{{  states('sensor.precipitation_type') != 'none' }}" #BUG not working
      card_mod: #BUGFIX
        style: |
          :host {
            --paper-item-icon-color:
              {% if states('sensor.precipitation_type') != 'none' %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - type: conditional
        conditions:
          - condition: state
            entity: sensor.precipitation_start
            state_not:
              - unknown
              - unavailable
        row:
          entity: sensor.precipitation_start
          format: time

      - type: conditional
        conditions:
          - condition: numeric_state
            entity: sensor.precipitation_intensity
            above: 0
        row:
          type: custom:template-entity-row
          entity: sensor.precipitation_intensity
          name: "Precipitation Intesity"
          state: "{{  states('sensor.precipitation_intensity_text') }}"
          secondary: "Rate: {{ states('sensor.precipitation_intensity', with_unit=true) }}"

      - type: custom:template-entity-row
        entity: sensor.nearest_storm_distance
        name: "Nearest Storm"
        state: "{{ states('sensor.nearest_storm_distance', with_unit=true) }}"
        secondary: >
          {% from 'speech.jinja' import cardinal_direction %}
          Direction: {{ cardinal_direction(states('sensor.nearest_storm_bearing') | int(-1)) }}

      - entity: sensor.snow_probability

      - entity: sensor.precipitation_accumulation_last_hour #TEST restarts bugger it up?
      - entity: sensor.precipitation_accumulation_last_24_hours #TEST restarts bugger it up?
      - entity: sensor.precipitation_accumulation_today
      - entity: sensor.precipitation_accumulation_yesterday

      - entity: sensor.precipitation_duration_last_hour
      - entity: sensor.precipitation_duration_last_24_hours
      - entity: sensor.precipitation_duration_today
      - entity: sensor.precipitation_duration_yesterday

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: binary_sensor.lightning
      name: "Lightning"
      state: "{{ iif(is_state('binary_sensor.lightning','on'), 'Yes', 'No') }}"
      secondary: "Strikes: {{ states('sensor.lightning_count') }} - Distance: {{ states('sensor.lightning_distance',with_unit=true) }}"
      active: "{{ is_state('binary_sensor.lightning','on') }}" #BUG not working
      card_mod: #BUGFIX
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.lightning','on') %} var(--state-active-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.lightning_count
        name: "Recent Strikes"

      - entity: sensor.lightning_distance
        name: "Strike Distance"

      - entity: sensor.lightning_last_strike
        name: "Last Strike"
        format: relative

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.wind_speed
      name: "Wind Conditions"
      state: "{{ states('sensor.wind_beaufort_display') }}"
      secondary: "{{ states('sensor.wind_speed') ~ ' - ' ~ states('sensor.wind_gust', with_unit=true) }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if not is_state('alert.wind','idle') %} var(--entity-severe-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.wind_speed
      - entity: sensor.wind_gust
      - entity: sensor.wind_lull
      - entity: sensor.wind_bearing

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.cloud_coverage
      state: "{{ states('sensor.cloud_cover_description') }}"
      secondary: "{{ states('sensor.cloud_coverage', with_unit=true) }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% set level = states('sensor.cloud_cover_description') %}
              {% if level == 'Cloudy' %} var(--state-icon-color)
              {% elif level == 'Mostly Cloudy' %} var(--state-icon-color)
              {% elif level == 'Partly Cloudy' %} var(--state-icon-color)
              {% elif level == 'Clear' %} var(--state-icon-color)
              {% else %} var(--entity-disabled-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.cloud_coverage
      - entity: sensor.fog_probability
      - entity: sensor.visibility

  - type: custom:fold-entity-row
    padding: 10
    head:
      type: custom:template-entity-row
      entity: sensor.aqi_risk_level
      name: "Air Quality"
      state: "{{ states('sensor.aqi_risk_level') | title }}"
      secondary: "AQI: {{ states('sensor.air_quality_index') }}"
      card_mod:
        style: >
          {% from 'weather.jinja' import aqi_risk_icon %}
          {{ aqi_risk_icon(states('sensor.aqi_risk_level')) }}
    entities:
      - entity: sensor.ozone
        card_mod:
          style: >
            {% from 'weather.jinja' import aqi_index_icon %}
            {{ aqi_index_icon(states('sensor.ozone') | int(-1)) }}

      - entity: sensor.carbon_monoxide
        card_mod:
          style: >
            {% from 'weather.jinja' import aqi_index_icon %}
            {{ aqi_index_icon(states('sensor.carbon_monoxide') | int(-1)) }}

      - entity: sensor.nitrogen_dioxide
        card_mod:
          style: >
            {% from 'weather.jinja' import aqi_index_icon %}
            {{ aqi_index_icon(states('sensor.nitrogen_dioxide') | int(-1)) }}

      - entity: sensor.sulphur_dioxide
        card_mod:
          style: >
            {% from 'weather.jinja' import aqi_index_icon %}
            {{ aqi_index_icon(states('sensor.sulphur_dioxide') | int(-1)) }}

      - entity: sensor.particulate_matter_2_5
        card_mod:
          style: >
            {% from 'weather.jinja' import aqi_index_icon %}
            {{ aqi_index_icon(states('sensor.particulate_matter_2_5') | int(-1)) }}

      - entity: sensor.atmospheric_smoke
        name: "Smoke"
        card_mod:
          style: >
            {% from 'weather.jinja' import smoke_level_icon %}
            {{ smoke_level_icon(states('sensor.atmospheric_smoke') | int(-1)) }}

  - type: custom:template-entity-row
    entity: sensor.fire_risk
    name: "Fire Risk"
    state: "{{ states('sensor.fire_risk') }}"
    secondary: "Fire Index: {{ states('sensor.fire_index') }}"
    card_mod:
      style: >
        {% from 'weather.jinja' import fire_risk_icon %}
        {{ fire_risk_icon(states('sensor.fire_risk')) }}

  - type: custom:template-entity-row
    entity: sensor.uv_risk
    name: "UV Risk"
    state: "{{ states('sensor.uv_risk') }}"
    secondary: "UV Index: {{ states('sensor.uv_index') }}"
    card_mod:
      style: >
        {% from 'weather.jinja' import uv_risk_icon %}
        {{ uv_risk_icon(states('sensor.uv_risk')) }}

  - type: custom:template-entity-row
    entity: sensor.allergy_index_today
    name: "Allergy Risk"
    state: "{{ states('sensor.allergy_risk_today') | title }}"
    secondary: "Allergy Index: {{ states('sensor.allergy_index_today') }}"
    card_mod:
      style: >
        {% from 'weather.jinja' import iqvia_risk_icon %}
        {{ iqvia_risk_icon(states('sensor.allergy_risk_today')) }}

  - type: custom:template-entity-row
    entity: sensor.asthma_index_today
    name: "Asthma Risk"
    state: "{{ states('sensor.asthma_risk_today') | title }}"
    secondary: "Asthma Index: {{ states('sensor.asthma_index_today') }}"
    card_mod:
      style: >
        {% from 'weather.jinja' import iqvia_risk_icon %}
        {{ iqvia_risk_icon(states('sensor.asthma_risk_today')) }}

  - type: custom:template-entity-row
    entity: sensor.cold_flu_index_today
    name: "Cold & Flu Risk"
    state: "{{ states('sensor.flu_risk_today') | title }}"
    secondary: "Flu Index: {{ states('sensor.cold_flu_index_today') }}"
    card_mod:
      style: >
        {% from 'weather.jinja' import iqvia_risk_icon %}
        {{ iqvia_risk_icon(states('sensor.flu_risk_today')) }}
card_mod:
  class: basic
