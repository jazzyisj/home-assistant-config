###############################################################################
## Work Schedule Settings
###############################################################################
type: entities
title: "Work Schedule Settings"
icon: mdi:factory
state_color: true
show_header_toggle: false
entities:
  - entity: binary_sensor.google_calendar_connected
    card_mod:
      style: |
        :host {
          --paper-item-icon-color: var(--entity-critical-color)
        }

  - entity: input_boolean.work_schedule

  - type: custom:fold-entity-row
    head:
      entity: sensor.work_shift_today
      name: "Work Shift Selection"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('input_boolean.work_shift_override', 'on') %} var(--entity-warning-color)
              {% elif is_state('sensor.work_shift_today', 'Days') %} var(--entity-dayshift-color)
              {% elif is_state('sensor.work_shift_today', 'Afternoons') %} var(--entity-afternoonshift-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: input_boolean.work_shift_override
        card_mod:
          style: |
            :host {
              --paper-item-icon-color:
                {% if is_state('input_boolean.work_shift_override', 'on') %} var(--entity-warning-color)
                {% else %} var(--state-icon-color)
                {% endif %}
              ;
            }

      - entity: input_select.current_work_shift

  - type: custom:fold-entity-row
    head:
      type: custom:template-entity-row
      entity: binary_sensor.work_today
      state: "{{ states('binary_sensor.work_today') | title }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.work_today', 'on') %}
                {% if is_state('input_boolean.work_today_on', 'on') %} var(--entity-warning-color)
                {% elif is_state('sensor.work_shift_today', 'Days') %} var(--entity-dayshift-color)
                {% elif is_state('sensor.work_shift_today', 'Afternoons') %} var(--entity-afternoonshift-color)
                {% else %} var(--state-active-color)
                {% endif %}
              {% elif is_state('input_boolean.work_today_off', 'on') %} var(--entity-warning-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.work_shift_today
      - entity: input_boolean.work_today_on
      - entity: input_boolean.work_today_off
      - entity: input_boolean.work_override_lock

  - type: custom:fold-entity-row
    head:
      type: custom:template-entity-row
      entity: binary_sensor.work_tomorrow
      state: "{{ states('binary_sensor.work_tomorrow') | title }}"
      card_mod:
        style: |
          :host {
            --paper-item-icon-color:
              {% if is_state('binary_sensor.work_tomorrow', 'on') %}
                {% if is_state('input_boolean.work_tomorrow_on', 'on') %} var(--entity-warning-color)
                {% elif is_state('sensor.work_shift_tomorrow', 'Days') %} var(--entity-dayshift-color)
                {% elif is_state('sensor.work_shift_tomorrow', 'Afternoons') %} var(--entity-afternoonshift-color)
                {% else %} var(--state-active-color)
                {% endif %}
              {% elif is_state('input_boolean.work_tomorrow_off', 'on') %} var(--entity-warning-color)
              {% else %} var(--state-icon-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.work_shift_tomorrow
      - entity: input_boolean.work_tomorrow_on
      - entity: input_boolean.work_tomorrow_off
      - entity: input_boolean.work_override_lock

  - entity: input_boolean.saturday_workday
  - entity: input_boolean.sunday_workday
  - entity: input_boolean.holiday_workday

  - type: attribute
    entity: sensor.next_work_holiday
    attribute: display

  - type: custom:template-entity-row
    entity: sensor.next_holiday #TEMP until find a better place
    state: "{{ state_attr('sensor.next_holiday','display') }}"
    secondary: "{{ state_attr('sensor.next_holiday','holiday') }}"

  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.work_vacation
    entities:
      - entity: calendar.work_vacation_jason

  - type: custom:fold-entity-row
    head:
      entity: binary_sensor.work_layoff
    entities:
      - entity: calendar.work_layoff
card_mod:
  class: basic
