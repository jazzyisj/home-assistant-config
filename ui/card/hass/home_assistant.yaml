###################################################################################################
## Home Assistant Monitor
###################################################################################################
type: entities
title: "Home Assistant"
show_header_toggle: false
entities:
  - !include /config/ui/bar/hass_processor_use_entity.yaml
  - !include /config/ui/bar/supervisor_processor_use_entity.yaml
  - !include /config/ui/bar/hass_memory_use_entity.yaml
  - !include /config/ui/bar/supervisor_memory_use_entity.yaml
  - !include /config/ui/bar/hass_disk_use_entity.yaml

  - type: custom:auto-entities
    show_empty: true
    unique: true
    filter:
      include:
        - entity_id: "sensor.*_browser_user"
          attributes:
            type: "browser_mod"
          options:
            secondary_info: last-changed
            card_mod:
              style: |
                :host {
                  --state-icon-color:
                    {% if config.entity in state_attr('group.unknown_browsers', 'entity_id') %} var(--entity-critical-color)
                    {% else %} var(--entity-active-color)
                    {% endif %}
                  ;
                }
      exclude:
        - state: unavailable
    sort:
      method: name # don't sort by attribute: last_seen - constantly updating
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.connected_browsers
        card_mod:
          style: |
            :host {
              --state-icon-color:
                {% set state = states('sensor.connected_browsers') | int(-1) %}
                {% if is_state('binary_sensor.unknown_browsers_alert', 'on') %} var(--entity-critical-color)
                {% elif state < 0 %} var(--disabled-color)
                {% elif state == 0 %} var(--entity-warning-color)
                {% else %} var(--state-inactive-color)
                {% endif %}
              ;
            }

  - type: custom:auto-entities
    filter:
      include:
        - domain: update
          options:
            secondary_info: last-changed
            card_mod:
              style: |
                :host {
                  --state-icon-color: var(--entity-warning-color);
                }
      exclude:
        - state: "off"
        - state: unknown
        - state: unavailable
    sort:
      method: state
      ignore_case: true
    card:
      type: custom:fold-entity-row
      padding: 10
      head:
        entity: sensor.available_updates
        double_tap_action: #ISSUE hold_action not working in swipe card
          action: navigate
          navigation_path: /config/updates
        card_mod:
          style: |
            {% from 'alert.jinja' import alert_non_zero_style %}
            {{ alert_non_zero_style('sensor.available_updates') }}

  - type: custom:fold-entity-row
    padding: 0
    head:
      entity: sensor.watchman_last_updated
      card_mod:
        style: |
          {% from 'alert.jinja' import alert_non_zero_style %}
          {{ alert_non_zero_style('sensor.watchman_missing_entities') }}
      double_tap_action:
        action: perform-action
        perform_action: watchman.report
        data:
          parse_config: true
          action: persistent_notification.create
          chunk_size: 3500
          create_file: true
    entities:
      - entity: sensor.watchman_missing_entities
        card_mod:
          style: |
            {% from 'alert.jinja' import alert_non_zero_style %}
            {{ alert_non_zero_style('sensor.watchman_missing_entities') }}

      - entity: sensor.watchman_missing_actions
        card_mod:
          style: |
            {% from 'alert.jinja' import alert_non_zero_style %}
            {{ alert_non_zero_style('sensor.watchman_missing_actions') }}

  - entity: input_select.log_level
    card_mod:
      style: |
        :host {
          --state-icon-color:
            {% set level = states('input_select.log_level') %}
            {% if level == 'fatal' %} var(--entity-critical-color)
            {% elif level == 'critical' %} var(--entity-severe-color)
            {% elif level == 'error' %} var(--entity-warning-color)
            {% elif level in ['warning', 'warn'] %} var(--state-inactive-color)
            {% else %} var(--entity-ok-color)
            {% endif %}
          ;
        }

  - type: custom:fold-entity-row
    padding: 5
    head:
      entity: sensor.uptime
      format: total
      card_mod:
        style: |
          :host {
            --state-icon-color:
              {% if is_state('input_boolean.startup_pending', 'on') %} var(--entity-warning-color)
              {% elif is_state('sensor.hassio', 'up') %} var(--state-inactive-color)
              {% else %} var(--entity-severe-color)
              {% endif %}
            ;
          }
    entities:
      - entity: sensor.hassio
        name: "Uptime Robot Status"
        card_mod:
          style: |
            :host {
              --state-icon-color:
                {% if is_state('binary_sensor.uptime_robot_integration_connected', 'off') %} var(--entity-severe-color)
                {% elif is_state('sensor.hassio', 'up') %} var(--state-inactive-color)
                {% elif not has_value('sensor.hassio') %} var(--disabled-color)
                {% else %} var(--entity-warning-color)
                {% endif %}
              ;
            }

      - entity: switch.hassio

      - entity: input_boolean.startup_pending
        card_mod:
          style: |
            :host {
              --var(--entity-active-color): var(--entity-warning-color);
              --switch-checked-button-color: var(--entity-warning-color);
              --switch-checked-track-color: var(--entity-warning-color);
            }

      - type: button
        name: "Home Assistant"
        icon: mdi:restart
        action_name: "RESTART"
        tap_action:
          action: perform-action
          perform_action: homeassistant.restart

  - type: custom:auto-entities
    filter:
      template: >
        {% from 'alert.jinja' import alert_entities %}
        {{ alert_entities('hass') }}
    sort:
      method: name
      ignore_case: true
    card:
      type: custom:fold-entity-row
      padding: 5
      head:
        entity: input_boolean.hass_alerts
        card_mod:
          style: |
            {% from 'alert.jinja' import alert_switch_style %}
            {{ alert_switch_style('input_boolean.hass_alerts') }}
